{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bf187319",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-07T05:16:16.242319Z",
     "iopub.status.busy": "2025-07-07T05:16:16.241760Z",
     "iopub.status.idle": "2025-07-07T05:16:17.746960Z",
     "shell.execute_reply": "2025-07-07T05:16:17.746216Z"
    },
    "papermill": {
     "duration": 1.509775,
     "end_time": "2025-07-07T05:16:17.748322",
     "exception": false,
     "start_time": "2025-07-07T05:16:16.238547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7e8a1f82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:16:17.753725Z",
     "iopub.status.busy": "2025-07-07T05:16:17.753441Z",
     "iopub.status.idle": "2025-07-07T05:16:34.281189Z",
     "shell.execute_reply": "2025-07-07T05:16:34.280294Z"
    },
    "papermill": {
     "duration": 16.531453,
     "end_time": "2025-07-07T05:16:34.282485",
     "exception": false,
     "start_time": "2025-07-07T05:16:17.751032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-07 05:16:19.894350: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1751865380.142301      18 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1751865380.212659      18 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6ef2ad0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:16:34.287641Z",
     "iopub.status.busy": "2025-07-07T05:16:34.287153Z",
     "iopub.status.idle": "2025-07-07T05:16:34.291575Z",
     "shell.execute_reply": "2025-07-07T05:16:34.291043Z"
    },
    "papermill": {
     "duration": 0.007952,
     "end_time": "2025-07-07T05:16:34.292531",
     "exception": false,
     "start_time": "2025-07-07T05:16:34.284579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b60daad1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:16:34.296815Z",
     "iopub.status.busy": "2025-07-07T05:16:34.296592Z",
     "iopub.status.idle": "2025-07-07T05:16:34.299809Z",
     "shell.execute_reply": "2025-07-07T05:16:34.299143Z"
    },
    "papermill": {
     "duration": 0.006556,
     "end_time": "2025-07-07T05:16:34.300914",
     "exception": false,
     "start_time": "2025-07-07T05:16:34.294358",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b25e5956",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:16:34.305828Z",
     "iopub.status.busy": "2025-07-07T05:16:34.305623Z",
     "iopub.status.idle": "2025-07-07T07:50:48.099914Z",
     "shell.execute_reply": "2025-07-07T07:50:48.099245Z"
    },
    "papermill": {
     "duration": 9253.798496,
     "end_time": "2025-07-07T07:50:48.101243",
     "exception": false,
     "start_time": "2025-07-07T05:16:34.302747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751865413.693483      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1751865423.006979      18 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization                  │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)             │               <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                         │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ transformer_encoder_block            │ ?                           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)            │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling1d             │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization                  │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)             │               \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │         \u001b[38;5;34m138,496\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                         │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │           \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)                  │          \u001b[38;5;34m61,952\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ transformer_encoder_block            │ ?                           │         \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)            │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling1d             │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                      │             \u001b[38;5;34m514\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1751865433.773302      55 service.cc:148] XLA service 0x7bbb100160b0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1751865433.774436      55 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1751865437.596908      55 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 30.63144, saving model to models/best_model_full.keras\n",
      "4375/4375 - 48s - 11ms/step - loss: 92.4446 - mae: 7.1354 - val_loss: 30.6314 - val_mae: 4.2543 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 30.63144 to 8.00997, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 19.3348 - mae: 3.3323 - val_loss: 8.0100 - val_mae: 2.1690 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 8.00997 to 7.52334, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 10.9118 - mae: 2.4969 - val_loss: 7.5233 - val_mae: 2.1265 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.52334 to 2.70568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.8487 - mae: 1.6840 - val_loss: 2.7057 - val_mae: 1.2724 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.70568 to 1.31099, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4269 - mae: 1.1758 - val_loss: 1.3110 - val_mae: 0.8837 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.31099 to 1.25554, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.0449 - mae: 1.1738 - val_loss: 1.2555 - val_mae: 0.8700 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 1.25554\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9417 - mae: 0.9197 - val_loss: 59.2537 - val_mae: 5.7163 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.25554\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.4923 - mae: 1.6352 - val_loss: 3.0329 - val_mae: 1.2373 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.25554 to 1.09086, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0663 - mae: 0.9982 - val_loss: 1.0909 - val_mae: 0.8008 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.09086\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5848 - mae: 0.8613 - val_loss: 2.3202 - val_mae: 1.1483 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 1.09086 to 0.63885, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.3290 - mae: 0.8297 - val_loss: 0.6389 - val_mae: 0.6255 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.63885 to 0.49326, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.5636 - mae: 0.5750 - val_loss: 0.4933 - val_mae: 0.5417 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.49326\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.7676 - mae: 0.8584 - val_loss: 0.5611 - val_mae: 0.5846 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.49326\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.5350 - mae: 0.5612 - val_loss: 1.5271 - val_mae: 0.7154 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.49326 to 0.36082, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.3058 - mae: 0.7230 - val_loss: 0.3608 - val_mae: 0.4689 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8860 - mae: 0.5949 - val_loss: 1.6548 - val_mae: 0.9550 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5290 - mae: 0.5454 - val_loss: 0.3717 - val_mae: 0.4787 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.4097 - mae: 0.7144 - val_loss: 0.4899 - val_mae: 0.5519 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.3528 - mae: 0.9386 - val_loss: 2.3593 - val_mae: 1.1354 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1147 - mae: 0.7937 - val_loss: 1.8833 - val_mae: 1.0978 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1522 - mae: 0.7466 - val_loss: 0.7297 - val_mae: 0.6828 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.2674 - mae: 0.7318 - val_loss: 0.4911 - val_mae: 0.5433 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.7185 - mae: 1.2093 - val_loss: 1.5927 - val_mae: 0.9614 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.9887 - mae: 1.3676 - val_loss: 5.4378 - val_mae: 1.7579 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.36082\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.6892 - mae: 1.3581 - val_loss: 1.6460 - val_mae: 0.9836 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2302 - mae: 1.0341 - val_loss: 1.5774 - val_mae: 0.9603 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.4049 - mae: 1.2550 - val_loss: 2.2323 - val_mae: 1.1404 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2003 - mae: 1.0953 - val_loss: 2.1367 - val_mae: 1.1094 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.8905 - mae: 1.3404 - val_loss: 3.9727 - val_mae: 1.1025 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.1589 - mae: 1.3826 - val_loss: 5.7510 - val_mae: 1.8444 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.5911 - mae: 1.2298 - val_loss: 2.0226 - val_mae: 0.8029 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4256 - mae: 1.0241 - val_loss: 2.5456 - val_mae: 0.9600 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.36082\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.8581 - mae: 1.1141 - val_loss: 0.9099 - val_mae: 0.7295 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.4410 - mae: 1.1537 - val_loss: 1.9983 - val_mae: 1.0588 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.0189 - mae: 1.1066 - val_loss: 1.8303 - val_mae: 1.0495 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7462 - mae: 0.6519 - val_loss: 0.6253 - val_mae: 0.5986 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5477 - mae: 0.5587 - val_loss: 0.5828 - val_mae: 0.5677 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4929 - mae: 0.5236 - val_loss: 0.4967 - val_mae: 0.5235 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.36082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4163 - mae: 0.4798 - val_loss: 0.5025 - val_mae: 0.5210 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.36082 to 0.34007, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3571 - mae: 0.4436 - val_loss: 0.3401 - val_mae: 0.4342 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.34007 to 0.31213, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3296 - mae: 0.4255 - val_loss: 0.3121 - val_mae: 0.4154 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.31213 to 0.28588, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2759 - mae: 0.3922 - val_loss: 0.2859 - val_mae: 0.4032 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.28588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3024 - mae: 0.4067 - val_loss: 0.2872 - val_mae: 0.3965 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.28588 to 0.20858, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2176 - mae: 0.3501 - val_loss: 0.2086 - val_mae: 0.3424 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.20858 to 0.15394, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1704 - mae: 0.3132 - val_loss: 0.1539 - val_mae: 0.2954 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.15394 to 0.14288, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1403 - mae: 0.2862 - val_loss: 0.1429 - val_mae: 0.2910 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.14288 to 0.13703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1211 - mae: 0.2671 - val_loss: 0.1370 - val_mae: 0.2833 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.13703 to 0.12669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1069 - mae: 0.2522 - val_loss: 0.1267 - val_mae: 0.2756 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.12669 to 0.10206, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1081 - mae: 0.2523 - val_loss: 0.1021 - val_mae: 0.2453 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.10206 to 0.08991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0863 - mae: 0.2267 - val_loss: 0.0899 - val_mae: 0.2307 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.08991 to 0.07314, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0751 - mae: 0.2124 - val_loss: 0.0731 - val_mae: 0.2085 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.07314 to 0.06537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0687 - mae: 0.2033 - val_loss: 0.0654 - val_mae: 0.1986 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.06537\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0641 - mae: 0.1967 - val_loss: 0.0693 - val_mae: 0.2034 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.06537\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0629 - mae: 0.1942 - val_loss: 0.0673 - val_mae: 0.1990 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.06537 to 0.06430, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0585 - mae: 0.1877 - val_loss: 0.0643 - val_mae: 0.1952 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.06430\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0565 - mae: 0.1849 - val_loss: 0.1190 - val_mae: 0.2669 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.06430 to 0.06164, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0528 - mae: 0.1787 - val_loss: 0.0616 - val_mae: 0.1955 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.06164\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0490 - mae: 0.1719 - val_loss: 0.0682 - val_mae: 0.2029 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.06164 to 0.05075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0491 - mae: 0.1724 - val_loss: 0.0508 - val_mae: 0.1730 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.05075\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0470 - mae: 0.1690 - val_loss: 0.0605 - val_mae: 0.1913 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.05075 to 0.04488, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0440 - mae: 0.1635 - val_loss: 0.0449 - val_mae: 0.1646 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.04488\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0419 - mae: 0.1594 - val_loss: 0.0702 - val_mae: 0.2049 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.04488 to 0.04395, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0404 - mae: 0.1558 - val_loss: 0.0439 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.04395 to 0.04350, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0408 - mae: 0.1573 - val_loss: 0.0435 - val_mae: 0.1622 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.04350 to 0.04227, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0376 - mae: 0.1515 - val_loss: 0.0423 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.04227 to 0.04074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0364 - mae: 0.1490 - val_loss: 0.0407 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.04074\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0360 - mae: 0.1483 - val_loss: 0.0536 - val_mae: 0.1801 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.04074\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0362 - mae: 0.1476 - val_loss: 0.0408 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.04074\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0348 - mae: 0.1454 - val_loss: 0.0599 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.04074 to 0.03706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0347 - mae: 0.1454 - val_loss: 0.0371 - val_mae: 0.1503 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.03706 to 0.03679, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0332 - mae: 0.1422 - val_loss: 0.0368 - val_mae: 0.1487 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.03679 to 0.02973, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0325 - mae: 0.1408 - val_loss: 0.0297 - val_mae: 0.1336 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0323 - mae: 0.1404 - val_loss: 0.0359 - val_mae: 0.1468 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0319 - mae: 0.1397 - val_loss: 0.0449 - val_mae: 0.1653 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0307 - mae: 0.1366 - val_loss: 0.0353 - val_mae: 0.1458 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0304 - mae: 0.1361 - val_loss: 0.0343 - val_mae: 0.1424 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0296 - mae: 0.1343 - val_loss: 0.0330 - val_mae: 0.1424 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0303 - mae: 0.1358 - val_loss: 0.0320 - val_mae: 0.1394 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0290 - mae: 0.1330 - val_loss: 0.0431 - val_mae: 0.1579 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0290 - mae: 0.1325 - val_loss: 0.0402 - val_mae: 0.1599 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0281 - mae: 0.1310 - val_loss: 0.0312 - val_mae: 0.1356 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0277 - mae: 0.1301 - val_loss: 0.0324 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.02973 to 0.02807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0274 - mae: 0.1295 - val_loss: 0.0281 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.02807 to 0.02536, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0270 - mae: 0.1283 - val_loss: 0.0254 - val_mae: 0.1235 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02536\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0278 - mae: 0.1300 - val_loss: 0.0357 - val_mae: 0.1444 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0275 - mae: 0.1291 - val_loss: 0.0302 - val_mae: 0.1346 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0266 - mae: 0.1275 - val_loss: 0.0291 - val_mae: 0.1319 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0270 - mae: 0.1280 - val_loss: 0.0289 - val_mae: 0.1326 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0263 - mae: 0.1267 - val_loss: 0.0276 - val_mae: 0.1284 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1256 - val_loss: 0.0409 - val_mae: 0.1559 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0262 - mae: 0.1265 - val_loss: 0.0358 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0265 - mae: 0.1271 - val_loss: 0.0325 - val_mae: 0.1402 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1263 - val_loss: 0.0268 - val_mae: 0.1277 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0260 - mae: 0.1258 - val_loss: 0.0297 - val_mae: 0.1350 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0273 - mae: 0.1288 - val_loss: 0.0287 - val_mae: 0.1306 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0265 - mae: 0.1270 - val_loss: 0.0272 - val_mae: 0.1299 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0267 - mae: 0.1274 - val_loss: 0.0299 - val_mae: 0.1343 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1269 - val_loss: 0.0300 - val_mae: 0.1350 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0262 - mae: 0.1262 - val_loss: 0.0315 - val_mae: 0.1376 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0252 - mae: 0.1239 - val_loss: 0.0404 - val_mae: 0.1561 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0253 - mae: 0.1242 - val_loss: 0.0282 - val_mae: 0.1311 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0256 - mae: 0.1249 - val_loss: 0.0305 - val_mae: 0.1359 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1236 - val_loss: 0.0298 - val_mae: 0.1343 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0248 - mae: 0.1230 - val_loss: 0.0308 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.02536 to 0.01253, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0101 - mae: 0.0784 - val_loss: 0.0125 - val_mae: 0.0856 - learning_rate: 1.0000e-04\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.01253 to 0.01177, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0089 - mae: 0.0738 - val_loss: 0.0118 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.01177 to 0.01163, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0085 - mae: 0.0724 - val_loss: 0.0116 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.01163 to 0.01157, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0083 - mae: 0.0716 - val_loss: 0.0116 - val_mae: 0.0824 - learning_rate: 1.0000e-04\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.01157 to 0.01154, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0082 - mae: 0.0711 - val_loss: 0.0115 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.01154 to 0.01148, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0081 - mae: 0.0704 - val_loss: 0.0115 - val_mae: 0.0821 - learning_rate: 1.0000e-04\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01148\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0080 - mae: 0.0700 - val_loss: 0.0115 - val_mae: 0.0820 - learning_rate: 1.0000e-04\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01148\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0079 - mae: 0.0696 - val_loss: 0.0115 - val_mae: 0.0821 - learning_rate: 1.0000e-04\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.01148 to 0.01102, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0078 - mae: 0.0693 - val_loss: 0.0110 - val_mae: 0.0801 - learning_rate: 1.0000e-04\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01102\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0077 - mae: 0.0688 - val_loss: 0.0112 - val_mae: 0.0811 - learning_rate: 1.0000e-04\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0076 - mae: 0.0685 - val_loss: 0.0110 - val_mae: 0.0805 - learning_rate: 1.0000e-04\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0076 - mae: 0.0683 - val_loss: 0.0112 - val_mae: 0.0808 - learning_rate: 1.0000e-04\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0075 - mae: 0.0679 - val_loss: 0.0116 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0075 - mae: 0.0678 - val_loss: 0.0110 - val_mae: 0.0797 - learning_rate: 1.0000e-04\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0074 - mae: 0.0674 - val_loss: 0.0111 - val_mae: 0.0800 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0073 - mae: 0.0672 - val_loss: 0.0111 - val_mae: 0.0802 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0073 - mae: 0.0669 - val_loss: 0.0111 - val_mae: 0.0801 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.01102 to 0.01076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0072 - mae: 0.0666 - val_loss: 0.0108 - val_mae: 0.0785 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01076\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0072 - mae: 0.0664 - val_loss: 0.0110 - val_mae: 0.0798 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.01076 to 0.01065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0071 - mae: 0.0662 - val_loss: 0.0107 - val_mae: 0.0779 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01065\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0071 - mae: 0.0660 - val_loss: 0.0108 - val_mae: 0.0785 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.01065 to 0.01052, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0070 - mae: 0.0657 - val_loss: 0.0105 - val_mae: 0.0775 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0070 - mae: 0.0654 - val_loss: 0.0109 - val_mae: 0.0791 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0069 - mae: 0.0654 - val_loss: 0.0108 - val_mae: 0.0784 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0069 - mae: 0.0652 - val_loss: 0.0107 - val_mae: 0.0776 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0069 - mae: 0.0650 - val_loss: 0.0108 - val_mae: 0.0785 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01052\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0068 - mae: 0.0648 - val_loss: 0.0108 - val_mae: 0.0786 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0068 - mae: 0.0647 - val_loss: 0.0106 - val_mae: 0.0778 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0067 - mae: 0.0644 - val_loss: 0.0109 - val_mae: 0.0787 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0067 - mae: 0.0642 - val_loss: 0.0108 - val_mae: 0.0780 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0067 - mae: 0.0641 - val_loss: 0.0107 - val_mae: 0.0778 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0066 - mae: 0.0639 - val_loss: 0.0106 - val_mae: 0.0777 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0066 - mae: 0.0637 - val_loss: 0.0107 - val_mae: 0.0777 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0066 - mae: 0.0636 - val_loss: 0.0106 - val_mae: 0.0774 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01052\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0065 - mae: 0.0634 - val_loss: 0.0107 - val_mae: 0.0775 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss improved from 0.01052 to 0.01046, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0065 - mae: 0.0633 - val_loss: 0.0105 - val_mae: 0.0768 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01046\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0065 - mae: 0.0631 - val_loss: 0.0106 - val_mae: 0.0773 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01046\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0064 - mae: 0.0629 - val_loss: 0.0105 - val_mae: 0.0768 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01046\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0064 - mae: 0.0628 - val_loss: 0.0110 - val_mae: 0.0791 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.01046 to 0.01038, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0064 - mae: 0.0627 - val_loss: 0.0104 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01038\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0063 - mae: 0.0625 - val_loss: 0.0107 - val_mae: 0.0779 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.01038 to 0.01036, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0063 - mae: 0.0623 - val_loss: 0.0104 - val_mae: 0.0766 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.01036 to 0.01034, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0063 - mae: 0.0622 - val_loss: 0.0103 - val_mae: 0.0766 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01034\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0063 - mae: 0.0621 - val_loss: 0.0105 - val_mae: 0.0768 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.01034 to 0.01024, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0062 - mae: 0.0620 - val_loss: 0.0102 - val_mae: 0.0760 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01024\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0062 - mae: 0.0617 - val_loss: 0.0106 - val_mae: 0.0775 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.01024 to 0.01016, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0062 - mae: 0.0617 - val_loss: 0.0102 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0061 - mae: 0.0614 - val_loss: 0.0107 - val_mae: 0.0778 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0061 - mae: 0.0613 - val_loss: 0.0105 - val_mae: 0.0768 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0061 - mae: 0.0613 - val_loss: 0.0103 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0061 - mae: 0.0612 - val_loss: 0.0106 - val_mae: 0.0769 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01016\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0060 - mae: 0.0610 - val_loss: 0.0109 - val_mae: 0.0771 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0060 - mae: 0.0608 - val_loss: 0.0104 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01016\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0060 - mae: 0.0608 - val_loss: 0.0102 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01016\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0059 - mae: 0.0606 - val_loss: 0.0103 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0107 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01016\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0059 - mae: 0.0602 - val_loss: 0.0105 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0059 - mae: 0.0602 - val_loss: 0.0103 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01016\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0601 - val_loss: 0.0104 - val_mae: 0.0768 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss improved from 0.01016 to 0.01011, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0600 - val_loss: 0.0101 - val_mae: 0.0752 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0596 - val_loss: 0.0106 - val_mae: 0.0771 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0597 - val_loss: 0.0104 - val_mae: 0.0758 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0596 - val_loss: 0.0101 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0057 - mae: 0.0595 - val_loss: 0.0103 - val_mae: 0.0748 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0057 - mae: 0.0593 - val_loss: 0.0102 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0057 - mae: 0.0594 - val_loss: 0.0105 - val_mae: 0.0760 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0057 - mae: 0.0592 - val_loss: 0.0105 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0591 - val_loss: 0.0299 - val_mae: 0.0776 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0589 - val_loss: 0.0103 - val_mae: 0.0747 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0588 - val_loss: 0.0106 - val_mae: 0.0756 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0587 - val_loss: 0.0106 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0587 - val_loss: 0.0107 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0585 - val_loss: 0.0106 - val_mae: 0.0750 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0108 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0108 - val_mae: 0.0747 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0582 - val_loss: 0.0321 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0582 - val_loss: 0.0107 - val_mae: 0.0745 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0107 - val_mae: 0.0760 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01011\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0107 - val_mae: 0.0750 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01011\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0104 - val_mae: 0.0749 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.01011 to 0.00990, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0526 - val_loss: 0.0099 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.00990 to 0.00986, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0520 - val_loss: 0.0099 - val_mae: 0.0716 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss improved from 0.00986 to 0.00975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0519 - val_loss: 0.0097 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0518 - val_loss: 0.0101 - val_mae: 0.0717 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0517 - val_loss: 0.0098 - val_mae: 0.0714 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0517 - val_loss: 0.0099 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00975\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0516 - val_loss: 0.0099 - val_mae: 0.0717 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00975\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0516 - val_loss: 0.0101 - val_mae: 0.0718 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00975\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0516 - val_loss: 0.0098 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00975\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0515 - val_loss: 0.0100 - val_mae: 0.0714 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0515 - val_loss: 0.0100 - val_mae: 0.0716 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0514 - val_loss: 0.0100 - val_mae: 0.0716 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0514 - val_loss: 0.0100 - val_mae: 0.0714 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0514 - val_loss: 0.0098 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0513 - val_loss: 0.0098 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.00975 to 0.00966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0513 - val_loss: 0.0097 - val_mae: 0.0713 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0513 - val_loss: 0.0101 - val_mae: 0.0717 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0513 - val_loss: 0.0101 - val_mae: 0.0716 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0513 - val_loss: 0.0097 - val_mae: 0.0714 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0512 - val_loss: 0.0099 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0512 - val_loss: 0.0097 - val_mae: 0.0714 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0512 - val_loss: 0.0101 - val_mae: 0.0715 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0511 - val_loss: 0.0098 - val_mae: 0.0717 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0506 - val_loss: 0.0098 - val_mae: 0.0712 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0099 - val_mae: 0.0712 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0103 - val_mae: 0.0714 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.00966 to 0.00954, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0095 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0098 - val_mae: 0.0712 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0096 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0098 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0099 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0098 - val_mae: 0.0712 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0098 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0100 - val_mae: 0.0712 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0099 - val_mae: 0.0712 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0099 - val_mae: 0.0713 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0098 - val_mae: 0.0711 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0097 - val_mae: 0.0712 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0101 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0712 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0712 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0712 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0099 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0101 - val_mae: 0.0714 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0101 - val_mae: 0.0712 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0099 - val_mae: 0.0712 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0096 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0097 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0101 - val_mae: 0.0714 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0100 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0099 - val_mae: 0.0713 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0711 - learning_rate: 1.0000e-07\n",
      "Epoch 264: early stopping\n",
      "Restoring model weights from the end of the best epoch: 214.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1117 m\n",
      "Median positioning error: 0.0984 m\n",
      "90th percentile error: 0.2002 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACG+ElEQVR4nO3dd3hUZdrH8d+ZSTLpCTUBDb2DICIiYhcFVETFhqjYVwRc7Mtrr9hWWUWxLIKuIoqKYkEEFFS6BQVBBER6CC29z5z3jynJJJNCMplJJt/Pdc2VzDnPzDxzloXb+9zP/RimaZoCAAAAAAAAAsgS7AkAAAAAAACg8SEpBQAAAAAAgIAjKQUAAAAAAICAIykFAAAAAACAgCMpBQAAAAAAgIAjKQUAAAAAAICAIykFAAAAAACAgCMpBQAAAAAAgIAjKQUAAAAAAICAIykFICQZhqGHH374iF/3999/yzAMzZw50+9zAgAAqE+IlwAEG0kpAHVm5syZMgxDhmHohx9+KHfeNE2lpKTIMAydf/75QZhhzS1ZskSGYejDDz8M9lQAAEAD1hjiJcMw9M477/gcM2jQIBmGoV69evk8b7fb1bp1axmGofnz5/sc8/DDD3s+x9cjNTXVb98JgH+FBXsCAEJfZGSkZs2apZNPPtnr+NKlS7Vr1y7ZbLYgzQwAAKB+COV4yf3drrrqKq/jf//9t5YvX67IyMgKX/vNN99o7969ateund59910NGzaswrHTpk1TbGxsueOJiYk1njuAukVSCkCdO/fcczVnzhy9+OKLCgsr+Wtn1qxZ6tevnw4cOBDE2QEAAARfKMdL5557rubNm6cDBw6oefPmnuOzZs1SUlKSOnfurMOHD/t87TvvvKPjjjtOY8aM0f/93/8pJydHMTExPsdecsklXu8PoP5j+R6AOjdq1CgdPHhQCxcu9BwrLCzUhx9+qCuvvNLna3JycnTnnXcqJSVFNptNXbt21XPPPSfTNL3GFRQU6Pbbb1eLFi0UFxenCy64QLt27fL5nrt379b111+vpKQk2Ww29ezZU2+++ab/vqgPf/31ly699FI1bdpU0dHROvHEE/XFF1+UG/fSSy+pZ8+eio6OVpMmTXT88cdr1qxZnvNZWVmaOHGi2rVrJ5vNppYtW+rss8/Wzz//XKfzBwAAgRHK8dKIESNks9k0Z84cr+OzZs3SZZddJqvV6vN1eXl5mjt3rq644gpddtllysvL06efflqruQCoX0hKAahz7dq108CBA/Xee+95js2fP18ZGRm64ooryo03TVMXXHCBXnjhBQ0dOlTPP/+8unbtqrvvvlt33HGH19gbb7xRU6ZM0TnnnKOnnnpK4eHhOu+888q95759+3TiiSdq0aJFGj9+vP7zn/+oU6dOuuGGGzRlyhS/f2f3Z5500klasGCBbr31Vj3xxBPKz8/XBRdcoLlz53rGvfHGG7rtttvUo0cPTZkyRY888oiOPfZYrVq1yjPmlltu0bRp0zRy5Ei98soruuuuuxQVFaWNGzfWydwBAEBghXK8FB0drREjRnh9t19//VW///57hQk3SZo3b56ys7N1xRVXKDk5WaeffrrefffdCscfOnRIBw4c8Hqkp6fXeN4AAsAEgDoyY8YMU5K5Zs0ac+rUqWZcXJyZm5trmqZpXnrppeYZZ5xhmqZptm3b1jzvvPM8r/vkk09MSebjjz/u9X6XXHKJaRiGuWXLFtM0TXPt2rWmJPPWW2/1GnfllVeaksyHHnrIc+yGG24wW7VqZR44cMBr7BVXXGEmJCR45rVt2zZTkjljxoxKv9u3335rSjLnzJlT4ZiJEyeakszvv//ecywrK8ts37692a5dO9Nut5umaZojRowwe/bsWennJSQkmOPGjat0DAAAaHgaS7z0+eefm4ZhmDt27DBN0zTvvvtus0OHDqZpmuZpp53mMxY6//zzzUGDBnmev/7662ZYWJiZlpbmNe6hhx4yJfl8dO3atdI5AgguKqUABIS75Przzz9XVlaWPv/88wrvjH355ZeyWq267bbbvI7feeedMk3Ts/PKl19+KUnlxk2cONHruWma+uijjzR8+HCZpul192zIkCHKyMiok2VwX375pU444QSvhqWxsbG6+eab9ffff2vDhg2SnM03d+3apTVr1lT4XomJiVq1apX27Nnj93kCAID6IZTjpXPOOUdNmzbV7NmzZZqmZs+erVGjRlU4/uDBg1qwYIHXmJEjR8owDH3wwQc+X/PRRx9p4cKFXo8ZM2bUeM4A6h6NzgEERIsWLTR48GDNmjVLubm5stvtuuSSS3yO3b59u1q3bq24uDiv4927d/ecd/+0WCzq2LGj17iuXbt6Pd+/f7/S09P1+uuv6/XXX/f5mWlpaTX6XpXZvn27BgwYUO546e/Rq1cv3XvvvVq0aJFOOOEEderUSeecc46uvPJKDRo0yPOaZ555RmPGjFFKSor69eunc889V9dcc406dOjg93kDAIDgCOV4KTw8XJdeeqlmzZqlE044QTt37qx06d7777+voqIi9e3bV1u2bPEcHzBggN59912NGzeu3GtOPfVUGp0DDQxJKQABc+WVV+qmm25Samqqhg0bFrDteR0OhyTpqquu0pgxY3yO6d27d0Dm4kv37t21adMmff755/rqq6/00Ucf6ZVXXtGDDz6oRx55RJLzzukpp5yiuXPn6uuvv9azzz6rp59+Wh9//HGlWyMDAICGJZTjpSuvvFKvvvqqHn74YfXp00c9evSocKy7d1Tpm3Sl/fXXX9ycA0IASSkAAXPRRRfpH//4h1auXKn333+/wnFt27bVokWLlJWV5XX3748//vCcd/90OBzaunWr192+TZs2eb2fe6cZu92uwYMH+/MrVapt27bl5iKV/x6SFBMTo8svv1yXX365CgsLdfHFF+uJJ57QpEmTFBkZKUlq1aqVbr31Vt16661KS0vTcccdpyeeeIKkFAAAISSU46WTTz5Zbdq00ZIlS/T0009XOG7btm1avny5xo8fr9NOO83rnMPh0NVXX61Zs2bp/vvvr5N5AggcekoBCJjY2FhNmzZNDz/8sIYPH17huHPPPVd2u11Tp071Ov7CCy/IMAxPEsb988UXX/QaV3Z3GKvVqpEjR+qjjz7S+vXry33e/v37a/J1qnTuuedq9erVWrFihedYTk6OXn/9dbVr185zd/DgwYNer4uIiFCPHj1kmqaKiopkt9uVkZHhNaZly5Zq3bq1CgoK6mTuAAAgOEI5XjIMQy+++KIeeughXX311RWOc1dJ3XPPPbrkkku8HpdddplOO+20SnfhA9BwUCkFIKAqKgcvbfjw4TrjjDN033336e+//1afPn309ddf69NPP9XEiRM9PRGOPfZYjRo1Sq+88ooyMjJ00kknafHixV59B9yeeuopffvttxowYIBuuukm9ejRQ4cOHdLPP/+sRYsW6dChQzX6Ph999JHnjmTZ7/mvf/1L7733noYNG6bbbrtNTZs21VtvvaVt27bpo48+ksXivC9wzjnnKDk5WYMGDVJSUpI2btyoqVOn6rzzzlNcXJzS09N19NFH65JLLlGfPn0UGxurRYsWac2aNfr3v/9do3kDAID6K9TipdJGjBihESNGVDrm3Xff1bHHHquUlBSf5y+44AJNmDBBP//8s4477jjP8Q8//FCxsbHlxp999tlKSkqq3cQB1AmSUgDqHYvFonnz5unBBx/U+++/rxkzZqhdu3Z69tlndeedd3qNffPNN9WiRQu9++67+uSTT3TmmWfqiy++KBfEJCUlafXq1Xr00Uf18ccf65VXXlGzZs3Us2fPSsvHqzJ79myfx08//XSdfPLJWr58ue6991699NJLys/PV+/evfXZZ5/pvPPO84z9xz/+oXfffVfPP/+8srOzdfTRR+u2227zlKRHR0fr1ltv1ddff62PP/5YDodDnTp10iuvvKKxY8fWeO4AAKDhakjx0pH4+eef9ccff+iBBx6ocMzw4cM1YcIEvfPOO15JqYriom+//ZakFFBPGaZpmsGeBAAAAAAAABoXekoBAAAAAAAg4EhKAQAAAAAAIOBISgEAAAAAACDgSEoBAAAAAAAg4EhKAQAAAAAAIOBISgEAAAAAACDgwoI9gbrmcDi0Z88excXFyTCMYE8HAAA0cKZpKisrS61bt5bFEhr394iXAACAP1U3Xgr5pNSePXuUkpIS7GkAAIAQs3PnTh199NHBnoZfEC8BAIC6UFW8FPJJqbi4OEnOCxEfHx/k2QAAgIYuMzNTKSkpnhgjFBAvAQAAf6puvBTySSl3CXp8fDxBFgAA8JtQWuZGvAQAAOpCVfFSaDRCAAAAAAAAQINCUgoAAAAAAAABR1IKAAAAAAAAARfyPaUAAKHLbrerqKgo2NNAiAkPD5fVag32NAAA8AuHw6HCwsJgTwMhxl/xEkkpAECDY5qmUlNTlZ6eHuypIEQlJiYqOTk5pJqZAwAan8LCQm3btk0OhyPYU0EI8ke8RFIKANDguBNSLVu2VHR0NIkD+I1pmsrNzVVaWpokqVWrVkGeEQAANWOapvbu3Sur1aqUlBRZLHTvgX/4M14iKQUAaFDsdrsnIdWsWbNgTwchKCoqSpKUlpamli1bspQPANAgFRcXKzc3V61bt1Z0dHSwp4MQ4694iVQpAKBBcfeQIrhCXXL/+aJnGQCgobLb7ZKkiIiIIM8Eocof8RJJKQBAg8SSPdQl/nwBAEIF/6ahrvjjzxZJKQAAAAAAAAQcSalaunr6Kg166hv9tP1QsKcCAGiE2rVrpylTplR7/JIlS2QYBjsXIqDu+fBXDXrqG33+255gTwUA0AgRL9VfJKVqKS2zQLvT85RXyBabAICKGYZR6ePhhx+u0fuuWbNGN998c7XHn3TSSdq7d68SEhJq9HnVRTCH0g5mF2p3ep6y84uDPRUAQD3WWOOlJk2aKD8/3+vcmjVrPN/bl27duslmsyk1NbXcudNPP93n9bvlllvq5HvUBkmpWrJYnH9AHKYZ5JkAAOqzvXv3eh5TpkxRfHy817G77rrLM9Y0TRUXV+8/3lu0aHFETd8jIiKUnJxMf4kQ065dO5/B57hx44I9NUmS1RUvFTuIlwAAFWus8VJcXJzmzp3rdWz69Olq06aNz/E//PCD8vLydMkll+itt97yOeamm27yunZ79+7VM8884/e51xZJqVpyxVgkpQAAlUpOTvY8EhISZBiG5/kff/yhuLg4zZ8/X/369ZPNZtMPP/ygrVu3asSIEUpKSlJsbKz69++vRYsWeb1v2XJ0wzD03//+VxdddJGio6PVuXNnzZs3z3O+bAXTzJkzlZiYqAULFqh79+6KjY3V0KFDtXfvXs9riouLddtttykxMVHNmjXTvffeqzFjxujCCy+s8fU4fPiwrrnmGjVp0kTR0dEaNmyYNm/e7Dm/fft2DR8+XE2aNFFMTIx69uypL7/80vPa0aNHq0WLFoqKilLnzp01Y8aMGs8lFKxZs8Yr6Fy4cKEk6dJLLw3yzJys3MQDAFRDY42XxowZozfffNPzPC8vT7Nnz9aYMWN8jp8+fbquvPJKXX311V6vKy06OtrreiYnJys+Pr7KuQQaSalasrgyp8RYABA8pmkqt7A4KA/Tj/8A/Otf/9JTTz2ljRs3qnfv3srOzta5556rxYsX65dfftHQoUM1fPhw7dixo9L3eeSRR3TZZZfpt99+07nnnqvRo0fr0KGKex/m5ubqueee0//+9z9999132rFjh9edyKefflrvvvuuZsyYoWXLlikzM1OffPJJrb7rtddeqx9//FHz5s3TihUrZJqmzj33XM+WwuPGjVNBQYG+++47rVu3Tk8//bRiY2MlSQ888IA2bNig+fPna+PGjZo2bZqaN29eq/k0dC1atPAKOj///HN17NhRp512WrCnJqmkstxOpRQABA3xkrf6FC9dffXV+v777z1z/uijj9SuXTsdd9xx5cZmZWVpzpw5uuqqq3T22WcrIyND33//fbU+pz4KC/YEGjoqpQAg+PKK7Orx4IKgfPaGR4coOsI//5w++uijOvvssz3PmzZtqj59+nieP/bYY5o7d67mzZun8ePHV/g+1157rUaNGiVJevLJJ/Xiiy9q9erVGjp0qM/xRUVFevXVV9WxY0dJ0vjx4/Xoo496zr/00kuaNGmSLrroIknS1KlTPVVLNbF582bNmzdPy5Yt00knnSRJevfdd5WSkqJPPvlEl156qXbs2KGRI0fqmGOOkSR16NDB8/odO3aob9++Ov744yU5736iRGFhod555x3dcccdFS47KCgoUEFBged5ZmZmnc7JapCUAoBgI17yVp/ipZYtW2rYsGGaOXOmHnzwQb355pu6/vrrfY6dPXu2OnfurJ49e0qSrrjiCk2fPl2nnHKK17hXXnlF//3vf72Ovfbaaxo9enS15hQoVErVkjvYI8YCANSWO8nilp2drbvuukvdu3dXYmKiYmNjtXHjxirv/PXu3dvze0xMjOLj45WWllbh+OjoaE+AJUmtWrXyjM/IyNC+fft0wgkneM5brVb169fviL5baRs3blRYWJgGDBjgOdasWTN17dpVGzdulCTddtttevzxxzVo0CA99NBD+u233zxjx44dq9mzZ+vYY4/VPffco+XLl9d4LqHok08+UXp6uq699toKx0yePFkJCQmeR0pKSp3OieV7AAB/CdV46frrr9fMmTP1119/acWKFRUmj958801dddVVnudXXXWV5syZo6ysLK9xo0eP1tq1a70eF1xwQbXnEyhUStWSu1KKO38AEDxR4VZteHRI0D7bX2JiYrye33XXXVq4cKGee+45derUSVFRUbrkkktUWFhY6fuEh4d7PTcMQw5HxbvE+hrvzzL7mrjxxhs1ZMgQffHFF/r66681efJk/fvf/9aECRM0bNgwbd++XV9++aUWLlyos846S+PGjdNzzz0X1DnXF9OnT9ewYcPUunXrCsdMmjRJd9xxh+d5ZmZmnSamrJ7le3X2EQCAKhAveatv8dKwYcN0880364YbbtDw4cPVrFmzcmM2bNiglStXavXq1br33ns9x+12u2bPnq2bbrrJcywhIUGdOnXy2/zqCkmpWnIHWcEO3gGgMTMMw28l4fXJsmXLdO2113rKwLOzs/X3338H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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9279.531553,
   "end_time": "2025-07-07T07:50:51.431237",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-07T05:16:11.899684",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
