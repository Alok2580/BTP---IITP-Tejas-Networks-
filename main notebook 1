{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c0149cd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:13.248834Z",
     "iopub.status.busy": "2025-08-18T07:32:13.248570Z",
     "iopub.status.idle": "2025-08-18T07:32:14.729369Z",
     "shell.execute_reply": "2025-08-18T07:32:14.728493Z"
    },
    "papermill": {
     "duration": 1.485577,
     "end_time": "2025-08-18T07:32:14.730587",
     "exception": false,
     "start_time": "2025-08-18T07:32:13.245010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "725e41aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:14.736373Z",
     "iopub.status.busy": "2025-08-18T07:32:14.736006Z",
     "iopub.status.idle": "2025-08-18T07:32:29.588254Z",
     "shell.execute_reply": "2025-08-18T07:32:29.587624Z"
    },
    "papermill": {
     "duration": 14.856468,
     "end_time": "2025-08-18T07:32:29.589710",
     "exception": false,
     "start_time": "2025-08-18T07:32:14.733242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-18 07:32:16.413324: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755502336.617549      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755502336.676726      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0895310a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:29.595212Z",
     "iopub.status.busy": "2025-08-18T07:32:29.594713Z",
     "iopub.status.idle": "2025-08-18T07:32:29.599733Z",
     "shell.execute_reply": "2025-08-18T07:32:29.598995Z"
    },
    "papermill": {
     "duration": 0.009694,
     "end_time": "2025-08-18T07:32:29.601669",
     "exception": false,
     "start_time": "2025-08-18T07:32:29.591975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 512   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256 #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "76fa9120",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:29.608188Z",
     "iopub.status.busy": "2025-08-18T07:32:29.607606Z",
     "iopub.status.idle": "2025-08-18T07:32:29.611404Z",
     "shell.execute_reply": "2025-08-18T07:32:29.610625Z"
    },
    "papermill": {
     "duration": 0.007407,
     "end_time": "2025-08-18T07:32:29.612490",
     "exception": false,
     "start_time": "2025-08-18T07:32:29.605083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e9a99f62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:29.617680Z",
     "iopub.status.busy": "2025-08-18T07:32:29.617294Z",
     "iopub.status.idle": "2025-08-18T18:50:00.500433Z",
     "shell.execute_reply": "2025-08-18T18:50:00.499709Z"
    },
    "papermill": {
     "duration": 40650.887242,
     "end_time": "2025-08-18T18:50:00.501656",
     "exception": false,
     "start_time": "2025-08-18T07:32:29.614414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755502370.413124      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755502379.702510      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">203,264</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)             │       <span style=\"color: #00af00; text-decoration-color: #00af00\">125,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,315,584</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,026</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │       \u001b[38;5;34m203,264\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │         \u001b[38;5;34m2,048\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m512\u001b[0m)             │       \u001b[38;5;34m125,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │     \u001b[38;5;34m1,315,584\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │         \u001b[38;5;34m1,026\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,647,882</span> (6.29 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,647,882\u001b[0m (6.29 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,646,854</span> (6.28 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,646,854\u001b[0m (6.28 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,028</span> (4.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,028\u001b[0m (4.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755502390.768898      56 service.cc:148] XLA service 0x7c041c006ff0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755502390.769719      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755502395.477500      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 15.87613, saving model to models/best_model_full.keras\n",
      "4375/4375 - 155s - 35ms/step - loss: 62.0756 - mae: 5.2512 - val_loss: 15.8761 - val_mae: 3.1428 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 15.87613 to 4.04419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 7.5590 - mae: 2.0906 - val_loss: 4.0442 - val_mae: 1.6046 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 4.04419 to 3.83548, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 3.9174 - mae: 1.5096 - val_loss: 3.8355 - val_mae: 1.5598 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.83548 to 1.83482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 2.3019 - mae: 1.1569 - val_loss: 1.8348 - val_mae: 1.0669 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.83482 to 1.49681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 1.4858 - mae: 0.9470 - val_loss: 1.4968 - val_mae: 0.9492 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.49681\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.8404 - mae: 0.9849 - val_loss: 1.7346 - val_mae: 1.0405 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.49681 to 0.60716, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.3349 - mae: 0.8025 - val_loss: 0.6072 - val_mae: 0.6063 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.60716 to 0.53962, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.6878 - mae: 0.6427 - val_loss: 0.5396 - val_mae: 0.5729 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.53962 to 0.40799, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.4208 - mae: 0.6913 - val_loss: 0.4080 - val_mae: 0.5065 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.40799\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.5188 - mae: 0.5597 - val_loss: 0.7386 - val_mae: 0.6411 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.40799\n",
      "4375/4375 - 138s - 32ms/step - loss: 1.0460 - mae: 0.6614 - val_loss: 0.7489 - val_mae: 0.6753 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.40799\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.4519 - mae: 0.5219 - val_loss: 0.5666 - val_mae: 0.5993 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.40799\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.4972 - mae: 0.5476 - val_loss: 0.8326 - val_mae: 0.7099 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.40799 to 0.34151, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.4278 - mae: 0.6612 - val_loss: 0.3415 - val_mae: 0.4584 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.34151\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3641 - mae: 0.4703 - val_loss: 0.6240 - val_mae: 0.6005 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.34151\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.9369 - mae: 0.5844 - val_loss: 0.5612 - val_mae: 0.5848 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.34151\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.8900 - mae: 0.5947 - val_loss: 1.1481 - val_mae: 0.4798 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.34151\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3586 - mae: 0.4664 - val_loss: 4.2479 - val_mae: 1.1545 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.34151\n",
      "4375/4375 - 138s - 32ms/step - loss: 1.6385 - mae: 0.7483 - val_loss: 0.6292 - val_mae: 0.5802 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.34151 to 0.28589, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3458 - mae: 0.4580 - val_loss: 0.2859 - val_mae: 0.4231 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.28589\n",
      "4375/4375 - 138s - 32ms/step - loss: 1.5377 - mae: 0.6614 - val_loss: 1.1400 - val_mae: 0.8267 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.28589\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.4900 - mae: 0.5251 - val_loss: 0.9490 - val_mae: 0.4326 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.28589\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.3494 - mae: 0.4562 - val_loss: 0.3472 - val_mae: 0.4640 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.28589\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.0877 - mae: 0.6230 - val_loss: 0.4823 - val_mae: 0.5391 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.28589\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.3060 - mae: 0.4290 - val_loss: 0.3185 - val_mae: 0.4441 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.28589\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.5035 - mae: 0.7452 - val_loss: 0.4892 - val_mae: 0.5479 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.28589\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3446 - mae: 0.4567 - val_loss: 0.5000 - val_mae: 0.5590 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.28589\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.4609 - mae: 0.5233 - val_loss: 19.9136 - val_mae: 2.5780 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.28589 to 0.17977, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3562 - mae: 0.4607 - val_loss: 0.1798 - val_mae: 0.3297 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.0371 - mae: 0.5736 - val_loss: 2.0320 - val_mae: 1.0782 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3978 - mae: 0.4842 - val_loss: 0.2947 - val_mae: 0.4298 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.6527 - mae: 0.5096 - val_loss: 1.1172 - val_mae: 0.8197 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.4250 - mae: 0.5010 - val_loss: 0.4836 - val_mae: 0.4929 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3749 - mae: 0.4750 - val_loss: 0.6510 - val_mae: 0.6201 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.9981 - mae: 0.5866 - val_loss: 0.6248 - val_mae: 0.6035 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.3444 - mae: 0.4508 - val_loss: 0.6544 - val_mae: 0.6159 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 1.6349 - mae: 0.7667 - val_loss: 0.5770 - val_mae: 0.5992 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.3141 - mae: 0.4384 - val_loss: 1.5820 - val_mae: 0.8633 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.1556 - mae: 0.6366 - val_loss: 0.5002 - val_mae: 0.5219 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.6978 - mae: 0.5787 - val_loss: 1.0640 - val_mae: 0.7283 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.3611 - mae: 0.4663 - val_loss: 5.9560 - val_mae: 1.5651 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.9537 - mae: 0.5690 - val_loss: 0.3591 - val_mae: 0.4392 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.3110 - mae: 0.4339 - val_loss: 0.5813 - val_mae: 0.6057 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.2875 - mae: 0.6650 - val_loss: 0.2650 - val_mae: 0.4051 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.8306 - mae: 0.5724 - val_loss: 0.4031 - val_mae: 0.4462 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.3008 - mae: 0.4254 - val_loss: 0.4223 - val_mae: 0.5128 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 1.4262 - mae: 0.6501 - val_loss: 0.2862 - val_mae: 0.4202 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.17977\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.3405 - mae: 0.4423 - val_loss: 0.3353 - val_mae: 0.4657 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.17977\n",
      "4375/4375 - 139s - 32ms/step - loss: 1.0455 - mae: 0.5947 - val_loss: 0.4929 - val_mae: 0.5086 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.17977 to 0.16598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 0.1277 - mae: 0.2794 - val_loss: 0.1660 - val_mae: 0.2628 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.16598 to 0.12129, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 0.0856 - mae: 0.2296 - val_loss: 0.1213 - val_mae: 0.2145 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.12129 to 0.05340, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0591 - mae: 0.1912 - val_loss: 0.0534 - val_mae: 0.1810 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.05340\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0461 - mae: 0.1690 - val_loss: 0.0585 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.05340 to 0.04150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 0.0387 - mae: 0.1548 - val_loss: 0.0415 - val_mae: 0.1602 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.04150 to 0.03594, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0331 - mae: 0.1432 - val_loss: 0.0359 - val_mae: 0.1492 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.03594 to 0.03455, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0299 - mae: 0.1364 - val_loss: 0.0346 - val_mae: 0.1465 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.03455 to 0.02946, saving model to models/best_model_full.keras\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0275 - mae: 0.1308 - val_loss: 0.0295 - val_mae: 0.1350 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.02946\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0260 - mae: 0.1271 - val_loss: 0.0308 - val_mae: 0.1374 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.02946 to 0.02597, saving model to models/best_model_full.keras\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0244 - mae: 0.1233 - val_loss: 0.0260 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.02597\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0232 - mae: 0.1200 - val_loss: 0.0329 - val_mae: 0.1434 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.02597 to 0.02563, saving model to models/best_model_full.keras\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0221 - mae: 0.1169 - val_loss: 0.0256 - val_mae: 0.1258 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.02563\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0217 - mae: 0.1159 - val_loss: 0.0299 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.02563\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0209 - mae: 0.1142 - val_loss: 0.0282 - val_mae: 0.1331 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.02563\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0200 - mae: 0.1116 - val_loss: 0.0279 - val_mae: 0.1314 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.02563 to 0.02191, saving model to models/best_model_full.keras\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0196 - mae: 0.1104 - val_loss: 0.0219 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.02191\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0193 - mae: 0.1094 - val_loss: 0.0275 - val_mae: 0.1306 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.02191 to 0.01996, saving model to models/best_model_full.keras\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0188 - mae: 0.1081 - val_loss: 0.0200 - val_mae: 0.1106 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.01996\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0183 - mae: 0.1066 - val_loss: 0.0246 - val_mae: 0.1245 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.01996\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0177 - mae: 0.1048 - val_loss: 0.0261 - val_mae: 0.1285 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.01996\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0175 - mae: 0.1045 - val_loss: 0.0251 - val_mae: 0.1240 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.01996\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0173 - mae: 0.1037 - val_loss: 0.0216 - val_mae: 0.1148 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.01996 to 0.01868, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0171 - mae: 0.1029 - val_loss: 0.0187 - val_mae: 0.1073 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.01868\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0167 - mae: 0.1019 - val_loss: 0.0191 - val_mae: 0.1088 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.01868 to 0.01807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0166 - mae: 0.1013 - val_loss: 0.0181 - val_mae: 0.1055 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.01807\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0165 - mae: 0.1010 - val_loss: 0.0209 - val_mae: 0.1140 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.01807\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0165 - mae: 0.1010 - val_loss: 0.0279 - val_mae: 0.1297 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.01807\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0162 - mae: 0.1000 - val_loss: 0.0200 - val_mae: 0.1108 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.01807\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0160 - mae: 0.0996 - val_loss: 0.0222 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.01807\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0158 - mae: 0.0990 - val_loss: 0.0231 - val_mae: 0.1161 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.01807\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0157 - mae: 0.0986 - val_loss: 0.0196 - val_mae: 0.1098 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.01807 to 0.01704, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0157 - mae: 0.0986 - val_loss: 0.0170 - val_mae: 0.1027 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0157 - mae: 0.0985 - val_loss: 0.0173 - val_mae: 0.1028 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0156 - mae: 0.0981 - val_loss: 0.0236 - val_mae: 0.1198 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0154 - mae: 0.0975 - val_loss: 0.0233 - val_mae: 0.1181 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0154 - mae: 0.0978 - val_loss: 0.0216 - val_mae: 0.1137 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0153 - mae: 0.0973 - val_loss: 0.0191 - val_mae: 0.1086 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0152 - mae: 0.0971 - val_loss: 0.0230 - val_mae: 0.1196 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0153 - mae: 0.0971 - val_loss: 0.0202 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0150 - mae: 0.0964 - val_loss: 0.0216 - val_mae: 0.1147 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0152 - mae: 0.0967 - val_loss: 0.0225 - val_mae: 0.1176 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.01704\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0151 - mae: 0.0964 - val_loss: 0.0264 - val_mae: 0.1276 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.01704 to 0.01636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0151 - mae: 0.0963 - val_loss: 0.0164 - val_mae: 0.1004 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.01636\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0151 - mae: 0.0964 - val_loss: 0.0188 - val_mae: 0.1080 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01636\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0151 - mae: 0.0963 - val_loss: 0.0180 - val_mae: 0.1052 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.01636 to 0.01605, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0152 - mae: 0.0969 - val_loss: 0.0161 - val_mae: 0.0990 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0149 - mae: 0.0961 - val_loss: 0.0180 - val_mae: 0.1049 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0148 - mae: 0.0957 - val_loss: 0.0239 - val_mae: 0.1230 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0149 - mae: 0.0958 - val_loss: 0.0163 - val_mae: 0.1002 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0151 - mae: 0.0966 - val_loss: 0.0190 - val_mae: 0.1080 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0149 - mae: 0.0957 - val_loss: 0.0205 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0150 - mae: 0.0960 - val_loss: 0.0171 - val_mae: 0.1033 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0150 - mae: 0.0961 - val_loss: 0.0202 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0149 - mae: 0.0957 - val_loss: 0.0212 - val_mae: 0.1154 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0151 - mae: 0.0965 - val_loss: 0.0281 - val_mae: 0.1318 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0151 - mae: 0.0965 - val_loss: 0.0194 - val_mae: 0.1094 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01605\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0150 - mae: 0.0960 - val_loss: 0.0178 - val_mae: 0.1060 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.01605 to 0.01595, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0149 - mae: 0.0957 - val_loss: 0.0159 - val_mae: 0.0995 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0152 - mae: 0.0965 - val_loss: 0.0182 - val_mae: 0.1058 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0150 - mae: 0.0958 - val_loss: 0.0180 - val_mae: 0.1055 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0150 - mae: 0.0960 - val_loss: 0.0169 - val_mae: 0.1028 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0151 - mae: 0.0962 - val_loss: 0.0186 - val_mae: 0.1060 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0151 - mae: 0.0962 - val_loss: 0.0215 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0151 - mae: 0.0962 - val_loss: 0.0180 - val_mae: 0.1052 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0154 - mae: 0.0972 - val_loss: 0.0198 - val_mae: 0.1111 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0155 - mae: 0.0974 - val_loss: 0.0173 - val_mae: 0.1028 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0154 - mae: 0.0975 - val_loss: 0.0182 - val_mae: 0.1065 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0152 - mae: 0.0963 - val_loss: 0.0175 - val_mae: 0.1039 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0154 - mae: 0.0972 - val_loss: 0.0177 - val_mae: 0.1046 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01595\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0154 - mae: 0.0972 - val_loss: 0.0211 - val_mae: 0.1116 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0153 - mae: 0.0969 - val_loss: 0.0231 - val_mae: 0.1220 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0155 - mae: 0.0975 - val_loss: 0.0211 - val_mae: 0.1146 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0153 - mae: 0.0968 - val_loss: 0.0424 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0153 - mae: 0.0969 - val_loss: 0.0177 - val_mae: 0.1050 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0156 - mae: 0.0976 - val_loss: 0.0235 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0155 - mae: 0.0974 - val_loss: 0.0208 - val_mae: 0.1131 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0155 - mae: 0.0973 - val_loss: 0.0207 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01595\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0157 - mae: 0.0976 - val_loss: 0.0200 - val_mae: 0.1095 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.01595 to 0.00731, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0049 - mae: 0.0553 - val_loss: 0.0073 - val_mae: 0.0669 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.00731 to 0.00708, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0041 - mae: 0.0510 - val_loss: 0.0071 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.00708 to 0.00689, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0039 - mae: 0.0492 - val_loss: 0.0069 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.00689\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0069 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.00689 to 0.00687, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0035 - mae: 0.0471 - val_loss: 0.0069 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.00687 to 0.00672, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0067 - val_mae: 0.0640 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.00672 to 0.00665, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0066 - val_mae: 0.0637 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.00665\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0032 - mae: 0.0450 - val_loss: 0.0067 - val_mae: 0.0637 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00665\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0031 - mae: 0.0445 - val_loss: 0.0067 - val_mae: 0.0638 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00665\n",
      "4375/4375 - 138s - 32ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0069 - val_mae: 0.0645 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.00665 to 0.00659, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0066 - val_mae: 0.0633 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00659\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0029 - mae: 0.0430 - val_loss: 0.0066 - val_mae: 0.0633 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss improved from 0.00659 to 0.00656, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0029 - mae: 0.0426 - val_loss: 0.0066 - val_mae: 0.0631 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00656\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0028 - mae: 0.0423 - val_loss: 0.0068 - val_mae: 0.0639 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.00656\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0067 - val_mae: 0.0641 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.00656 to 0.00647, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0065 - val_mae: 0.0625 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00647\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0065 - val_mae: 0.0628 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss improved from 0.00647 to 0.00643, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0026 - mae: 0.0408 - val_loss: 0.0064 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.00643\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0026 - mae: 0.0405 - val_loss: 0.0064 - val_mae: 0.0625 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00643\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0065 - val_mae: 0.0628 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00643\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0065 - val_mae: 0.0629 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00643\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0064 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.00643 to 0.00641, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0024 - mae: 0.0393 - val_loss: 0.0064 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.00641 to 0.00640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0064 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00640\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0065 - val_mae: 0.0625 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00640\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0023 - mae: 0.0384 - val_loss: 0.0065 - val_mae: 0.0628 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00640\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0065 - val_mae: 0.0631 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.00640 to 0.00640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0023 - mae: 0.0380 - val_loss: 0.0064 - val_mae: 0.0622 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.00640 to 0.00632, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0063 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0065 - val_mae: 0.0628 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0064 - val_mae: 0.0622 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0064 - val_mae: 0.0621 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0065 - val_mae: 0.0628 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0021 - mae: 0.0362 - val_loss: 0.0064 - val_mae: 0.0622 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0020 - mae: 0.0359 - val_loss: 0.0064 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0065 - val_mae: 0.0629 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0020 - mae: 0.0355 - val_loss: 0.0064 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0020 - mae: 0.0353 - val_loss: 0.0064 - val_mae: 0.0622 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0064 - val_mae: 0.0620 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0019 - mae: 0.0349 - val_loss: 0.0064 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0019 - mae: 0.0347 - val_loss: 0.0064 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0019 - mae: 0.0345 - val_loss: 0.0064 - val_mae: 0.0619 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0064 - val_mae: 0.0621 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00632\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0018 - mae: 0.0341 - val_loss: 0.0068 - val_mae: 0.0643 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.00632 to 0.00631, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0063 - val_mae: 0.0615 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00631\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0018 - mae: 0.0336 - val_loss: 0.0064 - val_mae: 0.0620 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00631\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00631\n",
      "4375/4375 - 140s - 32ms/step - loss: 0.0018 - mae: 0.0333 - val_loss: 0.0064 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss improved from 0.00631 to 0.00607, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0061 - val_mae: 0.0602 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss improved from 0.00607 to 0.00606, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0012 - mae: 0.0276 - val_loss: 0.0061 - val_mae: 0.0602 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00606\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0012 - mae: 0.0273 - val_loss: 0.0061 - val_mae: 0.0603 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.00606 to 0.00605, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0012 - mae: 0.0270 - val_loss: 0.0061 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.00605 to 0.00604, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0268 - val_loss: 0.0060 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.00604 to 0.00604, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0266 - val_loss: 0.0060 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0061 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0262 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0261 - val_loss: 0.0060 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0260 - val_loss: 0.0061 - val_mae: 0.0602 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0259 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0258 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0060 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0011 - mae: 0.0256 - val_loss: 0.0061 - val_mae: 0.0602 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.00604 to 0.00604, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0010 - mae: 0.0254 - val_loss: 0.0061 - val_mae: 0.0602 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0010 - mae: 0.0253 - val_loss: 0.0061 - val_mae: 0.0602 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0060 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0061 - val_mae: 0.0602 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0010 - mae: 0.0251 - val_loss: 0.0061 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00604\n",
      "4375/4375 - 139s - 32ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0061 - val_mae: 0.0601 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.00604 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.6422e-04 - mae: 0.0244 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5932e-04 - mae: 0.0243 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5753e-04 - mae: 0.0243 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5614e-04 - mae: 0.0243 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5535e-04 - mae: 0.0243 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5477e-04 - mae: 0.0243 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5386e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5332e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.5251e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5160e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5113e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.5057e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4983e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4956e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4883e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.4838e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4782e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4727e-04 - mae: 0.0242 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4655e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4610e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4174e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4065e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.4031e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.4010e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3996e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3991e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3982e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3974e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3969e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3962e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0599 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3957e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3951e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3948e-04 - mae: 0.0241 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3939e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3935e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3927e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3924e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3914e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3912e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3907e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3903e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3898e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3891e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3888e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss improved from 0.00603 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3882e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0599 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3878e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3871e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3867e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3862e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3855e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3851e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3848e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3843e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3838e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3826e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3827e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3823e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3818e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3811e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3807e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3800e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3798e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3790e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3785e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3782e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3778e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3772e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3763e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3762e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3759e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3752e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3745e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3742e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3739e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3733e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3729e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3723e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3720e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3712e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3707e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3701e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3696e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3693e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3689e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0599 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3685e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3681e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00603\n",
      "4375/4375 - 140s - 32ms/step - loss: 9.3673e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3662e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3669e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3661e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3653e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3652e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00603\n",
      "4375/4375 - 139s - 32ms/step - loss: 9.3646e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00603\n",
      "4375/4375 - 137s - 31ms/step - loss: 9.3639e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00603\n",
      "4375/4375 - 136s - 31ms/step - loss: 9.3633e-04 - mae: 0.0240 - val_loss: 0.0060 - val_mae: 0.0600 - learning_rate: 1.0000e-07\n",
      "Epoch 292: early stopping\n",
      "Restoring model weights from the end of the best epoch: 242.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 8s - 13ms/step\n",
      "Mean positioning error: 0.0945 m\n",
      "Median positioning error: 0.0857 m\n",
      "90th percentile error: 0.1677 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 40674.976348,
   "end_time": "2025-08-18T18:50:04.002277",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-18T07:32:09.025929",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
