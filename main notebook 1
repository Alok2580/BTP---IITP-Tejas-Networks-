{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dae2a482",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T18:25:24.458782Z",
     "iopub.status.busy": "2025-08-07T18:25:24.458102Z",
     "iopub.status.idle": "2025-08-07T18:25:25.894814Z",
     "shell.execute_reply": "2025-08-07T18:25:25.893957Z"
    },
    "papermill": {
     "duration": 1.441796,
     "end_time": "2025-08-07T18:25:25.896101",
     "exception": false,
     "start_time": "2025-08-07T18:25:24.454305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "db14a54c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:25:25.901544Z",
     "iopub.status.busy": "2025-08-07T18:25:25.901225Z",
     "iopub.status.idle": "2025-08-07T18:25:39.895858Z",
     "shell.execute_reply": "2025-08-07T18:25:39.895040Z"
    },
    "papermill": {
     "duration": 13.998792,
     "end_time": "2025-08-07T18:25:39.897384",
     "exception": false,
     "start_time": "2025-08-07T18:25:25.898592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 18:25:27.383342: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754591127.561359      20 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754591127.611888      20 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9d746808",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:25:39.903284Z",
     "iopub.status.busy": "2025-08-07T18:25:39.902229Z",
     "iopub.status.idle": "2025-08-07T18:25:39.907324Z",
     "shell.execute_reply": "2025-08-07T18:25:39.906581Z"
    },
    "papermill": {
     "duration": 0.00876,
     "end_time": "2025-08-07T18:25:39.908391",
     "exception": false,
     "start_time": "2025-08-07T18:25:39.899631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "27fdb5a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:25:39.913130Z",
     "iopub.status.busy": "2025-08-07T18:25:39.912682Z",
     "iopub.status.idle": "2025-08-07T18:25:39.916004Z",
     "shell.execute_reply": "2025-08-07T18:25:39.915272Z"
    },
    "papermill": {
     "duration": 0.006726,
     "end_time": "2025-08-07T18:25:39.917153",
     "exception": false,
     "start_time": "2025-08-07T18:25:39.910427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "437b7840",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:25:39.922224Z",
     "iopub.status.busy": "2025-08-07T18:25:39.922001Z",
     "iopub.status.idle": "2025-08-07T21:18:31.643700Z",
     "shell.execute_reply": "2025-08-07T21:18:31.642876Z"
    },
    "papermill": {
     "duration": 10371.725988,
     "end_time": "2025-08-07T21:18:31.644991",
     "exception": false,
     "start_time": "2025-08-07T18:25:39.919003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754591161.032891      20 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754591170.269720      20 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">101,632</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m101,632\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">693,258</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m693,258\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">692,742</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m692,742\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754591181.070981      58 service.cc:148] XLA service 0x7e8400017e30 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754591181.071693      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754591184.775857      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 58.95989, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 98.8335 - mae: 7.3687 - val_loss: 58.9599 - val_mae: 5.9466 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 58.95989 to 21.52346, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 29.1628 - mae: 4.1156 - val_loss: 21.5235 - val_mae: 3.6051 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 21.52346 to 7.46128, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 13.9899 - mae: 2.8275 - val_loss: 7.4613 - val_mae: 2.1345 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.46128 to 3.52316, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 5.6952 - mae: 1.7657 - val_loss: 3.5232 - val_mae: 1.4329 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 3.52316 to 1.50180, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.8487 - mae: 1.3922 - val_loss: 1.5018 - val_mae: 0.9588 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.50180 to 1.26990, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.9047 - mae: 1.0179 - val_loss: 1.2699 - val_mae: 0.8709 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 1.26990\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.3531 - mae: 1.1679 - val_loss: 9.4276 - val_mae: 2.2565 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.26990 to 0.96583, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6808 - mae: 0.9578 - val_loss: 0.9658 - val_mae: 0.7652 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.96583 to 0.75123, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.6260 - mae: 0.8305 - val_loss: 0.7512 - val_mae: 0.6621 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.75123 to 0.44400, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9609 - mae: 0.6932 - val_loss: 0.4440 - val_mae: 0.5200 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.44400\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.7782 - mae: 0.8894 - val_loss: 1.2335 - val_mae: 0.8436 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1075 - mae: 1.1557 - val_loss: 1.0759 - val_mae: 0.7911 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2035 - mae: 0.8045 - val_loss: 0.7764 - val_mae: 0.6787 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9933 - mae: 0.8961 - val_loss: 0.7623 - val_mae: 0.6764 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.9035 - mae: 1.0251 - val_loss: 0.9735 - val_mae: 0.7716 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6102 - mae: 0.6034 - val_loss: 0.4710 - val_mae: 0.5366 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0091 - mae: 0.9127 - val_loss: 0.6088 - val_mae: 0.6019 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7870 - mae: 0.6436 - val_loss: 0.4867 - val_mae: 0.5380 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4407 - mae: 0.7139 - val_loss: 0.7688 - val_mae: 0.6875 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8642 - mae: 0.6521 - val_loss: 1.3776 - val_mae: 0.9055 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6220 - mae: 0.5890 - val_loss: 1.3720 - val_mae: 0.9046 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6002 - mae: 0.8113 - val_loss: 0.4463 - val_mae: 0.5187 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0813 - mae: 0.6332 - val_loss: 1.4921 - val_mae: 0.9001 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7084 - mae: 0.5623 - val_loss: 0.9344 - val_mae: 0.7288 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5710 - mae: 0.7844 - val_loss: 0.5007 - val_mae: 0.5493 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3931 - mae: 0.4847 - val_loss: 0.5129 - val_mae: 0.5593 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.44400\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5770 - mae: 0.5403 - val_loss: 0.4852 - val_mae: 0.5326 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss improved from 0.44400 to 0.31283, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6347 - mae: 0.7365 - val_loss: 0.3128 - val_mae: 0.4441 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.31283\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2385 - mae: 0.6464 - val_loss: 0.3380 - val_mae: 0.4539 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 0.31283 to 0.19216, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4702 - mae: 0.4878 - val_loss: 0.1922 - val_mae: 0.3438 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7604 - mae: 0.7150 - val_loss: 0.2474 - val_mae: 0.3872 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3282 - mae: 0.4389 - val_loss: 0.2710 - val_mae: 0.4024 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0278 - mae: 0.6368 - val_loss: 0.4638 - val_mae: 0.5383 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4481 - mae: 0.4779 - val_loss: 0.4617 - val_mae: 0.5244 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3566 - mae: 0.4545 - val_loss: 0.2462 - val_mae: 0.3880 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2328 - mae: 0.6765 - val_loss: 0.3536 - val_mae: 0.4623 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4154 - mae: 0.4956 - val_loss: 0.3660 - val_mae: 0.4641 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4550 - mae: 0.7137 - val_loss: 0.3429 - val_mae: 0.4587 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0687 - mae: 0.6284 - val_loss: 0.3471 - val_mae: 0.4580 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6399 - mae: 0.8532 - val_loss: 0.9471 - val_mae: 0.7461 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3565 - mae: 0.6949 - val_loss: 3.8662 - val_mae: 1.4126 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6815 - mae: 0.6018 - val_loss: 0.3290 - val_mae: 0.4453 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8375 - mae: 0.8022 - val_loss: 0.3950 - val_mae: 0.4902 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1671 - mae: 1.0454 - val_loss: 2.6203 - val_mae: 1.1680 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9452 - mae: 0.7222 - val_loss: 1.5375 - val_mae: 0.9551 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2324 - mae: 0.8954 - val_loss: 0.5439 - val_mae: 0.5805 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1365 - mae: 0.7026 - val_loss: 0.9815 - val_mae: 0.7686 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3898 - mae: 0.7395 - val_loss: 0.4419 - val_mae: 0.5120 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1338 - mae: 0.6828 - val_loss: 0.6748 - val_mae: 0.6325 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.19216\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5058 - mae: 0.5440 - val_loss: 0.7622 - val_mae: 0.6991 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.19216 to 0.16694, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2370 - mae: 0.3678 - val_loss: 0.1669 - val_mae: 0.3170 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.16694 to 0.14416, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1540 - mae: 0.3041 - val_loss: 0.1442 - val_mae: 0.2978 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.14416 to 0.09911, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1126 - mae: 0.2617 - val_loss: 0.0991 - val_mae: 0.2452 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.09911 to 0.07841, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0896 - mae: 0.2337 - val_loss: 0.0784 - val_mae: 0.2183 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.07841 to 0.07454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0779 - mae: 0.2178 - val_loss: 0.0745 - val_mae: 0.2121 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.07454\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0742 - mae: 0.2128 - val_loss: 0.0776 - val_mae: 0.2153 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.07454 to 0.07089, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0701 - mae: 0.2065 - val_loss: 0.0709 - val_mae: 0.2062 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.07089 to 0.06772, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0652 - mae: 0.1997 - val_loss: 0.0677 - val_mae: 0.2016 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.06772 to 0.05459, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0563 - mae: 0.1858 - val_loss: 0.0546 - val_mae: 0.1813 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.05459 to 0.05244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0510 - mae: 0.1768 - val_loss: 0.0524 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.05244 to 0.04685, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0464 - mae: 0.1687 - val_loss: 0.0469 - val_mae: 0.1681 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.04685\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0446 - mae: 0.1655 - val_loss: 0.0528 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.04685 to 0.04609, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0400 - mae: 0.1570 - val_loss: 0.0461 - val_mae: 0.1656 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.04609 to 0.04315, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0375 - mae: 0.1519 - val_loss: 0.0432 - val_mae: 0.1618 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.04315 to 0.03682, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0360 - mae: 0.1487 - val_loss: 0.0368 - val_mae: 0.1488 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.03682\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0332 - mae: 0.1426 - val_loss: 0.0420 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.03682\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0311 - mae: 0.1385 - val_loss: 0.0386 - val_mae: 0.1527 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.03682 to 0.03681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0296 - mae: 0.1348 - val_loss: 0.0368 - val_mae: 0.1499 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.03681 to 0.02847, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0281 - mae: 0.1317 - val_loss: 0.0285 - val_mae: 0.1308 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.02847\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0271 - mae: 0.1292 - val_loss: 0.0333 - val_mae: 0.1411 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.02847\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1276 - val_loss: 0.0308 - val_mae: 0.1358 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.02847 to 0.02808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0256 - mae: 0.1254 - val_loss: 0.0281 - val_mae: 0.1293 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.02808 to 0.02771, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0248 - mae: 0.1237 - val_loss: 0.0277 - val_mae: 0.1278 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.02771 to 0.02436, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1221 - val_loss: 0.0244 - val_mae: 0.1215 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02436\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0233 - mae: 0.1197 - val_loss: 0.0288 - val_mae: 0.1326 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.02436\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0228 - mae: 0.1186 - val_loss: 0.0248 - val_mae: 0.1219 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02436\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0222 - mae: 0.1167 - val_loss: 0.0259 - val_mae: 0.1243 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02436\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0216 - mae: 0.1150 - val_loss: 0.0255 - val_mae: 0.1236 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02436\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0213 - mae: 0.1143 - val_loss: 0.0256 - val_mae: 0.1244 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02436\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0208 - mae: 0.1128 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.02436\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1134 - val_loss: 0.0250 - val_mae: 0.1228 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.02436 to 0.02377, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0203 - mae: 0.1116 - val_loss: 0.0238 - val_mae: 0.1192 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02377\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0201 - mae: 0.1108 - val_loss: 0.0255 - val_mae: 0.1237 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.02377 to 0.02374, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0197 - mae: 0.1096 - val_loss: 0.0237 - val_mae: 0.1198 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02374\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0193 - mae: 0.1087 - val_loss: 0.0256 - val_mae: 0.1238 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.02374 to 0.02127, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1079 - val_loss: 0.0213 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.02127 to 0.02123, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1076 - val_loss: 0.0212 - val_mae: 0.1113 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02123\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0186 - mae: 0.1067 - val_loss: 0.0220 - val_mae: 0.1142 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02123\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1067 - val_loss: 0.0213 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02123\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1058 - val_loss: 0.0251 - val_mae: 0.1233 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02123\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1047 - val_loss: 0.0231 - val_mae: 0.1175 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02123\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0182 - mae: 0.1053 - val_loss: 0.0221 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.02123 to 0.02122, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1043 - val_loss: 0.0212 - val_mae: 0.1109 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02122\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1044 - val_loss: 0.0230 - val_mae: 0.1149 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02122\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1045 - val_loss: 0.0237 - val_mae: 0.1185 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02122\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1045 - val_loss: 0.0254 - val_mae: 0.1220 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02122\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0182 - mae: 0.1050 - val_loss: 0.0224 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.02122 to 0.02024, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1030 - val_loss: 0.0202 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.02024 to 0.02020, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1045 - val_loss: 0.0202 - val_mae: 0.1096 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1043 - val_loss: 0.0339 - val_mae: 0.1412 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1038 - val_loss: 0.0204 - val_mae: 0.1084 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1036 - val_loss: 0.0205 - val_mae: 0.1113 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1043 - val_loss: 0.0214 - val_mae: 0.1124 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1038 - val_loss: 0.0243 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1032 - val_loss: 0.0204 - val_mae: 0.1110 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.02020 to 0.01894, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1031 - val_loss: 0.0189 - val_mae: 0.1059 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1041 - val_loss: 0.0191 - val_mae: 0.1066 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1032 - val_loss: 0.0194 - val_mae: 0.1063 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0172 - mae: 0.1023 - val_loss: 0.0263 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1038 - val_loss: 0.0216 - val_mae: 0.1124 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1040 - val_loss: 0.0201 - val_mae: 0.1094 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1032 - val_loss: 0.0223 - val_mae: 0.1149 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0174 - mae: 0.1028 - val_loss: 0.0211 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1042 - val_loss: 0.0234 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1033 - val_loss: 0.0281 - val_mae: 0.1324 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1039 - val_loss: 0.0255 - val_mae: 0.1245 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1041 - val_loss: 0.0226 - val_mae: 0.1160 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1039 - val_loss: 0.0228 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.01894 to 0.01837, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1044 - val_loss: 0.0184 - val_mae: 0.1052 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1035 - val_loss: 0.0208 - val_mae: 0.1112 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1050 - val_loss: 0.0219 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1039 - val_loss: 0.0187 - val_mae: 0.1065 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1033 - val_loss: 0.0195 - val_mae: 0.1080 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1027 - val_loss: 0.0192 - val_mae: 0.1060 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1044 - val_loss: 0.0205 - val_mae: 0.1109 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1037 - val_loss: 0.0220 - val_mae: 0.1153 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1044 - val_loss: 0.0199 - val_mae: 0.1086 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.01837 to 0.01802, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1033 - val_loss: 0.0180 - val_mae: 0.1050 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.01802 to 0.01626, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1031 - val_loss: 0.0163 - val_mae: 0.0983 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1035 - val_loss: 0.0202 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0182 - mae: 0.1035 - val_loss: 0.0205 - val_mae: 0.1103 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1036 - val_loss: 0.0230 - val_mae: 0.1160 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1041 - val_loss: 0.0182 - val_mae: 0.1042 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1036 - val_loss: 0.0202 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1048 - val_loss: 0.0174 - val_mae: 0.1016 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1047 - val_loss: 0.0212 - val_mae: 0.1124 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1042 - val_loss: 0.0243 - val_mae: 0.1228 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1041 - val_loss: 0.0258 - val_mae: 0.1265 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0182 - mae: 0.1046 - val_loss: 0.0187 - val_mae: 0.1060 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1012 - val_loss: 0.0217 - val_mae: 0.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0172 - mae: 0.1015 - val_loss: 0.0221 - val_mae: 0.1151 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1049 - val_loss: 0.0238 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1063 - val_loss: 0.0204 - val_mae: 0.1124 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1026 - val_loss: 0.0198 - val_mae: 0.1087 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1051 - val_loss: 0.0226 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1050 - val_loss: 0.0225 - val_mae: 0.1173 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1054 - val_loss: 0.0243 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1048 - val_loss: 0.0278 - val_mae: 0.1288 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1059 - val_loss: 0.0197 - val_mae: 0.1074 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.01626 to 0.00739, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0052 - mae: 0.0560 - val_loss: 0.0074 - val_mae: 0.0653 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.00739 to 0.00690, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0069 - val_mae: 0.0628 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00690\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0038 - mae: 0.0483 - val_loss: 0.0069 - val_mae: 0.0628 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.00690 to 0.00676, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0470 - val_loss: 0.0068 - val_mae: 0.0617 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.00676 to 0.00671, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0460 - val_loss: 0.0067 - val_mae: 0.0614 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00671\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0452 - val_loss: 0.0067 - val_mae: 0.0612 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.00671 to 0.00665, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0445 - val_loss: 0.0067 - val_mae: 0.0610 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.00665 to 0.00660, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0066 - val_mae: 0.0610 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.00660 to 0.00648, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0433 - val_loss: 0.0065 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00648\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0428 - val_loss: 0.0065 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00648 to 0.00640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0423 - val_loss: 0.0064 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00640\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0065 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.00640 to 0.00631, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0414 - val_loss: 0.0063 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00631\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0064 - val_mae: 0.0592 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00631\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0408 - val_loss: 0.0065 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.00631 to 0.00624, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0405 - val_loss: 0.0062 - val_mae: 0.0582 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00624\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0065 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.00624 to 0.00622, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0062 - val_mae: 0.0580 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.00622 to 0.00613, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0061 - val_mae: 0.0577 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00613\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0062 - val_mae: 0.0579 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00613\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0391 - val_loss: 0.0062 - val_mae: 0.0583 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.00613 to 0.00613, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0061 - val_mae: 0.0576 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00613\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0063 - val_mae: 0.0582 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00613\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0384 - val_loss: 0.0062 - val_mae: 0.0577 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.00613 to 0.00607, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0061 - val_mae: 0.0572 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00607\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0061 - val_mae: 0.0573 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00607\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0062 - val_mae: 0.0576 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00607\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0375 - val_loss: 0.0062 - val_mae: 0.0576 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00607\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0373 - val_loss: 0.0064 - val_mae: 0.0585 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00607\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0370 - val_loss: 0.0062 - val_mae: 0.0575 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00607\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0368 - val_loss: 0.0061 - val_mae: 0.0573 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.00607 to 0.00604, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0367 - val_loss: 0.0060 - val_mae: 0.0565 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00604\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0365 - val_loss: 0.0063 - val_mae: 0.0576 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00604\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0061 - val_mae: 0.0568 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00604\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0362 - val_loss: 0.0061 - val_mae: 0.0567 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00604\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0061 - val_mae: 0.0563 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00604\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0359 - val_loss: 0.0062 - val_mae: 0.0568 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00604\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0061 - val_mae: 0.0566 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00604\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0356 - val_loss: 0.0061 - val_mae: 0.0563 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.00604 to 0.00570, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0307 - val_loss: 0.0057 - val_mae: 0.0539 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss improved from 0.00570 to 0.00568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0301 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00568\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0057 - val_mae: 0.0539 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00568\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0057 - val_mae: 0.0539 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00568\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.00568 to 0.00568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.00568 to 0.00568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00568\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0295 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.00568 to 0.00567, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0294 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.00567 to 0.00566, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0294 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0293 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0293 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0292 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0292 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0292 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0291 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0291 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0290 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0290 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0290 - val_loss: 0.0057 - val_mae: 0.0538 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00566\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0289 - val_loss: 0.0057 - val_mae: 0.0537 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.00566 to 0.00566, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0284 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.00566 to 0.00566, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.00566 to 0.00565, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00565\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.00565 to 0.00565, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss improved from 0.00565 to 0.00565, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0056 - val_mae: 0.0534 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00565\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0056 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.00565 to 0.00565, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0056 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0056 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0056 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0056 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0056 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0056 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0534 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00565\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0057 - val_mae: 0.0535 - learning_rate: 1.0000e-07\n",
      "Epoch 293: early stopping\n",
      "Restoring model weights from the end of the best epoch: 243.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.0844 m\n",
      "Median positioning error: 0.0732 m\n",
      "90th percentile error: 0.1520 m\n"
     ]
    },
    {
     "data": {
      "image/png": "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b926NXHeDvG46dquqqpKWtQPGzYM3/72t/Hcc89h165dqKysxE9/+tO08TPZfX7MmDEwTRMff/xx0vGamhoEAgHb+uBI+ezYsaPHwn379u2O5pGKan1FRETq4CKdiIiyxve//30UFhbim9/8Jmpqanqc37FjB+69995e47S1teFrX/saGhoa8KMf/ahfX4PW3aJFi7B+/fqkXyC0tLTgd7/7HcaOHYupU6cOuI1Uhg0bhpkzZ+LRRx9FIBBIHN+0aRNeeuklLFq0CAAQjUYRDAaTHjt48GAMHz68x1d+deX3+wEgKXY68bbuueeepON33303AODcc8/tNYaVFixYgP379+Nvf/tb4lh7ezt+//vfO5pHKqr1FRERqYN/k05ERFljwoQJeOKJJ3DppZdiypQpuPzyyzFt2jR0dHTg9ddfx1/+8hdceeWVSY/Zv38//vjHPwKIvXu+efNm/OUvf0F1dTVuuukmXH311Zbk9oMf/AD/93//h3POOQff/e53UVFRgUcffRS7du3CM888A5fLvt+L33nnnTjnnHMwd+5cfOMb30h8BVtpaWniO82bmpowcuRIfOELX8CMGTNQVFSEl19+GW+99RbuuuuutLELCgowdepUPPnkkzj66KNRUVGBadOmpfz7+hkzZuCKK67A7373OwQCAZx++ulYv349Hn30UVx44YU488wz7eqClK6++mrcf//9uOyyy3DDDTdg2LBh+NOf/oT8/HwAff+UwD//+c/EJyK6mjdvXr//nl+1viIiInVwkU5ERFnl/PPPx/vvv48777wTzz//PH7zm9/A5/Nh+vTpuOuuu3rs3P3uu+/ia1/7WmLTtVGjRuG8887DN7/5TcyePduyvIYMGYLXX38d//mf/4n77rsP7e3tmD59Ov7+97/b/q7o/PnzsWLFCixduhS33HILPB4PTj/9dPziF79IbDjm9/vx7W9/Gy+99BKeffZZmKaJo446Cr/+9a9x7bXXHjH+H/7wB3znO9/BjTfeiI6ODixdujTtJnh/+MMfMH78eDzyyCP461//iqFDh+Lmm2/G0qVLLa+7N0VFRXjllVfwne98B/feey+Kiopw+eWXY968ebj44osTi/Xe3HLLLSmPP/zwwwPadE+lviIiInUYQuYOK0REREQOu+eee3DjjTdi3759GDFihOx0iIiIknCRTkRERNpq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29977z2MGDECqampSEpKQu/evTF9+nQUFRVh1qxZSE9PR1VVVYP4FRUVSElJwdNPPw3g18nh0qVLfZPhYP+WLl0a0qTulVdeweDBg5GYmIjk5GSceeaZ+Pjjjxs8zjAMPP/88xg8eDCSkpKQlpaGAQMG4Mknn0RFRQUAYOrUqSgoKEC7du1O2I/r16/HVVddhby8PMTHx6NHjx546qmn/B4zb948Xy12ux3p6ekYPHgwpk+fjuLi4hPWVL9/srOzcdlll2HHjh0nfF6oVq9ejZtuusn3t6Zp+OCDD/weM3XqVCxevDgi8bzGjx+Pn3/+OaJtBnJ83x//Ly4uzvTYkcZJOlELd6isChNeWoX9JZXIz0zAy9cNQIKT324hIiJqKRISEpCTk4OYmF/P//feey/Gjx+PgQMH4tNPP8XGjRsxa9YsrF+/Hq+++iquvfZaHDt2DO+//36D9t59913U1NTgmmuu8bt96NChKCgo8P274oorMHbsWL/bhg4d2mi+U6dOxc0334zLL78c69evx6pVq3D66afjoosuwr/+9S+/x1577bW4/fbbcdFFF2HJkiVYt24d/v73v+PDDz/E//73PwBAUlIScnJyGr0cfc2aNcjKysJrr72GTZs24d5778U999zTIGZKSgoKCgqwb98+fPPNN7jpppvw6quvYuDAgThw4ECj9W3ZsgUHDhzAO++8g02bNuGCCy5o9uJiQN1q4o0tbpiUlBTxXyiIj49HVlZWRNsMxtv3x//bvXt30MfX1NQ0uM27En+4mvq85uIknUgxe4sqcPmcFdhysAytk2Pxyu8GITMpVnRaREREJNCqVavw0EMPYdasWXjssccwdOhQ5OfnY/To0Xjvvfdw3XXXISsrCxdccAFefvnlBs+fO3cuLr74YmRkZPjd7nQ6kZOT4/sXHx+P2NhYv9u8K14Hs3LlSsyaNQuPPvoopkyZgi5duqBHjx548MEHcfvtt2PKlCnYu3cvAOA///kPXn/9dbz55pv461//ioEDByI/Px8XXXQRvvjiC4wcOTKsfvnd736Hp556CmeeeSY6deqEa665BhMnTmzwRoWmacjJyUFubi569OiBG264AcuXL0d5eTnuuuuuRuNkZWUhNzcXZ5xxBu677z78+OOP2LZtGwDg2WefRdeuXZGVlYUePXrg1Vdf9T3PMAzcf//9aN++PWJjY9GmTRvceuutvvuPv9w9Pz8fAHDJJZdA0zTf3/Uvd9d1HdOnT0e7du0QGxuLvn37YuHChb77d+3aBU3T8P7772PkyJFISEhAnz59sGLFCt9j6l8Z4Y3x6quvIj8/H6mpqbjyyitRVlbme0xZWRmuvvpqJCYmIjc3F0888QRGjBiB22+//YR95+374/9lZ//6U8IjRozA5MmTcfvtt6NVq1YYM2aM7wqGTz/9FP3790dsbCy+/vprVFdX49Zbb0VWVhbi4uJw+umnY/Xq1b62gj3Papykk5I0TUNCQoIyC6SFakthGS579hvsPlqBvIx4vHvzEHTITPR7jEp9I3MtonOzMr6ZscxoW/TYEKlCpX0p1FoMw0BFTa3l/6pq9WZfiv/6668jKSkJf/jDHwLe751w3XDDDfjiiy/8PqnctWsXvvzyS9xwww3NyiGYN998E0lJSfj973/fYLX0O+64A263G++9956vjm7duuGiiy5q0I6maUhNTQ0aJ9SV2EtLSxu8GRFIVlYWfvvb32L+/PlhfSoeHx8PoO4T3//+97+47bbbMGXKFN8n9BMnTsSSJUsA1H094YknnsBzzz2HrVu34oMPPsApp5wSsF3vZHPu3LkoKCjwm3we76mnnsKsWbMwc+ZMbNiwAWPGjMGFF16IrVu3+j3u3nvvxdSpU7Fu3TqcdNJJuOqqq074qfL27dvxwQcf4OOPP8bHH3+MZcuW4eGHH/bdP2XKFCxfvhzz58/HokWL8NVXX2Ht2rUh99uJvPLKK3A6nVi+fDnmzJnju/3uu+/Gww8/jM2bN6N3796488478d577+GVV17B2rVr0aVLF4wZMwZFRUV+7dV/XiRwdXdq8bwn25Zk7Z5iTJy7GqWVbnTLTsa/bxiE7JSG39dRqW9krkV0blbGNzOWGW2LHhuKLlzdPTiV9qVQa6l0e9Dzvs8syKihH6ePQYKz6Z+vbd26FZ06dYLD4Tjh48aMGYM2bdpg7ty5vsXXXn31VeTl5eHss89ucvwT+fnnn9G5c2fExja88q9NmzZISUnxff9569at6NatW9gxQl2J/ZtvvsHbb7+NTz75JKQ2e/TogbKyMhw9ejSky78LCgowc+ZMtG3bFt26dcPNN9+M66+/HrfccgtcLhf69euHb7/9FjNnzsTIkSOxZ88e5OTkYNSoUXA4HGjfvj0GDRoUsO3WrVsDqHvDJScnJ2gOM2fOxF133YUrr7wSAPDII49gyZIlePLJJzF79mzf46ZOnYrzzjsPAPDAAw+gV69e2LZtG7p37x6wXV3XMW/ePN8vJVx77bVYvHgxHnzwQZSVleGVV17BG2+84duO5s6dizZt2jTaZ6WlpUhKSvK7bfjw4fj00099f3ft2hWPPvqo7++CggIAwPTp0zF69GgAwLFjx/Dss89i3rx5OPfccwEAL7zwAhYtWoSXXnoJf/nLX3zPP/55kcLV3anFMwwDpaWl0i4AE2lfbT2Mq1/4FqWVbpzaPg1v//60gBN0QK2+kbkW0blZGd/MWGa0LXpsKLpwdffgVNqXoqGW5uYW6vPtdjuuu+46zJs3z7d6+SuvvILrr7/e1N8ENwzD9/3fE+Xa1H4wDANjx45FUlISkpKS0KtXrwaP2bhxIy666CJMmzYN55xzTkhtej9ZbmwC1q5dOyQmJqJNmzY4duwY3nvvPTidTmzevBnDhg3ze+ywYcOwefNmAMDll1+OyspKdOrUCZMmTcJ///vfZn1H2uVy4cCBAyeM6XX8J8i5ubkAgEOHDgVtOz8/3++nDHNzc32P37FjB9xut98bDKmpqSG94ZKcnIx169b5/XvxxRf9HtO/f/+Azx0wYIDv/7dv3w632+1Xu8PhwKBBgxrUfvzzIiWcbZefpJOSDMOA2+2GYRhKXIZ3Igt+KMBtb30Pt8fA8K6t8Ny1/U+4SJxKfSNzLaJzszK+mbHMaFv02BCpQqV9KdRa4h12/Dh9jIWZ/ToRjHc07/e4TzrpJHz99ddwu92Nfpr+u9/9DjNmzMAXX3wBj8eDvXv3YuLEic2KH0puNTU1Dd4IOHDgAFwuF0466STfY3/66acmxZkzZw7cbjc0TWvQBz/++CPOPvts3HTTTfjb3/4Wcps//fQTUlJSGl2Y7auvvkJKSgqysrL8JrKNycvLw5YtW/D5559j0aJF+MMf/oDHHnsMy5Yta3Qcm+v49r37xYl+aaB+PpqmNemXCeqz2Wzo0qXLCR+TmJgY1u2NaerzToSruxO1EAs3FmDyG2vh9hg4r3cuXrpuIFdxJyIiMommaUhwxgj519w3Qn7729+ivLwczzzzTMD7S0pKfP/fuXNnnHnmmXj55Zcxb948nH322ejQoUOz4p/IlVdeifLycjz33HMN7ps5cyYcDgcuu+wyAHV1/Pzzz/jwww8bPNZ7RUQwbdu2RZcuXdClSxe/ejZt2oSRI0fiuuuuw4MPPhhy3ocOHcJbb72Fiy++uNGrDDp27IjOnTs3mKD36NEDy5cv97tt+fLl6Nmzp+/v+Ph4XHDBBXj66aexdOlSrFixAj/88EPAOA6H44Tfj09JSUGbNm0ajRlp3q9aHP89+dLSUkt+xs2rc+fOvu+te7ndbqxevdrU2puCr+aJotSqnUW49a110A3gigHtMOPS3rDbovuTDCIiIjLH4MGDceedd+KOO+7A/v37cckll6BNmzbYtm0b5syZg9NPPx233Xab7/E33HADJk2aBAANLi1uKo/Hg3Xr1vndFhsbiyFDhuC2227DnXfeiaqqKlx66aWora3Fa6+9hqeeegpPPvkk8vLyAABXXHEF/vvf/+Kqq67C3/72N5xzzjlo3bo1fvjhBzzxxBP405/+hIsvvjjknDZu3IizzjoLY8aMwZQpU1BYWAig7rJ/73e8gbo3AAoLC2EYBkpKSrBixQo89NBDSE1NxYwZM5rcJ3/5y19wxRVXoE+fPjjttNOwdOlSvP/++/j8888B1K2i7vF4MHjwYCQkJOC1115DfHx80DdN8vPzsXjxYgwbNgyxsbFIT08PGHPatGno3Lkz+vbti7lz52LdunV4/fXXm1xHY5KTk3HdddfhL3/5CzIyMpCVlYVp06bBZrOFtGCjd1yOl5WVFdZXMBITE3HLLbf4cmjfvj0effRRVFRUmLYoYlMJn6TPnj0bjz32GAoLC9GnTx/885//DLoYwqZNm3DfffdhzZo12L17N5544olGl+ynlknTNCQlJUX95XfB/HywDDe+sho1tTpG98wOa4KuUt/IXIvo3KyMb2YsM9oWPTZEqlBpX5K9llAWPAvFI488gv79+2P27NmYM2cOdF1H586d8Zvf/AbXXXed32Mvu+wyTJ48GXa7HZdeemlE4peXl+PUU0/1u61z587Ytm0bnnzySZxyyil49tlnMW3aNNjtdvTr1w8ffPABLrjgAt/jNU3DG2+8geeffx4vv/wyHnzwQcTExKBr166YMGECxowJ/nWEQP347rvv4vDhw3jttdfw2muv+W7v0KEDdu3a5fvb5XIhNzcXmqYhJSUF3bp1w4QJE3DrrbeecEX5xlx88cV46qmnMHPmTOzduxcdO3bE3LlzMWLECAB1i8A9/PDDmDJlCjweD0455RR89NFHQS+vnzVrFqZMmYIXXngBbdu29avB69Zbb0VpaSnuuOMOHDp0CD179sT8+fPRtWvXJtcRiscffxw333wzzj//fKSkpODOO+/E3r17ERcXeB0lL2/f11dQUHDCBfICefjhh6HrOq699lqUlZVhwIAB+OyzzwK+mRFp4RxfNEPgChlvv/02JkyYgDlz5mDw4MF48skn8c4772DLli0BV0dcvXo1/vOf/6B///7485//jLvuuivsSbrL5UJqaiqOHDnS6HdHiGR0oKQSlz37DQpKq9C/Qzpev3Ew4pr5PTUiCp/b7caCBQswbtw4078XSOL0738/CgpKkZubijVr7hedDlmoqqoKO3fuRMeOHRudRMhmxIgR6Nu3r+/3s1uy/Px83H777dJ/sKfrOlwuF1JSUkxdoE8mx44dQ9u2bTFr1izpPsluqhMdN7zz0NLSUqSkpJywHaFbwOOPP45JkyZh4sSJ6NmzJ+bMmYOEhAS8/PLLAR8/cOBAPPbYY7jyyisD/kQDkZdhGCguLpZ6ldamKK1w4/q5q1BQWoUuWUl46boBYU/QVeobmWsRnZuV8c2MZUbboseGogtXdw9OpX1J5lpCWfE8kGeeeQZJSUlBv7tsdnzRsR566CEkJSVhz549EW/by8q+UcH333+PN998E9u3b8fatWtx9dVXA0DA37xXUVSs7l5TU4M1a9bgnnvu8d1ms9kwatQorFixImJxqqurUV1d7fvb5XIBqPsExO12RywOyUXXdVRXVwdcJTRa6bqBW9/6Hj8fLEd2cixeuvZUJDq0sLdjlfpG5lpE52ZlfDNjmdF2pNr07ns8l6jO8P2XY+1P9HEukgLV4l3tXdf1iKxQ3RzenycL9UX+q6++isrKSgBA+/btm51/uPFliHXTTTfhN7/5DYC63w8/vt1IT9Qj0ab3+d5tTkW6rmPmzJnYsmULnE4n+vXrh2XLliEjI0OZmnVd9/1aRP2vV9TU1ITcjrBJ+pEjR+DxeJCdne13e3Z2dpN/ViGQGTNm4IEHHmhw+5IlS5CQkBCxOERmW3JAw7Lddjg0AxM6HsO6b5ZgneikiAiLFi0SnQKZqKqqyvffBQsWCM6GrBQTE4OcnByUl5eH9eJaBsnJyb5VxKuqqnzbcUsSExPj9/VZ7wd1sisrKxOdgmk6d+6MxYsXN7g9WsYmFDU1NaisrMSXX37Z4PfsKyoqQm5H+MJxZrvnnnswZcoU398ulwt5eXkYOXIkv5OuMF3XUVxcjPT09Kh/dx8ANuwrxSerVgEw8Lfze+K3g/Ka3JZKfSNzLaJzszK+mbHMaDtSbbrdbixatAijR4/md9IV9sADawHUIC4uDuPGjROdjlREH+ciKVAtVVVV2Lt3L5KSkoR/J93j8URs8TjZ45sZy4y2I9WmYRgoKytDcnKytAsYUuOqqqoQHx+PM844o8Fx4/ifOWyMsEl6q1atYLfbcfDgQb/bDx48GPYqfScSGxsb8PvrDoeDL6oUZhgGMjIy4HA4ov5At/1wOW55Yx3cHgPnnpyDCUM7NqsmlfpG5lpE52ZlfDNjmdF2pNvk+UR1mu+/HGd/oo9zkRSoFo/HA03TYLPZhL4JYRgG7HY7NE0Tdj6xKr6ZscxoO5Jtei/39m5zFJ28PykX6LWB0+kMvZ1IJxYqp9OJ/v37+13yoOs6Fi9ejCFDhohKixShaRqcTmfUv2jYerAM459biUNl1TgpOwkPX9q72TWp0jeA3LWIzs3K+GbGMqNt0WND0cW7mXBzaUilfUnmWryTNpHnE6vimxnLjLZFjw1Fl3C2E6Fv03h/w++VV17B5s2bccstt+DYsWOYOHEiAGDChAl+C8vV1NRg3bp1WLduHWpqarB//36sW7cO27ZtE1UCSUrXdRw9ejSqF6HYW1SBq15YiSPl1eiek4w3J52G1ITmf4qjQt94yVyL6NysjG9mLDPaFj02FF24untwKu1LMtciegXxaF3d3Yq2RY8NRZdwji9Cv5M+fvx4HD58GPfddx8KCwvRt29fLFy40LeY3J49e/wu9zhw4ABOPfVU398zZ87EzJkzceaZZ2Lp0qVWp0+Si+YDZmmlGxPnrcaR8hr0yE3BGzcORnpi6JfINCaa+6Y+mWsRnZuV8c2MZdaLNSJqPpX2JZlrEZ0bzyfWtkkkfOG4yZMnY/LkyQHvqz/xzs/P545Ayqup1fHH19di26Fy5KTEYe71AyM6QSciIiIiInlxVQIiiVTU1OLGf3+Hr7cdQYLTjhevG4CcVLEryhIRERGFYteuXdA0DevWrQNQ94GbpmlhrWptNU3T8MEHH5zwMddffz0uvvjiiMa9//770bdv34i2GU3qbxvz5s1DWlqa0Jxkwkk6KUnTNKSlpUXVQh5Fx2rw2xe+xZc/H0a8w47nru2Pk9umRjxONPZNMDLXIjo3K+ObGcuMtkWPDZEqVNqXZK8lJia8i1/vv/9+34rj3n/du3f3e0xVVRX++Mc/IjMzE0lJSbjsssv8fnWpqKgIF1xwAZKTkzFo0CB8//33fs//4x//iFmzZvndlpeXh4KCApx88slhVvir+rXOmzfPV4PNZkO7du0wceJEHDp0qNltA0BBQQHOPfdcAA3fZPB66qmnMG/evJDbDMXUqVMD/mZ4pAXaFgJtD6KNHz8eP//8s+g0TBXO8UX45e5EZoi21Ta/3noEd7yzDgdd1UhLcODl6weiX/t0U2JFW9+ciMy1iM6Nq/Fa2yapi6u7B6fSviRzLZqmwTCMsHPr1asXPv/8c9/f9SeTf/7zn/HJJ5/gnXfeQWpqKiZPnoxLL70Uy5cvBwA8+OCDKCsrw9q1a/HMM8/gpptuwnfffQcAWLlyJb799ls8/fTTfm3a7fZm/ZRysFpTUlKwZcsW6LqO9evXY+LEiThw4AA+++yzZrcdSr6pqYE/NGnq2ABAUlISkpKSwn5eU9TfFoATv7lQU1PT4OfCjv9JwnCE+rz4+HjEx8eH1Xa0iZrV3YnMous6ioqKpFyl9Xi1Hh0zFmzGNS99i4OuanRqnYh3fj/EtAk6ED19EwqZaxGdm5XxzYxlRtuix4aiC1d3D06lfUnmWpq6gnhMTAxycnJ8/1q1auW7r7S0FC+99BIef/xxnHXWWejfvz/mzp2Lb775BitXrgQAbN68GVdeeSW6du2K3/3ud9i8eTMAwO124+abb8acOXNgt9v9Ygb7JPp4X3/9NYYPH474+Hjk5eXh1ltvxbFjx05Yq6ZpyMnJQZs2bXDuuefi1ltvxeeff47Kykrouo7p06ejXbt2iI2N9S1E7VVTU4PJkycjNzcX8fHx6NChA2bMmOHXtvdy944dOwIATj31VGiahhEjRgBoeLl7dXU1br31VmRlZSE+Ph6nn346Vq9e7bvfeyn34sWLMWDAACQkJGDo0KHYsmWL7zH1L3efOHEirr76asyaNQu5ubnIzMzEH//4R7jdbt9jCgoKcN555yE+Ph4dO3bEG2+8gfz8fDz55JNB+xtouC3U3x7y8/Pxj3/8AxMmTEBKSgpuuukm3+Xn8+fPR8+ePREbG4s9e/aguLgYEyZMQHp6OhISEnDuuedi69atvraCPa8x9S939/bPq6++ivz8fKSmpuLKK69EWVmZ7zG6rmPGjBno2LEj4uPj0adPH7z77ruNxhIlnOMLJ+lEgpRU1GDivNV47ssdAICrB7fHJ38ajq7ZyYIzIyIiomi3detWtGnTBp06dcLVV1/tN1Fas2YN3G43Ro0a5bute/fuaN++PVasWAEA6NOnD7744gvU1tZi0aJF6N27NwDg0UcfxYgRIzBgwICwc9q+fTvGjh2Lyy67DBs2bMDbb7+Nr7/+Ougi0sHEx8dD13XU1tbiqaeewqxZszBz5kxs2LABY8aMwYUXXuibOD799NOYP38+3n77bWzcuBGvvfYa8vPzA7a7atUqAMDnn3+OgoICvP/++wEfd+edd+K9997DvHnz8O2336JLly4YM2YMioqK/B537733YtasWfjuu+8QExOD3/3udyes66uvvsL27duxZMkSvPLKK5g3b57fZfYTJkzAgQMHsHTpUrz33nt4/vnnm3TZfyAzZ85Enz598P333+Pvf/87AKCiogKPPPIIXnzxRWzatAlZWVm4/vrr8d1332H+/PlYsWIFDMPAuHHj/N5MCPS8pti+fTs++OADfPzxx/j444+xbNkyPPzww777Z8yYgX//+9+YM2cONm3ahD//+c+45pprsGzZsuZ1hgQ4SScSYG9RBS6evRxfbT2CeIcdz1zdDw9ecgrinfbGn0xERERClTz7Fnb1vhS7el+KyuX+39V27z7gu+/w3U80eG7BNXf77q/P9eYC333lHzd9ojF48GDMmzcPCxcuxLPPPoudO3di+PDhvk8hCwsL4XQ6GyzUlZ2djcLCQgDA3XffjZiYGHTp0gUffvghXnzxRWzduhWvvPIK/v73v+Pmm29Gp06dcMUVV6C0tDSkvGbMmIGrr74at99+O7p27YqhQ4fi6aefxr///W9UVVWF1MbWrVsxZ84cDBgwAMnJyZg5cybuuusuXHnllejWrRseeeQR9O3b1/fp8p49e9C1a1ecfvrp6NChA04//XRcddVVAdtu3bo1ACAzMxM5OTnIyMho8Jhjx47h2WefxWOPPYZzzz0XPXv2xPPPP4/4+Hi89NJLfo998MEHceaZZ6Jnz564++678c0335ywzrS0NPzzn/9E9+7dcf755+O8887z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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10395.009747,
   "end_time": "2025-08-07T21:18:35.453263",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T18:25:20.443516",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
