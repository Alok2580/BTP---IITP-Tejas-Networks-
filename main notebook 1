{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d0368fd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-06T17:45:17.063192Z",
     "iopub.status.busy": "2025-08-06T17:45:17.062316Z",
     "iopub.status.idle": "2025-08-06T17:45:18.680951Z",
     "shell.execute_reply": "2025-08-06T17:45:18.680169Z"
    },
    "papermill": {
     "duration": 1.623287,
     "end_time": "2025-08-06T17:45:18.682098",
     "exception": false,
     "start_time": "2025-08-06T17:45:17.058811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "431c87fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:45:18.687812Z",
     "iopub.status.busy": "2025-08-06T17:45:18.687056Z",
     "iopub.status.idle": "2025-08-06T17:45:36.363088Z",
     "shell.execute_reply": "2025-08-06T17:45:36.362132Z"
    },
    "papermill": {
     "duration": 17.680262,
     "end_time": "2025-08-06T17:45:36.364776",
     "exception": false,
     "start_time": "2025-08-06T17:45:18.684514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-06 17:45:20.801210: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754502321.055026      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754502321.136340      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b857f55d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:45:36.370967Z",
     "iopub.status.busy": "2025-08-06T17:45:36.370009Z",
     "iopub.status.idle": "2025-08-06T17:45:36.375898Z",
     "shell.execute_reply": "2025-08-06T17:45:36.375302Z"
    },
    "papermill": {
     "duration": 0.009981,
     "end_time": "2025-08-06T17:45:36.377120",
     "exception": false,
     "start_time": "2025-08-06T17:45:36.367139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "041d0bc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:45:36.382506Z",
     "iopub.status.busy": "2025-08-06T17:45:36.381939Z",
     "iopub.status.idle": "2025-08-06T17:45:36.385909Z",
     "shell.execute_reply": "2025-08-06T17:45:36.385146Z"
    },
    "papermill": {
     "duration": 0.007912,
     "end_time": "2025-08-06T17:45:36.387117",
     "exception": false,
     "start_time": "2025-08-06T17:45:36.379205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1d62c7d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:45:36.392771Z",
     "iopub.status.busy": "2025-08-06T17:45:36.392551Z",
     "iopub.status.idle": "2025-08-06T19:29:50.498742Z",
     "shell.execute_reply": "2025-08-06T19:29:50.497805Z"
    },
    "papermill": {
     "duration": 6254.110816,
     "end_time": "2025-08-06T19:29:50.499976",
     "exception": false,
     "start_time": "2025-08-06T17:45:36.389160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754502357.378637      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754502367.050343      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754502378.618748      56 service.cc:148] XLA service 0x7d45a0016a60 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754502378.619785      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754502382.749971      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 17.91490, saving model to models/best_model_full.keras\n",
      "4375/4375 - 51s - 12ms/step - loss: 102.2453 - mae: 7.1744 - val_loss: 17.9149 - val_mae: 3.2658 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 17.91490 to 5.95685, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 11.2149 - mae: 2.5236 - val_loss: 5.9569 - val_mae: 1.9203 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 5.95685\n",
      "4375/4375 - 37s - 8ms/step - loss: 5.7646 - mae: 1.7760 - val_loss: 6.7983 - val_mae: 2.0180 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 5.95685 to 3.77352, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.4746 - mae: 1.3744 - val_loss: 3.7735 - val_mae: 1.4488 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 3.77352 to 2.69097, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.4470 - mae: 1.1046 - val_loss: 2.6910 - val_mae: 1.0977 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.69097 to 2.17232, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.7322 - mae: 0.9074 - val_loss: 2.1723 - val_mae: 1.1181 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 2.17232 to 1.15047, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.4683 - mae: 1.0421 - val_loss: 1.1505 - val_mae: 0.8296 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.15047\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.8191 - mae: 1.1589 - val_loss: 2.3106 - val_mae: 1.1712 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 1.15047\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.3093 - mae: 0.8385 - val_loss: 4.3326 - val_mae: 1.5590 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 1.15047 to 1.07743, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.8871 - mae: 0.9638 - val_loss: 1.0774 - val_mae: 0.8049 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 1.07743 to 0.72813, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8150 - mae: 0.6832 - val_loss: 0.7281 - val_mae: 0.6623 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.72813\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.9242 - mae: 0.6936 - val_loss: 0.8363 - val_mae: 0.7053 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.72813 to 0.71925, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.2396 - mae: 0.9306 - val_loss: 0.7192 - val_mae: 0.6567 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.71925 to 0.55721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.6714 - mae: 0.6172 - val_loss: 0.5572 - val_mae: 0.5924 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.55721\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.3965 - mae: 0.8277 - val_loss: 0.5941 - val_mae: 0.6086 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.55721\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.3583 - mae: 0.4659 - val_loss: 0.9443 - val_mae: 0.6967 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.55721 to 0.54076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.0400 - mae: 0.8285 - val_loss: 0.5408 - val_mae: 0.5768 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.54076\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.8984 - mae: 0.6445 - val_loss: 1.2588 - val_mae: 0.8511 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.54076 to 0.42109, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8481 - mae: 0.6461 - val_loss: 0.4211 - val_mae: 0.5085 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.42109\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.4703 - mae: 0.5311 - val_loss: 0.5508 - val_mae: 0.5848 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.42109 to 0.35483, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.7072 - mae: 0.7949 - val_loss: 0.3548 - val_mae: 0.4677 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.4748 - mae: 0.9871 - val_loss: 1.5464 - val_mae: 0.9410 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 9ms/step - loss: 2.7409 - mae: 1.1153 - val_loss: 2.1639 - val_mae: 1.1081 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.4645 - mae: 0.8689 - val_loss: 0.4512 - val_mae: 0.5284 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.35483\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.4200 - mae: 0.5024 - val_loss: 0.3920 - val_mae: 0.4962 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.3544 - mae: 0.7097 - val_loss: 1.0155 - val_mae: 0.7986 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.5715 - mae: 0.5540 - val_loss: 0.4889 - val_mae: 0.5643 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.8257 - mae: 0.7888 - val_loss: 3.1953 - val_mae: 0.7324 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.4443 - mae: 0.5099 - val_loss: 0.5553 - val_mae: 0.5809 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.1944 - mae: 0.6313 - val_loss: 0.3850 - val_mae: 0.4897 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.7032 - mae: 1.0123 - val_loss: 1.4533 - val_mae: 0.7731 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.7919 - mae: 0.6476 - val_loss: 1.3443 - val_mae: 0.5325 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 5.4397 - mae: 1.2534 - val_loss: 1.0925 - val_mae: 0.8030 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.2597 - mae: 0.7560 - val_loss: 0.6632 - val_mae: 0.5858 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1828 - mae: 0.6562 - val_loss: 2.5892 - val_mae: 1.2030 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.0867 - mae: 0.7126 - val_loss: 0.4286 - val_mae: 0.5159 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.6905 - mae: 0.8816 - val_loss: 0.5593 - val_mae: 0.5778 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.5546 - mae: 0.5679 - val_loss: 2.2997 - val_mae: 1.0658 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.4563 - mae: 0.9214 - val_loss: 0.5028 - val_mae: 0.5497 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.3934 - mae: 0.4868 - val_loss: 0.9847 - val_mae: 0.7281 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.6050 - mae: 1.1743 - val_loss: 1.3246 - val_mae: 0.8408 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.6198 - mae: 0.6015 - val_loss: 0.7691 - val_mae: 0.5612 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.3599 - mae: 0.4650 - val_loss: 0.7901 - val_mae: 0.4558 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2462 - mae: 0.3851 - val_loss: 0.9729 - val_mae: 0.4131 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.35483\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1787 - mae: 0.3280 - val_loss: 0.4999 - val_mae: 0.3372 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1363 - mae: 0.2875 - val_loss: 0.8145 - val_mae: 0.3183 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.35483\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1105 - mae: 0.2594 - val_loss: 0.7405 - val_mae: 0.2957 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.35483 to 0.30945, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1000 - mae: 0.2461 - val_loss: 0.3095 - val_mae: 0.2672 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.30945\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0858 - mae: 0.2282 - val_loss: 0.3859 - val_mae: 0.2472 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.30945 to 0.30009, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0763 - mae: 0.2155 - val_loss: 0.3001 - val_mae: 0.2372 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.30009\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0702 - mae: 0.2067 - val_loss: 0.3002 - val_mae: 0.2298 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.30009 to 0.20205, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0650 - mae: 0.1990 - val_loss: 0.2020 - val_mae: 0.2150 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.20205 to 0.12855, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0602 - mae: 0.1917 - val_loss: 0.1286 - val_mae: 0.1995 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.12855\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0539 - mae: 0.1815 - val_loss: 0.1768 - val_mae: 0.1944 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.12855\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0508 - mae: 0.1762 - val_loss: 0.1878 - val_mae: 0.1999 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.12855\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0458 - mae: 0.1675 - val_loss: 0.4379 - val_mae: 0.1836 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.12855\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0428 - mae: 0.1620 - val_loss: 0.2047 - val_mae: 0.1791 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.12855 to 0.04188, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0395 - mae: 0.1558 - val_loss: 0.0419 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.04188 to 0.03926, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0390 - mae: 0.1546 - val_loss: 0.0393 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.03926\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0370 - mae: 0.1508 - val_loss: 0.0658 - val_mae: 0.1613 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.03926 to 0.03612, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0356 - mae: 0.1478 - val_loss: 0.0361 - val_mae: 0.1479 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.03612\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0346 - mae: 0.1461 - val_loss: 0.0390 - val_mae: 0.1518 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.03612\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0318 - mae: 0.1399 - val_loss: 0.0934 - val_mae: 0.1525 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.03612\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0302 - mae: 0.1362 - val_loss: 0.0376 - val_mae: 0.1496 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.03612\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0291 - mae: 0.1342 - val_loss: 0.1933 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.03612\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0284 - mae: 0.1323 - val_loss: 0.2632 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.03612\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0270 - mae: 0.1291 - val_loss: 0.0825 - val_mae: 0.1392 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.03612\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0262 - mae: 0.1272 - val_loss: 0.1383 - val_mae: 0.1417 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.03612\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0262 - mae: 0.1270 - val_loss: 0.1291 - val_mae: 0.1394 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.03612 to 0.03289, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0249 - mae: 0.1238 - val_loss: 0.0329 - val_mae: 0.1264 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.03289\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0244 - mae: 0.1230 - val_loss: 0.1901 - val_mae: 0.1329 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.03289\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0237 - mae: 0.1208 - val_loss: 0.0520 - val_mae: 0.1246 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1215 - val_loss: 0.0350 - val_mae: 0.1369 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0238 - mae: 0.1210 - val_loss: 0.0633 - val_mae: 0.1280 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1212 - val_loss: 0.1023 - val_mae: 0.1366 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0224 - mae: 0.1175 - val_loss: 0.0793 - val_mae: 0.1403 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0222 - mae: 0.1170 - val_loss: 0.0535 - val_mae: 0.1241 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0231 - mae: 0.1191 - val_loss: 0.0505 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0257 - mae: 0.1243 - val_loss: 0.0523 - val_mae: 0.1216 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0218 - mae: 0.1157 - val_loss: 0.0463 - val_mae: 0.1295 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1164 - val_loss: 0.2758 - val_mae: 0.1386 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1159 - val_loss: 0.0638 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0207 - mae: 0.1130 - val_loss: 0.2118 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0203 - mae: 0.1118 - val_loss: 0.0743 - val_mae: 0.1335 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1110 - val_loss: 0.0568 - val_mae: 0.1297 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1114 - val_loss: 0.1487 - val_mae: 0.1300 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0201 - mae: 0.1112 - val_loss: 0.0425 - val_mae: 0.1405 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.03289\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0193 - mae: 0.1088 - val_loss: 0.1596 - val_mae: 0.1423 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.03289 to 0.03229, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1087 - val_loss: 0.0323 - val_mae: 0.1160 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.03229\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1080 - val_loss: 0.1200 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03229\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1082 - val_loss: 0.0379 - val_mae: 0.1184 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.03229 to 0.02536, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1077 - val_loss: 0.0254 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.02536 to 0.02413, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1074 - val_loss: 0.0241 - val_mae: 0.1208 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.02413 to 0.02376, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1072 - val_loss: 0.0238 - val_mae: 0.1197 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.02376 to 0.02070, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1071 - val_loss: 0.0207 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02070\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1059 - val_loss: 0.0213 - val_mae: 0.1100 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02070\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1080 - val_loss: 0.0336 - val_mae: 0.1081 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02070\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1051 - val_loss: 0.0262 - val_mae: 0.1134 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02070\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0185 - mae: 0.1064 - val_loss: 0.0250 - val_mae: 0.1214 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02070\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1059 - val_loss: 0.0231 - val_mae: 0.1113 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.02070 to 0.01851, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1049 - val_loss: 0.0185 - val_mae: 0.1052 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1044 - val_loss: 0.0227 - val_mae: 0.1126 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1042 - val_loss: 0.0219 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0198 - mae: 0.1091 - val_loss: 0.0355 - val_mae: 0.1321 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1066 - val_loss: 0.0459 - val_mae: 0.1172 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0195 - mae: 0.1085 - val_loss: 0.0357 - val_mae: 0.1354 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1052 - val_loss: 0.0283 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1047 - val_loss: 0.0230 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1040 - val_loss: 0.0207 - val_mae: 0.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1039 - val_loss: 0.0197 - val_mae: 0.1044 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1046 - val_loss: 0.0202 - val_mae: 0.1059 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1038 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1038 - val_loss: 0.0286 - val_mae: 0.1122 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1042 - val_loss: 0.0246 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1035 - val_loss: 0.0324 - val_mae: 0.1354 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1039 - val_loss: 0.0229 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0206 - mae: 0.1105 - val_loss: 0.0216 - val_mae: 0.1149 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1057 - val_loss: 0.0850 - val_mae: 0.1192 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1056 - val_loss: 0.0236 - val_mae: 0.1178 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0174 - mae: 0.1032 - val_loss: 0.0273 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01851\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1073 - val_loss: 0.0216 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.01851 to 0.01114, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0059 - mae: 0.0602 - val_loss: 0.0111 - val_mae: 0.0731 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01114\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0049 - mae: 0.0554 - val_loss: 0.0123 - val_mae: 0.0723 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.01114 to 0.01008, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0101 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0519 - val_loss: 0.0122 - val_mae: 0.0702 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0509 - val_loss: 0.0124 - val_mae: 0.0702 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0122 - val_mae: 0.0690 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0140 - val_mae: 0.0700 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0153 - val_mae: 0.0701 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0485 - val_loss: 0.0158 - val_mae: 0.0694 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0135 - val_mae: 0.0702 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0114 - val_mae: 0.0686 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0473 - val_loss: 0.0137 - val_mae: 0.0703 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0133 - val_mae: 0.0685 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0467 - val_loss: 0.0148 - val_mae: 0.0699 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0464 - val_loss: 0.0128 - val_mae: 0.0689 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0461 - val_loss: 0.0140 - val_mae: 0.0686 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0126 - val_mae: 0.0686 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0148 - val_mae: 0.0693 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0451 - val_loss: 0.0153 - val_mae: 0.0688 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0135 - val_mae: 0.0689 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01008\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0032 - mae: 0.0447 - val_loss: 0.0144 - val_mae: 0.0683 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0445 - val_loss: 0.0133 - val_mae: 0.0682 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0162 - val_mae: 0.0682 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0155 - val_mae: 0.0661 - learning_rate: 1.0000e-05\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0162 - val_mae: 0.0661 - learning_rate: 1.0000e-05\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0392 - val_loss: 0.0156 - val_mae: 0.0659 - learning_rate: 1.0000e-05\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0391 - val_loss: 0.0156 - val_mae: 0.0658 - learning_rate: 1.0000e-05\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0157 - val_mae: 0.0659 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0389 - val_loss: 0.0179 - val_mae: 0.0667 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0389 - val_loss: 0.0156 - val_mae: 0.0659 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0163 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0159 - val_mae: 0.0660 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0159 - val_mae: 0.0659 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0164 - val_mae: 0.0661 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0168 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0161 - val_mae: 0.0657 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0166 - val_mae: 0.0659 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0162 - val_mae: 0.0659 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0384 - val_loss: 0.0168 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0384 - val_loss: 0.0169 - val_mae: 0.0660 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0160 - val_mae: 0.0657 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0164 - val_mae: 0.0661 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0166 - val_mae: 0.0660 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0170 - val_mae: 0.0662 - learning_rate: 1.0000e-06\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0157 - val_mae: 0.0656 - learning_rate: 1.0000e-06\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0162 - val_mae: 0.0658 - learning_rate: 1.0000e-06\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0167 - val_mae: 0.0662 - learning_rate: 1.0000e-06\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0161 - val_mae: 0.0657 - learning_rate: 1.0000e-06\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0162 - val_mae: 0.0657 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0155 - val_mae: 0.0657 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0171 - val_mae: 0.0662 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0162 - val_mae: 0.0657 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01008\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0166 - val_mae: 0.0659 - learning_rate: 1.0000e-06\n",
      "Epoch 174: early stopping\n",
      "Restoring model weights from the end of the best epoch: 124.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1113 m\n",
      "Median positioning error: 0.1003 m\n",
      "90th percentile error: 0.1944 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6281.715348,
   "end_time": "2025-08-06T19:29:53.968424",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-06T17:45:12.253076",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
