{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cfbe6ebf",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-16T10:45:52.079162Z",
     "iopub.status.busy": "2025-08-16T10:45:52.078893Z",
     "iopub.status.idle": "2025-08-16T10:45:53.512162Z",
     "shell.execute_reply": "2025-08-16T10:45:53.511343Z"
    },
    "papermill": {
     "duration": 1.438259,
     "end_time": "2025-08-16T10:45:53.513528",
     "exception": false,
     "start_time": "2025-08-16T10:45:52.075269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6c5293e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:45:53.518860Z",
     "iopub.status.busy": "2025-08-16T10:45:53.518557Z",
     "iopub.status.idle": "2025-08-16T10:46:07.815970Z",
     "shell.execute_reply": "2025-08-16T10:46:07.815331Z"
    },
    "papermill": {
     "duration": 14.301338,
     "end_time": "2025-08-16T10:46:07.817360",
     "exception": false,
     "start_time": "2025-08-16T10:45:53.516022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-16 10:45:55.096508: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755341155.291464      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755341155.349114      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b686f75e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:46:07.822482Z",
     "iopub.status.busy": "2025-08-16T10:46:07.822019Z",
     "iopub.status.idle": "2025-08-16T10:46:07.826528Z",
     "shell.execute_reply": "2025-08-16T10:46:07.825825Z"
    },
    "papermill": {
     "duration": 0.00802,
     "end_time": "2025-08-16T10:46:07.827584",
     "exception": false,
     "start_time": "2025-08-16T10:46:07.819564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512 #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "15c19400",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:46:07.831889Z",
     "iopub.status.busy": "2025-08-16T10:46:07.831676Z",
     "iopub.status.idle": "2025-08-16T10:46:07.834906Z",
     "shell.execute_reply": "2025-08-16T10:46:07.834244Z"
    },
    "papermill": {
     "duration": 0.006616,
     "end_time": "2025-08-16T10:46:07.836028",
     "exception": false,
     "start_time": "2025-08-16T10:46:07.829412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7742f9ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:46:07.840901Z",
     "iopub.status.busy": "2025-08-16T10:46:07.840688Z",
     "iopub.status.idle": "2025-08-16T16:27:43.438456Z",
     "shell.execute_reply": "2025-08-16T16:27:43.437627Z"
    },
    "papermill": {
     "duration": 20495.601988,
     "end_time": "2025-08-16T16:27:43.439854",
     "exception": false,
     "start_time": "2025-08-16T10:46:07.837866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755341193.073863      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755341202.365170      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755341213.168776      56 service.cc:148] XLA service 0x7d2e5c016de0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755341213.169464      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755341217.079452      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 11.37711, saving model to models/best_model_full.keras\n",
      "4375/4375 - 88s - 20ms/step - loss: 56.9716 - mae: 4.9358 - val_loss: 11.3771 - val_mae: 2.6941 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 11.37711 to 3.55118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 6.2722 - mae: 1.9308 - val_loss: 3.5512 - val_mae: 1.4645 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 3.55118 to 1.56683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 2.8309 - mae: 1.3043 - val_loss: 1.5668 - val_mae: 0.9687 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 1.56683 to 0.89857, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 1.6291 - mae: 0.9883 - val_loss: 0.8986 - val_mae: 0.7364 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 0.89857\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.9793 - mae: 0.7668 - val_loss: 1.0049 - val_mae: 0.7589 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 0.89857\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.8338 - mae: 0.7092 - val_loss: 1.2483 - val_mae: 0.9012 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.89857 to 0.63407, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.6009 - mae: 0.6038 - val_loss: 0.6341 - val_mae: 0.6230 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.63407 to 0.51445, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.7375 - mae: 0.6289 - val_loss: 0.5145 - val_mae: 0.5603 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.51445\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.4554 - mae: 0.5249 - val_loss: 0.5775 - val_mae: 0.6194 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.51445 to 0.31281, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.4493 - mae: 0.5216 - val_loss: 0.3128 - val_mae: 0.4367 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.31281\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3625 - mae: 0.4689 - val_loss: 0.5523 - val_mae: 0.5919 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.31281\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.5425 - mae: 0.5462 - val_loss: 0.3301 - val_mae: 0.4511 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.31281\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3133 - mae: 0.4359 - val_loss: 0.3354 - val_mae: 0.4455 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.31281 to 0.24360, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.5648 - mae: 0.4967 - val_loss: 0.2436 - val_mae: 0.3886 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.24360\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3060 - mae: 0.4314 - val_loss: 0.3965 - val_mae: 0.4966 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.24360\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3297 - mae: 0.4466 - val_loss: 0.6650 - val_mae: 0.6647 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.24360\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3147 - mae: 0.4361 - val_loss: 0.3922 - val_mae: 0.4699 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.24360\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3223 - mae: 0.4395 - val_loss: 0.3388 - val_mae: 0.4548 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.24360\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.4984 - mae: 0.4888 - val_loss: 0.3617 - val_mae: 0.4765 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.24360 to 0.23911, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2737 - mae: 0.4094 - val_loss: 0.2391 - val_mae: 0.3847 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.23911\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.5722 - mae: 0.4924 - val_loss: 0.2802 - val_mae: 0.4110 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.23911\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2924 - mae: 0.4201 - val_loss: 0.2704 - val_mae: 0.3926 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.23911 to 0.19845, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3068 - mae: 0.4311 - val_loss: 0.1985 - val_mae: 0.3546 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3277 - mae: 0.4397 - val_loss: 0.5269 - val_mae: 0.5702 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2892 - mae: 0.4181 - val_loss: 0.2971 - val_mae: 0.4096 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.8444 - mae: 0.5884 - val_loss: 0.5783 - val_mae: 0.5933 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3341 - mae: 0.4513 - val_loss: 0.3402 - val_mae: 0.4534 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3058 - mae: 0.4310 - val_loss: 0.4434 - val_mae: 0.5174 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3005 - mae: 0.4243 - val_loss: 0.3534 - val_mae: 0.4708 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2894 - mae: 0.4145 - val_loss: 0.2789 - val_mae: 0.4204 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2700 - mae: 0.4021 - val_loss: 0.2531 - val_mae: 0.3977 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2524 - mae: 0.3915 - val_loss: 0.2956 - val_mae: 0.4264 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2587 - mae: 0.3910 - val_loss: 0.2786 - val_mae: 0.4136 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.4169 - mae: 0.4316 - val_loss: 0.2657 - val_mae: 0.4008 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2361 - mae: 0.3784 - val_loss: 0.2569 - val_mae: 0.3967 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3030 - mae: 0.4231 - val_loss: 0.3953 - val_mae: 0.4956 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2931 - mae: 0.4144 - val_loss: 0.5356 - val_mae: 0.5601 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.19845\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2562 - mae: 0.3911 - val_loss: 0.3159 - val_mae: 0.4348 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.19845 to 0.16273, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2889 - mae: 0.4125 - val_loss: 0.1627 - val_mae: 0.3159 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2782 - mae: 0.4079 - val_loss: 0.2559 - val_mae: 0.4021 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.6596 - mae: 0.5021 - val_loss: 0.3149 - val_mae: 0.4357 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2372 - mae: 0.3798 - val_loss: 0.1870 - val_mae: 0.3373 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2622 - mae: 0.3980 - val_loss: 0.4156 - val_mae: 0.4957 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.6494 - mae: 0.4851 - val_loss: 1.0037 - val_mae: 0.7598 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3660 - mae: 0.4627 - val_loss: 0.2844 - val_mae: 0.4181 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2947 - mae: 0.4224 - val_loss: 0.4376 - val_mae: 0.5260 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 1.0648 - mae: 0.5987 - val_loss: 0.3838 - val_mae: 0.4108 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2492 - mae: 0.3898 - val_loss: 0.2521 - val_mae: 0.3968 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2955 - mae: 0.4111 - val_loss: 0.3580 - val_mae: 0.4655 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2779 - mae: 0.4091 - val_loss: 0.4733 - val_mae: 0.5305 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3021 - mae: 0.4245 - val_loss: 0.3359 - val_mae: 0.4495 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3376 - mae: 0.4438 - val_loss: 0.4868 - val_mae: 0.5628 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.7566 - mae: 0.5580 - val_loss: 0.9651 - val_mae: 0.4515 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.8080 - mae: 0.5446 - val_loss: 1.0211 - val_mae: 0.7827 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3358 - mae: 0.4509 - val_loss: 0.3249 - val_mae: 0.4506 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3107 - mae: 0.4325 - val_loss: 0.4558 - val_mae: 0.5206 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.3219 - mae: 0.4354 - val_loss: 0.2035 - val_mae: 0.3563 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.6632 - mae: 0.5047 - val_loss: 0.3147 - val_mae: 0.4313 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.16273\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2563 - mae: 0.3942 - val_loss: 0.4758 - val_mae: 0.5491 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.16273 to 0.06987, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0714 - mae: 0.2080 - val_loss: 0.0699 - val_mae: 0.2084 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.06987 to 0.04615, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0455 - mae: 0.1677 - val_loss: 0.0462 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.04615 to 0.03691, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0356 - mae: 0.1484 - val_loss: 0.0369 - val_mae: 0.1503 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.03691 to 0.03579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0298 - mae: 0.1359 - val_loss: 0.0358 - val_mae: 0.1503 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.03579 to 0.02749, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0260 - mae: 0.1271 - val_loss: 0.0275 - val_mae: 0.1294 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.02749 to 0.02706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0235 - mae: 0.1206 - val_loss: 0.0271 - val_mae: 0.1290 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.02706 to 0.02467, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0219 - mae: 0.1166 - val_loss: 0.0247 - val_mae: 0.1234 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.02467 to 0.02330, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0203 - mae: 0.1124 - val_loss: 0.0233 - val_mae: 0.1200 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.02330\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0194 - mae: 0.1100 - val_loss: 0.0239 - val_mae: 0.1214 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.02330 to 0.02236, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0181 - mae: 0.1061 - val_loss: 0.0224 - val_mae: 0.1173 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.02236 to 0.02065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0174 - mae: 0.1042 - val_loss: 0.0206 - val_mae: 0.1126 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.02065 to 0.01885, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0168 - mae: 0.1022 - val_loss: 0.0188 - val_mae: 0.1080 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.01885\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0162 - mae: 0.1006 - val_loss: 0.0236 - val_mae: 0.1212 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.01885\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0159 - mae: 0.0991 - val_loss: 0.0211 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.01885\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0152 - mae: 0.0971 - val_loss: 0.0195 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.01885 to 0.01800, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0149 - mae: 0.0962 - val_loss: 0.0180 - val_mae: 0.1053 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.01800 to 0.01745, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0147 - mae: 0.0956 - val_loss: 0.0174 - val_mae: 0.1039 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.01745\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0143 - mae: 0.0944 - val_loss: 0.0182 - val_mae: 0.1069 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.01745 to 0.01711, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0139 - mae: 0.0931 - val_loss: 0.0171 - val_mae: 0.1025 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.01711\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0137 - mae: 0.0924 - val_loss: 0.0182 - val_mae: 0.1054 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.01711\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0137 - mae: 0.0922 - val_loss: 0.0201 - val_mae: 0.1101 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.01711\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0134 - mae: 0.0912 - val_loss: 0.0200 - val_mae: 0.1112 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.01711 to 0.01577, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0131 - mae: 0.0901 - val_loss: 0.0158 - val_mae: 0.0984 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.01577 to 0.01571, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0133 - mae: 0.0906 - val_loss: 0.0157 - val_mae: 0.0975 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.01571 to 0.01550, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0129 - mae: 0.0895 - val_loss: 0.0155 - val_mae: 0.0972 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.01550\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0127 - mae: 0.0889 - val_loss: 0.0175 - val_mae: 0.1045 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.01550\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0126 - mae: 0.0886 - val_loss: 0.0157 - val_mae: 0.0978 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01550\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0123 - mae: 0.0875 - val_loss: 0.0168 - val_mae: 0.1018 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01550\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0125 - mae: 0.0881 - val_loss: 0.0169 - val_mae: 0.1015 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01550\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0122 - mae: 0.0871 - val_loss: 0.0166 - val_mae: 0.1007 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01550\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0123 - mae: 0.0875 - val_loss: 0.0168 - val_mae: 0.1018 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.01550 to 0.01449, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0122 - mae: 0.0868 - val_loss: 0.0145 - val_mae: 0.0939 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.01449\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0122 - mae: 0.0866 - val_loss: 0.0158 - val_mae: 0.0976 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.01449\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0119 - mae: 0.0858 - val_loss: 0.0162 - val_mae: 0.1003 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01449\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0122 - mae: 0.0869 - val_loss: 0.0182 - val_mae: 0.1054 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01449\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0119 - mae: 0.0859 - val_loss: 0.0168 - val_mae: 0.1009 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01449\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0119 - mae: 0.0860 - val_loss: 0.0163 - val_mae: 0.1003 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01449\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0118 - mae: 0.0853 - val_loss: 0.0225 - val_mae: 0.1190 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.01449\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0117 - mae: 0.0848 - val_loss: 0.0146 - val_mae: 0.0946 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.01449 to 0.01419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0119 - mae: 0.0855 - val_loss: 0.0142 - val_mae: 0.0934 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0117 - mae: 0.0851 - val_loss: 0.0178 - val_mae: 0.1045 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0119 - mae: 0.0856 - val_loss: 0.0175 - val_mae: 0.1048 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0118 - mae: 0.0852 - val_loss: 0.0147 - val_mae: 0.0946 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0117 - mae: 0.0851 - val_loss: 0.0169 - val_mae: 0.1027 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0117 - mae: 0.0849 - val_loss: 0.0149 - val_mae: 0.0958 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0118 - mae: 0.0852 - val_loss: 0.0160 - val_mae: 0.0990 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0119 - mae: 0.0856 - val_loss: 0.0143 - val_mae: 0.0941 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0119 - mae: 0.0855 - val_loss: 0.0148 - val_mae: 0.0953 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0118 - mae: 0.0851 - val_loss: 0.0194 - val_mae: 0.1093 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0120 - mae: 0.0856 - val_loss: 0.0161 - val_mae: 0.1001 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0118 - mae: 0.0852 - val_loss: 0.0180 - val_mae: 0.1051 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01419\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0120 - mae: 0.0857 - val_loss: 0.0181 - val_mae: 0.1049 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01419\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0120 - mae: 0.0859 - val_loss: 0.0175 - val_mae: 0.1035 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.01419 to 0.01402, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0119 - mae: 0.0854 - val_loss: 0.0140 - val_mae: 0.0918 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01402\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0120 - mae: 0.0856 - val_loss: 0.0146 - val_mae: 0.0947 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01402\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0120 - mae: 0.0856 - val_loss: 0.0145 - val_mae: 0.0947 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01402\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0122 - mae: 0.0865 - val_loss: 0.0172 - val_mae: 0.1023 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01402\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0119 - mae: 0.0852 - val_loss: 0.0168 - val_mae: 0.1010 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01402\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0122 - mae: 0.0862 - val_loss: 0.0156 - val_mae: 0.0974 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01402\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0122 - mae: 0.0863 - val_loss: 0.0163 - val_mae: 0.0991 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01402\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0123 - mae: 0.0867 - val_loss: 0.0180 - val_mae: 0.1054 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.01402 to 0.01387, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0122 - mae: 0.0863 - val_loss: 0.0139 - val_mae: 0.0923 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0124 - mae: 0.0868 - val_loss: 0.0144 - val_mae: 0.0936 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0123 - mae: 0.0865 - val_loss: 0.0180 - val_mae: 0.1055 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0123 - mae: 0.0866 - val_loss: 0.0154 - val_mae: 0.0959 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0124 - mae: 0.0871 - val_loss: 0.0178 - val_mae: 0.1033 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0126 - mae: 0.0876 - val_loss: 0.0167 - val_mae: 0.1012 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0123 - mae: 0.0867 - val_loss: 0.0160 - val_mae: 0.0992 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0126 - mae: 0.0876 - val_loss: 0.0170 - val_mae: 0.1020 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0124 - mae: 0.0871 - val_loss: 0.0144 - val_mae: 0.0937 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0125 - mae: 0.0873 - val_loss: 0.0165 - val_mae: 0.1015 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0127 - mae: 0.0881 - val_loss: 0.0178 - val_mae: 0.1040 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0126 - mae: 0.0875 - val_loss: 0.0173 - val_mae: 0.1022 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0125 - mae: 0.0873 - val_loss: 0.0142 - val_mae: 0.0930 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0129 - mae: 0.0885 - val_loss: 0.0175 - val_mae: 0.1025 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01387\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0127 - mae: 0.0880 - val_loss: 0.0151 - val_mae: 0.0965 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0127 - mae: 0.0878 - val_loss: 0.0191 - val_mae: 0.1082 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0128 - mae: 0.0883 - val_loss: 0.0172 - val_mae: 0.1031 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0128 - mae: 0.0881 - val_loss: 0.0204 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0129 - mae: 0.0887 - val_loss: 0.0148 - val_mae: 0.0944 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0131 - mae: 0.0891 - val_loss: 0.0174 - val_mae: 0.1030 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01387\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0129 - mae: 0.0884 - val_loss: 0.0174 - val_mae: 0.1032 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.01387 to 0.00733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0036 - mae: 0.0466 - val_loss: 0.0073 - val_mae: 0.0665 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.00733 to 0.00702, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0027 - mae: 0.0414 - val_loss: 0.0070 - val_mae: 0.0651 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00702\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0025 - mae: 0.0392 - val_loss: 0.0071 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss improved from 0.00702 to 0.00697, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.00697 to 0.00678, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0068 - val_mae: 0.0640 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00678\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0357 - val_loss: 0.0068 - val_mae: 0.0643 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00678\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0068 - val_mae: 0.0641 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.00678 to 0.00677, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0018 - mae: 0.0341 - val_loss: 0.0068 - val_mae: 0.0638 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00677\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0069 - val_mae: 0.0646 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.00677 to 0.00674, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0017 - mae: 0.0329 - val_loss: 0.0067 - val_mae: 0.0635 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0068 - val_mae: 0.0636 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0068 - val_mae: 0.0636 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0313 - val_loss: 0.0068 - val_mae: 0.0639 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0068 - val_mae: 0.0639 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0304 - val_loss: 0.0068 - val_mae: 0.0635 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0068 - val_mae: 0.0638 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0068 - val_mae: 0.0638 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0014 - mae: 0.0293 - val_loss: 0.0068 - val_mae: 0.0636 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0013 - mae: 0.0289 - val_loss: 0.0068 - val_mae: 0.0637 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0069 - val_mae: 0.0645 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00674\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0068 - val_mae: 0.0636 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.00674 to 0.00673, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0012 - mae: 0.0280 - val_loss: 0.0067 - val_mae: 0.0634 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00673\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0012 - mae: 0.0278 - val_loss: 0.0068 - val_mae: 0.0640 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00673\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0012 - mae: 0.0274 - val_loss: 0.0068 - val_mae: 0.0639 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00673\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0012 - mae: 0.0271 - val_loss: 0.0068 - val_mae: 0.0635 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.00673 to 0.00654, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1896e-04 - mae: 0.0226 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.00654 to 0.00653, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.8631e-04 - mae: 0.0221 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.00653 to 0.00653, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.7302e-04 - mae: 0.0219 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00653\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.6406e-04 - mae: 0.0218 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00653\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.5780e-04 - mae: 0.0217 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.00653 to 0.00652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.5185e-04 - mae: 0.0216 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.4682e-04 - mae: 0.0215 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.4138e-04 - mae: 0.0214 - val_loss: 0.0066 - val_mae: 0.0625 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.3615e-04 - mae: 0.0214 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.3365e-04 - mae: 0.0213 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.2945e-04 - mae: 0.0213 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.2597e-04 - mae: 0.0212 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.2215e-04 - mae: 0.0212 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.1917e-04 - mae: 0.0211 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.1569e-04 - mae: 0.0210 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.1326e-04 - mae: 0.0210 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.1016e-04 - mae: 0.0210 - val_loss: 0.0066 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.0686e-04 - mae: 0.0209 - val_loss: 0.0066 - val_mae: 0.0625 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.0433e-04 - mae: 0.0209 - val_loss: 0.0066 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 7.0104e-04 - mae: 0.0208 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.9870e-04 - mae: 0.0208 - val_loss: 0.0066 - val_mae: 0.0624 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6823e-04 - mae: 0.0203 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6426e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6360e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6288e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6219e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6193e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6149e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6106e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6071e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0624 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.6050e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5998e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.00652 to 0.00652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5988e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5963e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5940e-04 - mae: 0.0202 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5874e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5844e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5825e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5802e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5774e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5722e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00652\n",
      "4375/4375 - 75s - 17ms/step - loss: 6.5436e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5374e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5352e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.00652 to 0.00652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5343e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0622 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5334e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5328e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5322e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5319e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5311e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5312e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5305e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5308e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5306e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00652\n",
      "4375/4375 - 75s - 17ms/step - loss: 6.5301e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00652\n",
      "4375/4375 - 75s - 17ms/step - loss: 6.5292e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00652\n",
      "4375/4375 - 75s - 17ms/step - loss: 6.5294e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5292e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00652\n",
      "4375/4375 - 75s - 17ms/step - loss: 6.5288e-04 - mae: 0.0201 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5281e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5283e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00652\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5279e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.00652 to 0.00651, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5276e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0622 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5273e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5269e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5270e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5263e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5261e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5256e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5256e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5255e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5249e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5245e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5245e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5243e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5239e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0622 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5233e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5233e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5230e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0622 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5229e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5223e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5222e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5221e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5216e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5214e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5210e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5208e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5206e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5204e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5200e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5198e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5194e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0622 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5189e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00651\n",
      "4375/4375 - 75s - 17ms/step - loss: 6.5192e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00651\n",
      "4375/4375 - 76s - 17ms/step - loss: 6.5185e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00651\n",
      "4375/4375 - 76s - 17ms/step - loss: 6.5185e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5178e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5180e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5174e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5171e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5173e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5167e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5161e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5161e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5160e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0622 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5153e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5154e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5147e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5150e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5144e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5143e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5140e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00651\n",
      "4375/4375 - 74s - 17ms/step - loss: 6.5137e-04 - mae: 0.0200 - val_loss: 0.0065 - val_mae: 0.0623 - learning_rate: 1.0000e-07\n",
      "Epoch 279: early stopping\n",
      "Restoring model weights from the end of the best epoch: 229.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 5s - 8ms/step\n",
      "Mean positioning error: 0.0982 m\n",
      "Median positioning error: 0.0890 m\n",
      "90th percentile error: 0.1758 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAB5O0lEQVR4nO3deXwTdf7H8fckvW/K0YKUS24QVBSseKCggIooeCEKrqirAi7itayrorsueKy6CuLxQ7oHiKKCeCIgoHILgtwKAgWhLVdPaNom8/sjTWigpaVNOm15PR+PbJOZbyafDF34+Jnv9zOGaZqmAAAAAAAAgGpkszoAAAAAAAAAnHkoSgEAAAAAAKDaUZQCAAAAAABAtaMoBQAAAAAAgGpHUQoAAAAAAADVjqIUAAAAAAAAqh1FKQAAAAAAAFQ7ilIAAAAAAACodhSlAAAAAAAAUO0oSgGokwzD0Pjx40/7fbt27ZJhGEpJSfF7TAAAADUJ+RIAq1GUAhAwKSkpMgxDhmHohx9+OGm/aZpKSkqSYRi67rrrLIiw8hYvXizDMPTRRx9ZHQoAAKjFzoR8yTAM/e9//yt1TM+ePWUYhjp37lzqfqfTqSZNmsgwDH311Veljhk/frz3c0p7pKWl+e07AfCvIKsDAFD3hYWFacaMGbrkkkt8ti9ZskR79+5VaGioRZEBAADUDHU5X/J8tzvuuMNn+65du7Rs2TKFhYWV+d5vv/1W+/fvV4sWLTR9+nT179+/zLFTpkxRVFTUSdvj4uIqHTuAwKIoBSDgrrnmGs2aNUuvv/66goKO/7UzY8YMdevWTQcPHrQwOgAAAOvV5Xzpmmuu0dy5c3Xw4EE1aNDAu33GjBlKSEhQmzZtdOTIkVLf+7///U/nn3++hg8frr/85S/Ky8tTZGRkqWNvuukmn+MDqPlYvgcg4IYMGaJDhw5p/vz53m0FBQX66KOPdPvtt5f6nry8PD3yyCNKSkpSaGio2rVrp5dfflmmafqMczgcevjhh9WwYUNFR0fr+uuv1969e0s95u+//667775bCQkJCg0NVadOnfTee+/574uW4rffftPNN9+s+Ph4RURE6KKLLtIXX3xx0rg33nhDnTp1UkREhOrVq6cLLrhAM2bM8O7PycnRmDFj1KJFC4WGhqpRo0a66qqrtHbt2oDGDwAAqkddzpcGDhyo0NBQzZo1y2f7jBkzdMstt8hut5f6vmPHjmn27Nm67bbbdMstt+jYsWP69NNPqxQLgJqFohSAgGvRooWSk5P1/vvve7d99dVXysrK0m233XbSeNM0df311+vVV19Vv3799Morr6hdu3Z67LHHNHbsWJ+x99xzj1577TVdffXVmjhxooKDg3XttdeedMz09HRddNFFWrBggUaNGqV//etfat26tUaMGKHXXnvN79/Z85kXX3yx5s2bpwcffFDPP/+88vPzdf3112v27Nnece+++64eeughdezYUa+99pqeffZZnXvuuVq5cqV3zP33368pU6Zo8ODBevPNN/Xoo48qPDxcW7ZsCUjsAACgetXlfCkiIkIDBw70+W7r16/Xpk2byiy4SdLcuXOVm5ur2267TYmJierVq5emT59e5vjDhw/r4MGDPo/MzMxKxw2gGpgAECDTpk0zJZmrV682J02aZEZHR5tHjx41TdM0b775ZvOKK64wTdM0mzdvbl577bXe982ZM8eUZP7973/3Od5NN91kGoZhbt++3TRN01y3bp0pyXzwwQd9xt1+++2mJPOZZ57xbhsxYoTZuHFj8+DBgz5jb7vtNjM2NtYb186dO01J5rRp00753RYtWmRKMmfNmlXmmDFjxpiSzO+//967LScnx2zZsqXZokUL0+l0mqZpmgMHDjQ7dep0ys+LjY01R44cecoxAACg9jlT8qXPP//cNAzDTE1NNU3TNB977DGzVatWpmma5uWXX15qLnTdddeZPXv29L5+5513zKCgIDMjI8Nn3DPPPGNKKvXRrl27U8YIwFrMlAJQLTxTrj///HPl5OTo888/L/PK2Jdffim73a6HHnrIZ/sjjzwi0zS9d1758ssvJemkcWPGjPF5bZqmPv74Yw0YMECmafpcPevbt6+ysrICsgzuyy+/VPfu3X0alkZFRem+++7Trl27tHnzZknu5pt79+7V6tWryzxWXFycVq5cqX379vk9TgAAUDPU5Xzp6quvVnx8vGbOnCnTNDVz5kwNGTKkzPGHDh3SvHnzfMYMHjxYhmHoww8/LPU9H3/8sebPn+/zmDZtWqVjBhB4NDoHUC0aNmyoPn36aMaMGTp69KicTqduuummUsfu3r1bTZo0UXR0tM/2Dh06ePd7ftpsNp199tk+49q1a+fz+sCBA8rMzNQ777yjd955p9TPzMjIqNT3OpXdu3erR48eJ20v+T06d+6sJ554QgsWLFD37t3VunVrXX311br99tvVs2dP73tefPFFDR8+XElJSerWrZuuueYaDRs2TK1atfJ73AAAwBp1OV8KDg7WzTffrBkzZqh79+7as2fPKZfuffDBByosLNR5552n7du3e7f36NFD06dP18iRI096z2WXXUajc6CWoSgFoNrcfvvtuvfee5WWlqb+/ftX2+15XS6XJOmOO+7Q8OHDSx3TpUuXaomlNB06dNC2bdv0+eef6+uvv9bHH3+sN998U08//bSeffZZSe4rp5deeqlmz56tb775Ri+99JJeeOEFffLJJ6e8NTIAAKhd6nK+dPvtt+utt97S+PHj1bVrV3Xs2LHMsZ7eUSUv0pX022+/cXEOqAMoSgGoNjfeeKP++Mc/asWKFfrggw/KHNe8eXMtWLBAOTk5Plf/tm7d6t3v+elyubRjxw6fq33btm3zOZ7nTjNOp1N9+vTx51c6pebNm58Ui3Ty95CkyMhI3Xrrrbr11ltVUFCgQYMG6fnnn9e4ceMUFhYmSWrcuLEefPBBPfjgg8rIyND555+v559/nqIUAAB1SF3Oly655BI1a9ZMixcv1gsvvFDmuJ07d2rZsmUaNWqULr/8cp99LpdLd955p2bMmKG//vWvAYkTQPWhpxSAahMVFaUpU6Zo/PjxGjBgQJnjrrnmGjmdTk2aNMln+6uvvirDMLxFGM/P119/3WfciXeHsdvtGjx4sD7++GNt3LjxpM87cOBAZb5Oua655hqtWrVKy5cv927Ly8vTO++8oxYtWnivDh46dMjnfSEhIerYsaNM01RhYaGcTqeysrJ8xjRq1EhNmjSRw+EISOwAAMAadTlfMgxDr7/+up555hndeeedZY7zzJJ6/PHHddNNN/k8brnlFl1++eWnvAsfgNqDmVIAqlVZ08FLGjBggK644go9+eST2rVrl7p27apvvvlGn376qcaMGePtiXDuuedqyJAhevPNN5WVlaWLL75YCxcu9Ok74DFx4kQtWrRIPXr00L333quOHTvq8OHDWrt2rRYsWKDDhw9X6vt8/PHH3iuSJ37PP//5z3r//ffVv39/PfTQQ4qPj9e///1v7dy5Ux9//LFsNvd1gauvvlqJiYnq2bOnEhIStGXLFk2aNEnXXnutoqOjlZmZqaZNm+qm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FgBYxTRNHS0osuRh+vHv/z//+c+aOHGitmzZoi5duig3N1fXXHONFi5cqJ9++kn9+vXTgAEDSr1iVtKzzz6rW265RT///LOuueYaDR06VIcPl9378OjRo3r55Zf13//+V999951SU1P16KOPeve/8MILmj59uqZNm6alS5cqOztbc+bMqdJ3veuuu/Tjjz9q7ty5Wr58uUzT1DXXXKPCwkJJ0siRI+VwOPTdd99pw4YNeuGFF7xXR5966ilt3rxZX331lbZs2aIpU6aoQYMGVYoHgWUvvornz/+/AABOD/mSr5qUL9155536/vvvvTF//PHHatGihc4///yTxubk5GjWrFm64447dNVVVykrK0vff/99hT6nJmL5XhXZPFUpciwAsMyxQqc6Pj3Pks/e/FxfRYT455/T5557TldddZX3dXx8vLp27ep9/be//U2zZ8/W3LlzNWrUqDKPc9ddd3mnf//jH//Q66+/rlWrVqlfv36lji8sLNRbb73lnVkzatQon+neb7zxhsaNG6cbb7xRkjRp0iTvrKXK+PXXXzV37lwtXbpUF198sSRp+vTpSkpK0pw5c3TzzTcrNTVVgwcP1jnnnCNJatWqlff9qampOu+883TBBRdIcl/9RM3mSZecTC0HAMuQL/mqSflSo0aN1L9/f6WkpOjpp5/We++9p7vvvrvUsTNnzlSbNm3UqVMnSdJtt92mqVOn6tJLL/UZ9+abb+r//u//fLa9/fbbGjp0aIViqi7MlKoiekoBAPzFU2TxyM3N1aOPPqoOHTooLi5OUVFR2rJlS7lX/rp06eJ9HhkZqZiYGGVkZJQ5PiIiwmepV+PGjb3js7KylJ6eru7du3v32+12devW7bS+W0lbtmxRUFCQevTo4d1Wv359tWvXTlu2bJEkPfTQQ/r73/+unj176plnntHPP//sHfvAAw9o5syZOvfcc/X4449r2bJllY4F1cMzU4qiFACgqupqvnT33XcrJSVFv/32m5YvX15m8ei9997THXfc4X19xx13aNasWcrJyfEZN3ToUK1bt87ncf3111c4nurCTKkqoqcUAFgvPNiuzc/1teyz/SUyMtLn9aOPPqr58+fr5ZdfVuvWrRUeHq6bbrpJBQUFpzxOcHCwz2vDMORyld1hurTxVi+zuueee9S3b1998cUX+uabbzRhwgT985//1OjRo9W/f3/t3r1bX375pebPn6/evXtr5MiRevnlly2NGWXz9JTiGh4AWId8yVdNy5f69++v++67TyNGjNCAAQNUv379k8Zs3rxZK1as0KpVq3yamzudTs2cOVP33nuvd1tsbKxat27tt/gChZlSVWRjphQAWM4wDEWEBFnyKOs2vf6wdOlS3XXXXbrxxht1zjnnKDExUbt27QrY55UmNjZWCQkJWr16tXeb0+nU2rVrK33MDh06qKioSCtXrvRuO3TokLZt26aOHTt6tyUlJen+++/XJ598okceeUTvvvuud1/Dhg01fPhw/e9//9Nrr72md955p9LxIPAMGp0DgOXIlwLHH/lSUFCQhg0bpsWLF5e5dG/q1Km67LLLtH79ep8ZUGPHjtXUqVOr/D2swEypKvL8X8vqK8oAgLqnTZs2+uSTTzRgwAAZhqGnnnrqlFfwAmX06NGaMGGCWrdurfbt2+uNN97QkSNHKpRgbtiwQdHR0d7XhmGoa9euGjhwoO699169/fbbio6O1p///GedddZZGjhwoCRpzJgx6t+/v9q2basjR45o0aJF6tChgyTp6aefVrdu3dSpUyc5HA59/vnn3n2omezFl0FZvgcA8Le6kC95/O1vf9Njjz1W6iypwsJC/fe//9Vzzz2nzp07++y755579Morr2jTpk3eXlNHjx5VWlqaz7jQ0FDVq1evEt8ucJgpVUU2pqMDAALklVdeUb169XTxxRdrwIAB6tu3b6l3YQm0J554QkOGDNGwYcOUnJysqKgo9e3bV2FhYeW+97LLLtN5553nfXh6K0ybNk3dunXTddddp+TkZJmmqS+//NI7Nd7pdGrkyJHq0KGD+vXrp7Zt2+rNN9+UJIWEhGjcuHHq0qWLLrvsMtntds2cOTNwJwBVxt33AACBUhfyJY+QkBA1aNCg1ELW3LlzdejQIW8j9ZI6dOigDh06+MyWevfdd9W4cWOfh6exe01imHU8O8jOzlZsbKyysrIUExPj9+Pf+vZyrdx5WJNvP1/Xdmns9+MDAHzl5+dr586datmy5Wn9Iw//cblc6tChg2655Rb97W9/szqcgDjV71mgcwsrBPo7/WX2Bs1YmaqH+7TVn/q08fvxAQAnI2eyFvlSxXILlu9VET2lAAB13e7du/XNN9/o8ssvl8Ph0KRJk7Rz507dfvvtVoeGWsJOTykAQB1HvlQ5LN+rIlvxGaQoBQCoq2w2m1JSUnThhReqZ8+e2rBhgxYsWEAfJ1QYy/cAAHUd+VLlMFOqigzRUwoAULclJSVp6dKlVoeBWszTGoNG5wCAuop8qXKYKVVFniSLmVIAAAClY/keAAAoDUWpKuLuewAAAKdms5EvAQCAk1GUqiIbM6UAAABOyXMRj+V7AACgJIpSVcRMKQAAgFOzF2ecFKUAAEBJFKWqyCguSjFTCgAAoHTHL+KRLwEAgOMoSlXR8Ubn1sYBAABQU9lodA4AAEpBUaqK6CkFAKhOvXr10pgxY7yvW7Rooddee+2U7zEMQ3PmzKnyZ/vrODjz2G2emeUWBwIAOCOQL9UeFKWqyDsd3eI4AAA124ABA9SvX79S933//fcyDEM///zzaR939erVuu+++6oano/x48fr3HPPPWn7/v371b9/f79+1olSUlIUFxcX0M9A9fNexKMqBQA4BfKliklJSZFhGOrQocNJ+2bNmiXDMNSiRYuT9h07dkzx8fFq0KCBHA7HSftbtGghwzBOekycODEQX0MSRakqo0cCAKAiRowYofnz52vv3r0n7Zs2bZouuOACdenS5bSP27BhQ0VERPgjxHIlJiYqNDS0Wj4LdYvNxt33AADlI1+quMjISGVkZGj58uU+26dOnapmzZqV+p6PP/5YnTp1Uvv27cuczfXcc89p//79Po/Ro0f7O3wvilJVZHDlDwBQAdddd50aNmyolJQUn+25ubmaNWuWRowYoUOHDmnIkCE666yzFBERoXPOOUfvv//+KY974nT0X3/9VZdddpnCwsLUsWNHzZ8//6T3PPHEE2rbtq0iIiLUqlUrPfXUUyosLJTkvvL27LPPav369d6rY56YT5yOvmHDBl155ZUKDw9X/fr1dd999yk3N9e7/6677tINN9ygl19+WY0bN1b9+vU1cuRI72dVRmpqqgYOHKioqCjFxMTolltuUXp6unf/+vXrdcUVVyg6OloxMTHq1q2bfvzxR0nS7t27NWDAANWrV0+RkZHq1KmTvvzyy0rHgoqzGyzfAwCUj3yp4vlSUFCQbr/9dr333nvebXv37tXixYt1++23l/qeqVOn6o477tAdd9yhqVOnljomOjpaiYmJPo/IyMhTxlIVQQE78hnCIMkCAOuZplR41JrPDo44foXiFIKCgjRs2DClpKToySef9P77MWvWLDmdTg0ZMkS5ubnq1q2bnnjiCcXExOiLL77QnXfeqbPPPlvdu3cv9zNcLpcGDRqkhIQErVy5UllZWT79FDyio6OVkpKiJk2aaMOGDbr33nsVHR2txx9/XLfeeqs2btyor7/+WgsWLJAkxcbGnnSMvLw89e3bV8nJyVq9erUyMjJ0zz33aNSoUT6J5KJFi9S4cWMtWrRI27dv16233qpzzz1X9957b7nfp7Tv5ylILVmyREVFRRo5cqRuvfVWLV68WJI0dOhQnXfeeZoyZYrsdrvWrVun4OBgSdLIkSNVUFCg7777TpGRkdq8ebOioqJOOw6cPpvB3YoBwHLkS5LqVr509913q1evXvrXv/6liIgIpaSkqF+/fkpISDhp7I4dO7R8+XJ98sknMk1TDz/8sHbv3q3mzZuXe84CiaJUFdHoHABqgMKj0j+aWPPZf9knhVTs6tHdd9+tl156SUuWLFGvXr0kuaeiDx48WLGxsYqNjdWjjz7qHT969GjNmzdPH374YYWSrAULFmjr1q2aN2+emjRxn49//OMfJ/U1+Otf/+p93qJFCz366KOaOXOmHn/8cYWHhysqKkpBQUFKTEws87NmzJih/Px8/ec///FePZs0aZIGDBigF154wZsM1atXT5MmTZLdblf79u117bXXauHChZUqSi1cuFAbNmzQzp07lZSUJEn6z3/+o06dOmn16tW68MILlZqaqscee0zt27eXJLVp08b7/tTUVA0ePFjnnHOOJKlVq1anHQMqh+V7AFADkC9Jqlv50nnnnadWrVrpo48+0p133qmUlBS98sor+u23304a+95776l///6qV6+eJKlv376aNm2axo8f7zPuiSee8PnukvTVV1/p0ksvPWUslcXyvSqyVaDaCwCAJLVv314XX3yxd5r19u3b9f3332vEiBGSJKfTqb/97W8655xzFB8fr6ioKM2bN0+pqakVOv6WLVuUlJTkTbAkKTk5+aRxH3zwgXr27KnExERFRUXpr3/9a4U/o+Rnde3a1Wc6d8+ePeVyubRt2zbvtk6dOslut3tfN27cWBkZGaf1WSU/MykpyVuQkqSOHTsqLi5OW7ZskSSNHTtW99xzj/r06aOJEydqx44d3rEPPfSQ/v73v6tnz5565plnKtUoFZVj5yIeAKCCyJdOL1+6++67NW3aNC1ZskR5eXm65pprThrjdDr173//W3fccYd32x133KGUlBS5XC6fsY899pjWrVvn87jgggsq/J1PFzOlqsggyQIA6wVHuK/AWfXZp2HEiBEaPXq0Jk+erGnTpunss8/W5ZdfLkl66aWX9K9//UuvvfaazjnnHEVGRmrMmDEqKCjwW7jLly/X0KFD9eyzz6pv376KjY3VzJkz9c9//tNvn1GSZ+mch2EYJyU//jR+/Hjdfvvt+uKLL/TVV1/pmWee0cyZM3XjjTfqnnvuUd++ffXFF1/om2++0YQJE/TPf/4zoM074eaZKUW+BAAWIl+qsNqULw0dOlSPP/64xo8frzvvvFNBQSeXeebNm6fff/9dt956q892p9OphQsX6qqrrvJua9CggVq3bl2Jb1E5zJSqIhs9pQDAeobhnhJuxeM0Z8zecsststlsmjFjhv7zn//o7rvv9vZLWLp0qQYOHKg77rhDXbt2VatWrfTLL79U+NgdOnTQnj17tH//fu+2FStW+IxZtmyZmjdvrieffFIXXHCB2rRpo927d/uMCQkJkdPpLPez1q9fr7y8PO+2pUuXymazqV27dhWO+XR4vt+ePXu82zZv3qzMzEx17NjRu61t27Z6+OGH9c0332jQoEGaNm2ad19SUpLuv/9+ffLJJ3rkkUf07rvvBiRW+PLkSyzfAwALkS9Jqnv5Unx8vK6//notWbJEd999d6ljpk6dqttuu+2kGVC33XZbmQ3PqwtFqSqipxQA4HRERUXp1ltv1bhx47R//37ddddd3n1t2rTR/PnztWzZMm3ZskV//OMffe4sV54+ffqobdu2Gj58uNavX6/vv/9eTz75pM+YNm3aKDU1VTNnztSOHTv0+uuva/bs2T5jWrRooZ07d2rdunU6ePCgHA7HSZ81dOhQhYWFafjw4dq4caMWLVqk0aNH68477yy1uebpcDqdJyVNW7ZsUZ8+fXTOOedo6NChWrt2rVatWqVhw4bp8ssv1wUXXKBjx45p1KhRWrx4sXbv3q2lS5dq9erV6tChgyRpzJgxmjdvnnbu3Km1a9dq0aJF3n0ILC7iAQBOB/nS6UlJSdHBgwe9PTVLOnDggD777DMNHz5cnTt39nkMGzZMc+bM0eHDh73jc3JylJaW5vPIzs72W6wnsrQoNX78eO/tEz2PkicxPz9fI0eOVP369RUVFaXBgwef1i9bdTDkTrKoSQEAKmrEiBE6cuSI+vbt69PP4K9//avOP/989e3bV7169VJiYqJuuOGGCh/XZrNp9uzZOnbsmLp376577rlHzz//vM+Y66+/Xg8//LBGjRqlc889V8uWLdNTTz3lM2bw4MHq16+frrjiCjVs2LDU2yxHRERo3rx5Onz4sC688ELddNNN6t27tyZNmnR6J6MUubm5Ou+883weAwYMkGEY+vTTT1WvXj1ddtll6tOnj1q1aqUPPvhAkmS323Xo0CENGzZMbdu21S233KL+/fvr2WefleQudo0cOVIdOnRQv3791LZtW7355ptVjhflsxdnnC6qUgCACiJfqrjw8HDVr1+/1H2eJuu9e/c+aV/v3r0VHh6u//3vf95tTz/9tBo3buzzePzxx/0ab0mGaVpXThk/frw++ugj7y0UJfctIBs0aCBJeuCBB/TFF18oJSVFsbGxGjVqlGw2m5YuXVrhz8jOzlZsbKyysrIUExPj9+8w7pOf9f6qPXrkqrYa3btN+W8AAFRJfn6+du7cqZYtWyosLMzqcFBHner3LNC5hRUC/Z1m/bhHj330s3q1a6iUP5R/ZyQAQNWRMyHQ/JEvWd7ovKxbKGZlZWnq1KmaMWOGrrzySknu20B26NBBK1as0EUXXVTdoZbKs66V634AAAClY/keAAAojeU9pX799Vc1adJErVq10tChQ723WFyzZo0KCwvVp08f79j27durWbNmWr58eZnHczgcys7O9nkEEj2lAAAATs3uufseVSkAAFCCpUWpHj16KCUlRV9//bWmTJminTt36tJLL/U21goJCVFcXJzPexISEpSWllbmMSdMmKDY2FjvIykpKaDfgSt/AAAAp2azcfc9AABwMkuX7/Xv39/7vEuXLurRo4eaN2+uDz/8UOHh4ZU65rhx4zR27Fjv6+zs7IAWpjw3trSwNRcAAECNxsxyAABQGsuX75UUFxentm3bavv27UpMTFRBQYEyMzN9xqSnp5fag8ojNDRUMTExPo9AMrwzpUiyAAAASmMnXwIAAKWoUUWp3Nxc7dixQ40bN1a3bt0UHByshQsXevdv27ZNqampSk5OtjBKX57le+RYAFC9XC6X1SGgDuP3y79YvgcA1mFVDwLFH/mSpcv3Hn30UQ0YMEDNmzfXvn379Mwzz8hut2vIkCGKjY3ViBEj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s9HoHAAA+JnnoledQFEKAACUolJFqU6dOumtt97S999/r/nz56tfv36SpH379ql+/fqndawNGzYoKipKoaGhuv/++zV79mx17NhRaWlpCgkJUVxcnM/4hIQEpaWllXm8CRMmKDY21vtISko67e93ujzL98ixAAAASlFclAoxili+BwAAvIIq86YXXnhBN954o1566SUNHz5cXbt2lSTNnTvXu6yvotq1a6d169YpKytLH330kYYPH64lS5ZUJixJ0rhx4zR27Fjv6+zs7IAXpjwzpShKAQCAitq8ebP3Qptpmtq6datyc3MlSQcPHrQyNP8LKjlTyuJYAABAjVGpolSvXr108OBBZWdnq169et7t9913nyIiIk7rWCEhIWrdurUkqVu3blq9erX+9a9/6dZbb1VBQYEyMzN9Zkulp6crMTGxzOOFhoZ6lxZWF3pKAQCA09W7d2+fvlHXXXedJHdeYZpmnVy+F6pCuahKAQCAYpUqSh07dkymaXoLUrt379bs2bPVoUMH9e3bt0oBuVwuORwOdevWTcHBwVq4cKEGDx4sSdq2bZtSU1OVnJxcpc/wN4OeUgAA4DTs3LnT6hCql919wTBYRXKSLwEAgGKVKkoNHDhQgwYN0v3336/MzEz16NFDwcHBOnjwoF555RU98MADFTrOuHHj1L9/fzVr1kw5OTmaMWOGFi9erHnz5ik2NlYjRozQ2LFjFR8fr5iYGI0ePVrJycm66KKLKhN2wNi8M6UsDgQAANQKzZs3L3fMxo0bqyGSamIPliSFsHwPAACUUKlG52vXrtWll14qSfroo4+UkJCg3bt36z//+Y9ef/31Ch8nIyNDw4YNU7t27dS7d2+tXr1a8+bN01VXXSVJevXVV3Xddddp8ODBuuyyy5SYmKhPPvmkMiEH1PGeUmRZAACg8nJycvTOO++oe/fu3p6ddUJQ8Uwpo4jlewAAwKtSM6WOHj2q6OhoSdI333yjQYMGyWaz6aKLLtLu3bsrfJypU6eecn9YWJgmT56syZMnVybMauO9+57FcQAAgNrpu+++09SpU/Xxxx+rSZMmGjRoUI3Pf06L5+57KuTuewAAwKtSM6Vat26tOXPmaM+ePZo3b56uvvpqSe6ZTzExMX4NsFbw9JQiyQIAABWUlpamiRMnqk2bNrr55psVExMjh8OhOXPmaOLEibrwwgut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nNvSTZgwQRdeeKGio6PVqFEj3XDDDdq2bZvPmIr8XZCamqprr71WERERatSokR577DEVFRVV51epcSpybnv16nXS7+7999/vM4Zzi6ogX6o68iX/Il8KHPKlwCFfCixyJmtQlKqCDz74QGPHjtUzzzyjtWvXqmvXrurbt68yMjKsDq3W6dSpk/bv3+99/PDDD959Dz/8sD777DPNmjVLS5Ys0b59+zRo0CALo63Z8vLy1LVrV02ePLnU/S+++KJef/11vfXWW1q5cqUiIyPVt29f5efne8cMHTpUmzZt0vz58/X555/ru+++03333VddX6HGKu/cSlK/fv18fpfff/99n/2c29ItWbJEI0eO1IoVKzR//nwVFhbq6quvVl5enndMeX8XOJ1OXXvttSooKNCyZcv073//WykpKXr66aet+Eo1RkXOrSTde++9Pr+7L774oncf5xZVQb7kP+RL/kO+FDjkS4FDvhRY5EwWMVFp3bt3N0eOHOl97XQ6zSZNmpgTJkywMKra55lnnjG7du1a6r7MzEwzODjYnDVrlnfbli1bTEnm8uXLqynC2kuSOXv2bO9rl8tlJiYmmi+99JJ3W2ZmphkaGmq+//77pmma5ubNm01J5urVq71jvvrqK9MwDPP333+vtthruhPPrWma5vDhw82BAweW+R7ObcVlZGSYkswlS5aYplmxvwu+/PJL02azmWlpad4xU6ZMMWNiYkyHw1G9X6AGO/HcmqZpXn755eaf/vSnMt/DuUVVkC/5B/lS4JAvBQ75UmCRLwUWOVP1YKZUJRUUFGjNmjXq06ePd5vNZlOfPn20fPlyCyOrnX799Vc1adJErVq10tChQ5WamipJWrNmjQoLC33Oc/v27dWsWTPOcyXs3LlTaWlpPuczNjZWPXr08J7P5cuXKy4uThdccIF3TJ8+fWSz2bRy5cpqj7m2Wbx4sRo1aqR27drpgQce0KFDh7z7OLcVl5WVJUmKj4+XVLG/C5YvX65zzjlHCQkJ3jF9+/ZVdna2Nm3aVI3R12wnnluP6dOnq0GDBurcubPGjRuno0ePevdxblFZ5Ev+Rb5UPciXAo98yT/IlwKLnKl6BFkdQG118OBBOZ1On182SUpISNDWrVstiqp26tGjh1JSUtSuXTvt379fzz77rC699FJt3LhRaWlpCgkJUVxcnM97EhISlJaW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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 20518.469358,
   "end_time": "2025-08-16T16:27:46.571529",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-16T10:45:48.102171",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
