{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b8c38db",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T05:22:05.580596Z",
     "iopub.status.busy": "2025-08-07T05:22:05.579866Z",
     "iopub.status.idle": "2025-08-07T05:22:07.003858Z",
     "shell.execute_reply": "2025-08-07T05:22:07.003132Z"
    },
    "papermill": {
     "duration": 1.429094,
     "end_time": "2025-08-07T05:22:07.005389",
     "exception": false,
     "start_time": "2025-08-07T05:22:05.576295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cddb8644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:22:07.010767Z",
     "iopub.status.busy": "2025-08-07T05:22:07.010410Z",
     "iopub.status.idle": "2025-08-07T05:22:21.480393Z",
     "shell.execute_reply": "2025-08-07T05:22:21.479663Z"
    },
    "papermill": {
     "duration": 14.474003,
     "end_time": "2025-08-07T05:22:21.481910",
     "exception": false,
     "start_time": "2025-08-07T05:22:07.007907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 05:22:08.574503: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754544128.770585      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754544128.824573      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7c5536b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:22:21.487161Z",
     "iopub.status.busy": "2025-08-07T05:22:21.486739Z",
     "iopub.status.idle": "2025-08-07T05:22:21.491246Z",
     "shell.execute_reply": "2025-08-07T05:22:21.490694Z"
    },
    "papermill": {
     "duration": 0.008251,
     "end_time": "2025-08-07T05:22:21.492394",
     "exception": false,
     "start_time": "2025-08-07T05:22:21.484143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7fca66f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:22:21.496893Z",
     "iopub.status.busy": "2025-08-07T05:22:21.496675Z",
     "iopub.status.idle": "2025-08-07T05:22:21.499870Z",
     "shell.execute_reply": "2025-08-07T05:22:21.499298Z"
    },
    "papermill": {
     "duration": 0.006656,
     "end_time": "2025-08-07T05:22:21.500963",
     "exception": false,
     "start_time": "2025-08-07T05:22:21.494307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7dbecab2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:22:21.506064Z",
     "iopub.status.busy": "2025-08-07T05:22:21.505701Z",
     "iopub.status.idle": "2025-08-07T08:42:07.234241Z",
     "shell.execute_reply": "2025-08-07T08:42:07.233521Z"
    },
    "papermill": {
     "duration": 11985.732639,
     "end_time": "2025-08-07T08:42:07.235491",
     "exception": false,
     "start_time": "2025-08-07T05:22:21.502852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754544162.205663      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754544171.467366      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">101,632</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m101,632\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">693,258</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m693,258\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">692,742</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m692,742\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754544182.400309      57 service.cc:148] XLA service 0x78f7340074c0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754544182.401114      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754544186.249458      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 342.12888, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 61.8783 - mae: 5.5159 - val_loss: 342.1289 - val_mae: 14.3787 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 342.12888 to 8.14360, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 12.8994 - mae: 2.7290 - val_loss: 8.1436 - val_mae: 2.1867 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 8.14360 to 5.76480, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 7.0340 - mae: 1.9914 - val_loss: 5.7648 - val_mae: 1.8898 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 5.76480 to 2.37596, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 4.4151 - mae: 1.5558 - val_loss: 2.3760 - val_mae: 1.1810 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 2.37596\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.4547 - mae: 1.2955 - val_loss: 5.6319 - val_mae: 1.7608 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.37596 to 1.75553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.7570 - mae: 1.1765 - val_loss: 1.7555 - val_mae: 1.0090 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.75553 to 0.86971, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8362 - mae: 0.9007 - val_loss: 0.8697 - val_mae: 0.7330 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.86971 to 0.60318, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4299 - mae: 0.8596 - val_loss: 0.6032 - val_mae: 0.5995 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.60318\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7314 - mae: 0.6474 - val_loss: 0.9176 - val_mae: 0.7690 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.60318\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2723 - mae: 0.7545 - val_loss: 1.1015 - val_mae: 0.8208 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.60318\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4544 - mae: 0.8227 - val_loss: 0.6890 - val_mae: 0.6482 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.60318\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2566 - mae: 0.7987 - val_loss: 1.5501 - val_mae: 0.9391 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.60318\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.9998 - mae: 0.9239 - val_loss: 1.2099 - val_mae: 0.8388 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.60318 to 0.55536, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.4123 - mae: 0.8032 - val_loss: 0.5554 - val_mae: 0.5802 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6614 - mae: 0.8691 - val_loss: 0.9665 - val_mae: 0.7603 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9997 - mae: 0.7450 - val_loss: 0.6506 - val_mae: 0.6279 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5758 - mae: 0.8220 - val_loss: 0.7359 - val_mae: 0.6660 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6302 - mae: 0.8071 - val_loss: 6.6495 - val_mae: 1.8397 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8847 - mae: 0.9981 - val_loss: 1.8167 - val_mae: 1.0357 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7602 - mae: 0.9364 - val_loss: 0.9033 - val_mae: 0.7301 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9132 - mae: 0.9403 - val_loss: 0.7533 - val_mae: 0.6698 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.0217 - mae: 1.2687 - val_loss: 2.4596 - val_mae: 1.2078 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4942 - mae: 0.8592 - val_loss: 1.1130 - val_mae: 0.8239 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0734 - mae: 0.7398 - val_loss: 1.0022 - val_mae: 0.7548 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0061 - mae: 0.8896 - val_loss: 0.9322 - val_mae: 0.7446 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4580 - mae: 0.8602 - val_loss: 0.8267 - val_mae: 0.7031 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2623 - mae: 1.0011 - val_loss: 0.8532 - val_mae: 0.7123 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.55536\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2297 - mae: 0.7135 - val_loss: 0.6085 - val_mae: 0.6108 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.55536 to 0.43547, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4922 - mae: 0.8091 - val_loss: 0.4355 - val_mae: 0.5126 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.43547\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4318 - mae: 0.5023 - val_loss: 0.6046 - val_mae: 0.5940 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss improved from 0.43547 to 0.35251, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5129 - mae: 0.7407 - val_loss: 0.3525 - val_mae: 0.4564 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6444 - mae: 0.5468 - val_loss: 0.5671 - val_mae: 0.5957 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9457 - mae: 0.7478 - val_loss: 0.5743 - val_mae: 0.5920 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.9522 - mae: 1.0638 - val_loss: 1.2023 - val_mae: 0.8329 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4875 - mae: 0.8303 - val_loss: 0.6260 - val_mae: 0.6184 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1863 - mae: 0.7362 - val_loss: 0.7865 - val_mae: 0.6499 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3526 - mae: 0.7572 - val_loss: 0.5652 - val_mae: 0.5779 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0739 - mae: 0.7041 - val_loss: 0.5257 - val_mae: 0.5627 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1116 - mae: 0.7035 - val_loss: 0.8632 - val_mae: 0.7333 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5660 - mae: 0.7613 - val_loss: 2.8874 - val_mae: 1.1972 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9158 - mae: 0.6485 - val_loss: 0.4514 - val_mae: 0.5268 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4552 - mae: 0.6816 - val_loss: 0.8204 - val_mae: 0.7006 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4820 - mae: 0.5293 - val_loss: 0.6924 - val_mae: 0.6500 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1680 - mae: 0.9337 - val_loss: 0.8109 - val_mae: 0.6979 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.35251\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5620 - mae: 0.5725 - val_loss: 0.4848 - val_mae: 0.5432 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.35251 to 0.31894, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3393 - mae: 0.7221 - val_loss: 0.3189 - val_mae: 0.4351 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1570 - mae: 0.6430 - val_loss: 0.3789 - val_mae: 0.4858 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4276 - mae: 0.8504 - val_loss: 1.1419 - val_mae: 0.8171 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5317 - mae: 0.5596 - val_loss: 0.3603 - val_mae: 0.4689 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1796 - mae: 0.6960 - val_loss: 0.6913 - val_mae: 0.6286 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5530 - mae: 0.7786 - val_loss: 0.5200 - val_mae: 0.5614 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5479 - mae: 0.7725 - val_loss: 0.6568 - val_mae: 0.6261 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8188 - mae: 0.8641 - val_loss: 0.6642 - val_mae: 0.6306 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.31894\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.6563 - mae: 0.7978 - val_loss: 0.9732 - val_mae: 0.7651 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1072 - mae: 0.7182 - val_loss: 0.7681 - val_mae: 0.6608 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5333 - mae: 0.8250 - val_loss: 0.4306 - val_mae: 0.5101 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3937 - mae: 0.4872 - val_loss: 0.5323 - val_mae: 0.5697 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6423 - mae: 0.7584 - val_loss: 0.3740 - val_mae: 0.4797 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8859 - mae: 0.8479 - val_loss: 0.6009 - val_mae: 0.5888 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4404 - mae: 0.7734 - val_loss: 0.4816 - val_mae: 0.5291 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6615 - mae: 0.9909 - val_loss: 0.9376 - val_mae: 0.7199 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7352 - mae: 0.6138 - val_loss: 0.3688 - val_mae: 0.4740 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4172 - mae: 0.7240 - val_loss: 0.3291 - val_mae: 0.4424 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5939 - mae: 0.7838 - val_loss: 0.5271 - val_mae: 0.5645 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3035 - mae: 0.7266 - val_loss: 0.6342 - val_mae: 0.6013 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6021 - mae: 0.8437 - val_loss: 0.7555 - val_mae: 0.6616 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.31894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4661 - mae: 0.5185 - val_loss: 0.3523 - val_mae: 0.4575 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.31894 to 0.22608, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2833 - mae: 0.4109 - val_loss: 0.2261 - val_mae: 0.3681 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.22608 to 0.17159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1907 - mae: 0.3379 - val_loss: 0.1716 - val_mae: 0.3189 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.17159 to 0.13224, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1452 - mae: 0.2958 - val_loss: 0.1322 - val_mae: 0.2787 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.13224 to 0.12195, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1183 - mae: 0.2674 - val_loss: 0.1219 - val_mae: 0.2703 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.12195 to 0.10295, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1008 - mae: 0.2472 - val_loss: 0.1030 - val_mae: 0.2472 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.10295 to 0.08689, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0883 - mae: 0.2315 - val_loss: 0.0869 - val_mae: 0.2274 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.08689 to 0.07854, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0777 - mae: 0.2171 - val_loss: 0.0785 - val_mae: 0.2149 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.07854 to 0.07742, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0723 - mae: 0.2096 - val_loss: 0.0774 - val_mae: 0.2149 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.07742 to 0.06515, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0621 - mae: 0.1945 - val_loss: 0.0651 - val_mae: 0.1964 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.06515 to 0.05766, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0577 - mae: 0.1875 - val_loss: 0.0577 - val_mae: 0.1849 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.05766\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0521 - mae: 0.1785 - val_loss: 0.0624 - val_mae: 0.1919 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.05766 to 0.05481, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0476 - mae: 0.1703 - val_loss: 0.0548 - val_mae: 0.1803 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.05481 to 0.05115, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0459 - mae: 0.1672 - val_loss: 0.0512 - val_mae: 0.1726 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.05115 to 0.04546, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0425 - mae: 0.1613 - val_loss: 0.0455 - val_mae: 0.1638 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04546\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0397 - mae: 0.1561 - val_loss: 0.0476 - val_mae: 0.1683 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.04546 to 0.04164, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0390 - mae: 0.1545 - val_loss: 0.0416 - val_mae: 0.1576 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.04164 to 0.04067, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0367 - mae: 0.1499 - val_loss: 0.0407 - val_mae: 0.1544 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.04067 to 0.03948, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0348 - mae: 0.1462 - val_loss: 0.0395 - val_mae: 0.1518 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.03948 to 0.03912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0338 - mae: 0.1439 - val_loss: 0.0391 - val_mae: 0.1510 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.03912 to 0.03790, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0336 - mae: 0.1434 - val_loss: 0.0379 - val_mae: 0.1505 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.03790\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0327 - mae: 0.1416 - val_loss: 0.0399 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.03790 to 0.03536, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0311 - mae: 0.1381 - val_loss: 0.0354 - val_mae: 0.1451 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.03536 to 0.03507, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0296 - mae: 0.1346 - val_loss: 0.0351 - val_mae: 0.1427 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.03507 to 0.03392, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0285 - mae: 0.1318 - val_loss: 0.0339 - val_mae: 0.1428 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.03392 to 0.03157, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0277 - mae: 0.1299 - val_loss: 0.0316 - val_mae: 0.1354 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.03157 to 0.02847, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0263 - mae: 0.1267 - val_loss: 0.0285 - val_mae: 0.1291 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02847\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1257 - val_loss: 0.0331 - val_mae: 0.1398 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.02847 to 0.02839, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1229 - val_loss: 0.0284 - val_mae: 0.1291 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02839\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1222 - val_loss: 0.0313 - val_mae: 0.1363 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02839\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1215 - val_loss: 0.0349 - val_mae: 0.1446 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.02839 to 0.02791, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0232 - mae: 0.1192 - val_loss: 0.0279 - val_mae: 0.1279 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02791\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1185 - val_loss: 0.0307 - val_mae: 0.1344 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.02791 to 0.02772, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1169 - val_loss: 0.0277 - val_mae: 0.1269 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02772\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1162 - val_loss: 0.0306 - val_mae: 0.1360 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02772\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0217 - mae: 0.1152 - val_loss: 0.0292 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.02772 to 0.02722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0217 - mae: 0.1151 - val_loss: 0.0272 - val_mae: 0.1280 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.02722 to 0.02627, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1149 - val_loss: 0.0263 - val_mae: 0.1247 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.02627 to 0.02456, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0214 - mae: 0.1145 - val_loss: 0.0246 - val_mae: 0.1203 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02456\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0215 - mae: 0.1145 - val_loss: 0.0348 - val_mae: 0.1445 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02456\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0215 - mae: 0.1148 - val_loss: 0.0251 - val_mae: 0.1225 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02456\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0209 - mae: 0.1129 - val_loss: 0.0262 - val_mae: 0.1239 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02456\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0211 - mae: 0.1135 - val_loss: 0.0257 - val_mae: 0.1233 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02456\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1132 - val_loss: 0.0258 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02456\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0205 - mae: 0.1120 - val_loss: 0.0246 - val_mae: 0.1206 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02456\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0204 - mae: 0.1115 - val_loss: 0.0250 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.02456 to 0.02196, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0207 - mae: 0.1121 - val_loss: 0.0220 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02196\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0198 - mae: 0.1100 - val_loss: 0.0246 - val_mae: 0.1208 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02196\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0197 - mae: 0.1096 - val_loss: 0.0223 - val_mae: 0.1158 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02196\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1100 - val_loss: 0.0244 - val_mae: 0.1210 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02196\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1078 - val_loss: 0.0228 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss improved from 0.02196 to 0.02090, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0195 - mae: 0.1089 - val_loss: 0.0209 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02090\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0195 - mae: 0.1090 - val_loss: 0.0246 - val_mae: 0.1207 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.02090 to 0.02066, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1077 - val_loss: 0.0207 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02066\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1067 - val_loss: 0.0241 - val_mae: 0.1189 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02066\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1071 - val_loss: 0.0247 - val_mae: 0.1213 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.02066 to 0.02022, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1077 - val_loss: 0.0202 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02022\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1073 - val_loss: 0.0227 - val_mae: 0.1159 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02022\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0192 - mae: 0.1080 - val_loss: 0.0228 - val_mae: 0.1178 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02022\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1076 - val_loss: 0.0206 - val_mae: 0.1105 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02022\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1070 - val_loss: 0.0226 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.02022 to 0.01944, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1067 - val_loss: 0.0194 - val_mae: 0.1067 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1067 - val_loss: 0.0202 - val_mae: 0.1095 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1074 - val_loss: 0.0234 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1064 - val_loss: 0.0362 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1072 - val_loss: 0.0209 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1059 - val_loss: 0.0211 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1063 - val_loss: 0.0227 - val_mae: 0.1182 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1069 - val_loss: 0.0215 - val_mae: 0.1138 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1055 - val_loss: 0.0209 - val_mae: 0.1110 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1062 - val_loss: 0.0228 - val_mae: 0.1177 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.01944 to 0.01748, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1068 - val_loss: 0.0175 - val_mae: 0.1026 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1053 - val_loss: 0.0205 - val_mae: 0.1119 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0186 - mae: 0.1061 - val_loss: 0.0235 - val_mae: 0.1183 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1068 - val_loss: 0.0213 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1064 - val_loss: 0.0274 - val_mae: 0.1272 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1062 - val_loss: 0.0226 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1062 - val_loss: 0.0217 - val_mae: 0.1144 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1065 - val_loss: 0.0230 - val_mae: 0.1176 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1067 - val_loss: 0.0238 - val_mae: 0.1200 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1069 - val_loss: 0.0258 - val_mae: 0.1260 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1073 - val_loss: 0.0335 - val_mae: 0.1434 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01748\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0184 - mae: 0.1052 - val_loss: 0.0200 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0185 - mae: 0.1056 - val_loss: 0.0243 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0191 - mae: 0.1070 - val_loss: 0.0204 - val_mae: 0.1109 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1046 - val_loss: 0.0216 - val_mae: 0.1131 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0186 - mae: 0.1059 - val_loss: 0.0221 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01748\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0187 - mae: 0.1062 - val_loss: 0.0230 - val_mae: 0.1157 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1066 - val_loss: 0.0195 - val_mae: 0.1088 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0185 - mae: 0.1056 - val_loss: 0.0327 - val_mae: 0.1407 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1066 - val_loss: 0.0206 - val_mae: 0.1111 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1067 - val_loss: 0.0228 - val_mae: 0.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.01748 to 0.00783, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0581 - val_loss: 0.0078 - val_mae: 0.0675 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00783 to 0.00749, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0518 - val_loss: 0.0075 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.00749 to 0.00733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0496 - val_loss: 0.0073 - val_mae: 0.0650 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.00733 to 0.00721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0482 - val_loss: 0.0072 - val_mae: 0.0645 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.00721 to 0.00702, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0470 - val_loss: 0.0070 - val_mae: 0.0634 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss improved from 0.00702 to 0.00675, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0068 - val_mae: 0.0621 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.00675 to 0.00672, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0067 - val_mae: 0.0621 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00672\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0068 - val_mae: 0.0626 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00672\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0068 - val_mae: 0.0622 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.00672 to 0.00670, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0067 - val_mae: 0.0619 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0068 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.00670 to 0.00666, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0067 - val_mae: 0.0616 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.00666 to 0.00664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0066 - val_mae: 0.0613 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0068 - val_mae: 0.0625 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.00664 to 0.00649, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0065 - val_mae: 0.0607 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.00649 to 0.00638, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0416 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00638\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0065 - val_mae: 0.0607 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00638\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0066 - val_mae: 0.0611 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00638\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0066 - val_mae: 0.0613 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00638\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0064 - val_mae: 0.0601 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.00638 to 0.00634, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0400 - val_loss: 0.0063 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00634\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0065 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.00634 to 0.00630, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00630\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0063 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00630\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0392 - val_loss: 0.0063 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00630\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0024 - mae: 0.0389 - val_loss: 0.0064 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00630\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0064 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00630\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0063 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss improved from 0.00630 to 0.00623, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0384 - val_loss: 0.0062 - val_mae: 0.0592 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00623\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0063 - val_mae: 0.0595 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00623\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0063 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss improved from 0.00623 to 0.00619, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0062 - val_mae: 0.0589 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00619\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0375 - val_loss: 0.0064 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00619\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0063 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.00619 to 0.00612, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.00612 to 0.00611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00611\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0062 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.00611 to 0.00611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0367 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.00611 to 0.00611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0061 - val_mae: 0.0584 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00611\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0062 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00611\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0362 - val_loss: 0.0061 - val_mae: 0.0584 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00611\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.00611 to 0.00608, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0061 - val_mae: 0.0582 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0359 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0357 - val_loss: 0.0063 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0355 - val_loss: 0.0063 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.00608 to 0.00600, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0354 - val_loss: 0.0060 - val_mae: 0.0580 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss improved from 0.00600 to 0.00597, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0352 - val_loss: 0.0060 - val_mae: 0.0576 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00597\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00597\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0350 - val_loss: 0.0062 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00597\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0060 - val_mae: 0.0579 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00597\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0063 - val_mae: 0.0592 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.00597 to 0.00596, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0060 - val_mae: 0.0576 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00596\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0345 - val_loss: 0.0060 - val_mae: 0.0580 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00596\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0060 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00596\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0060 - val_mae: 0.0579 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00596\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0341 - val_loss: 0.0061 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00596\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0340 - val_loss: 0.0060 - val_mae: 0.0577 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.00596 to 0.00588, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0339 - val_loss: 0.0059 - val_mae: 0.0571 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0339 - val_loss: 0.0062 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0336 - val_loss: 0.0060 - val_mae: 0.0579 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0337 - val_loss: 0.0059 - val_mae: 0.0570 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0336 - val_loss: 0.0061 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0060 - val_mae: 0.0579 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0333 - val_loss: 0.0061 - val_mae: 0.0582 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0333 - val_loss: 0.0061 - val_mae: 0.0585 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0331 - val_loss: 0.0061 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0063 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0329 - val_loss: 0.0060 - val_mae: 0.0573 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.00588 to 0.00588, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0059 - val_mae: 0.0571 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0061 - val_mae: 0.0580 - learning_rate: 1.0000e-04\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0060 - val_mae: 0.0577 - learning_rate: 1.0000e-04\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0060 - val_mae: 0.0578 - learning_rate: 1.0000e-04\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0061 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0059 - val_mae: 0.0569 - learning_rate: 1.0000e-04\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0060 - val_mae: 0.0577 - learning_rate: 1.0000e-04\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0321 - val_loss: 0.0059 - val_mae: 0.0574 - learning_rate: 1.0000e-04\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0322 - val_loss: 0.0059 - val_mae: 0.0572 - learning_rate: 1.0000e-04\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00588\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0061 - val_mae: 0.0580 - learning_rate: 1.0000e-04\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss improved from 0.00588 to 0.00555, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0267 - val_loss: 0.0056 - val_mae: 0.0548 - learning_rate: 1.0000e-05\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss improved from 0.00555 to 0.00553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0261 - val_loss: 0.0055 - val_mae: 0.0548 - learning_rate: 1.0000e-05\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss improved from 0.00553 to 0.00552, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0260 - val_loss: 0.0055 - val_mae: 0.0547 - learning_rate: 1.0000e-05\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss improved from 0.00552 to 0.00552, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0258 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss improved from 0.00552 to 0.00551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.00551 to 0.00551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0011 - mae: 0.0256 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.00551 to 0.00551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00551\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00551\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss improved from 0.00551 to 0.00550, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0254 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00550\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0010 - mae: 0.0254 - val_loss: 0.0055 - val_mae: 0.0548 - learning_rate: 1.0000e-05\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00550\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0254 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00550\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0253 - val_loss: 0.0055 - val_mae: 0.0547 - learning_rate: 1.0000e-05\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00550\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0253 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss improved from 0.00550 to 0.00550, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0055 - val_mae: 0.0545 - learning_rate: 1.0000e-05\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00550\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0055 - val_mae: 0.0547 - learning_rate: 1.0000e-05\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00550\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00550\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0055 - val_mae: 0.0546 - learning_rate: 1.0000e-05\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00550\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0251 - val_loss: 0.0055 - val_mae: 0.0545 - learning_rate: 1.0000e-05\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00550\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0251 - val_loss: 0.0055 - val_mae: 0.0545 - learning_rate: 1.0000e-05\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss improved from 0.00550 to 0.00547, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.6802e-04 - mae: 0.0245 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss improved from 0.00547 to 0.00547, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.6225e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0544 - learning_rate: 1.0000e-06\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.6067e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0544 - learning_rate: 1.0000e-06\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.6008e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0544 - learning_rate: 1.0000e-06\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss improved from 0.00547 to 0.00547, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5953e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss improved from 0.00547 to 0.00547, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5898e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5852e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5814e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0544 - learning_rate: 1.0000e-06\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5780e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5766e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00547\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.5710e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss improved from 0.00547 to 0.00547, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5686e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5638e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5596e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5598e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00547\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.5567e-04 - mae: 0.0244 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5534e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5522e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5483e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00547\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5463e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-06\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss improved from 0.00547 to 0.00546, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.4984e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4906e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0544 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss improved from 0.00546 to 0.00546, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4877e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4861e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4851e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00546\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.4846e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4838e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4837e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4831e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4827e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4826e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4823e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00546\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4818e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss improved from 0.00546 to 0.00545, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4813e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4813e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4811e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4807e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4804e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4802e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4798e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4796e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4793e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00545\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.4791e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4790e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4785e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4784e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00545\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.4781e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4778e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4775e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4774e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4771e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4768e-04 - mae: 0.0243 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4766e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4762e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4763e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00545\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.4759e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4756e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4754e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4752e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4749e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00545\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.4747e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4742e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4741e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4739e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4735e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4734e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4730e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4729e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4729e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4725e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4723e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4719e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4718e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4714e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4713e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4711e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0544 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4708e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4706e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4703e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4701e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.00545\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.4698e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4697e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4693e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.00545\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.4690e-04 - mae: 0.0242 - val_loss: 0.0055 - val_mae: 0.0543 - learning_rate: 1.0000e-07\n",
      "Epoch 342: early stopping\n",
      "Restoring model weights from the end of the best epoch: 292.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.0856 m\n",
      "Median positioning error: 0.0732 m\n",
      "90th percentile error: 0.1568 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12009.424324,
   "end_time": "2025-08-07T08:42:10.900878",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T05:22:01.476554",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
