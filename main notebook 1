{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a1ec51f3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-29T13:16:14.025540Z",
     "iopub.status.busy": "2025-08-29T13:16:14.025245Z",
     "iopub.status.idle": "2025-08-29T13:16:15.490395Z",
     "shell.execute_reply": "2025-08-29T13:16:15.489358Z"
    },
    "papermill": {
     "duration": 1.470731,
     "end_time": "2025-08-29T13:16:15.492355",
     "exception": false,
     "start_time": "2025-08-29T13:16:14.021624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "61470b4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-29T13:16:15.499431Z",
     "iopub.status.busy": "2025-08-29T13:16:15.498710Z",
     "iopub.status.idle": "2025-08-29T13:16:30.679029Z",
     "shell.execute_reply": "2025-08-29T13:16:30.678344Z"
    },
    "papermill": {
     "duration": 15.184784,
     "end_time": "2025-08-29T13:16:30.680613",
     "exception": false,
     "start_time": "2025-08-29T13:16:15.495829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-29 13:16:17.200892: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756473377.402300      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756473377.456190      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "adf7c2a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-29T13:16:30.686306Z",
     "iopub.status.busy": "2025-08-29T13:16:30.685796Z",
     "iopub.status.idle": "2025-08-29T13:16:30.690501Z",
     "shell.execute_reply": "2025-08-29T13:16:30.689896Z"
    },
    "papermill": {
     "duration": 0.008595,
     "end_time": "2025-08-29T13:16:30.691648",
     "exception": false,
     "start_time": "2025-08-29T13:16:30.683053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 512   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 64    # 8,16,32,64,128, 256\n",
    "filter_size = 9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 1024   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d0d63835",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-29T13:16:30.696292Z",
     "iopub.status.busy": "2025-08-29T13:16:30.696043Z",
     "iopub.status.idle": "2025-08-29T13:16:30.699316Z",
     "shell.execute_reply": "2025-08-29T13:16:30.698744Z"
    },
    "papermill": {
     "duration": 0.006716,
     "end_time": "2025-08-29T13:16:30.700387",
     "exception": false,
     "start_time": "2025-08-29T13:16:30.693671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "89b93361",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-29T13:16:30.705446Z",
     "iopub.status.busy": "2025-08-29T13:16:30.705228Z",
     "iopub.status.idle": "2025-08-29T20:58:59.289107Z",
     "shell.execute_reply": "2025-08-29T20:58:59.288370Z"
    },
    "papermill": {
     "duration": 27748.588238,
     "end_time": "2025-08-29T20:58:59.290472",
     "exception": false,
     "start_time": "2025-08-29T13:16:30.702234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1756473412.541907      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1756473422.004987      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">166,400</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)             │       <span style=\"color: #00af00; text-decoration-color: #00af00\">126,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,102,784</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,026</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │       \u001b[38;5;34m166,400\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │         \u001b[38;5;34m2,048\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m512\u001b[0m)             │       \u001b[38;5;34m126,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │     \u001b[38;5;34m2,102,784\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │         \u001b[38;5;34m1,026\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,399,242</span> (9.15 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,399,242\u001b[0m (9.15 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,398,214</span> (9.15 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,398,214\u001b[0m (9.15 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,028</span> (4.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,028\u001b[0m (4.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1756473432.744745      56 service.cc:148] XLA service 0x7a5378007440 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1756473432.745463      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1756473437.100310      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 41.73266, saving model to models/best_model_full.keras\n",
      "4375/4375 - 81s - 19ms/step - loss: 97.0516 - mae: 7.3160 - val_loss: 41.7327 - val_mae: 4.9685 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 41.73266 to 17.14670, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 36.5585 - mae: 4.5751 - val_loss: 17.1467 - val_mae: 3.1755 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 17.14670 to 6.83222, saving model to models/best_model_full.keras\n",
      "4375/4375 - 69s - 16ms/step - loss: 21.2517 - mae: 3.4101 - val_loss: 6.8322 - val_mae: 1.9722 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 6.83222 to 4.15495, saving model to models/best_model_full.keras\n",
      "4375/4375 - 69s - 16ms/step - loss: 8.0263 - mae: 2.0968 - val_loss: 4.1549 - val_mae: 1.5448 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 4.15495\n",
      "4375/4375 - 67s - 15ms/step - loss: 7.8519 - mae: 1.9692 - val_loss: 14.1523 - val_mae: 2.7697 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 4.15495 to 1.59194, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 5.7788 - mae: 1.7078 - val_loss: 1.5919 - val_mae: 0.9726 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.59194 to 1.35131, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 2.0279 - mae: 1.0259 - val_loss: 1.3513 - val_mae: 0.8291 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.35131\n",
      "4375/4375 - 66s - 15ms/step - loss: 3.7417 - mae: 1.2649 - val_loss: 1.7122 - val_mae: 0.9879 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.35131 to 0.59199, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 1.0355 - mae: 0.7682 - val_loss: 0.5920 - val_mae: 0.5994 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.59199 to 0.42258, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 1.6830 - mae: 0.7916 - val_loss: 0.4226 - val_mae: 0.5045 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.42258\n",
      "4375/4375 - 66s - 15ms/step - loss: 2.0103 - mae: 0.8751 - val_loss: 0.5785 - val_mae: 0.5906 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.42258\n",
      "4375/4375 - 66s - 15ms/step - loss: 2.3816 - mae: 0.8927 - val_loss: 0.7831 - val_mae: 0.6773 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.42258\n",
      "4375/4375 - 66s - 15ms/step - loss: 2.1142 - mae: 0.9317 - val_loss: 2.9740 - val_mae: 1.3137 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.42258\n",
      "4375/4375 - 67s - 15ms/step - loss: 3.6449 - mae: 1.1397 - val_loss: 1.2901 - val_mae: 0.8582 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.42258\n",
      "4375/4375 - 66s - 15ms/step - loss: 2.2151 - mae: 1.0150 - val_loss: 2.3750 - val_mae: 1.1714 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.42258\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.6522 - mae: 0.7912 - val_loss: 4.8680 - val_mae: 1.5224 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.42258\n",
      "4375/4375 - 68s - 15ms/step - loss: 1.2592 - mae: 0.7341 - val_loss: 0.7507 - val_mae: 0.7071 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.42258\n",
      "4375/4375 - 69s - 16ms/step - loss: 1.7766 - mae: 0.8034 - val_loss: 0.7659 - val_mae: 0.6668 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.42258 to 0.39237, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.9517 - mae: 0.6707 - val_loss: 0.3924 - val_mae: 0.4867 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.2560 - mae: 0.7247 - val_loss: 0.6341 - val_mae: 0.5956 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 2.4615 - mae: 0.9485 - val_loss: 0.8566 - val_mae: 0.6935 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.1094 - mae: 0.7047 - val_loss: 4.4489 - val_mae: 1.3947 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.39237\n",
      "4375/4375 - 67s - 15ms/step - loss: 1.6855 - mae: 0.8365 - val_loss: 0.4054 - val_mae: 0.4697 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.2813 - mae: 0.7291 - val_loss: 0.4030 - val_mae: 0.5009 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.4441 - mae: 0.7156 - val_loss: 1.7979 - val_mae: 0.9736 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.0846 - mae: 0.6895 - val_loss: 0.6502 - val_mae: 0.6198 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.7950 - mae: 0.8288 - val_loss: 2.6888 - val_mae: 1.2368 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.39237\n",
      "4375/4375 - 67s - 15ms/step - loss: 2.8427 - mae: 1.1590 - val_loss: 1.9953 - val_mae: 1.0545 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 2.2139 - mae: 0.9279 - val_loss: 1.0003 - val_mae: 0.7495 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.39237\n",
      "4375/4375 - 68s - 16ms/step - loss: 1.6107 - mae: 0.8715 - val_loss: 0.9859 - val_mae: 0.7678 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.39237\n",
      "4375/4375 - 68s - 16ms/step - loss: 2.5275 - mae: 1.0238 - val_loss: 0.7883 - val_mae: 0.6950 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.39237\n",
      "4375/4375 - 67s - 15ms/step - loss: 1.4912 - mae: 0.8373 - val_loss: 2.1330 - val_mae: 1.1187 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 2.5743 - mae: 0.9798 - val_loss: 0.8989 - val_mae: 0.7129 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.6132 - mae: 0.6008 - val_loss: 0.5853 - val_mae: 0.5932 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 6.1197 - mae: 1.5035 - val_loss: 5.9247 - val_mae: 1.8084 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 1.4595 - mae: 0.8711 - val_loss: 0.6235 - val_mae: 0.6159 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.39237\n",
      "4375/4375 - 67s - 15ms/step - loss: 1.9543 - mae: 0.8761 - val_loss: 0.9106 - val_mae: 0.7146 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.39237\n",
      "4375/4375 - 67s - 15ms/step - loss: 4.3151 - mae: 1.1831 - val_loss: 4.8048 - val_mae: 1.4255 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.39237\n",
      "4375/4375 - 66s - 15ms/step - loss: 3.0601 - mae: 1.2051 - val_loss: 1.7499 - val_mae: 1.0046 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.39237\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.6743 - mae: 0.6235 - val_loss: 0.5204 - val_mae: 0.5358 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.39237 to 0.38356, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.4019 - mae: 0.4865 - val_loss: 0.3836 - val_mae: 0.4594 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.38356 to 0.26098, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.2721 - mae: 0.4022 - val_loss: 0.2610 - val_mae: 0.3801 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.26098 to 0.20862, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.2020 - mae: 0.3479 - val_loss: 0.2086 - val_mae: 0.3317 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.20862 to 0.17476, saving model to models/best_model_full.keras\n",
      "4375/4375 - 68s - 16ms/step - loss: 0.1676 - mae: 0.3179 - val_loss: 0.1748 - val_mae: 0.3137 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.17476 to 0.15355, saving model to models/best_model_full.keras\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.1462 - mae: 0.2974 - val_loss: 0.1536 - val_mae: 0.3018 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.15355 to 0.14570, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.1311 - mae: 0.2821 - val_loss: 0.1457 - val_mae: 0.2878 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.14570 to 0.13147, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.1224 - mae: 0.2729 - val_loss: 0.1315 - val_mae: 0.2731 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.13147 to 0.11207, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.1103 - mae: 0.2592 - val_loss: 0.1121 - val_mae: 0.2546 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.11207 to 0.10710, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0981 - mae: 0.2445 - val_loss: 0.1071 - val_mae: 0.2432 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.10710 to 0.10314, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0904 - mae: 0.2343 - val_loss: 0.1031 - val_mae: 0.2466 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.10314 to 0.09671, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0851 - mae: 0.2271 - val_loss: 0.0967 - val_mae: 0.2356 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.09671 to 0.09104, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0864 - mae: 0.2290 - val_loss: 0.0910 - val_mae: 0.2328 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.09104\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0756 - mae: 0.2148 - val_loss: 0.0921 - val_mae: 0.2289 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.09104 to 0.09046, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0774 - mae: 0.2176 - val_loss: 0.0905 - val_mae: 0.2289 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.09046\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0923 - mae: 0.2353 - val_loss: 0.1057 - val_mae: 0.2470 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.09046 to 0.08221, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0801 - mae: 0.2206 - val_loss: 0.0822 - val_mae: 0.2130 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.08221\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0741 - mae: 0.2123 - val_loss: 0.0894 - val_mae: 0.2299 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.08221\n",
      "4375/4375 - 68s - 16ms/step - loss: 0.0804 - mae: 0.2211 - val_loss: 0.0853 - val_mae: 0.2251 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.08221\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0728 - mae: 0.2105 - val_loss: 0.0901 - val_mae: 0.2356 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.08221\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0671 - mae: 0.2027 - val_loss: 0.0838 - val_mae: 0.2244 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.08221 to 0.07255, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0634 - mae: 0.1971 - val_loss: 0.0726 - val_mae: 0.2080 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.07255 to 0.06388, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0592 - mae: 0.1901 - val_loss: 0.0639 - val_mae: 0.1956 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.06388\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0541 - mae: 0.1820 - val_loss: 0.0842 - val_mae: 0.2264 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.06388 to 0.05549, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0581 - mae: 0.1877 - val_loss: 0.0555 - val_mae: 0.1814 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.05549 to 0.05540, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0601 - mae: 0.1804 - val_loss: 0.0554 - val_mae: 0.1796 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.05540 to 0.04978, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0483 - mae: 0.1707 - val_loss: 0.0498 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.04978 to 0.04678, saving model to models/best_model_full.keras\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0437 - mae: 0.1639 - val_loss: 0.0468 - val_mae: 0.1683 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.04678\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0419 - mae: 0.1601 - val_loss: 0.0491 - val_mae: 0.1708 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.04678 to 0.04171, saving model to models/best_model_full.keras\n",
      "4375/4375 - 68s - 16ms/step - loss: 0.0397 - mae: 0.1561 - val_loss: 0.0417 - val_mae: 0.1586 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.04171\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0384 - mae: 0.1536 - val_loss: 0.0428 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.04171 to 0.04067, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0384 - mae: 0.1530 - val_loss: 0.0407 - val_mae: 0.1564 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.04067\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0377 - mae: 0.1522 - val_loss: 0.0512 - val_mae: 0.1772 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.04067\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0385 - mae: 0.1534 - val_loss: 0.0452 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.04067 to 0.03772, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0356 - mae: 0.1479 - val_loss: 0.0377 - val_mae: 0.1510 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.03772\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0366 - mae: 0.1488 - val_loss: 0.0474 - val_mae: 0.1625 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.03772 to 0.03737, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0363 - mae: 0.1470 - val_loss: 0.0374 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.03737 to 0.03093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0322 - mae: 0.1401 - val_loss: 0.0309 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03093\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0307 - mae: 0.1367 - val_loss: 0.0435 - val_mae: 0.1623 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.03093\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0293 - mae: 0.1339 - val_loss: 0.0402 - val_mae: 0.1574 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03093\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0288 - mae: 0.1328 - val_loss: 0.0353 - val_mae: 0.1450 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.03093\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0286 - mae: 0.1321 - val_loss: 0.0325 - val_mae: 0.1400 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.03093\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0300 - mae: 0.1351 - val_loss: 0.0332 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.03093\n",
      "4375/4375 - 68s - 16ms/step - loss: 0.0277 - mae: 0.1303 - val_loss: 0.0356 - val_mae: 0.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.03093\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0268 - mae: 0.1279 - val_loss: 0.0333 - val_mae: 0.1418 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.03093\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0260 - mae: 0.1259 - val_loss: 0.0406 - val_mae: 0.1562 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.03093 to 0.02803, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0273 - mae: 0.1286 - val_loss: 0.0280 - val_mae: 0.1308 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.02803 to 0.02676, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0264 - mae: 0.1263 - val_loss: 0.0268 - val_mae: 0.1265 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02676\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0247 - mae: 0.1226 - val_loss: 0.0279 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02676\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0243 - mae: 0.1218 - val_loss: 0.0277 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02676\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0243 - mae: 0.1214 - val_loss: 0.0310 - val_mae: 0.1377 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02676\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0244 - mae: 0.1216 - val_loss: 0.0290 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02676\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0247 - mae: 0.1221 - val_loss: 0.0284 - val_mae: 0.1313 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02676\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0239 - mae: 0.1204 - val_loss: 0.0302 - val_mae: 0.1357 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.02676 to 0.02548, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0233 - mae: 0.1188 - val_loss: 0.0255 - val_mae: 0.1228 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02548\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0236 - mae: 0.1197 - val_loss: 0.0278 - val_mae: 0.1293 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02548\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0229 - mae: 0.1177 - val_loss: 0.0256 - val_mae: 0.1238 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.02548 to 0.02530, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0241 - mae: 0.1210 - val_loss: 0.0253 - val_mae: 0.1238 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02530\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0227 - mae: 0.1172 - val_loss: 0.0351 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02530\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0232 - mae: 0.1187 - val_loss: 0.0311 - val_mae: 0.1374 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02530\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0228 - mae: 0.1178 - val_loss: 0.0331 - val_mae: 0.1399 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02530\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0224 - mae: 0.1166 - val_loss: 0.0326 - val_mae: 0.1418 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.02530 to 0.02521, saving model to models/best_model_full.keras\n",
      "4375/4375 - 68s - 16ms/step - loss: 0.0222 - mae: 0.1162 - val_loss: 0.0252 - val_mae: 0.1245 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.02521 to 0.02287, saving model to models/best_model_full.keras\n",
      "4375/4375 - 68s - 16ms/step - loss: 0.0219 - mae: 0.1151 - val_loss: 0.0229 - val_mae: 0.1164 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02287\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0221 - mae: 0.1156 - val_loss: 0.0297 - val_mae: 0.1351 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02287\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0218 - mae: 0.1148 - val_loss: 0.0246 - val_mae: 0.1223 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.02287 to 0.01964, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0214 - mae: 0.1140 - val_loss: 0.0196 - val_mae: 0.1084 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0212 - mae: 0.1135 - val_loss: 0.0247 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0221 - mae: 0.1155 - val_loss: 0.0275 - val_mae: 0.1284 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0231 - mae: 0.1183 - val_loss: 0.0252 - val_mae: 0.1237 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0229 - mae: 0.1179 - val_loss: 0.0235 - val_mae: 0.1183 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0229 - mae: 0.1175 - val_loss: 0.0298 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01964\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0221 - mae: 0.1158 - val_loss: 0.0255 - val_mae: 0.1235 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01964\n",
      "4375/4375 - 68s - 15ms/step - loss: 0.0212 - mae: 0.1133 - val_loss: 0.0251 - val_mae: 0.1239 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01964\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0220 - mae: 0.1150 - val_loss: 0.0235 - val_mae: 0.1194 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0224 - mae: 0.1164 - val_loss: 0.0270 - val_mae: 0.1276 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0238 - mae: 0.1180 - val_loss: 0.0232 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0208 - mae: 0.1120 - val_loss: 0.0315 - val_mae: 0.1367 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0222 - mae: 0.1159 - val_loss: 0.0277 - val_mae: 0.1322 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01964\n",
      "4375/4375 - 65s - 15ms/step - loss: 0.0220 - mae: 0.1154 - val_loss: 0.0241 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0225 - mae: 0.1166 - val_loss: 0.0268 - val_mae: 0.1259 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0221 - mae: 0.1153 - val_loss: 0.0268 - val_mae: 0.1267 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0230 - mae: 0.1174 - val_loss: 0.0260 - val_mae: 0.1249 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0223 - mae: 0.1160 - val_loss: 0.0214 - val_mae: 0.1138 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0221 - mae: 0.1154 - val_loss: 0.0227 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0221 - mae: 0.1154 - val_loss: 0.0287 - val_mae: 0.1311 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01964\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0220 - mae: 0.1147 - val_loss: 0.0227 - val_mae: 0.1175 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.01964 to 0.00795, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0061 - mae: 0.0609 - val_loss: 0.0079 - val_mae: 0.0685 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.00795 to 0.00731, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0073 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.00731 to 0.00722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0045 - mae: 0.0528 - val_loss: 0.0072 - val_mae: 0.0653 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.00722 to 0.00692, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0042 - mae: 0.0514 - val_loss: 0.0069 - val_mae: 0.0636 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.00692 to 0.00670, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0067 - val_mae: 0.0625 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.00670\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0039 - mae: 0.0492 - val_loss: 0.0068 - val_mae: 0.0631 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.00670\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0038 - mae: 0.0485 - val_loss: 0.0070 - val_mae: 0.0642 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.00670 to 0.00658, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0066 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.00658 to 0.00657, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0035 - mae: 0.0471 - val_loss: 0.0066 - val_mae: 0.0621 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.00657 to 0.00631, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0063 - val_mae: 0.0607 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00631\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0034 - mae: 0.0459 - val_loss: 0.0064 - val_mae: 0.0611 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.00631 to 0.00617, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0033 - mae: 0.0454 - val_loss: 0.0062 - val_mae: 0.0601 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00617\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0062 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00617\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0063 - val_mae: 0.0608 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.00617 to 0.00598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0060 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.00598\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0060 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.00598 to 0.00590, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0059 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00590\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0059 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00590\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0060 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.00590 to 0.00587, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0059 - val_mae: 0.0585 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00587\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0060 - val_mae: 0.0591 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00587\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0027 - mae: 0.0413 - val_loss: 0.0061 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.00587 to 0.00572, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0057 - val_mae: 0.0577 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00572\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0027 - mae: 0.0407 - val_loss: 0.0059 - val_mae: 0.0584 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.00572 to 0.00568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0057 - val_mae: 0.0575 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.00568 to 0.00562, saving model to models/best_model_full.keras\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0056 - val_mae: 0.0573 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00562\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0058 - val_mae: 0.0582 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00562\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0059 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00562\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0056 - val_mae: 0.0572 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.00562 to 0.00551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0055 - val_mae: 0.0566 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00551\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0055 - val_mae: 0.0566 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00551\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0056 - val_mae: 0.0573 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.00551 to 0.00550, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0023 - mae: 0.0384 - val_loss: 0.0055 - val_mae: 0.0564 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00550 to 0.00548, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0023 - mae: 0.0380 - val_loss: 0.0055 - val_mae: 0.0563 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00548\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0057 - val_mae: 0.0575 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.00548 to 0.00542, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0054 - val_mae: 0.0560 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.00542 to 0.00540, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0054 - val_mae: 0.0560 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00540\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0054 - val_mae: 0.0561 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00540\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0055 - val_mae: 0.0568 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00540\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0022 - mae: 0.0367 - val_loss: 0.0055 - val_mae: 0.0562 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.00540 to 0.00532, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0053 - val_mae: 0.0554 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00532\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0021 - mae: 0.0365 - val_loss: 0.0054 - val_mae: 0.0562 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00532\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0055 - val_mae: 0.0566 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.00532 to 0.00527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0021 - mae: 0.0359 - val_loss: 0.0053 - val_mae: 0.0552 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00527\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0021 - mae: 0.0359 - val_loss: 0.0054 - val_mae: 0.0560 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00527\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0020 - mae: 0.0356 - val_loss: 0.0054 - val_mae: 0.0559 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.00527 to 0.00525, saving model to models/best_model_full.keras\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0020 - mae: 0.0355 - val_loss: 0.0053 - val_mae: 0.0551 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00525\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0020 - mae: 0.0352 - val_loss: 0.0053 - val_mae: 0.0556 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00525\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0053 - val_mae: 0.0553 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00525\n",
      "4375/4375 - 66s - 15ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0053 - val_mae: 0.0551 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00525\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0019 - mae: 0.0347 - val_loss: 0.0053 - val_mae: 0.0551 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00525\n",
      "4375/4375 - 68s - 15ms/step - loss: 0.0019 - mae: 0.0345 - val_loss: 0.0053 - val_mae: 0.0554 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00525\n",
      "4375/4375 - 67s - 15ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0054 - val_mae: 0.0555 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00525\n",
      "4375/4375 - 68s - 15ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0053 - val_mae: 0.0553 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.00525 to 0.00522, saving model to models/best_model_full.keras\n",
      "4375/4375 - 71s - 16ms/step - loss: 0.0019 - mae: 0.0341 - val_loss: 0.0052 - val_mae: 0.0549 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.00522 to 0.00519, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0018 - mae: 0.0339 - val_loss: 0.0052 - val_mae: 0.0548 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00519\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0052 - val_mae: 0.0547 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00519\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0018 - mae: 0.0337 - val_loss: 0.0053 - val_mae: 0.0552 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00519\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0053 - val_mae: 0.0550 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.00519 to 0.00517, saving model to models/best_model_full.keras\n",
      "4375/4375 - 71s - 16ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0052 - val_mae: 0.0546 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00517\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0018 - mae: 0.0331 - val_loss: 0.0053 - val_mae: 0.0553 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss improved from 0.00517 to 0.00513, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0017 - mae: 0.0331 - val_loss: 0.0051 - val_mae: 0.0543 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00513\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0052 - val_mae: 0.0549 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00513\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0052 - val_mae: 0.0550 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00513\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0051 - val_mae: 0.0544 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.00513 to 0.00507, saving model to models/best_model_full.keras\n",
      "4375/4375 - 71s - 16ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0051 - val_mae: 0.0540 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00507\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0052 - val_mae: 0.0545 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00507\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0051 - val_mae: 0.0539 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00507\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0052 - val_mae: 0.0544 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.00507 to 0.00506, saving model to models/best_model_full.keras\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0051 - val_mae: 0.0537 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0051 - val_mae: 0.0540 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0016 - mae: 0.0317 - val_loss: 0.0052 - val_mae: 0.0549 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0016 - mae: 0.0316 - val_loss: 0.0051 - val_mae: 0.0540 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00506\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0053 - val_mae: 0.0552 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00506\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0051 - val_mae: 0.0542 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00506\n",
      "4375/4375 - 71s - 16ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0054 - val_mae: 0.0560 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0052 - val_mae: 0.0548 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0054 - val_mae: 0.0556 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0052 - val_mae: 0.0544 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0015 - mae: 0.0307 - val_loss: 0.0051 - val_mae: 0.0537 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00506\n",
      "4375/4375 - 69s - 16ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0052 - val_mae: 0.0541 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00506\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0015 - mae: 0.0305 - val_loss: 0.0052 - val_mae: 0.0545 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00506\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0015 - mae: 0.0305 - val_loss: 0.0052 - val_mae: 0.0549 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00506\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0015 - mae: 0.0304 - val_loss: 0.0051 - val_mae: 0.0541 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.00506 to 0.00501, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0050 - val_mae: 0.0534 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00501\n",
      "4375/4375 - 70s - 16ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0051 - val_mae: 0.0537 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss improved from 0.00501 to 0.00462, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 9.5778e-04 - mae: 0.0245 - val_loss: 0.0046 - val_mae: 0.0508 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.00462 to 0.00461, saving model to models/best_model_full.keras\n",
      "4375/4375 - 69s - 16ms/step - loss: 9.0596e-04 - mae: 0.0238 - val_loss: 0.0046 - val_mae: 0.0508 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss improved from 0.00461 to 0.00461, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.9056e-04 - mae: 0.0236 - val_loss: 0.0046 - val_mae: 0.0507 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00461\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.7927e-04 - mae: 0.0235 - val_loss: 0.0046 - val_mae: 0.0508 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.00461 to 0.00458, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 8.7196e-04 - mae: 0.0234 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss improved from 0.00458 to 0.00457, saving model to models/best_model_full.keras\n",
      "4375/4375 - 71s - 16ms/step - loss: 8.6612e-04 - mae: 0.0233 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00457\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.5989e-04 - mae: 0.0232 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00457\n",
      "4375/4375 - 71s - 16ms/step - loss: 8.5401e-04 - mae: 0.0231 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00457\n",
      "4375/4375 - 69s - 16ms/step - loss: 8.4869e-04 - mae: 0.0231 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00457\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.4215e-04 - mae: 0.0230 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00457\n",
      "4375/4375 - 69s - 16ms/step - loss: 8.3802e-04 - mae: 0.0229 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00457\n",
      "4375/4375 - 69s - 16ms/step - loss: 8.3491e-04 - mae: 0.0229 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00457\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.3251e-04 - mae: 0.0228 - val_loss: 0.0046 - val_mae: 0.0505 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00457\n",
      "4375/4375 - 69s - 16ms/step - loss: 8.2913e-04 - mae: 0.0228 - val_loss: 0.0046 - val_mae: 0.0507 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00457\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.2484e-04 - mae: 0.0227 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00457\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.2135e-04 - mae: 0.0227 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.00457 to 0.00456, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.1809e-04 - mae: 0.0226 - val_loss: 0.0046 - val_mae: 0.0505 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00456\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.1491e-04 - mae: 0.0226 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00456\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.1160e-04 - mae: 0.0225 - val_loss: 0.0046 - val_mae: 0.0505 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00456\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.0765e-04 - mae: 0.0225 - val_loss: 0.0046 - val_mae: 0.0507 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00456\n",
      "4375/4375 - 70s - 16ms/step - loss: 8.0415e-04 - mae: 0.0224 - val_loss: 0.0046 - val_mae: 0.0506 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss improved from 0.00456 to 0.00455, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.6150e-04 - mae: 0.0218 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00455\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.5480e-04 - mae: 0.0217 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00455\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.5256e-04 - mae: 0.0216 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00455\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.5113e-04 - mae: 0.0216 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00455\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.5002e-04 - mae: 0.0216 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss improved from 0.00455 to 0.00455, saving model to models/best_model_full.keras\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4922e-04 - mae: 0.0216 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4835e-04 - mae: 0.0216 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss improved from 0.00455 to 0.00455, saving model to models/best_model_full.keras\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4758e-04 - mae: 0.0216 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4703e-04 - mae: 0.0216 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4632e-04 - mae: 0.0216 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4586e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4526e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4472e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00455\n",
      "4375/4375 - 72s - 16ms/step - loss: 7.4430e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4388e-04 - mae: 0.0215 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4316e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4269e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4240e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4191e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00455\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.4141e-04 - mae: 0.0215 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00455\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3710e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss improved from 0.00455 to 0.00454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3591e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3554e-04 - mae: 0.0214 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3534e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3521e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3512e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3504e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3498e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3490e-04 - mae: 0.0214 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3487e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3480e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3474e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3470e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3463e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3459e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3456e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3451e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3445e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3444e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3439e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3432e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3428e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3426e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3421e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3416e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss improved from 0.00454 to 0.00454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3415e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3408e-04 - mae: 0.0214 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3407e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3402e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3397e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3394e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3389e-04 - mae: 0.0214 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3385e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3382e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3378e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3376e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3370e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3365e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3363e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3357e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3354e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3354e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3347e-04 - mae: 0.0214 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3345e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3339e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3335e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3330e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3328e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3324e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3320e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3317e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3318e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3310e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3306e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3301e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3301e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3294e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3291e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3288e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3284e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3279e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3275e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.00454\n",
      "4375/4375 - 71s - 16ms/step - loss: 7.3272e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss improved from 0.00454 to 0.00454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3271e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3264e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3258e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3256e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3252e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3248e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3243e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3241e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3241e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3238e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3229e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3228e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3227e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3219e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 15ms/step - loss: 7.3218e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss improved from 0.00454 to 0.00454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3210e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3210e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3207e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3201e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3196e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3192e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3190e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3184e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3184e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 15ms/step - loss: 7.3181e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3179e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 15ms/step - loss: 7.3175e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3171e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3167e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3164e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3160e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3158e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3151e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3152e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3148e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3146e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3140e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3134e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3134e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss improved from 0.00454 to 0.00454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3128e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3128e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3125e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3119e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3117e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 15ms/step - loss: 7.3110e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3108e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3109e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3104e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3101e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3097e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3094e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3089e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3086e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3085e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3080e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3075e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3073e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3071e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3066e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 15ms/step - loss: 7.3064e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3060e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3058e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.00454\n",
      "4375/4375 - 67s - 15ms/step - loss: 7.3053e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3051e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3047e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3045e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3039e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 384/1000\n",
      "\n",
      "Epoch 384: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3035e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 385/1000\n",
      "\n",
      "Epoch 385: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.3035e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 386/1000\n",
      "\n",
      "Epoch 386: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3030e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 387/1000\n",
      "\n",
      "Epoch 387: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3028e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 388/1000\n",
      "\n",
      "Epoch 388: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3024e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 389/1000\n",
      "\n",
      "Epoch 389: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 15ms/step - loss: 7.3022e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 390/1000\n",
      "\n",
      "Epoch 390: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3017e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 391/1000\n",
      "\n",
      "Epoch 391: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3014e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 392/1000\n",
      "\n",
      "Epoch 392: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3011e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 393/1000\n",
      "\n",
      "Epoch 393: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3007e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 394/1000\n",
      "\n",
      "Epoch 394: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.3006e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 395/1000\n",
      "\n",
      "Epoch 395: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.3003e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 396/1000\n",
      "\n",
      "Epoch 396: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.2998e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 397/1000\n",
      "\n",
      "Epoch 397: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.2995e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 398/1000\n",
      "\n",
      "Epoch 398: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.2991e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 399/1000\n",
      "\n",
      "Epoch 399: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.2992e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 400/1000\n",
      "\n",
      "Epoch 400: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.2985e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 401/1000\n",
      "\n",
      "Epoch 401: val_loss did not improve from 0.00454\n",
      "4375/4375 - 68s - 16ms/step - loss: 7.2983e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 402/1000\n",
      "\n",
      "Epoch 402: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.2976e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 403/1000\n",
      "\n",
      "Epoch 403: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.2978e-04 - mae: 0.0213 - val_loss: 0.0046 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 404/1000\n",
      "\n",
      "Epoch 404: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.2971e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0504 - learning_rate: 1.0000e-07\n",
      "Epoch 405/1000\n",
      "\n",
      "Epoch 405: val_loss did not improve from 0.00454\n",
      "4375/4375 - 70s - 16ms/step - loss: 7.2970e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 406/1000\n",
      "\n",
      "Epoch 406: val_loss did not improve from 0.00454\n",
      "4375/4375 - 69s - 16ms/step - loss: 7.2968e-04 - mae: 0.0213 - val_loss: 0.0045 - val_mae: 0.0503 - learning_rate: 1.0000e-07\n",
      "Epoch 406: early stopping\n",
      "Restoring model weights from the end of the best epoch: 356.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 7ms/step\n",
      "Mean positioning error: 0.0794 m\n",
      "Median positioning error: 0.0687 m\n",
      "90th percentile error: 0.1461 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 27772.619794,
   "end_time": "2025-08-29T20:59:02.436403",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-29T13:16:09.816609",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
