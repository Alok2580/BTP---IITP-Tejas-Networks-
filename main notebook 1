{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "398c9163",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-08T13:39:34.053821Z",
     "iopub.status.busy": "2025-08-08T13:39:34.053603Z",
     "iopub.status.idle": "2025-08-08T13:39:35.442134Z",
     "shell.execute_reply": "2025-08-08T13:39:35.441141Z"
    },
    "papermill": {
     "duration": 1.393395,
     "end_time": "2025-08-08T13:39:35.443817",
     "exception": false,
     "start_time": "2025-08-08T13:39:34.050422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fd08c556",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:39:35.451097Z",
     "iopub.status.busy": "2025-08-08T13:39:35.450726Z",
     "iopub.status.idle": "2025-08-08T13:39:50.049742Z",
     "shell.execute_reply": "2025-08-08T13:39:50.049078Z"
    },
    "papermill": {
     "duration": 14.603339,
     "end_time": "2025-08-08T13:39:50.051239",
     "exception": false,
     "start_time": "2025-08-08T13:39:35.447900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-08 13:39:37.267354: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754660377.466257      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754660377.541796      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ecb52b8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:39:50.056648Z",
     "iopub.status.busy": "2025-08-08T13:39:50.056188Z",
     "iopub.status.idle": "2025-08-08T13:39:50.060545Z",
     "shell.execute_reply": "2025-08-08T13:39:50.059970Z"
    },
    "papermill": {
     "duration": 0.007891,
     "end_time": "2025-08-08T13:39:50.061501",
     "exception": false,
     "start_time": "2025-08-08T13:39:50.053610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "32ec3252",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:39:50.065970Z",
     "iopub.status.busy": "2025-08-08T13:39:50.065757Z",
     "iopub.status.idle": "2025-08-08T13:39:50.068969Z",
     "shell.execute_reply": "2025-08-08T13:39:50.068416Z"
    },
    "papermill": {
     "duration": 0.006607,
     "end_time": "2025-08-08T13:39:50.070036",
     "exception": false,
     "start_time": "2025-08-08T13:39:50.063429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5b80e907",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:39:50.076181Z",
     "iopub.status.busy": "2025-08-08T13:39:50.075977Z",
     "iopub.status.idle": "2025-08-08T17:41:44.261662Z",
     "shell.execute_reply": "2025-08-08T17:41:44.260960Z"
    },
    "papermill": {
     "duration": 14514.18983,
     "end_time": "2025-08-08T17:41:44.262947",
     "exception": false,
     "start_time": "2025-08-08T13:39:50.073117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754660412.531587      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754660421.686907      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754660432.201488      56 service.cc:148] XLA service 0x7cbd58018130 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754660432.202403      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754660436.061672      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 6.94839, saving model to models/best_model_full.keras\n",
      "4375/4375 - 89s - 20ms/step - loss: 59.8307 - mae: 5.0636 - val_loss: 6.9484 - val_mae: 2.0638 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 6.94839 to 4.57002, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 6.5673 - mae: 1.9838 - val_loss: 4.5700 - val_mae: 1.6526 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 4.57002 to 2.96925, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 3.3925 - mae: 1.4146 - val_loss: 2.9692 - val_mae: 1.3475 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 2.96925 to 1.00199, saving model to models/best_model_full.keras\n",
      "4375/4375 - 76s - 17ms/step - loss: 1.7063 - mae: 1.0008 - val_loss: 1.0020 - val_mae: 0.7849 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.00199 to 0.69052, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.8634 - mae: 0.7183 - val_loss: 0.6905 - val_mae: 0.6557 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 0.69052 to 0.59118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.2383 - mae: 0.7693 - val_loss: 0.5912 - val_mae: 0.6066 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.59118 to 0.45991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.5167 - mae: 0.5614 - val_loss: 0.4599 - val_mae: 0.5324 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.45991 to 0.44980, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.5283 - mae: 0.5675 - val_loss: 0.4498 - val_mae: 0.5190 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.44980\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4990 - mae: 0.5333 - val_loss: 0.4645 - val_mae: 0.5286 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.44980 to 0.27751, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4232 - mae: 0.5055 - val_loss: 0.2775 - val_mae: 0.4203 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.27751\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3677 - mae: 0.4724 - val_loss: 0.3113 - val_mae: 0.4331 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.27751\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3568 - mae: 0.4648 - val_loss: 0.2894 - val_mae: 0.4288 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.27751\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3300 - mae: 0.4458 - val_loss: 0.3319 - val_mae: 0.4531 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.27751\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3642 - mae: 0.4692 - val_loss: 0.3356 - val_mae: 0.4583 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.27751 to 0.21018, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4153 - mae: 0.4580 - val_loss: 0.2102 - val_mae: 0.3597 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.21018\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2543 - mae: 0.3941 - val_loss: 0.9340 - val_mae: 0.8036 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.21018\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3093 - mae: 0.4323 - val_loss: 0.4740 - val_mae: 0.5589 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.2805 - mae: 0.4103 - val_loss: 0.4929 - val_mae: 0.5523 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.3704 - mae: 0.4669 - val_loss: 0.3263 - val_mae: 0.4491 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.3357 - mae: 0.4508 - val_loss: 0.3236 - val_mae: 0.4369 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.3157 - mae: 0.4369 - val_loss: 0.2428 - val_mae: 0.3819 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.8075 - mae: 0.5705 - val_loss: 0.4321 - val_mae: 0.4390 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2749 - mae: 0.4110 - val_loss: 0.2248 - val_mae: 0.3753 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.4942 - mae: 0.4754 - val_loss: 0.2329 - val_mae: 0.3792 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.2612 - mae: 0.3970 - val_loss: 0.7014 - val_mae: 0.6467 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.3380 - mae: 0.4363 - val_loss: 14.7493 - val_mae: 2.2967 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.9287 - mae: 0.5714 - val_loss: 0.3077 - val_mae: 0.4365 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.4074 - mae: 0.4935 - val_loss: 0.6118 - val_mae: 0.5226 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.5356 - mae: 0.5087 - val_loss: 0.2829 - val_mae: 0.4161 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.2689 - mae: 0.4024 - val_loss: 0.2797 - val_mae: 0.4156 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.8386 - mae: 0.5652 - val_loss: 0.8214 - val_mae: 0.5934 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.21018\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3344 - mae: 0.4499 - val_loss: 0.5137 - val_mae: 0.4888 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.21018\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.7334 - mae: 0.5704 - val_loss: 0.2867 - val_mae: 0.4146 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.21018\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.9874 - mae: 0.5814 - val_loss: 0.3815 - val_mae: 0.4842 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.21018\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.6418 - mae: 0.5186 - val_loss: 0.4516 - val_mae: 0.4770 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.21018 to 0.14977, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.1727 - mae: 0.3227 - val_loss: 0.1498 - val_mae: 0.2943 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.14977\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.1055 - mae: 0.2528 - val_loss: 0.7501 - val_mae: 0.3106 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.14977\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0686 - mae: 0.2046 - val_loss: 0.1684 - val_mae: 0.1985 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.14977 to 0.04996, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0507 - mae: 0.1763 - val_loss: 0.0500 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.04996 to 0.04893, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0418 - mae: 0.1602 - val_loss: 0.0489 - val_mae: 0.1679 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.04893 to 0.04462, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0357 - mae: 0.1482 - val_loss: 0.0446 - val_mae: 0.1654 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.04462 to 0.03276, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0320 - mae: 0.1405 - val_loss: 0.0328 - val_mae: 0.1410 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.03276\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0293 - mae: 0.1343 - val_loss: 0.0335 - val_mae: 0.1429 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.03276 to 0.02741, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0273 - mae: 0.1299 - val_loss: 0.0274 - val_mae: 0.1294 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.02741\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0251 - mae: 0.1244 - val_loss: 0.0285 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.02741\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0242 - mae: 0.1224 - val_loss: 0.0307 - val_mae: 0.1375 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.02741\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0230 - mae: 0.1192 - val_loss: 0.0275 - val_mae: 0.1291 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.02741 to 0.02428, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0221 - mae: 0.1169 - val_loss: 0.0243 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0213 - mae: 0.1146 - val_loss: 0.0252 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0206 - mae: 0.1127 - val_loss: 0.0256 - val_mae: 0.1249 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0199 - mae: 0.1110 - val_loss: 0.0252 - val_mae: 0.1175 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0197 - mae: 0.1102 - val_loss: 0.0257 - val_mae: 0.1231 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.02428 to 0.02158, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0193 - mae: 0.1091 - val_loss: 0.0216 - val_mae: 0.1138 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.02158\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0186 - mae: 0.1074 - val_loss: 0.0217 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.02158\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0181 - mae: 0.1056 - val_loss: 0.0217 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.02158\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0177 - mae: 0.1044 - val_loss: 0.0224 - val_mae: 0.1169 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.02158\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0178 - mae: 0.1049 - val_loss: 0.0317 - val_mae: 0.1391 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.02158\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0175 - mae: 0.1040 - val_loss: 0.0245 - val_mae: 0.1213 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.02158\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0170 - mae: 0.1027 - val_loss: 0.0224 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.02158\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0168 - mae: 0.1018 - val_loss: 0.0245 - val_mae: 0.1235 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.02158 to 0.02120, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0166 - mae: 0.1012 - val_loss: 0.0212 - val_mae: 0.1146 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.02120 to 0.02119, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0165 - mae: 0.1011 - val_loss: 0.0212 - val_mae: 0.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.02119\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0163 - mae: 0.1003 - val_loss: 0.0213 - val_mae: 0.1142 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.02119 to 0.01936, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0161 - mae: 0.0996 - val_loss: 0.0194 - val_mae: 0.1093 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.01936\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0162 - mae: 0.1001 - val_loss: 0.0243 - val_mae: 0.1231 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.01936\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0158 - mae: 0.0987 - val_loss: 0.0202 - val_mae: 0.1106 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.01936\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0157 - mae: 0.0985 - val_loss: 0.0210 - val_mae: 0.1134 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.01936\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0157 - mae: 0.0982 - val_loss: 0.0194 - val_mae: 0.1089 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.01936 to 0.01923, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0155 - mae: 0.0978 - val_loss: 0.0192 - val_mae: 0.1084 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.01923 to 0.01888, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0970 - val_loss: 0.0189 - val_mae: 0.1075 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.01888 to 0.01849, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0154 - mae: 0.0975 - val_loss: 0.0185 - val_mae: 0.1064 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.01849\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0155 - mae: 0.0975 - val_loss: 0.0216 - val_mae: 0.1154 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.01849\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0153 - mae: 0.0970 - val_loss: 0.0241 - val_mae: 0.1231 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.01849\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0151 - mae: 0.0966 - val_loss: 0.0200 - val_mae: 0.1116 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.01849 to 0.01828, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0153 - mae: 0.0970 - val_loss: 0.0183 - val_mae: 0.1057 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.01828\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0968 - val_loss: 0.0210 - val_mae: 0.1134 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.01828\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0150 - mae: 0.0961 - val_loss: 0.0195 - val_mae: 0.1076 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.01828\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0150 - mae: 0.0961 - val_loss: 0.0194 - val_mae: 0.1088 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.01828\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0967 - val_loss: 0.0191 - val_mae: 0.1082 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.01828\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0967 - val_loss: 0.0210 - val_mae: 0.1133 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.01828\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0151 - mae: 0.0965 - val_loss: 0.0187 - val_mae: 0.1055 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.01828\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0149 - mae: 0.0957 - val_loss: 0.0202 - val_mae: 0.1118 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.01828 to 0.01786, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0153 - mae: 0.0970 - val_loss: 0.0179 - val_mae: 0.1045 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0148 - mae: 0.0956 - val_loss: 0.0203 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0151 - mae: 0.0964 - val_loss: 0.0205 - val_mae: 0.1105 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0151 - mae: 0.0966 - val_loss: 0.0181 - val_mae: 0.1049 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0149 - mae: 0.0955 - val_loss: 0.0208 - val_mae: 0.1130 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0153 - mae: 0.0969 - val_loss: 0.0188 - val_mae: 0.1072 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01786\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0151 - mae: 0.0962 - val_loss: 0.0191 - val_mae: 0.1088 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0149 - mae: 0.0959 - val_loss: 0.0189 - val_mae: 0.1079 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0150 - mae: 0.0960 - val_loss: 0.0201 - val_mae: 0.1100 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.01786\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0151 - mae: 0.0962 - val_loss: 0.0188 - val_mae: 0.1068 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.01786 to 0.01553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0150 - mae: 0.0961 - val_loss: 0.0155 - val_mae: 0.0970 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01553\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0153 - mae: 0.0968 - val_loss: 0.0224 - val_mae: 0.1176 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01553\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0965 - val_loss: 0.0193 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01553\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0150 - mae: 0.0960 - val_loss: 0.0176 - val_mae: 0.1040 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01553\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0965 - val_loss: 0.0221 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.01553\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0964 - val_loss: 0.0177 - val_mae: 0.1041 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0153 - mae: 0.0968 - val_loss: 0.0188 - val_mae: 0.1061 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0150 - mae: 0.0958 - val_loss: 0.0200 - val_mae: 0.1115 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0152 - mae: 0.0965 - val_loss: 0.0198 - val_mae: 0.1087 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0155 - mae: 0.0974 - val_loss: 0.0250 - val_mae: 0.1265 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0152 - mae: 0.0965 - val_loss: 0.0214 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0155 - mae: 0.0973 - val_loss: 0.0222 - val_mae: 0.1169 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0157 - mae: 0.0976 - val_loss: 0.0194 - val_mae: 0.1089 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0152 - mae: 0.0965 - val_loss: 0.0167 - val_mae: 0.1013 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0155 - mae: 0.0973 - val_loss: 0.0177 - val_mae: 0.1037 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0153 - mae: 0.0967 - val_loss: 0.0290 - val_mae: 0.1333 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0155 - mae: 0.0972 - val_loss: 0.0171 - val_mae: 0.1013 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0153 - mae: 0.0967 - val_loss: 0.0204 - val_mae: 0.1120 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0158 - mae: 0.0981 - val_loss: 0.0176 - val_mae: 0.1033 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0155 - mae: 0.0973 - val_loss: 0.0268 - val_mae: 0.1285 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01553\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0159 - mae: 0.0983 - val_loss: 0.0202 - val_mae: 0.1124 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.01553 to 0.00805, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0051 - mae: 0.0558 - val_loss: 0.0080 - val_mae: 0.0696 - learning_rate: 1.0000e-04\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.00805 to 0.00776, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0042 - mae: 0.0510 - val_loss: 0.0078 - val_mae: 0.0683 - learning_rate: 1.0000e-04\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.00776 to 0.00769, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0039 - mae: 0.0491 - val_loss: 0.0077 - val_mae: 0.0682 - learning_rate: 1.0000e-04\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.00769 to 0.00758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0076 - val_mae: 0.0676 - learning_rate: 1.0000e-04\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.00758\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0035 - mae: 0.0469 - val_loss: 0.0076 - val_mae: 0.0677 - learning_rate: 1.0000e-04\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.00758\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0034 - mae: 0.0461 - val_loss: 0.0077 - val_mae: 0.0680 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.00758 to 0.00741, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0033 - mae: 0.0454 - val_loss: 0.0074 - val_mae: 0.0667 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.00741 to 0.00733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0073 - val_mae: 0.0665 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.00733\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0075 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.00733\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0077 - val_mae: 0.0683 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.00733\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0075 - val_mae: 0.0672 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.00733 to 0.00728, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0073 - val_mae: 0.0660 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.00728 to 0.00725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0073 - val_mae: 0.0660 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.00725 to 0.00723, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0072 - val_mae: 0.0658 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.00723\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0073 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.00723 to 0.00722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0027 - mae: 0.0414 - val_loss: 0.0072 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.00722\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0073 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.00722\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0073 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.00722\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0074 - val_mae: 0.0669 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.00722\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0074 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.00722\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0077 - val_mae: 0.0684 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.00722 to 0.00721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0072 - val_mae: 0.0656 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00721\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0073 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00721\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0072 - val_mae: 0.0657 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.00721 to 0.00720, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0072 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00720\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0023 - mae: 0.0384 - val_loss: 0.0073 - val_mae: 0.0662 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00720\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0023 - mae: 0.0382 - val_loss: 0.0073 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00720\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0072 - val_mae: 0.0657 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.00720\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0073 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.00720\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0022 - mae: 0.0376 - val_loss: 0.0072 - val_mae: 0.0657 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00720\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0072 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00720\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0073 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.00720 to 0.00684, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0068 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0068 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0016 - mae: 0.0316 - val_loss: 0.0068 - val_mae: 0.0637 - learning_rate: 1.0000e-05\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00684\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0016 - mae: 0.0315 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0069 - val_mae: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0310 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00684\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0069 - val_mae: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0069 - val_mae: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0069 - val_mae: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00684\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0307 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0307 - val_loss: 0.0069 - val_mae: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0069 - val_mae: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0305 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0305 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0015 - mae: 0.0300 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00684\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0069 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 196: early stopping\n",
      "Restoring model weights from the end of the best epoch: 146.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 5s - 8ms/step\n",
      "Mean positioning error: 0.1005 m\n",
      "Median positioning error: 0.0907 m\n",
      "90th percentile error: 0.1779 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 14537.482053,
   "end_time": "2025-08-08T17:41:47.507668",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-08T13:39:30.025615",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
