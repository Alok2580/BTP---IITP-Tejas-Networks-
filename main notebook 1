{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ef19dffb",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-14T19:46:28.811757Z",
     "iopub.status.busy": "2025-08-14T19:46:28.811488Z",
     "iopub.status.idle": "2025-08-14T19:46:30.460327Z",
     "shell.execute_reply": "2025-08-14T19:46:30.459459Z"
    },
    "papermill": {
     "duration": 1.653833,
     "end_time": "2025-08-14T19:46:30.461666",
     "exception": false,
     "start_time": "2025-08-14T19:46:28.807833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c63ed521",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:46:30.467137Z",
     "iopub.status.busy": "2025-08-14T19:46:30.466786Z",
     "iopub.status.idle": "2025-08-14T19:46:45.772477Z",
     "shell.execute_reply": "2025-08-14T19:46:45.771699Z"
    },
    "papermill": {
     "duration": 15.309762,
     "end_time": "2025-08-14T19:46:45.774026",
     "exception": false,
     "start_time": "2025-08-14T19:46:30.464264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-14 19:46:32.109801: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755200792.301321      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755200792.355479      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "242f909c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:46:45.779752Z",
     "iopub.status.busy": "2025-08-14T19:46:45.779287Z",
     "iopub.status.idle": "2025-08-14T19:46:45.783894Z",
     "shell.execute_reply": "2025-08-14T19:46:45.783311Z"
    },
    "papermill": {
     "duration": 0.008601,
     "end_time": "2025-08-14T19:46:45.785150",
     "exception": false,
     "start_time": "2025-08-14T19:46:45.776549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 19   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512 #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "60ef2ea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:46:45.790278Z",
     "iopub.status.busy": "2025-08-14T19:46:45.789840Z",
     "iopub.status.idle": "2025-08-14T19:46:45.793238Z",
     "shell.execute_reply": "2025-08-14T19:46:45.792638Z"
    },
    "papermill": {
     "duration": 0.007165,
     "end_time": "2025-08-14T19:46:45.794427",
     "exception": false,
     "start_time": "2025-08-14T19:46:45.787262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "65c45fa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:46:45.800104Z",
     "iopub.status.busy": "2025-08-14T19:46:45.799879Z",
     "iopub.status.idle": "2025-08-14T22:38:53.961630Z",
     "shell.execute_reply": "2025-08-14T22:38:53.960796Z"
    },
    "papermill": {
     "duration": 10328.166294,
     "end_time": "2025-08-14T22:38:53.962924",
     "exception": false,
     "start_time": "2025-08-14T19:46:45.796630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755200830.443047      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755200840.584562      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">238</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">175,360</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">238</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">238</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">60,928</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m238\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m175,360\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m238\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m238\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m60,928\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">764,938</span> (2.92 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m764,938\u001b[0m (2.92 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">764,422</span> (2.92 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m764,422\u001b[0m (2.92 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755200852.398635      56 service.cc:148] XLA service 0x7b63080191e0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755200852.399527      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755200856.720009      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 79.78192, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 114.3398 - mae: 7.7080 - val_loss: 79.7819 - val_mae: 6.2945 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 79.78192 to 7.05905, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 16.2076 - mae: 2.9937 - val_loss: 7.0590 - val_mae: 2.0482 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 7.05905\n",
      "4375/4375 - 37s - 8ms/step - loss: 5.5848 - mae: 1.7174 - val_loss: 71.1711 - val_mae: 6.0042 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.05905 to 2.25159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 4.4844 - mae: 1.4122 - val_loss: 2.2516 - val_mae: 1.0127 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.25159 to 1.82045, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 4.7729 - mae: 1.4640 - val_loss: 1.8205 - val_mae: 0.9391 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.82045 to 1.16272, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.5114 - mae: 0.9965 - val_loss: 1.1627 - val_mae: 0.6822 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.16272 to 0.60697, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.3481 - mae: 0.8054 - val_loss: 0.6070 - val_mae: 0.6229 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.60697\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.3641 - mae: 0.9568 - val_loss: 0.8978 - val_mae: 0.6828 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.60697\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.2818 - mae: 0.7814 - val_loss: 0.6607 - val_mae: 0.6285 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.60697 to 0.54903, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.5920 - mae: 0.9715 - val_loss: 0.5490 - val_mae: 0.5782 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.54903\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.1545 - mae: 0.6965 - val_loss: 1.1475 - val_mae: 0.5216 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.54903\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.4498 - mae: 0.5208 - val_loss: 1.0631 - val_mae: 0.5510 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.54903 to 0.52655, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.6189 - mae: 1.0444 - val_loss: 0.5265 - val_mae: 0.5677 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.4571 - mae: 0.5264 - val_loss: 0.5789 - val_mae: 0.6167 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.4907 - mae: 0.8786 - val_loss: 0.7423 - val_mae: 0.6609 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.4629 - mae: 0.5270 - val_loss: 0.5472 - val_mae: 0.5711 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.2426 - mae: 0.7790 - val_loss: 1.5713 - val_mae: 0.9368 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.6142 - mae: 0.7906 - val_loss: 0.9164 - val_mae: 0.7373 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.6476 - mae: 0.8188 - val_loss: 1.0113 - val_mae: 0.7721 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.8013 - mae: 0.6536 - val_loss: 0.7577 - val_mae: 0.6936 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.4446 - mae: 0.5130 - val_loss: 0.5586 - val_mae: 0.5644 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.52655\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.4146 - mae: 0.6799 - val_loss: 0.5706 - val_mae: 0.5964 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.52655 to 0.51582, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.8344 - mae: 0.5957 - val_loss: 0.5158 - val_mae: 0.5606 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss improved from 0.51582 to 0.49566, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.4347 - mae: 0.4794 - val_loss: 0.4957 - val_mae: 0.5436 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.49566\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.9022 - mae: 0.7722 - val_loss: 0.7458 - val_mae: 0.6665 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.49566 to 0.38501, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.5266 - mae: 0.5539 - val_loss: 0.3850 - val_mae: 0.4936 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.38501\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.5683 - mae: 0.6932 - val_loss: 0.4368 - val_mae: 0.5078 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss improved from 0.38501 to 0.28058, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.3366 - mae: 0.4507 - val_loss: 0.2806 - val_mae: 0.4111 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.28058\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.0957 - mae: 0.6236 - val_loss: 0.6791 - val_mae: 0.6386 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 0.28058 to 0.23918, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.4287 - mae: 0.5054 - val_loss: 0.2392 - val_mae: 0.3869 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.3163 - mae: 0.4342 - val_loss: 0.2784 - val_mae: 0.4098 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.8214 - mae: 0.9908 - val_loss: 1.0831 - val_mae: 0.5952 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.1758 - mae: 0.6400 - val_loss: 1.3989 - val_mae: 0.5433 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.3057 - mae: 0.4306 - val_loss: 0.3863 - val_mae: 0.3964 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.3465 - mae: 1.0525 - val_loss: 0.6421 - val_mae: 0.6223 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.7595 - mae: 0.6223 - val_loss: 0.6850 - val_mae: 0.6210 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 9ms/step - loss: 3.5870 - mae: 1.0221 - val_loss: 0.9061 - val_mae: 0.6817 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.6681 - mae: 0.6190 - val_loss: 1.2850 - val_mae: 0.8379 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.2488 - mae: 0.8263 - val_loss: 0.9854 - val_mae: 0.7750 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.6631 - mae: 0.6203 - val_loss: 0.4924 - val_mae: 0.5483 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.9465 - mae: 0.6447 - val_loss: 0.5083 - val_mae: 0.5624 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.4735 - mae: 0.7667 - val_loss: 2.4259 - val_mae: 1.1438 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.9621 - mae: 0.6886 - val_loss: 0.4519 - val_mae: 0.5243 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.9798 - mae: 0.6339 - val_loss: 0.4763 - val_mae: 0.5378 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.4704 - mae: 0.7058 - val_loss: 0.3317 - val_mae: 0.4503 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 9ms/step - loss: 3.0351 - mae: 0.8193 - val_loss: 2.5272 - val_mae: 1.1718 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.1687 - mae: 0.7946 - val_loss: 2.9170 - val_mae: 1.2456 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.7949 - mae: 0.9156 - val_loss: 0.6868 - val_mae: 0.6436 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 9ms/step - loss: 3.1040 - mae: 1.0722 - val_loss: 1.8474 - val_mae: 1.0200 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.23918\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.0554 - mae: 0.7574 - val_loss: 0.5729 - val_mae: 0.5933 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.23918 to 0.23178, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.2671 - mae: 0.4021 - val_loss: 0.2318 - val_mae: 0.3753 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.23178 to 0.17271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1888 - mae: 0.3395 - val_loss: 0.1727 - val_mae: 0.3225 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.17271 to 0.14270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1430 - mae: 0.2959 - val_loss: 0.1427 - val_mae: 0.2948 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.14270 to 0.12482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1169 - mae: 0.2680 - val_loss: 0.1248 - val_mae: 0.2743 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.12482 to 0.10512, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0994 - mae: 0.2474 - val_loss: 0.1051 - val_mae: 0.2543 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.10512 to 0.10003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0866 - mae: 0.2314 - val_loss: 0.1000 - val_mae: 0.2470 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.10003 to 0.08553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0769 - mae: 0.2181 - val_loss: 0.0855 - val_mae: 0.2287 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.08553 to 0.08338, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0700 - mae: 0.2081 - val_loss: 0.0834 - val_mae: 0.2239 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.08338 to 0.07513, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0647 - mae: 0.2000 - val_loss: 0.0751 - val_mae: 0.2138 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.07513 to 0.06400, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0572 - mae: 0.1883 - val_loss: 0.0640 - val_mae: 0.1981 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.06400 to 0.05980, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0519 - mae: 0.1795 - val_loss: 0.0598 - val_mae: 0.1923 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.05980 to 0.05579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0478 - mae: 0.1722 - val_loss: 0.0558 - val_mae: 0.1851 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.05579\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0441 - mae: 0.1655 - val_loss: 0.0572 - val_mae: 0.1883 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.05579 to 0.04688, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0415 - mae: 0.1608 - val_loss: 0.0469 - val_mae: 0.1690 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.04688\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0383 - mae: 0.1544 - val_loss: 0.0483 - val_mae: 0.1714 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.04688 to 0.04292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0367 - mae: 0.1510 - val_loss: 0.0429 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.04292 to 0.04101, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0347 - mae: 0.1468 - val_loss: 0.0410 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.04101\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0338 - mae: 0.1450 - val_loss: 0.0422 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.04101 to 0.04035, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0311 - mae: 0.1389 - val_loss: 0.0403 - val_mae: 0.1563 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.04035 to 0.03538, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0294 - mae: 0.1353 - val_loss: 0.0354 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.03538 to 0.03402, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0284 - mae: 0.1329 - val_loss: 0.0340 - val_mae: 0.1438 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.03402\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0267 - mae: 0.1287 - val_loss: 0.0342 - val_mae: 0.1452 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.03402 to 0.03021, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0258 - mae: 0.1268 - val_loss: 0.0302 - val_mae: 0.1353 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.03021\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0257 - mae: 0.1263 - val_loss: 0.0322 - val_mae: 0.1401 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.03021\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0242 - mae: 0.1226 - val_loss: 0.0311 - val_mae: 0.1378 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03021\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0234 - mae: 0.1209 - val_loss: 0.0308 - val_mae: 0.1370 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03021\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0225 - mae: 0.1180 - val_loss: 0.0364 - val_mae: 0.1495 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.03021 to 0.02722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0223 - mae: 0.1177 - val_loss: 0.0272 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02722\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0219 - mae: 0.1164 - val_loss: 0.0308 - val_mae: 0.1346 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02722\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0210 - mae: 0.1143 - val_loss: 0.0278 - val_mae: 0.1291 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.02722 to 0.02576, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0208 - mae: 0.1136 - val_loss: 0.0258 - val_mae: 0.1247 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0201 - mae: 0.1118 - val_loss: 0.0282 - val_mae: 0.1313 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0198 - mae: 0.1108 - val_loss: 0.0310 - val_mae: 0.1364 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0195 - mae: 0.1099 - val_loss: 0.0262 - val_mae: 0.1250 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0194 - mae: 0.1097 - val_loss: 0.0279 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0193 - mae: 0.1094 - val_loss: 0.0262 - val_mae: 0.1261 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0191 - mae: 0.1089 - val_loss: 0.0263 - val_mae: 0.1261 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02576\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0185 - mae: 0.1071 - val_loss: 0.0274 - val_mae: 0.1295 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0182 - mae: 0.1062 - val_loss: 0.0309 - val_mae: 0.1339 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.02576 to 0.02483, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0182 - mae: 0.1061 - val_loss: 0.0248 - val_mae: 0.1232 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02483\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0184 - mae: 0.1068 - val_loss: 0.0254 - val_mae: 0.1237 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02483\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0181 - mae: 0.1055 - val_loss: 0.0258 - val_mae: 0.1261 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.02483 to 0.02414, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0175 - mae: 0.1040 - val_loss: 0.0241 - val_mae: 0.1214 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02414\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0176 - mae: 0.1041 - val_loss: 0.0258 - val_mae: 0.1247 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02414\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0174 - mae: 0.1038 - val_loss: 0.0242 - val_mae: 0.1219 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02414\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0172 - mae: 0.1028 - val_loss: 0.0288 - val_mae: 0.1341 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02414\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0165 - mae: 0.1011 - val_loss: 0.0276 - val_mae: 0.1298 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.02414 to 0.02360, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0165 - mae: 0.1011 - val_loss: 0.0236 - val_mae: 0.1206 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.02360 to 0.02329, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0165 - mae: 0.1008 - val_loss: 0.0233 - val_mae: 0.1181 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02329\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0163 - mae: 0.1004 - val_loss: 0.0243 - val_mae: 0.1213 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.02329 to 0.02228, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0160 - mae: 0.0992 - val_loss: 0.0223 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02228\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0165 - mae: 0.1007 - val_loss: 0.0225 - val_mae: 0.1177 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02228\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0163 - mae: 0.1002 - val_loss: 0.0254 - val_mae: 0.1241 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02228\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0161 - mae: 0.0993 - val_loss: 0.0223 - val_mae: 0.1173 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02228\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0160 - mae: 0.0991 - val_loss: 0.0232 - val_mae: 0.1196 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02228\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0161 - mae: 0.0995 - val_loss: 0.0254 - val_mae: 0.1250 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.02228 to 0.02014, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0161 - mae: 0.0992 - val_loss: 0.0201 - val_mae: 0.1104 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0159 - mae: 0.0988 - val_loss: 0.0219 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0160 - mae: 0.0991 - val_loss: 0.0220 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02014\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0158 - mae: 0.0983 - val_loss: 0.0241 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0159 - mae: 0.0988 - val_loss: 0.0210 - val_mae: 0.1135 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0156 - mae: 0.0976 - val_loss: 0.0242 - val_mae: 0.1218 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0161 - mae: 0.0995 - val_loss: 0.0216 - val_mae: 0.1147 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0161 - mae: 0.0990 - val_loss: 0.0215 - val_mae: 0.1138 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0160 - mae: 0.0988 - val_loss: 0.0233 - val_mae: 0.1189 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02014\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0155 - mae: 0.0976 - val_loss: 0.0246 - val_mae: 0.1232 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.02014 to 0.01967, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0160 - mae: 0.0990 - val_loss: 0.0197 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01967\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0156 - mae: 0.0977 - val_loss: 0.0220 - val_mae: 0.1163 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01967\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0158 - mae: 0.0982 - val_loss: 0.0205 - val_mae: 0.1120 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01967\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0155 - mae: 0.0973 - val_loss: 0.0205 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01967\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0157 - mae: 0.0977 - val_loss: 0.0239 - val_mae: 0.1218 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01967\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0156 - mae: 0.0979 - val_loss: 0.0218 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01967\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0157 - mae: 0.0979 - val_loss: 0.0212 - val_mae: 0.1130 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.01967 to 0.01957, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0159 - mae: 0.0983 - val_loss: 0.0196 - val_mae: 0.1091 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01957\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0156 - mae: 0.0976 - val_loss: 0.0216 - val_mae: 0.1146 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01957\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0159 - mae: 0.0983 - val_loss: 0.0215 - val_mae: 0.1147 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01957\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0157 - mae: 0.0977 - val_loss: 0.0223 - val_mae: 0.1164 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01957\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0160 - mae: 0.0987 - val_loss: 0.0229 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01957\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0158 - mae: 0.0981 - val_loss: 0.0198 - val_mae: 0.1103 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01957\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0161 - mae: 0.0990 - val_loss: 0.0229 - val_mae: 0.1179 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01957\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0158 - mae: 0.0980 - val_loss: 0.0232 - val_mae: 0.1182 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01957\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0157 - mae: 0.0978 - val_loss: 0.0230 - val_mae: 0.1186 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01957\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0159 - mae: 0.0984 - val_loss: 0.0215 - val_mae: 0.1151 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.01957 to 0.01843, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0160 - mae: 0.0988 - val_loss: 0.0184 - val_mae: 0.1063 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01843\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0160 - mae: 0.0984 - val_loss: 0.0211 - val_mae: 0.1135 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01843\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0160 - mae: 0.0987 - val_loss: 0.0234 - val_mae: 0.1189 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.01843 to 0.01835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0158 - mae: 0.0981 - val_loss: 0.0183 - val_mae: 0.1057 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0163 - mae: 0.0991 - val_loss: 0.0210 - val_mae: 0.1119 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0162 - mae: 0.0992 - val_loss: 0.0216 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0161 - mae: 0.0989 - val_loss: 0.0257 - val_mae: 0.1254 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0163 - mae: 0.0993 - val_loss: 0.0232 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0162 - mae: 0.0991 - val_loss: 0.0237 - val_mae: 0.1196 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0162 - mae: 0.0989 - val_loss: 0.0234 - val_mae: 0.1200 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01835\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0160 - mae: 0.0988 - val_loss: 0.0279 - val_mae: 0.1307 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0163 - mae: 0.0994 - val_loss: 0.0242 - val_mae: 0.1206 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0161 - mae: 0.0988 - val_loss: 0.0222 - val_mae: 0.1159 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01835\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0163 - mae: 0.0994 - val_loss: 0.0256 - val_mae: 0.1240 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01835\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0163 - mae: 0.0996 - val_loss: 0.0204 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01835\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0164 - mae: 0.0997 - val_loss: 0.0224 - val_mae: 0.1167 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0164 - mae: 0.0995 - val_loss: 0.0224 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01835\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0166 - mae: 0.1002 - val_loss: 0.0253 - val_mae: 0.1232 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01835\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0167 - mae: 0.1007 - val_loss: 0.0230 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01835\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0163 - mae: 0.0996 - val_loss: 0.0194 - val_mae: 0.1081 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01835\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0165 - mae: 0.1000 - val_loss: 0.0196 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.01835 to 0.00974, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0045 - mae: 0.0526 - val_loss: 0.0097 - val_mae: 0.0766 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.00974 to 0.00889, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0089 - val_mae: 0.0732 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.00889 to 0.00866, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0087 - val_mae: 0.0719 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.00866 to 0.00859, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0086 - val_mae: 0.0715 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.00859 to 0.00852, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0085 - val_mae: 0.0714 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00852 to 0.00836, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0400 - val_loss: 0.0084 - val_mae: 0.0705 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00836\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0024 - mae: 0.0392 - val_loss: 0.0085 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00836\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0084 - val_mae: 0.0707 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00836\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0084 - val_mae: 0.0705 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00836\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0085 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00836\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0084 - val_mae: 0.0707 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss improved from 0.00836 to 0.00834, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0083 - val_mae: 0.0704 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00834\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0020 - mae: 0.0355 - val_loss: 0.0084 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00834\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0084 - val_mae: 0.0705 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00834\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0086 - val_mae: 0.0713 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00834\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0084 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00834\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0083 - val_mae: 0.0703 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00834\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0085 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.00834 to 0.00834, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0331 - val_loss: 0.0083 - val_mae: 0.0704 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.00834 to 0.00834, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0083 - val_mae: 0.0703 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.00834 to 0.00828, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0083 - val_mae: 0.0699 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00828\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0322 - val_loss: 0.0085 - val_mae: 0.0707 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00828\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0085 - val_mae: 0.0709 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00828\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0316 - val_loss: 0.0083 - val_mae: 0.0699 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00828\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0015 - mae: 0.0312 - val_loss: 0.0084 - val_mae: 0.0701 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00828\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0015 - mae: 0.0310 - val_loss: 0.0083 - val_mae: 0.0699 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.00828 to 0.00802, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0263 - val_loss: 0.0080 - val_mae: 0.0686 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00802\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0080 - val_mae: 0.0687 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss improved from 0.00802 to 0.00802, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0256 - val_loss: 0.0080 - val_mae: 0.0686 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.00802 to 0.00801, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00801\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0010 - mae: 0.0253 - val_loss: 0.0080 - val_mae: 0.0686 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.00801 to 0.00800, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0251 - val_loss: 0.0080 - val_mae: 0.0686 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00800\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9847e-04 - mae: 0.0250 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9264e-04 - mae: 0.0249 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.8794e-04 - mae: 0.0248 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.00800 to 0.00800, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.8342e-04 - mae: 0.0247 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.8001e-04 - mae: 0.0247 - val_loss: 0.0080 - val_mae: 0.0686 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.7568e-04 - mae: 0.0247 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.7108e-04 - mae: 0.0246 - val_loss: 0.0080 - val_mae: 0.0686 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.6793e-04 - mae: 0.0245 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.6412e-04 - mae: 0.0245 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00800\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.6037e-04 - mae: 0.0245 - val_loss: 0.0080 - val_mae: 0.0687 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00800\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.5616e-04 - mae: 0.0244 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00800\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.5307e-04 - mae: 0.0243 - val_loss: 0.0080 - val_mae: 0.0685 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss improved from 0.00800 to 0.00799, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.1524e-04 - mae: 0.0238 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0940e-04 - mae: 0.0238 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0820e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0766e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0686e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0584e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.00799 to 0.00799, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0587e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss improved from 0.00799 to 0.00799, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0510e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0449e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.00799 to 0.00799, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0431e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0379e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0341e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00799\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.0310e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00799\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.0245e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0226e-04 - mae: 0.0237 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0177e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0125e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0087e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00799\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.0068e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.0036e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00799\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9657e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9572e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9542e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00799\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9518e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9511e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9506e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00799\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9498e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.00799 to 0.00798, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 8.9490e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9484e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 9ms/step - loss: 8.9474e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 9ms/step - loss: 8.9472e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00798\n",
      "4375/4375 - 39s - 9ms/step - loss: 8.9469e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00798\n",
      "4375/4375 - 41s - 9ms/step - loss: 8.9465e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9455e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9459e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9454e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9449e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9446e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9443e-04 - mae: 0.0236 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9432e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9436e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9430e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9426e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9420e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9422e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9411e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9408e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9408e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9405e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9401e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9394e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9388e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9388e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9387e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9382e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9380e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9371e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00798\n",
      "4375/4375 - 38s - 9ms/step - loss: 8.9371e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9368e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9363e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9358e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9360e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9352e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9346e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9350e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9338e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9340e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9336e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00798\n",
      "4375/4375 - 41s - 9ms/step - loss: 8.9334e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9328e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9325e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9314e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9320e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00798\n",
      "4375/4375 - 36s - 8ms/step - loss: 8.9315e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9309e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9306e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 9ms/step - loss: 8.9302e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00798\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.9298e-04 - mae: 0.0235 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-07\n",
      "Epoch 279: early stopping\n",
      "Restoring model weights from the end of the best epoch: 229.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1082 m\n",
      "Median positioning error: 0.0971 m\n",
      "90th percentile error: 0.1930 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10353.166338,
   "end_time": "2025-08-14T22:38:57.550174",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-14T19:46:24.383836",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
