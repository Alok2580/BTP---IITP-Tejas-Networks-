{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1fc9c9a0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-15T04:39:04.551729Z",
     "iopub.status.busy": "2025-08-15T04:39:04.551041Z",
     "iopub.status.idle": "2025-08-15T04:39:06.090569Z",
     "shell.execute_reply": "2025-08-15T04:39:06.089684Z"
    },
    "papermill": {
     "duration": 1.544459,
     "end_time": "2025-08-15T04:39:06.091852",
     "exception": false,
     "start_time": "2025-08-15T04:39:04.547393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c57f792e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:39:06.097379Z",
     "iopub.status.busy": "2025-08-15T04:39:06.096816Z",
     "iopub.status.idle": "2025-08-15T04:39:20.329410Z",
     "shell.execute_reply": "2025-08-15T04:39:20.328788Z"
    },
    "papermill": {
     "duration": 14.236555,
     "end_time": "2025-08-15T04:39:20.330882",
     "exception": false,
     "start_time": "2025-08-15T04:39:06.094327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-15 04:39:07.519905: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755232747.686178      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755232747.742488      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "55aab81b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:39:20.336509Z",
     "iopub.status.busy": "2025-08-15T04:39:20.336055Z",
     "iopub.status.idle": "2025-08-15T04:39:20.340643Z",
     "shell.execute_reply": "2025-08-15T04:39:20.339939Z"
    },
    "papermill": {
     "duration": 0.008454,
     "end_time": "2025-08-15T04:39:20.341842",
     "exception": false,
     "start_time": "2025-08-15T04:39:20.333388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512 #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d5100586",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:39:20.346515Z",
     "iopub.status.busy": "2025-08-15T04:39:20.346113Z",
     "iopub.status.idle": "2025-08-15T04:39:20.349209Z",
     "shell.execute_reply": "2025-08-15T04:39:20.348707Z"
    },
    "papermill": {
     "duration": 0.006375,
     "end_time": "2025-08-15T04:39:20.350204",
     "exception": false,
     "start_time": "2025-08-15T04:39:20.343829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cc5f2521",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:39:20.355348Z",
     "iopub.status.busy": "2025-08-15T04:39:20.354872Z",
     "iopub.status.idle": "2025-08-15T06:57:16.211650Z",
     "shell.execute_reply": "2025-08-15T06:57:16.210975Z"
    },
    "papermill": {
     "duration": 8275.860759,
     "end_time": "2025-08-15T06:57:16.212830",
     "exception": false,
     "start_time": "2025-08-15T04:39:20.352071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755232781.324495      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755232790.809736      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755232801.592438      59 service.cc:148] XLA service 0x7b70ac017c90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755232801.593226      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755232805.404499      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 14.75792, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 12ms/step - loss: 77.0379 - mae: 6.1052 - val_loss: 14.7579 - val_mae: 2.9922 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 14.75792 to 5.27105, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 9.4882 - mae: 2.3483 - val_loss: 5.2710 - val_mae: 1.7812 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.27105 to 2.15424, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 4.1609 - mae: 1.5579 - val_loss: 2.1542 - val_mae: 1.1413 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 2.15424 to 1.37637, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.3146 - mae: 1.0996 - val_loss: 1.3764 - val_mae: 0.9072 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.37637 to 1.11892, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.6209 - mae: 0.9221 - val_loss: 1.1189 - val_mae: 0.8239 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.11892 to 0.69616, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.7239 - mae: 0.8649 - val_loss: 0.6962 - val_mae: 0.6526 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.69616\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6944 - mae: 0.6494 - val_loss: 0.7542 - val_mae: 0.6805 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.69616 to 0.49341, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.1721 - mae: 0.8951 - val_loss: 0.4934 - val_mae: 0.5481 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.49341\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2724 - mae: 0.6938 - val_loss: 0.7458 - val_mae: 0.6710 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.49341 to 0.41058, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4894 - mae: 0.5422 - val_loss: 0.4106 - val_mae: 0.5035 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.41058 to 0.28889, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6313 - mae: 0.5530 - val_loss: 0.2889 - val_mae: 0.4173 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.28889\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.5041 - mae: 0.7617 - val_loss: 0.5795 - val_mae: 0.5936 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.28889\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.8049 - mae: 0.6221 - val_loss: 0.5977 - val_mae: 0.6128 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.28889\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4179 - mae: 0.5055 - val_loss: 0.3334 - val_mae: 0.4455 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.28889\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.7073 - mae: 0.5953 - val_loss: 0.3254 - val_mae: 0.4482 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.28889\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4565 - mae: 0.5102 - val_loss: 0.3289 - val_mae: 0.4459 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.28889\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.1372 - mae: 0.6708 - val_loss: 0.3992 - val_mae: 0.4924 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.28889\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4004 - mae: 0.4937 - val_loss: 0.3596 - val_mae: 0.4658 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.28889\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3855 - mae: 0.4820 - val_loss: 0.4517 - val_mae: 0.5198 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.28889\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.9331 - mae: 0.6010 - val_loss: 0.6963 - val_mae: 0.6723 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.28889 to 0.22527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3412 - mae: 0.4506 - val_loss: 0.2253 - val_mae: 0.3685 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.0051 - mae: 0.6240 - val_loss: 0.5136 - val_mae: 0.5664 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3850 - mae: 0.4832 - val_loss: 0.5047 - val_mae: 0.5354 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4165 - mae: 0.4931 - val_loss: 0.3758 - val_mae: 0.4862 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3353 - mae: 0.4512 - val_loss: 0.4700 - val_mae: 0.5272 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.3125 - mae: 0.7026 - val_loss: 0.4746 - val_mae: 0.5457 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5508 - mae: 0.5247 - val_loss: 0.4037 - val_mae: 0.5034 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.3966 - mae: 0.7328 - val_loss: 0.4882 - val_mae: 0.5534 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3859 - mae: 0.4836 - val_loss: 0.2909 - val_mae: 0.4261 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.4089 - mae: 0.8331 - val_loss: 0.9600 - val_mae: 0.7492 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6430 - mae: 0.6097 - val_loss: 0.3317 - val_mae: 0.4458 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2758 - mae: 0.7023 - val_loss: 0.3663 - val_mae: 0.4704 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.6211 - mae: 0.8336 - val_loss: 1.1320 - val_mae: 0.8128 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.5414 - mae: 0.5659 - val_loss: 0.5500 - val_mae: 0.5744 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.0443 - mae: 0.6112 - val_loss: 7.8500 - val_mae: 2.0394 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.7508 - mae: 0.8573 - val_loss: 0.6631 - val_mae: 0.6249 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6427 - mae: 0.5983 - val_loss: 0.4281 - val_mae: 0.5150 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.0011 - mae: 0.6638 - val_loss: 0.5429 - val_mae: 0.5919 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.4760 - mae: 0.8729 - val_loss: 1.6992 - val_mae: 0.7750 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.0976 - mae: 0.7440 - val_loss: 0.8842 - val_mae: 0.6166 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.22527\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.9237 - mae: 0.8191 - val_loss: 1.2586 - val_mae: 0.8220 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6696 - mae: 0.6251 - val_loss: 0.9427 - val_mae: 0.6214 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4683 - mae: 0.5213 - val_loss: 0.4942 - val_mae: 0.5066 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3187 - mae: 0.4312 - val_loss: 0.3445 - val_mae: 0.4317 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2362 - mae: 0.3729 - val_loss: 0.3756 - val_mae: 0.4232 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1865 - mae: 0.3323 - val_loss: 0.3022 - val_mae: 0.3391 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1467 - mae: 0.2959 - val_loss: 0.4040 - val_mae: 0.3084 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.22527\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1214 - mae: 0.2702 - val_loss: 0.2504 - val_mae: 0.2811 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.22527 to 0.19232, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1031 - mae: 0.2496 - val_loss: 0.1923 - val_mae: 0.2620 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.19232\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0876 - mae: 0.2304 - val_loss: 0.2125 - val_mae: 0.2467 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.19232\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0767 - mae: 0.2162 - val_loss: 0.3112 - val_mae: 0.2301 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.19232\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0660 - mae: 0.2010 - val_loss: 0.2309 - val_mae: 0.2174 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.19232 to 0.13790, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0586 - mae: 0.1897 - val_loss: 0.1379 - val_mae: 0.2018 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.13790\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0527 - mae: 0.1800 - val_loss: 0.1543 - val_mae: 0.1986 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.13790\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0467 - mae: 0.1702 - val_loss: 0.2242 - val_mae: 0.1873 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.13790\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0423 - mae: 0.1619 - val_loss: 0.1559 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.13790\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0393 - mae: 0.1560 - val_loss: 0.2887 - val_mae: 0.1711 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.13790 to 0.08626, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0367 - mae: 0.1508 - val_loss: 0.0863 - val_mae: 0.1621 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.08626\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0341 - mae: 0.1453 - val_loss: 0.1590 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.08626\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0324 - mae: 0.1416 - val_loss: 0.1141 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.08626\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0302 - mae: 0.1368 - val_loss: 0.1017 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.08626\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0286 - mae: 0.1329 - val_loss: 0.0886 - val_mae: 0.1452 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.08626\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0264 - mae: 0.1280 - val_loss: 0.3044 - val_mae: 0.1525 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.08626 to 0.06968, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0253 - mae: 0.1256 - val_loss: 0.0697 - val_mae: 0.1366 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.06968\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0241 - mae: 0.1221 - val_loss: 0.1787 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.06968\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0233 - mae: 0.1203 - val_loss: 0.2142 - val_mae: 0.1331 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.06968\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0222 - mae: 0.1173 - val_loss: 0.1030 - val_mae: 0.1382 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.06968\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0214 - mae: 0.1153 - val_loss: 0.1053 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.06968\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0208 - mae: 0.1137 - val_loss: 0.1087 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.06968 to 0.04245, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0203 - mae: 0.1121 - val_loss: 0.0425 - val_mae: 0.1286 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.04245 to 0.03228, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0198 - mae: 0.1108 - val_loss: 0.0323 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.03228 to 0.02615, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0193 - mae: 0.1094 - val_loss: 0.0262 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.02615\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0189 - mae: 0.1080 - val_loss: 0.0407 - val_mae: 0.1312 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.02615\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0185 - mae: 0.1070 - val_loss: 0.0357 - val_mae: 0.1202 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02615\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0182 - mae: 0.1062 - val_loss: 0.0858 - val_mae: 0.1300 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.02615 to 0.02614, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0175 - mae: 0.1041 - val_loss: 0.0261 - val_mae: 0.1189 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.02614 to 0.02607, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0175 - mae: 0.1039 - val_loss: 0.0261 - val_mae: 0.1179 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02607\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0170 - mae: 0.1023 - val_loss: 0.0308 - val_mae: 0.1149 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02607\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0171 - mae: 0.1030 - val_loss: 0.0292 - val_mae: 0.1190 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.02607 to 0.02517, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0166 - mae: 0.1011 - val_loss: 0.0252 - val_mae: 0.1244 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.02517 to 0.02101, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0167 - mae: 0.1016 - val_loss: 0.0210 - val_mae: 0.1115 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02101\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0166 - mae: 0.1010 - val_loss: 0.0222 - val_mae: 0.1144 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.02101 to 0.02076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0161 - mae: 0.0998 - val_loss: 0.0208 - val_mae: 0.1112 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.02076 to 0.02004, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0161 - mae: 0.0996 - val_loss: 0.0200 - val_mae: 0.1110 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02004\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0163 - mae: 0.1001 - val_loss: 0.0229 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.02004 to 0.01853, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0158 - mae: 0.0989 - val_loss: 0.0185 - val_mae: 0.1059 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01853\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0158 - mae: 0.0988 - val_loss: 0.0277 - val_mae: 0.1294 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01853\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0157 - mae: 0.0986 - val_loss: 0.0197 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01853\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0155 - mae: 0.0976 - val_loss: 0.0211 - val_mae: 0.1135 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01853\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0155 - mae: 0.0977 - val_loss: 0.0212 - val_mae: 0.1129 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.01853\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0156 - mae: 0.0980 - val_loss: 0.0189 - val_mae: 0.1079 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.01853\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0152 - mae: 0.0970 - val_loss: 0.0195 - val_mae: 0.1075 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.01853\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0151 - mae: 0.0967 - val_loss: 0.0187 - val_mae: 0.1072 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01853\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0154 - mae: 0.0973 - val_loss: 0.0211 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01853\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0970 - val_loss: 0.0208 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.01853 to 0.01771, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0152 - mae: 0.0968 - val_loss: 0.0177 - val_mae: 0.1044 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01771\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0156 - mae: 0.0978 - val_loss: 0.0272 - val_mae: 0.1295 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.01771 to 0.01756, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0971 - val_loss: 0.0176 - val_mae: 0.1034 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0152 - mae: 0.0968 - val_loss: 0.0208 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0154 - mae: 0.0971 - val_loss: 0.0197 - val_mae: 0.1102 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0156 - mae: 0.0980 - val_loss: 0.0201 - val_mae: 0.1119 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0150 - mae: 0.0962 - val_loss: 0.0223 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0151 - mae: 0.0962 - val_loss: 0.0207 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0154 - mae: 0.0972 - val_loss: 0.0189 - val_mae: 0.1074 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0152 - mae: 0.0967 - val_loss: 0.0198 - val_mae: 0.1106 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01756\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0155 - mae: 0.0972 - val_loss: 0.0220 - val_mae: 0.1144 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.01756 to 0.01750, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0154 - mae: 0.0972 - val_loss: 0.0175 - val_mae: 0.1025 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0970 - val_loss: 0.0223 - val_mae: 0.1168 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0968 - val_loss: 0.0177 - val_mae: 0.1034 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0967 - val_loss: 0.0237 - val_mae: 0.1215 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0151 - mae: 0.0965 - val_loss: 0.0211 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0151 - mae: 0.0962 - val_loss: 0.0194 - val_mae: 0.1085 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0151 - mae: 0.0961 - val_loss: 0.0199 - val_mae: 0.1111 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0154 - mae: 0.0967 - val_loss: 0.0180 - val_mae: 0.1049 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0151 - mae: 0.0960 - val_loss: 0.0200 - val_mae: 0.1109 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0967 - val_loss: 0.0197 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0965 - val_loss: 0.0239 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01750\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0153 - mae: 0.0968 - val_loss: 0.0212 - val_mae: 0.1131 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.01750 to 0.00835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0046 - mae: 0.0535 - val_loss: 0.0083 - val_mae: 0.0714 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.00835 to 0.00771, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0037 - mae: 0.0482 - val_loss: 0.0077 - val_mae: 0.0684 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.00771 to 0.00761, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0034 - mae: 0.0464 - val_loss: 0.0076 - val_mae: 0.0681 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.00761 to 0.00758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0452 - val_loss: 0.0076 - val_mae: 0.0678 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.00758\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0077 - val_mae: 0.0686 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.00758\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0030 - mae: 0.0435 - val_loss: 0.0076 - val_mae: 0.0680 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.00758 to 0.00736, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0029 - mae: 0.0431 - val_loss: 0.0074 - val_mae: 0.0667 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.00736\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0074 - val_mae: 0.0671 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.00736 to 0.00735, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0028 - mae: 0.0420 - val_loss: 0.0073 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.00735\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0074 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.00735\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0074 - val_mae: 0.0667 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.00735 to 0.00732, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0073 - val_mae: 0.0664 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.00732\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0074 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.00732\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0025 - mae: 0.0400 - val_loss: 0.0074 - val_mae: 0.0667 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.00732\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0076 - val_mae: 0.0676 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.00732\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0074 - val_mae: 0.0665 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.00732 to 0.00727, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0024 - mae: 0.0391 - val_loss: 0.0073 - val_mae: 0.0662 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0024 - mae: 0.0389 - val_loss: 0.0073 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0023 - mae: 0.0385 - val_loss: 0.0073 - val_mae: 0.0664 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0023 - mae: 0.0382 - val_loss: 0.0075 - val_mae: 0.0671 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0023 - mae: 0.0380 - val_loss: 0.0073 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0077 - val_mae: 0.0683 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0022 - mae: 0.0375 - val_loss: 0.0075 - val_mae: 0.0673 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0022 - mae: 0.0373 - val_loss: 0.0073 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0073 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0021 - mae: 0.0369 - val_loss: 0.0074 - val_mae: 0.0665 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00727\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0074 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.00727 to 0.00693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0016 - mae: 0.0321 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.00693 to 0.00691, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0016 - mae: 0.0317 - val_loss: 0.0069 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00691\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0016 - mae: 0.0315 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00691\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.00691 to 0.00688, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0312 - val_loss: 0.0070 - val_mae: 0.0644 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0311 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0311 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00688\n",
      "4375/4375 - 82s - 19ms/step - loss: 0.0015 - mae: 0.0310 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0310 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0069 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0069 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0070 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0307 - val_loss: 0.0069 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0307 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0069 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0069 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00688\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00688\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0069 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 200: early stopping\n",
      "Restoring model weights from the end of the best epoch: 150.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1009 m\n",
      "Median positioning error: 0.0918 m\n",
      "90th percentile error: 0.1784 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8299.200024,
   "end_time": "2025-08-15T06:57:19.622755",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-15T04:39:00.422731",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
