{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1709ae1c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-19T09:56:23.165048Z",
     "iopub.status.busy": "2025-08-19T09:56:23.164752Z",
     "iopub.status.idle": "2025-08-19T09:56:24.759662Z",
     "shell.execute_reply": "2025-08-19T09:56:24.758858Z"
    },
    "papermill": {
     "duration": 1.599862,
     "end_time": "2025-08-19T09:56:24.760918",
     "exception": false,
     "start_time": "2025-08-19T09:56:23.161056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ea5c1f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T09:56:24.767255Z",
     "iopub.status.busy": "2025-08-19T09:56:24.766843Z",
     "iopub.status.idle": "2025-08-19T09:56:40.049823Z",
     "shell.execute_reply": "2025-08-19T09:56:40.049177Z"
    },
    "papermill": {
     "duration": 15.28741,
     "end_time": "2025-08-19T09:56:40.051232",
     "exception": false,
     "start_time": "2025-08-19T09:56:24.763822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-19 09:56:26.435944: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755597386.636036      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755597386.691839      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "90609b5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T09:56:40.057302Z",
     "iopub.status.busy": "2025-08-19T09:56:40.056520Z",
     "iopub.status.idle": "2025-08-19T09:56:40.061455Z",
     "shell.execute_reply": "2025-08-19T09:56:40.060717Z"
    },
    "papermill": {
     "duration": 0.009079,
     "end_time": "2025-08-19T09:56:40.062745",
     "exception": false,
     "start_time": "2025-08-19T09:56:40.053666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "57e5009f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T09:56:40.067560Z",
     "iopub.status.busy": "2025-08-19T09:56:40.067349Z",
     "iopub.status.idle": "2025-08-19T09:56:40.070814Z",
     "shell.execute_reply": "2025-08-19T09:56:40.070045Z"
    },
    "papermill": {
     "duration": 0.007183,
     "end_time": "2025-08-19T09:56:40.071923",
     "exception": false,
     "start_time": "2025-08-19T09:56:40.064740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "83c296ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T09:56:40.077228Z",
     "iopub.status.busy": "2025-08-19T09:56:40.076995Z",
     "iopub.status.idle": "2025-08-19T14:13:44.776012Z",
     "shell.execute_reply": "2025-08-19T14:13:44.775289Z"
    },
    "papermill": {
     "duration": 15424.703556,
     "end_time": "2025-08-19T14:13:44.777376",
     "exception": false,
     "start_time": "2025-08-19T09:56:40.073820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755597422.567445      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755597432.548292      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755597444.269020      56 service.cc:148] XLA service 0x7e5bd00175a0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755597444.270051      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755597448.376629      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 14.51967, saving model to models/best_model_full.keras\n",
      "4375/4375 - 51s - 12ms/step - loss: 69.8070 - mae: 5.8405 - val_loss: 14.5197 - val_mae: 2.9158 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 14.51967 to 6.93945, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 11.0379 - mae: 2.5119 - val_loss: 6.9395 - val_mae: 2.0442 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 6.93945 to 4.92388, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 6.4420 - mae: 1.9061 - val_loss: 4.9239 - val_mae: 1.7589 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 4.92388\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.5314 - mae: 1.3972 - val_loss: 10.8049 - val_mae: 2.3405 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 4.92388 to 2.80309, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.6368 - mae: 1.3550 - val_loss: 2.8031 - val_mae: 1.2575 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.80309 to 1.90465, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.7098 - mae: 1.2283 - val_loss: 1.9047 - val_mae: 1.0767 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 1.90465\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.4942 - mae: 1.0944 - val_loss: 3.2218 - val_mae: 1.3393 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.90465\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.2989 - mae: 0.8468 - val_loss: 11.3006 - val_mae: 2.5743 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.90465 to 0.82214, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.7077 - mae: 0.9279 - val_loss: 0.8221 - val_mae: 0.7101 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.82214 to 0.61068, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1227 - mae: 0.7942 - val_loss: 0.6107 - val_mae: 0.6054 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.61068\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2216 - mae: 0.8937 - val_loss: 8.0619 - val_mae: 2.0563 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.61068\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1099 - mae: 0.7729 - val_loss: 0.6150 - val_mae: 0.6123 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.61068 to 0.38806, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.6021 - mae: 0.5876 - val_loss: 0.3881 - val_mae: 0.4830 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.38806 to 0.32381, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.5084 - mae: 0.7157 - val_loss: 0.3238 - val_mae: 0.4422 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.32381 to 0.31863, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1340 - mae: 0.6986 - val_loss: 0.3186 - val_mae: 0.4382 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.0197 - mae: 0.6388 - val_loss: 3.4137 - val_mae: 1.2382 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.9219 - mae: 0.6795 - val_loss: 0.7807 - val_mae: 0.7021 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.8895 - mae: 0.8285 - val_loss: 0.6776 - val_mae: 0.6237 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8529 - mae: 0.6456 - val_loss: 2.0198 - val_mae: 1.1020 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.0212 - mae: 0.6655 - val_loss: 0.3955 - val_mae: 0.4918 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.5192 - mae: 0.5412 - val_loss: 0.4136 - val_mae: 0.4763 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.31863\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0720 - mae: 0.8472 - val_loss: 0.6338 - val_mae: 0.6174 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.2378 - mae: 0.7121 - val_loss: 0.5084 - val_mae: 0.5488 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.3537 - mae: 0.9775 - val_loss: 2.6030 - val_mae: 1.2090 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.5923 - mae: 0.8967 - val_loss: 1.3793 - val_mae: 0.8695 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8198 - mae: 0.6533 - val_loss: 0.4660 - val_mae: 0.5246 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.31863\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.9565 - mae: 0.6720 - val_loss: 0.5550 - val_mae: 0.5755 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.31863\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4135 - mae: 0.7384 - val_loss: 6.3687 - val_mae: 1.8119 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.31863 to 0.27149, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8890 - mae: 0.6291 - val_loss: 0.2715 - val_mae: 0.4079 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8940 - mae: 0.8424 - val_loss: 3.3398 - val_mae: 1.2962 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1094 - mae: 0.7215 - val_loss: 0.4027 - val_mae: 0.5021 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.27149\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.4055 - mae: 0.4919 - val_loss: 4.4376 - val_mae: 1.2425 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1624 - mae: 1.1020 - val_loss: 0.6333 - val_mae: 0.6162 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8214 - mae: 0.6418 - val_loss: 0.3679 - val_mae: 0.4660 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4100 - mae: 0.6851 - val_loss: 0.3381 - val_mae: 0.4492 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3559 - mae: 0.4622 - val_loss: 0.3105 - val_mae: 0.4283 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.27149\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.0496 - mae: 0.7457 - val_loss: 0.6945 - val_mae: 0.6364 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.27149\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.5215 - mae: 0.5301 - val_loss: 0.7936 - val_mae: 0.6912 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.27149\n",
      "4375/4375 - 36s - 8ms/step - loss: 6.8109 - mae: 1.3170 - val_loss: 1.9919 - val_mae: 1.0799 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8061 - mae: 0.8786 - val_loss: 0.8769 - val_mae: 0.6939 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2914 - mae: 0.7327 - val_loss: 3.2773 - val_mae: 1.3856 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5084 - mae: 0.5415 - val_loss: 10.8258 - val_mae: 1.6723 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4666 - mae: 0.8890 - val_loss: 2.0487 - val_mae: 1.0922 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.27149\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.4411 - mae: 0.5068 - val_loss: 0.3623 - val_mae: 0.4826 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3046 - mae: 0.8744 - val_loss: 0.5060 - val_mae: 0.5412 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0152 - mae: 0.6507 - val_loss: 1.5551 - val_mae: 0.9311 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7004 - mae: 0.5867 - val_loss: 0.3318 - val_mae: 0.4451 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9859 - mae: 0.8223 - val_loss: 0.5022 - val_mae: 0.5606 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.27149\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7556 - mae: 0.5805 - val_loss: 0.4096 - val_mae: 0.5020 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.27149 to 0.13464, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1627 - mae: 0.3119 - val_loss: 0.1346 - val_mae: 0.2857 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.13464 to 0.09446, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1068 - mae: 0.2541 - val_loss: 0.0945 - val_mae: 0.2383 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.09446 to 0.08051, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0784 - mae: 0.2179 - val_loss: 0.0805 - val_mae: 0.2205 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.08051 to 0.05639, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0631 - mae: 0.1959 - val_loss: 0.0564 - val_mae: 0.1842 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.05639 to 0.05202, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0519 - mae: 0.1783 - val_loss: 0.0520 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.05202 to 0.04697, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0465 - mae: 0.1688 - val_loss: 0.0470 - val_mae: 0.1682 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.04697\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0427 - mae: 0.1617 - val_loss: 0.0510 - val_mae: 0.1758 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.04697 to 0.04408, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0384 - mae: 0.1536 - val_loss: 0.0441 - val_mae: 0.1639 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.04408 to 0.04403, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0357 - mae: 0.1479 - val_loss: 0.0440 - val_mae: 0.1620 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.04403 to 0.03876, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0330 - mae: 0.1424 - val_loss: 0.0388 - val_mae: 0.1551 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.03876 to 0.03713, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0307 - mae: 0.1373 - val_loss: 0.0371 - val_mae: 0.1506 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.03713 to 0.03174, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0287 - mae: 0.1329 - val_loss: 0.0317 - val_mae: 0.1383 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.03174\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0274 - mae: 0.1300 - val_loss: 0.0339 - val_mae: 0.1439 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.03174 to 0.03088, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0262 - mae: 0.1270 - val_loss: 0.0309 - val_mae: 0.1358 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.03088 to 0.02823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0254 - mae: 0.1249 - val_loss: 0.0282 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.02823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0252 - mae: 0.1241 - val_loss: 0.0305 - val_mae: 0.1343 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.02823 to 0.02755, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1229 - val_loss: 0.0275 - val_mae: 0.1284 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.02755\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0235 - mae: 0.1204 - val_loss: 0.0289 - val_mae: 0.1327 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.02755\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0226 - mae: 0.1179 - val_loss: 0.0284 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.02755 to 0.02605, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1161 - val_loss: 0.0260 - val_mae: 0.1256 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.02605\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0217 - mae: 0.1157 - val_loss: 0.0262 - val_mae: 0.1249 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.02605\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1140 - val_loss: 0.0320 - val_mae: 0.1410 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.02605 to 0.02102, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1115 - val_loss: 0.0210 - val_mae: 0.1118 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.02102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0201 - mae: 0.1112 - val_loss: 0.0217 - val_mae: 0.1148 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.02102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0197 - mae: 0.1100 - val_loss: 0.0232 - val_mae: 0.1188 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1081 - val_loss: 0.0232 - val_mae: 0.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.02102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0189 - mae: 0.1078 - val_loss: 0.0212 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0193 - mae: 0.1092 - val_loss: 0.0214 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0193 - mae: 0.1087 - val_loss: 0.0238 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02102\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0184 - mae: 0.1066 - val_loss: 0.0226 - val_mae: 0.1169 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02102\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0181 - mae: 0.1055 - val_loss: 0.0243 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.02102\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0189 - mae: 0.1077 - val_loss: 0.0227 - val_mae: 0.1178 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02102\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0181 - mae: 0.1055 - val_loss: 0.0223 - val_mae: 0.1154 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.02102 to 0.02064, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0180 - mae: 0.1051 - val_loss: 0.0206 - val_mae: 0.1109 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02064\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0182 - mae: 0.1054 - val_loss: 0.0215 - val_mae: 0.1144 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02064\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0178 - mae: 0.1046 - val_loss: 0.0220 - val_mae: 0.1140 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.02064 to 0.02015, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0178 - mae: 0.1045 - val_loss: 0.0201 - val_mae: 0.1110 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02015\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0175 - mae: 0.1037 - val_loss: 0.0216 - val_mae: 0.1152 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.02015 to 0.01887, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0173 - mae: 0.1029 - val_loss: 0.0189 - val_mae: 0.1060 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01887\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0170 - mae: 0.1021 - val_loss: 0.0231 - val_mae: 0.1186 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01887\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0172 - mae: 0.1027 - val_loss: 0.0217 - val_mae: 0.1137 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.01887\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0169 - mae: 0.1018 - val_loss: 0.0232 - val_mae: 0.1177 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.01887\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0177 - mae: 0.1039 - val_loss: 0.0238 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.01887\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0166 - mae: 0.1010 - val_loss: 0.0209 - val_mae: 0.1126 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01887\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0170 - mae: 0.1019 - val_loss: 0.0201 - val_mae: 0.1099 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01887\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0171 - mae: 0.1021 - val_loss: 0.0195 - val_mae: 0.1081 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01887\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0167 - mae: 0.1012 - val_loss: 0.0218 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01887\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0169 - mae: 0.1015 - val_loss: 0.0197 - val_mae: 0.1089 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.01887 to 0.01855, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0178 - mae: 0.1043 - val_loss: 0.0186 - val_mae: 0.1054 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01855\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0168 - mae: 0.1014 - val_loss: 0.0213 - val_mae: 0.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01855\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0179 - mae: 0.1046 - val_loss: 0.0287 - val_mae: 0.1337 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0175 - mae: 0.1036 - val_loss: 0.0230 - val_mae: 0.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01855\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0174 - mae: 0.1030 - val_loss: 0.0199 - val_mae: 0.1095 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01855\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0176 - mae: 0.1035 - val_loss: 0.0252 - val_mae: 0.1220 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01855\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0175 - mae: 0.1036 - val_loss: 0.0193 - val_mae: 0.1073 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01855\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0182 - mae: 0.1051 - val_loss: 0.0209 - val_mae: 0.1122 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0175 - mae: 0.1033 - val_loss: 0.0221 - val_mae: 0.1151 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01855\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0174 - mae: 0.1031 - val_loss: 0.0207 - val_mae: 0.1109 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01855\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0173 - mae: 0.1025 - val_loss: 0.0222 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0174 - mae: 0.1031 - val_loss: 0.0198 - val_mae: 0.1088 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0171 - mae: 0.1021 - val_loss: 0.0191 - val_mae: 0.1062 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0177 - mae: 0.1038 - val_loss: 0.0250 - val_mae: 0.1214 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0173 - mae: 0.1028 - val_loss: 0.0209 - val_mae: 0.1110 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01855\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0174 - mae: 0.1028 - val_loss: 0.0194 - val_mae: 0.1096 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01855\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0175 - mae: 0.1031 - val_loss: 0.0199 - val_mae: 0.1100 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01855\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0179 - mae: 0.1038 - val_loss: 0.0200 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01855\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0173 - mae: 0.1027 - val_loss: 0.0201 - val_mae: 0.1114 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0176 - mae: 0.1036 - val_loss: 0.0229 - val_mae: 0.1179 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01855\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0177 - mae: 0.1030 - val_loss: 0.0204 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.01855 to 0.00816, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0056 - mae: 0.0583 - val_loss: 0.0082 - val_mae: 0.0689 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.00816 to 0.00773, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0045 - mae: 0.0527 - val_loss: 0.0077 - val_mae: 0.0671 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.00773 to 0.00765, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0042 - mae: 0.0509 - val_loss: 0.0076 - val_mae: 0.0665 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.00765 to 0.00756, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0076 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.00756 to 0.00736, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0038 - mae: 0.0485 - val_loss: 0.0074 - val_mae: 0.0654 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.00736 to 0.00721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0036 - mae: 0.0476 - val_loss: 0.0072 - val_mae: 0.0646 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.00721 to 0.00705, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0035 - mae: 0.0469 - val_loss: 0.0070 - val_mae: 0.0636 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.00705\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.00705\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0034 - mae: 0.0459 - val_loss: 0.0071 - val_mae: 0.0642 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.00705\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.00705\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.00705\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.00705 to 0.00685, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0069 - val_mae: 0.0627 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.00685\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0031 - mae: 0.0437 - val_loss: 0.0069 - val_mae: 0.0632 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.00685 to 0.00682, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0068 - val_mae: 0.0626 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.00682\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0068 - val_mae: 0.0627 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.00682 to 0.00671, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0029 - mae: 0.0428 - val_loss: 0.0067 - val_mae: 0.0620 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.00671 to 0.00664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0066 - val_mae: 0.0617 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00664\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0067 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.00664\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0067 - val_mae: 0.0617 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00664\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0067 - val_mae: 0.0621 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00664\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0067 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00664\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0068 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.00664 to 0.00662, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0066 - val_mae: 0.0612 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.00662 to 0.00659, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0026 - mae: 0.0405 - val_loss: 0.0066 - val_mae: 0.0614 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00659\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0066 - val_mae: 0.0615 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss improved from 0.00659 to 0.00651, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0026 - mae: 0.0400 - val_loss: 0.0065 - val_mae: 0.0608 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.00651\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0066 - val_mae: 0.0610 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00651\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0066 - val_mae: 0.0611 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00651\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0066 - val_mae: 0.0612 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00651\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0066 - val_mae: 0.0616 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00651\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00651\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.00651 to 0.00644, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0064 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00644\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0024 - mae: 0.0384 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00644\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0066 - val_mae: 0.0612 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00644\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0065 - val_mae: 0.0605 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.00644 to 0.00636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0064 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00636\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0066 - val_mae: 0.0612 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00636\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0022 - mae: 0.0375 - val_loss: 0.0064 - val_mae: 0.0601 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.00636 to 0.00633, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0022 - mae: 0.0373 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00633\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0022 - mae: 0.0372 - val_loss: 0.0065 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00633\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0065 - val_mae: 0.0605 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00633\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0022 - mae: 0.0368 - val_loss: 0.0064 - val_mae: 0.0601 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00633\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0022 - mae: 0.0368 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss improved from 0.00633 to 0.00630, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0021 - mae: 0.0365 - val_loss: 0.0063 - val_mae: 0.0595 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00630\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0064 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00630\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0363 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00630\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0021 - mae: 0.0362 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.00630 to 0.00629, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0063 - val_mae: 0.0597 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00629\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00629\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0064 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00629\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0356 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00629\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0020 - mae: 0.0354 - val_loss: 0.0063 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00629\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0020 - mae: 0.0354 - val_loss: 0.0063 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.00629 to 0.00628, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0020 - mae: 0.0353 - val_loss: 0.0063 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00628\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00628\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0350 - val_loss: 0.0065 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00628\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00628\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0063 - val_mae: 0.0597 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.00628 to 0.00618, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0345 - val_loss: 0.0062 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00618\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0062 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00618\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0063 - val_mae: 0.0597 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.00618 to 0.00618, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0341 - val_loss: 0.0062 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00618\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0019 - mae: 0.0341 - val_loss: 0.0062 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00618\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0339 - val_loss: 0.0064 - val_mae: 0.0604 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00618\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0062 - val_mae: 0.0592 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00618\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0062 - val_mae: 0.0591 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00618\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0336 - val_loss: 0.0062 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00618\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0063 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.00618 to 0.00613, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0061 - val_mae: 0.0585 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00613\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0333 - val_loss: 0.0062 - val_mae: 0.0589 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00613\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0332 - val_loss: 0.0062 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00613\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0063 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00613\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0064 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00613\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0329 - val_loss: 0.0064 - val_mae: 0.0597 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.00613 to 0.00609, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0061 - val_mae: 0.0584 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00609\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0063 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00609\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0062 - val_mae: 0.0591 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00609\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00609\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0062 - val_mae: 0.0587 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.00609 to 0.00579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0012 - mae: 0.0274 - val_loss: 0.0058 - val_mae: 0.0566 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.00579 to 0.00579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0012 - mae: 0.0268 - val_loss: 0.0058 - val_mae: 0.0566 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00579\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0011 - mae: 0.0267 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00579\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0058 - val_mae: 0.0566 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss improved from 0.00579 to 0.00576, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0263 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss improved from 0.00576 to 0.00576, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0011 - mae: 0.0262 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0011 - mae: 0.0262 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0011 - mae: 0.0261 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0261 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0260 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0260 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00576\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0259 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00576\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0011 - mae: 0.0259 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00576\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0011 - mae: 0.0259 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00576\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0011 - mae: 0.0258 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00576\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0011 - mae: 0.0258 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00576\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0011 - mae: 0.0258 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00576\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0058 - val_mae: 0.0564 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00576\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0058 - val_mae: 0.0565 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.00576 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0010 - mae: 0.0252 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0251 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0251 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0251 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9988e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9889e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9860e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9846e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9837e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9831e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9827e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9823e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9817e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9815e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9812e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9807e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9805e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9801e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9800e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9796e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9793e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9793e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9788e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9785e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9783e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9779e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9776e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9773e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9771e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9768e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9766e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9759e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9760e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9757e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9755e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9750e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9748e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9747e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9743e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9741e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9739e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9735e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9732e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9730e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9728e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9725e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9724e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9721e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9718e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9712e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9714e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9708e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9707e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9707e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9702e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9699e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9698e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9692e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9690e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9690e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9688e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9682e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9683e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9680e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9678e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9672e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9671e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00575\n",
      "4375/4375 - 39s - 9ms/step - loss: 9.9668e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9666e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9660e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9662e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9660e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00575\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9658e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9653e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9651e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 9ms/step - loss: 9.9650e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9646e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9645e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9639e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9638e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9636e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9636e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9631e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9629e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9627e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9625e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9621e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9618e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9616e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9615e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9612e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9607e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9606e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9604e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9600e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9599e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9596e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9592e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9591e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9588e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9587e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9583e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9582e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9578e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9577e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9574e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9571e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9569e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9567e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9564e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9560e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9561e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9556e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9553e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9551e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9549e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9547e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9545e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9542e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9540e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9538e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9538e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9534e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9531e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9528e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9524e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9523e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9520e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9517e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9514e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9514e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9511e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9510e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss improved from 0.00575 to 0.00575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9505e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9503e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9502e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9497e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9494e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9494e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9491e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9487e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9487e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9485e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9482e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9480e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9476e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9474e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 384/1000\n",
      "\n",
      "Epoch 384: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9473e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 385/1000\n",
      "\n",
      "Epoch 385: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9470e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 386/1000\n",
      "\n",
      "Epoch 386: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9467e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 387/1000\n",
      "\n",
      "Epoch 387: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9465e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 388/1000\n",
      "\n",
      "Epoch 388: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9463e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 389/1000\n",
      "\n",
      "Epoch 389: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9461e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 390/1000\n",
      "\n",
      "Epoch 390: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9457e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 391/1000\n",
      "\n",
      "Epoch 391: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9454e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 392/1000\n",
      "\n",
      "Epoch 392: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9452e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 393/1000\n",
      "\n",
      "Epoch 393: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9452e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 394/1000\n",
      "\n",
      "Epoch 394: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9450e-04 - mae: 0.0249 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 395/1000\n",
      "\n",
      "Epoch 395: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9447e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 396/1000\n",
      "\n",
      "Epoch 396: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9444e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 397/1000\n",
      "\n",
      "Epoch 397: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9441e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 398/1000\n",
      "\n",
      "Epoch 398: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9440e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 399/1000\n",
      "\n",
      "Epoch 399: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9437e-04 - mae: 0.0248 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 400/1000\n",
      "\n",
      "Epoch 400: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9433e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 401/1000\n",
      "\n",
      "Epoch 401: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9433e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 402/1000\n",
      "\n",
      "Epoch 402: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9429e-04 - mae: 0.0248 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 403/1000\n",
      "\n",
      "Epoch 403: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9429e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 404/1000\n",
      "\n",
      "Epoch 404: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9425e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 405/1000\n",
      "\n",
      "Epoch 405: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9420e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 406/1000\n",
      "\n",
      "Epoch 406: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9419e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 407/1000\n",
      "\n",
      "Epoch 407: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9417e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 408/1000\n",
      "\n",
      "Epoch 408: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9417e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 409/1000\n",
      "\n",
      "Epoch 409: val_loss did not improve from 0.00575\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9416e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 410/1000\n",
      "\n",
      "Epoch 410: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9408e-04 - mae: 0.0248 - val_loss: 0.0057 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 411/1000\n",
      "\n",
      "Epoch 411: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9409e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 412/1000\n",
      "\n",
      "Epoch 412: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9404e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 413/1000\n",
      "\n",
      "Epoch 413: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9404e-04 - mae: 0.0248 - val_loss: 0.0057 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 414/1000\n",
      "\n",
      "Epoch 414: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9402e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 415/1000\n",
      "\n",
      "Epoch 415: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9398e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 416/1000\n",
      "\n",
      "Epoch 416: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9397e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 417/1000\n",
      "\n",
      "Epoch 417: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9394e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 418/1000\n",
      "\n",
      "Epoch 418: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9393e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 419/1000\n",
      "\n",
      "Epoch 419: val_loss did not improve from 0.00575\n",
      "4375/4375 - 36s - 8ms/step - loss: 9.9389e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0563 - learning_rate: 1.0000e-07\n",
      "Epoch 420/1000\n",
      "\n",
      "Epoch 420: val_loss did not improve from 0.00575\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9387e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0562 - learning_rate: 1.0000e-07\n",
      "Epoch 420: early stopping\n",
      "Restoring model weights from the end of the best epoch: 370.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.0888 m\n",
      "Median positioning error: 0.0768 m\n",
      "90th percentile error: 0.1598 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15449.218341,
   "end_time": "2025-08-19T14:13:47.964824",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-19T09:56:18.746483",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
