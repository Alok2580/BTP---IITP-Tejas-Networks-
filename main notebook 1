{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf65e82d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-27T11:24:35.255296Z",
     "iopub.status.busy": "2025-08-27T11:24:35.255041Z",
     "iopub.status.idle": "2025-08-27T11:24:36.639669Z",
     "shell.execute_reply": "2025-08-27T11:24:36.638823Z"
    },
    "papermill": {
     "duration": 1.3891,
     "end_time": "2025-08-27T11:24:36.640863",
     "exception": false,
     "start_time": "2025-08-27T11:24:35.251763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba27b265",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:24:36.646295Z",
     "iopub.status.busy": "2025-08-27T11:24:36.645904Z",
     "iopub.status.idle": "2025-08-27T11:24:50.103356Z",
     "shell.execute_reply": "2025-08-27T11:24:50.102527Z"
    },
    "papermill": {
     "duration": 13.461479,
     "end_time": "2025-08-27T11:24:50.104779",
     "exception": false,
     "start_time": "2025-08-27T11:24:36.643300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-27 11:24:38.069758: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756293878.240868      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756293878.295826      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "581bb409",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:24:50.110229Z",
     "iopub.status.busy": "2025-08-27T11:24:50.109741Z",
     "iopub.status.idle": "2025-08-27T11:24:50.114350Z",
     "shell.execute_reply": "2025-08-27T11:24:50.113676Z"
    },
    "papermill": {
     "duration": 0.008289,
     "end_time": "2025-08-27T11:24:50.115374",
     "exception": false,
     "start_time": "2025-08-27T11:24:50.107085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b3f15ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:24:50.119728Z",
     "iopub.status.busy": "2025-08-27T11:24:50.119534Z",
     "iopub.status.idle": "2025-08-27T11:24:50.122468Z",
     "shell.execute_reply": "2025-08-27T11:24:50.121974Z"
    },
    "papermill": {
     "duration": 0.006191,
     "end_time": "2025-08-27T11:24:50.123459",
     "exception": false,
     "start_time": "2025-08-27T11:24:50.117268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d4c6d8ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:24:50.128325Z",
     "iopub.status.busy": "2025-08-27T11:24:50.128145Z",
     "iopub.status.idle": "2025-08-27T14:51:52.365536Z",
     "shell.execute_reply": "2025-08-27T14:51:52.364854Z"
    },
    "papermill": {
     "duration": 12422.241569,
     "end_time": "2025-08-27T14:51:52.366836",
     "exception": false,
     "start_time": "2025-08-27T11:24:50.125267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1756293909.310105      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1756293918.431591      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">101,632</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m101,632\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">693,258</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m693,258\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">692,742</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m692,742\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1756293928.893051      58 service.cc:148] XLA service 0x793f5c006510 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1756293928.893940      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1756293932.609498      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 36.12759, saving model to models/best_model_full.keras\n",
      "4375/4375 - 48s - 11ms/step - loss: 78.3919 - mae: 6.6669 - val_loss: 36.1276 - val_mae: 4.7719 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 36.12759 to 8.97006, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 20.4776 - mae: 3.4606 - val_loss: 8.9701 - val_mae: 2.3204 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 8.97006 to 7.05190, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.5209 - mae: 2.3225 - val_loss: 7.0519 - val_mae: 2.0422 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.05190 to 2.15005, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.8765 - mae: 1.6552 - val_loss: 2.1500 - val_mae: 1.1374 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 2.15005\n",
      "4375/4375 - 34s - 8ms/step - loss: 8.0113 - mae: 1.9846 - val_loss: 9.2080 - val_mae: 2.3220 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.15005 to 1.92289, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.2813 - mae: 1.3518 - val_loss: 1.9229 - val_mae: 1.0907 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.92289 to 1.61997, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.4873 - mae: 1.2653 - val_loss: 1.6200 - val_mae: 0.9803 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.61997 to 0.95510, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2614 - mae: 1.0257 - val_loss: 0.9551 - val_mae: 0.7575 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.95510 to 0.71051, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0577 - mae: 0.7541 - val_loss: 0.7105 - val_mae: 0.6537 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.71051 to 0.53954, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7335 - mae: 0.8511 - val_loss: 0.5395 - val_mae: 0.5697 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.53954\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4495 - mae: 0.8109 - val_loss: 0.8488 - val_mae: 0.7116 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.53954\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7905 - mae: 0.6502 - val_loss: 0.6257 - val_mae: 0.6172 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.53954\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.6365 - mae: 0.8510 - val_loss: 0.9370 - val_mae: 0.7280 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.53954\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5647 - mae: 0.5741 - val_loss: 0.5667 - val_mae: 0.5956 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.53954\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7281 - mae: 0.8626 - val_loss: 0.5781 - val_mae: 0.5930 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.53954\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0982 - mae: 0.7428 - val_loss: 1.0181 - val_mae: 0.7524 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.53954 to 0.48311, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2601 - mae: 0.7571 - val_loss: 0.4831 - val_mae: 0.5338 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.48311\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9397 - mae: 0.9390 - val_loss: 0.9072 - val_mae: 0.7370 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.48311\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.2163 - mae: 0.7905 - val_loss: 0.9370 - val_mae: 0.7463 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.48311\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3801 - mae: 0.7806 - val_loss: 0.5309 - val_mae: 0.5559 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.48311\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0063 - mae: 0.6656 - val_loss: 0.4842 - val_mae: 0.5436 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.48311\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9202 - mae: 0.6737 - val_loss: 0.5867 - val_mae: 0.5819 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.48311\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0931 - mae: 0.6706 - val_loss: 0.5258 - val_mae: 0.5542 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.48311\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3414 - mae: 0.7367 - val_loss: 0.5041 - val_mae: 0.5507 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.48311 to 0.45544, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9321 - mae: 0.6354 - val_loss: 0.4554 - val_mae: 0.5220 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.45544\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9514 - mae: 0.6243 - val_loss: 0.4647 - val_mae: 0.5221 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.45544 to 0.31152, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0505 - mae: 0.6490 - val_loss: 0.3115 - val_mae: 0.4305 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.31152\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5552 - mae: 0.7613 - val_loss: 0.6935 - val_mae: 0.6424 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.31152 to 0.30944, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5967 - mae: 0.5799 - val_loss: 0.3094 - val_mae: 0.4266 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.1112 - mae: 0.6733 - val_loss: 0.8832 - val_mae: 0.7202 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9362 - mae: 0.8877 - val_loss: 0.7870 - val_mae: 0.6738 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1847 - mae: 0.7520 - val_loss: 0.5259 - val_mae: 0.5661 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8752 - mae: 0.9268 - val_loss: 1.6268 - val_mae: 0.9802 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3764 - mae: 0.7505 - val_loss: 0.9330 - val_mae: 0.7494 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1455 - mae: 0.7593 - val_loss: 1.0272 - val_mae: 0.7779 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8741 - mae: 0.6987 - val_loss: 10.2818 - val_mae: 2.5064 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1759 - mae: 0.6934 - val_loss: 0.5366 - val_mae: 0.5720 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9642 - mae: 0.8500 - val_loss: 0.8477 - val_mae: 0.7026 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7757 - mae: 0.6398 - val_loss: 0.3473 - val_mae: 0.4513 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4485 - mae: 0.7605 - val_loss: 0.6057 - val_mae: 0.5926 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5220 - mae: 0.5465 - val_loss: 0.8390 - val_mae: 0.7055 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.6804 - mae: 0.7820 - val_loss: 1.3528 - val_mae: 0.8673 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4460 - mae: 0.5105 - val_loss: 0.3343 - val_mae: 0.4492 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.7004 - mae: 0.7676 - val_loss: 0.5672 - val_mae: 0.5847 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.30944\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0694 - mae: 0.6296 - val_loss: 0.8793 - val_mae: 0.7335 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.30944\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4711 - mae: 0.5204 - val_loss: 0.3249 - val_mae: 0.4388 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.30944 to 0.29825, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.1422 - mae: 0.6477 - val_loss: 0.2983 - val_mae: 0.4229 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.29825\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8131 - mae: 0.5857 - val_loss: 0.7103 - val_mae: 0.6435 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.29825\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8913 - mae: 0.5953 - val_loss: 1.4178 - val_mae: 0.8932 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.29825\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6828 - mae: 0.5979 - val_loss: 0.3367 - val_mae: 0.4494 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.29825\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0248 - mae: 0.5995 - val_loss: 1.8492 - val_mae: 1.0140 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.29825 to 0.28441, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5769 - mae: 0.5500 - val_loss: 0.2844 - val_mae: 0.4188 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5426 - mae: 0.7706 - val_loss: 0.5371 - val_mae: 0.5656 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6012 - mae: 0.5418 - val_loss: 1.4135 - val_mae: 0.8922 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7507 - mae: 0.6261 - val_loss: 0.4980 - val_mae: 0.5471 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8359 - mae: 0.8572 - val_loss: 0.4938 - val_mae: 0.5405 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6699 - mae: 0.5721 - val_loss: 0.4715 - val_mae: 0.5490 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7891 - mae: 0.5589 - val_loss: 0.3008 - val_mae: 0.4288 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.0482 - mae: 0.6890 - val_loss: 0.6386 - val_mae: 0.6278 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3335 - mae: 0.7976 - val_loss: 0.5009 - val_mae: 0.5551 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8768 - mae: 0.6718 - val_loss: 0.3716 - val_mae: 0.4701 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6081 - mae: 0.5681 - val_loss: 0.8540 - val_mae: 0.6903 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.9228 - mae: 0.7819 - val_loss: 0.6668 - val_mae: 0.6271 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6850 - mae: 0.6131 - val_loss: 0.3917 - val_mae: 0.4869 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8611 - mae: 0.8529 - val_loss: 0.8731 - val_mae: 0.7141 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6497 - mae: 0.5846 - val_loss: 0.5238 - val_mae: 0.5664 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2038 - mae: 0.9982 - val_loss: 24.7700 - val_mae: 3.8459 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1985 - mae: 1.0801 - val_loss: 1.0914 - val_mae: 0.8156 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 4.4306 - mae: 1.1862 - val_loss: 1.1892 - val_mae: 0.8356 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4273 - mae: 1.0109 - val_loss: 0.9180 - val_mae: 0.7515 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.28441\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3897 - mae: 0.7780 - val_loss: 0.6850 - val_mae: 0.6328 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8192 - mae: 0.8929 - val_loss: 1.0278 - val_mae: 0.7637 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5486 - mae: 0.5671 - val_loss: 0.4278 - val_mae: 0.4997 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.28441\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.3470 - mae: 0.4542 - val_loss: 0.2924 - val_mae: 0.4125 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.28441 to 0.21808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2477 - mae: 0.3854 - val_loss: 0.2181 - val_mae: 0.3596 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.21808 to 0.18451, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1969 - mae: 0.3442 - val_loss: 0.1845 - val_mae: 0.3313 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.18451 to 0.14842, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1646 - mae: 0.3154 - val_loss: 0.1484 - val_mae: 0.2967 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.14842 to 0.13275, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1386 - mae: 0.2897 - val_loss: 0.1328 - val_mae: 0.2810 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.13275 to 0.11996, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1227 - mae: 0.2726 - val_loss: 0.1200 - val_mae: 0.2685 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.11996 to 0.10808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1072 - mae: 0.2550 - val_loss: 0.1081 - val_mae: 0.2531 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.10808 to 0.10408, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0966 - mae: 0.2418 - val_loss: 0.1041 - val_mae: 0.2496 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.10408 to 0.09191, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0865 - mae: 0.2293 - val_loss: 0.0919 - val_mae: 0.2326 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.09191 to 0.08231, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0790 - mae: 0.2194 - val_loss: 0.0823 - val_mae: 0.2217 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.08231 to 0.08141, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0716 - mae: 0.2090 - val_loss: 0.0814 - val_mae: 0.2201 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.08141 to 0.07603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0667 - mae: 0.2016 - val_loss: 0.0760 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.07603 to 0.06468, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0612 - mae: 0.1932 - val_loss: 0.0647 - val_mae: 0.1975 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.06468 to 0.05992, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0565 - mae: 0.1856 - val_loss: 0.0599 - val_mae: 0.1878 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.05992 to 0.05677, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0528 - mae: 0.1797 - val_loss: 0.0568 - val_mae: 0.1841 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.05677\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0512 - mae: 0.1770 - val_loss: 0.0608 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.05677\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0477 - mae: 0.1711 - val_loss: 0.0630 - val_mae: 0.1954 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.05677 to 0.05127, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0479 - mae: 0.1714 - val_loss: 0.0513 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.05127\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0444 - mae: 0.1651 - val_loss: 0.0543 - val_mae: 0.1825 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.05127 to 0.04923, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0426 - mae: 0.1616 - val_loss: 0.0492 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.04923 to 0.04413, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0402 - mae: 0.1570 - val_loss: 0.0441 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.04413 to 0.04277, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0379 - mae: 0.1524 - val_loss: 0.0428 - val_mae: 0.1602 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04277\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0363 - mae: 0.1489 - val_loss: 0.0471 - val_mae: 0.1670 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.04277 to 0.03938, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0349 - mae: 0.1463 - val_loss: 0.0394 - val_mae: 0.1524 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03938\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0335 - mae: 0.1434 - val_loss: 0.0534 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03938\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0322 - mae: 0.1404 - val_loss: 0.0465 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03938\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0320 - mae: 0.1401 - val_loss: 0.0442 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.03938 to 0.03772, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0309 - mae: 0.1375 - val_loss: 0.0377 - val_mae: 0.1505 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.03772 to 0.03759, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0300 - mae: 0.1357 - val_loss: 0.0376 - val_mae: 0.1492 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03759\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0294 - mae: 0.1343 - val_loss: 0.0379 - val_mae: 0.1498 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.03759\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0291 - mae: 0.1334 - val_loss: 0.0417 - val_mae: 0.1590 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03759\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0292 - mae: 0.1337 - val_loss: 0.0416 - val_mae: 0.1576 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03759\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0288 - mae: 0.1326 - val_loss: 0.0394 - val_mae: 0.1549 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.03759 to 0.03093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0273 - mae: 0.1296 - val_loss: 0.0309 - val_mae: 0.1352 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0302 - mae: 0.1298 - val_loss: 0.0548 - val_mae: 0.1802 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1265 - val_loss: 0.0333 - val_mae: 0.1411 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.03093 to 0.03073, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1272 - val_loss: 0.0307 - val_mae: 0.1345 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03073\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0268 - mae: 0.1281 - val_loss: 0.0333 - val_mae: 0.1405 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03073\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0271 - mae: 0.1288 - val_loss: 0.0335 - val_mae: 0.1418 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.03073 to 0.02749, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0260 - mae: 0.1260 - val_loss: 0.0275 - val_mae: 0.1272 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02749\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1236 - val_loss: 0.0310 - val_mae: 0.1370 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02749\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0255 - mae: 0.1249 - val_loss: 0.0300 - val_mae: 0.1332 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02749\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1230 - val_loss: 0.0327 - val_mae: 0.1406 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02749\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1220 - val_loss: 0.0300 - val_mae: 0.1335 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss improved from 0.02749 to 0.02739, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1226 - val_loss: 0.0274 - val_mae: 0.1281 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02739\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0241 - mae: 0.1216 - val_loss: 0.0323 - val_mae: 0.1391 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02739\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1209 - val_loss: 0.0334 - val_mae: 0.1413 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02739\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0236 - mae: 0.1201 - val_loss: 0.0292 - val_mae: 0.1324 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02739\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0231 - mae: 0.1191 - val_loss: 0.0291 - val_mae: 0.1326 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.02739\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0231 - mae: 0.1186 - val_loss: 0.0275 - val_mae: 0.1270 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02739\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0226 - mae: 0.1176 - val_loss: 0.0299 - val_mae: 0.1335 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.02739 to 0.02657, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0227 - mae: 0.1175 - val_loss: 0.0266 - val_mae: 0.1253 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02657\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1181 - val_loss: 0.0533 - val_mae: 0.1758 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.02657 to 0.02508, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0224 - mae: 0.1169 - val_loss: 0.0251 - val_mae: 0.1221 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02508\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0226 - mae: 0.1177 - val_loss: 0.0314 - val_mae: 0.1397 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.02508\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1167 - val_loss: 0.0312 - val_mae: 0.1376 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.02508\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1169 - val_loss: 0.0314 - val_mae: 0.1367 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02508\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1172 - val_loss: 0.0271 - val_mae: 0.1268 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.02508\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1163 - val_loss: 0.0279 - val_mae: 0.1298 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02508\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1154 - val_loss: 0.0308 - val_mae: 0.1362 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.02508 to 0.02193, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0228 - mae: 0.1177 - val_loss: 0.0219 - val_mae: 0.1136 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1158 - val_loss: 0.0276 - val_mae: 0.1285 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0217 - mae: 0.1152 - val_loss: 0.0314 - val_mae: 0.1393 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0222 - mae: 0.1162 - val_loss: 0.0338 - val_mae: 0.1431 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0222 - mae: 0.1165 - val_loss: 0.0274 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02193\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1151 - val_loss: 0.0243 - val_mae: 0.1200 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1157 - val_loss: 0.0309 - val_mae: 0.1373 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0222 - mae: 0.1157 - val_loss: 0.0231 - val_mae: 0.1168 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0227 - mae: 0.1145 - val_loss: 0.0252 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0209 - mae: 0.1128 - val_loss: 0.0289 - val_mae: 0.1308 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02193\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1143 - val_loss: 0.0271 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02193\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0217 - mae: 0.1148 - val_loss: 0.0300 - val_mae: 0.1330 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02193\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0225 - mae: 0.1167 - val_loss: 0.0288 - val_mae: 0.1306 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02193\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0217 - mae: 0.1149 - val_loss: 0.0282 - val_mae: 0.1299 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02193\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0219 - mae: 0.1147 - val_loss: 0.0250 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02193\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0219 - mae: 0.1153 - val_loss: 0.0260 - val_mae: 0.1243 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02193\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0217 - mae: 0.1147 - val_loss: 0.0293 - val_mae: 0.1337 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02193\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0221 - mae: 0.1156 - val_loss: 0.0266 - val_mae: 0.1262 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02193\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0221 - mae: 0.1159 - val_loss: 0.0222 - val_mae: 0.1149 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02193\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0217 - mae: 0.1149 - val_loss: 0.0289 - val_mae: 0.1314 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02193\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0222 - mae: 0.1160 - val_loss: 0.0248 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.02193 to 0.01111, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0071 - mae: 0.0658 - val_loss: 0.0111 - val_mae: 0.0801 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.01111 to 0.01051, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0057 - mae: 0.0596 - val_loss: 0.0105 - val_mae: 0.0775 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.01051 to 0.01018, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0053 - mae: 0.0574 - val_loss: 0.0102 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.01018 to 0.01012, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0050 - mae: 0.0559 - val_loss: 0.0101 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.01012 to 0.00996, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0048 - mae: 0.0547 - val_loss: 0.0100 - val_mae: 0.0752 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00996 to 0.00970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0046 - mae: 0.0538 - val_loss: 0.0097 - val_mae: 0.0743 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00970\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0045 - mae: 0.0530 - val_loss: 0.0098 - val_mae: 0.0747 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.00970 to 0.00964, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0044 - mae: 0.0523 - val_loss: 0.0096 - val_mae: 0.0738 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.00964 to 0.00951, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0043 - mae: 0.0517 - val_loss: 0.0095 - val_mae: 0.0734 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00951\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0042 - mae: 0.0511 - val_loss: 0.0096 - val_mae: 0.0738 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.00951 to 0.00943, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0094 - val_mae: 0.0728 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00943\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0040 - mae: 0.0501 - val_loss: 0.0095 - val_mae: 0.0732 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00943\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0039 - mae: 0.0497 - val_loss: 0.0095 - val_mae: 0.0731 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.00943 to 0.00922, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0039 - mae: 0.0493 - val_loss: 0.0092 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00922\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0038 - mae: 0.0488 - val_loss: 0.0093 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00922\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0037 - mae: 0.0485 - val_loss: 0.0093 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00922\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0037 - mae: 0.0481 - val_loss: 0.0094 - val_mae: 0.0728 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00922\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0036 - mae: 0.0478 - val_loss: 0.0093 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.00922 to 0.00907, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0036 - mae: 0.0474 - val_loss: 0.0091 - val_mae: 0.0711 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.00907 to 0.00898, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0035 - mae: 0.0471 - val_loss: 0.0090 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00898\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0091 - val_mae: 0.0709 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00898\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0092 - val_mae: 0.0719 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00898\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0092 - val_mae: 0.0716 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00898\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0034 - mae: 0.0459 - val_loss: 0.0092 - val_mae: 0.0719 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00898\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0091 - val_mae: 0.0709 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.00898 to 0.00890, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0033 - mae: 0.0454 - val_loss: 0.0089 - val_mae: 0.0702 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00890\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0091 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.00890 to 0.00881, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0032 - mae: 0.0450 - val_loss: 0.0088 - val_mae: 0.0699 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0032 - mae: 0.0447 - val_loss: 0.0090 - val_mae: 0.0705 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0090 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0089 - val_mae: 0.0702 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0089 - val_mae: 0.0704 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0090 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0435 - val_loss: 0.0090 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0089 - val_mae: 0.0701 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0089 - val_mae: 0.0702 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00881\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0089 - val_mae: 0.0703 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.00881 to 0.00880, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0029 - mae: 0.0427 - val_loss: 0.0088 - val_mae: 0.0697 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00880\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0089 - val_mae: 0.0700 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.00880 to 0.00877, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0088 - val_mae: 0.0695 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.00877 to 0.00865, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0086 - val_mae: 0.0690 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0088 - val_mae: 0.0697 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0089 - val_mae: 0.0699 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0028 - mae: 0.0416 - val_loss: 0.0087 - val_mae: 0.0694 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0087 - val_mae: 0.0692 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0027 - mae: 0.0414 - val_loss: 0.0087 - val_mae: 0.0689 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0089 - val_mae: 0.0698 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00865\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0088 - val_mae: 0.0695 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0087 - val_mae: 0.0691 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0088 - val_mae: 0.0698 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00865\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0087 - val_mae: 0.0691 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss improved from 0.00865 to 0.00864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0086 - val_mae: 0.0687 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00864\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0087 - val_mae: 0.0690 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00864\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0088 - val_mae: 0.0697 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00864\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0089 - val_mae: 0.0703 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00864\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0087 - val_mae: 0.0693 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00864\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0087 - val_mae: 0.0689 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.00864 to 0.00859, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0086 - val_mae: 0.0683 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00859\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0087 - val_mae: 0.0693 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00859\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0087 - val_mae: 0.0690 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00859\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0392 - val_loss: 0.0087 - val_mae: 0.0688 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.00859 to 0.00813, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0081 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.00813 to 0.00813, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0332 - val_loss: 0.0081 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00813\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0082 - val_mae: 0.0664 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00813\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0329 - val_loss: 0.0081 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss improved from 0.00813 to 0.00811, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00811\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0327 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss improved from 0.00811 to 0.00810, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00810\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0081 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00810\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00810\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00810\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0081 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00810\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00810\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00810\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0081 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00810\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0082 - val_mae: 0.0663 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00810\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00810\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0321 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00810\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0321 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00810\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00810\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00810\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0081 - val_mae: 0.0662 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss improved from 0.00810 to 0.00809, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00809\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0081 - val_mae: 0.0661 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss improved from 0.00809 to 0.00808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss improved from 0.00808 to 0.00808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00808\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00808\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0661 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-06\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss improved from 0.00808 to 0.00808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss improved from 0.00808 to 0.00808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00808\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00808\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00808\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00808\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00808\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00808\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00808\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss improved from 0.00808 to 0.00807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0659 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.00807\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.00807\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0081 - val_mae: 0.0660 - learning_rate: 1.0000e-07\n",
      "Epoch 347: early stopping\n",
      "Restoring model weights from the end of the best epoch: 297.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1039 m\n",
      "Median positioning error: 0.0889 m\n",
      "90th percentile error: 0.1890 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12444.663188,
   "end_time": "2025-08-27T14:51:55.946597",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T11:24:31.283409",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
