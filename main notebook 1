{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d2a8878",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-03T16:34:04.336263Z",
     "iopub.status.busy": "2025-08-03T16:34:04.336020Z",
     "iopub.status.idle": "2025-08-03T16:34:05.752584Z",
     "shell.execute_reply": "2025-08-03T16:34:05.751845Z"
    },
    "papermill": {
     "duration": 1.421254,
     "end_time": "2025-08-03T16:34:05.753708",
     "exception": false,
     "start_time": "2025-08-03T16:34:04.332454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a3c38a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:34:05.759113Z",
     "iopub.status.busy": "2025-08-03T16:34:05.758800Z",
     "iopub.status.idle": "2025-08-03T16:34:19.963605Z",
     "shell.execute_reply": "2025-08-03T16:34:19.962927Z"
    },
    "papermill": {
     "duration": 14.208793,
     "end_time": "2025-08-03T16:34:19.964980",
     "exception": false,
     "start_time": "2025-08-03T16:34:05.756187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-03 16:34:07.274592: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754238847.467368      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754238847.526316      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4ab5a896",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:34:19.970152Z",
     "iopub.status.busy": "2025-08-03T16:34:19.969714Z",
     "iopub.status.idle": "2025-08-03T16:34:19.974228Z",
     "shell.execute_reply": "2025-08-03T16:34:19.973532Z"
    },
    "papermill": {
     "duration": 0.008124,
     "end_time": "2025-08-03T16:34:19.975351",
     "exception": false,
     "start_time": "2025-08-03T16:34:19.967227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "81e165d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:34:19.979820Z",
     "iopub.status.busy": "2025-08-03T16:34:19.979435Z",
     "iopub.status.idle": "2025-08-03T16:34:19.982641Z",
     "shell.execute_reply": "2025-08-03T16:34:19.981946Z"
    },
    "papermill": {
     "duration": 0.00649,
     "end_time": "2025-08-03T16:34:19.983699",
     "exception": false,
     "start_time": "2025-08-03T16:34:19.977209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9dde397d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:34:19.988484Z",
     "iopub.status.busy": "2025-08-03T16:34:19.988268Z",
     "iopub.status.idle": "2025-08-03T18:11:51.325174Z",
     "shell.execute_reply": "2025-08-03T18:11:51.324459Z"
    },
    "papermill": {
     "duration": 5851.340955,
     "end_time": "2025-08-03T18:11:51.326422",
     "exception": false,
     "start_time": "2025-08-03T16:34:19.985467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754238883.930709      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754238893.139112      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">69,248</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">30,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m69,248\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m30,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">233,482</span> (912.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m233,482\u001b[0m (912.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">233,222</span> (911.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m233,222\u001b[0m (911.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754238903.785198      59 service.cc:148] XLA service 0x7be7b0015d60 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754238903.785990      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754238907.111154      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 14.86041, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 105.4748 - mae: 6.8331 - val_loss: 14.8604 - val_mae: 2.9819 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 14.86041 to 5.23019, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 7.4277 - mae: 2.0839 - val_loss: 5.2302 - val_mae: 1.7415 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.23019 to 3.27806, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 3.6317 - mae: 1.4590 - val_loss: 3.2781 - val_mae: 1.3792 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.27806 to 1.35000, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9575 - mae: 1.0746 - val_loss: 1.3500 - val_mae: 0.9007 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.35000 to 0.98024, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8226 - mae: 0.9997 - val_loss: 0.9802 - val_mae: 0.7725 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 0.98024\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9448 - mae: 0.9406 - val_loss: 1.2643 - val_mae: 0.8899 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.98024 to 0.79507, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7981 - mae: 0.6931 - val_loss: 0.7951 - val_mae: 0.6986 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.79507 to 0.48642, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0705 - mae: 0.7420 - val_loss: 0.4864 - val_mae: 0.5490 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.48642\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5056 - mae: 0.5553 - val_loss: 0.5233 - val_mae: 0.5704 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.48642 to 0.34134, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1556 - mae: 0.6774 - val_loss: 0.3413 - val_mae: 0.4595 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.34134\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6698 - mae: 0.7753 - val_loss: 0.7855 - val_mae: 0.6842 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.34134\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5384 - mae: 0.5638 - val_loss: 0.5694 - val_mae: 0.5703 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.34134\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9908 - mae: 0.6622 - val_loss: 0.4011 - val_mae: 0.4969 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.34134\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4739 - mae: 0.5258 - val_loss: 0.6810 - val_mae: 0.6167 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.34134\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4194 - mae: 0.5015 - val_loss: 0.3537 - val_mae: 0.4714 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.34134\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5820 - mae: 0.5456 - val_loss: 0.4057 - val_mae: 0.4924 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.34134\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4030 - mae: 0.4832 - val_loss: 0.4057 - val_mae: 0.4962 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.34134 to 0.31324, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5718 - mae: 0.5221 - val_loss: 0.3132 - val_mae: 0.4359 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.31324\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8498 - mae: 0.8458 - val_loss: 0.8182 - val_mae: 0.7054 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6123 - mae: 0.5942 - val_loss: 0.4198 - val_mae: 0.5135 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9962 - mae: 0.6620 - val_loss: 0.4074 - val_mae: 0.4965 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1932 - mae: 0.7538 - val_loss: 1.9650 - val_mae: 1.0598 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9377 - mae: 0.7137 - val_loss: 0.5212 - val_mae: 0.5660 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1047 - mae: 0.6633 - val_loss: 0.5177 - val_mae: 0.5560 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4691 - mae: 0.5281 - val_loss: 0.3585 - val_mae: 0.4698 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.0004 - mae: 0.8579 - val_loss: 1.5946 - val_mae: 0.9712 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6513 - mae: 0.6175 - val_loss: 0.6210 - val_mae: 0.6140 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0113 - mae: 0.6717 - val_loss: 0.4144 - val_mae: 0.5060 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0414 - mae: 0.6031 - val_loss: 1.3769 - val_mae: 0.9083 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6305 - mae: 0.5846 - val_loss: 0.3864 - val_mae: 0.4828 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.31324\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3579 - mae: 0.4649 - val_loss: 0.3244 - val_mae: 0.4408 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.31324\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9135 - mae: 0.6121 - val_loss: 0.3163 - val_mae: 0.4412 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.31324\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2697 - mae: 0.6640 - val_loss: 2.7157 - val_mae: 1.2141 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.31324\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8648 - mae: 0.6557 - val_loss: 0.6648 - val_mae: 0.6442 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.31324\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3465 - mae: 0.4543 - val_loss: 0.3788 - val_mae: 0.4917 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.31324 to 0.27347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4507 - mae: 0.4511 - val_loss: 0.2735 - val_mae: 0.4102 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.27347\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.0512 - mae: 0.8202 - val_loss: 0.5260 - val_mae: 0.5621 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.27347\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0430 - mae: 0.6233 - val_loss: 0.9697 - val_mae: 0.7608 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.27347 to 0.27013, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5833 - mae: 0.5598 - val_loss: 0.2701 - val_mae: 0.4029 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.27013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4304 - mae: 0.4908 - val_loss: 0.3428 - val_mae: 0.4543 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.27013\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7205 - mae: 0.6878 - val_loss: 0.5445 - val_mae: 0.5731 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.27013 to 0.20238, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3373 - mae: 0.4526 - val_loss: 0.2024 - val_mae: 0.3534 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3322 - mae: 0.4431 - val_loss: 0.2809 - val_mae: 0.4113 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.2777 - mae: 0.7983 - val_loss: 0.4548 - val_mae: 0.4678 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9540 - mae: 0.5973 - val_loss: 0.3061 - val_mae: 0.4311 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6865 - mae: 0.7758 - val_loss: 6.4941 - val_mae: 1.8940 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.20238\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9444 - mae: 0.7048 - val_loss: 0.4230 - val_mae: 0.4996 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1909 - mae: 0.6231 - val_loss: 0.6717 - val_mae: 0.6344 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4024 - mae: 0.4865 - val_loss: 0.2538 - val_mae: 0.3995 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.5174 - mae: 0.7841 - val_loss: 1.4494 - val_mae: 0.8744 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4653 - mae: 0.5263 - val_loss: 0.4762 - val_mae: 0.4200 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.20238\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3082 - mae: 0.4313 - val_loss: 0.2560 - val_mae: 0.3991 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3301 - mae: 0.4403 - val_loss: 0.3012 - val_mae: 0.4341 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7241 - mae: 0.5502 - val_loss: 0.4000 - val_mae: 0.4976 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9063 - mae: 0.5354 - val_loss: 265.9661 - val_mae: 11.7642 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6604 - mae: 0.5747 - val_loss: 0.2029 - val_mae: 0.3523 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.20238\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3956 - mae: 0.7295 - val_loss: 0.4329 - val_mae: 0.5089 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2914 - mae: 0.4182 - val_loss: 0.2697 - val_mae: 0.4055 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4967 - mae: 0.6424 - val_loss: 1.8129 - val_mae: 0.8763 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4767 - mae: 0.5274 - val_loss: 0.2383 - val_mae: 0.3831 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1261 - mae: 0.6457 - val_loss: 0.2649 - val_mae: 0.4016 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.20238\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5403 - mae: 0.5104 - val_loss: 1.4128 - val_mae: 0.9605 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.20238\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2687 - mae: 0.3962 - val_loss: 0.2094 - val_mae: 0.3536 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.20238 to 0.14527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1648 - mae: 0.3121 - val_loss: 0.1453 - val_mae: 0.2941 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.14527 to 0.11277, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1222 - mae: 0.2689 - val_loss: 0.1128 - val_mae: 0.2612 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.11277 to 0.08997, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0938 - mae: 0.2365 - val_loss: 0.0900 - val_mae: 0.2339 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.08997 to 0.07696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0782 - mae: 0.2163 - val_loss: 0.0770 - val_mae: 0.2157 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.07696 to 0.06218, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0657 - mae: 0.1984 - val_loss: 0.0622 - val_mae: 0.1927 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.06218 to 0.05433, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0555 - mae: 0.1834 - val_loss: 0.0543 - val_mae: 0.1819 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.05433 to 0.04503, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0494 - mae: 0.1731 - val_loss: 0.0450 - val_mae: 0.1662 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.04503 to 0.04183, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0414 - mae: 0.1590 - val_loss: 0.0418 - val_mae: 0.1603 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.04183 to 0.03783, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0348 - mae: 0.1463 - val_loss: 0.0378 - val_mae: 0.1530 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.03783 to 0.03020, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0308 - mae: 0.1379 - val_loss: 0.0302 - val_mae: 0.1356 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.03020 to 0.02955, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0287 - mae: 0.1332 - val_loss: 0.0296 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.02955 to 0.02500, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0273 - mae: 0.1299 - val_loss: 0.0250 - val_mae: 0.1233 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.02500\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0258 - mae: 0.1262 - val_loss: 0.0287 - val_mae: 0.1333 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02500\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0247 - mae: 0.1234 - val_loss: 0.0282 - val_mae: 0.1326 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02500\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0242 - mae: 0.1222 - val_loss: 0.0252 - val_mae: 0.1248 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02500\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0236 - mae: 0.1204 - val_loss: 0.0258 - val_mae: 0.1256 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.02500 to 0.02457, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0235 - mae: 0.1203 - val_loss: 0.0246 - val_mae: 0.1229 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.02457 to 0.02311, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0235 - mae: 0.1201 - val_loss: 0.0231 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02311\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0224 - mae: 0.1176 - val_loss: 0.0252 - val_mae: 0.1241 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02311\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0218 - mae: 0.1158 - val_loss: 0.0238 - val_mae: 0.1206 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02311\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0217 - mae: 0.1156 - val_loss: 0.0236 - val_mae: 0.1202 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02311\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0212 - mae: 0.1144 - val_loss: 0.0301 - val_mae: 0.1362 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02311\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0209 - mae: 0.1137 - val_loss: 0.0259 - val_mae: 0.1254 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02311\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1131 - val_loss: 0.0258 - val_mae: 0.1262 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.02311 to 0.02050, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0204 - mae: 0.1121 - val_loss: 0.0205 - val_mae: 0.1120 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02050\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0206 - mae: 0.1126 - val_loss: 0.0255 - val_mae: 0.1253 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02050\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0199 - mae: 0.1107 - val_loss: 0.0234 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02050\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0199 - mae: 0.1108 - val_loss: 0.0258 - val_mae: 0.1260 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02050\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1115 - val_loss: 0.0264 - val_mae: 0.1279 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02050\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0198 - mae: 0.1108 - val_loss: 0.0227 - val_mae: 0.1172 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02050\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0194 - mae: 0.1094 - val_loss: 0.0227 - val_mae: 0.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.02050 to 0.02027, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0195 - mae: 0.1096 - val_loss: 0.0203 - val_mae: 0.1113 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02027\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0193 - mae: 0.1091 - val_loss: 0.0206 - val_mae: 0.1125 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02027\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0191 - mae: 0.1084 - val_loss: 0.0267 - val_mae: 0.1292 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02027\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0191 - mae: 0.1084 - val_loss: 0.0209 - val_mae: 0.1130 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.02027 to 0.02006, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0193 - mae: 0.1090 - val_loss: 0.0201 - val_mae: 0.1101 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02006\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0192 - mae: 0.1089 - val_loss: 0.0251 - val_mae: 0.1235 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02006\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0194 - mae: 0.1094 - val_loss: 0.0210 - val_mae: 0.1130 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02006\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0192 - mae: 0.1085 - val_loss: 0.0207 - val_mae: 0.1122 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02006\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0190 - mae: 0.1082 - val_loss: 0.0239 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02006\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0189 - mae: 0.1077 - val_loss: 0.0230 - val_mae: 0.1176 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.02006 to 0.01938, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0192 - mae: 0.1086 - val_loss: 0.0194 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01938\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0188 - mae: 0.1075 - val_loss: 0.0291 - val_mae: 0.1340 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01938\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0187 - mae: 0.1073 - val_loss: 0.0210 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01938\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0190 - mae: 0.1081 - val_loss: 0.0241 - val_mae: 0.1200 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01938\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0189 - mae: 0.1077 - val_loss: 0.0216 - val_mae: 0.1161 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.01938 to 0.01778, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0196 - mae: 0.1085 - val_loss: 0.0178 - val_mae: 0.1047 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0185 - mae: 0.1067 - val_loss: 0.0233 - val_mae: 0.1202 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0192 - mae: 0.1086 - val_loss: 0.0216 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0195 - mae: 0.1095 - val_loss: 0.0220 - val_mae: 0.1164 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0188 - mae: 0.1074 - val_loss: 0.0207 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0190 - mae: 0.1079 - val_loss: 0.0288 - val_mae: 0.1350 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0189 - mae: 0.1081 - val_loss: 0.0223 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0191 - mae: 0.1078 - val_loss: 0.0205 - val_mae: 0.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0187 - mae: 0.1074 - val_loss: 0.0231 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0191 - mae: 0.1081 - val_loss: 0.0257 - val_mae: 0.1250 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0190 - mae: 0.1080 - val_loss: 0.0264 - val_mae: 0.1281 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0192 - mae: 0.1082 - val_loss: 0.0229 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0189 - mae: 0.1078 - val_loss: 0.0243 - val_mae: 0.1220 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0193 - mae: 0.1086 - val_loss: 0.0236 - val_mae: 0.1228 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0190 - mae: 0.1081 - val_loss: 0.0221 - val_mae: 0.1163 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01778\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0196 - mae: 0.1092 - val_loss: 0.0233 - val_mae: 0.1185 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0188 - mae: 0.1073 - val_loss: 0.0220 - val_mae: 0.1175 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0196 - mae: 0.1094 - val_loss: 0.0194 - val_mae: 0.1087 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0192 - mae: 0.1082 - val_loss: 0.0219 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0197 - mae: 0.1097 - val_loss: 0.0237 - val_mae: 0.1194 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01778\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0192 - mae: 0.1086 - val_loss: 0.0204 - val_mae: 0.1124 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.01778 to 0.00991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0690 - val_loss: 0.0099 - val_mae: 0.0774 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.00991 to 0.00946, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0095 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.00946 to 0.00912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0067 - mae: 0.0646 - val_loss: 0.0091 - val_mae: 0.0742 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.00912\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0066 - mae: 0.0640 - val_loss: 0.0093 - val_mae: 0.0749 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.00912\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0065 - mae: 0.0636 - val_loss: 0.0092 - val_mae: 0.0746 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00912\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0064 - mae: 0.0631 - val_loss: 0.0095 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00912\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0064 - mae: 0.0629 - val_loss: 0.0093 - val_mae: 0.0751 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.00912 to 0.00903, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0063 - mae: 0.0626 - val_loss: 0.0090 - val_mae: 0.0736 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.00903 to 0.00890, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0062 - mae: 0.0623 - val_loss: 0.0089 - val_mae: 0.0732 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00890\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0062 - mae: 0.0621 - val_loss: 0.0089 - val_mae: 0.0733 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00890\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0062 - mae: 0.0619 - val_loss: 0.0090 - val_mae: 0.0735 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.00890 to 0.00881, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0061 - mae: 0.0617 - val_loss: 0.0088 - val_mae: 0.0727 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.00881\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0061 - mae: 0.0617 - val_loss: 0.0089 - val_mae: 0.0733 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00881\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0061 - mae: 0.0614 - val_loss: 0.0089 - val_mae: 0.0734 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00881\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0060 - mae: 0.0613 - val_loss: 0.0089 - val_mae: 0.0733 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.00881\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0060 - mae: 0.0610 - val_loss: 0.0088 - val_mae: 0.0726 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.00881 to 0.00874, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0060 - mae: 0.0609 - val_loss: 0.0087 - val_mae: 0.0725 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00874\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0059 - mae: 0.0607 - val_loss: 0.0089 - val_mae: 0.0733 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00874\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0059 - mae: 0.0606 - val_loss: 0.0099 - val_mae: 0.0728 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00874\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0090 - val_mae: 0.0735 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00874\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0088 - val_mae: 0.0728 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.00874 to 0.00867, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0058 - mae: 0.0603 - val_loss: 0.0087 - val_mae: 0.0721 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.00867 to 0.00863, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0058 - mae: 0.0601 - val_loss: 0.0086 - val_mae: 0.0719 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00863\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0058 - mae: 0.0600 - val_loss: 0.0089 - val_mae: 0.0730 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00863\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0058 - mae: 0.0599 - val_loss: 0.0091 - val_mae: 0.0741 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00863\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0057 - mae: 0.0598 - val_loss: 0.0087 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00863\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0597 - val_loss: 0.0089 - val_mae: 0.0731 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00863\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0596 - val_loss: 0.0086 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00863\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0594 - val_loss: 0.0088 - val_mae: 0.0726 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00863 to 0.00862, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0593 - val_loss: 0.0086 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0592 - val_loss: 0.0088 - val_mae: 0.0729 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0592 - val_loss: 0.0087 - val_mae: 0.0726 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0590 - val_loss: 0.0089 - val_mae: 0.0730 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0590 - val_loss: 0.0088 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0089 - val_mae: 0.0727 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0088 - val_mae: 0.0718 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0087 - val_mae: 0.0724 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0586 - val_loss: 0.0089 - val_mae: 0.0733 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0585 - val_loss: 0.0087 - val_mae: 0.0724 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00862\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0098 - val_mae: 0.0727 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.00862 to 0.00860, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0086 - val_mae: 0.0718 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00860\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0087 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00860\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0087 - val_mae: 0.0724 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.00860 to 0.00798, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0047 - mae: 0.0539 - val_loss: 0.0080 - val_mae: 0.0690 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.00798 to 0.00797, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0535 - val_loss: 0.0080 - val_mae: 0.0690 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.00797 to 0.00794, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0535 - val_loss: 0.0079 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00794\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0080 - val_mae: 0.0690 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0080 - val_mae: 0.0689 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0080 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0080 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0080 - val_mae: 0.0689 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0081 - val_mae: 0.0691 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0082 - val_mae: 0.0693 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0081 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0082 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0081 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0081 - val_mae: 0.0690 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0082 - val_mae: 0.0689 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0081 - val_mae: 0.0689 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0531 - val_loss: 0.0082 - val_mae: 0.0689 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0531 - val_loss: 0.0082 - val_mae: 0.0689 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00794\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0045 - mae: 0.0531 - val_loss: 0.0082 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0531 - val_loss: 0.0081 - val_mae: 0.0688 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0531 - val_loss: 0.0081 - val_mae: 0.0689 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0526 - val_loss: 0.0081 - val_mae: 0.0687 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00794\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0081 - val_mae: 0.0687 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0687 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0687 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0687 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0687 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00794\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0081 - val_mae: 0.0686 - learning_rate: 1.0000e-07\n",
      "Epoch 226: early stopping\n",
      "Restoring model weights from the end of the best epoch: 176.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1085 m\n",
      "Median positioning error: 0.0972 m\n",
      "90th percentile error: 0.1911 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeXxbxbk38N+RLO+7szgJ2RNIQjYITdjXUEKglKWUlhZoWihQ6EK4ty1dCNBLaeGFQiEtpWUrSy8tUKCXNBBCUggEAmENIfse4jjeZDu2ZVln3j8UCcuWYsvWLBr9vp8P9zbnWM88z4zOGY0ljR0hhAARERERERERaefRnQARERERERERhXGRTkRERERERGQILtKJiIiIiIiIDMFFOhEREREREZEhuEgnIiIiIiIiMgQX6URERERERESG4CKdiIiIiIiIyBBcpBMREREREREZgot0IiIiIiIiIkNwkU5ERKTY3r178ZWvfAUVFRVwHAd333237pSivvWtb2HUqFG9+tmbbroJjuNIzWf58uVwHAfLly+X2g4REZEpuEgnIqK0s3nzZlx55ZUYM2YMcnNzUVxcjOOOOw733HMPWltboz83atQoOI4Dx3Hg8XhQWlqKKVOm4Lvf/S7efvvtuLEjP9/1v8rKypTlf9111+Gll17CDTfcgMceewxz5sxJ+LOdc/B4PBg6dCi++MUvKlu0trS04KabbsrIRfIjjzyS8PngOA7eeust3SkSEZGFHCGE0J0EERFRb7344ou48MILkZOTg0svvRSTJ09Ge3s7VqxYgWeeeQbf+ta38MADDwAIL9LLyspw/fXXAwCamprw6aef4h//+Aeqqqpw3XXX4a677oqJ7zgOTj/9dFx66aUxx/Py8nDBBRekpIbKykrMnj0bjz/+eI8/2zkfIQS2bt2KP/zhD6iursaLL76IM888MyU5RQSDQbiui5ycHABATU0NBg4ciAULFuCmm26K+dmOjg50dHQgNzc3pTl05rou2tvbkZ2dDY9H7XsLjzzyCObNm4dbbrkFo0eP7nZ+zpw5GDBggNKciIjIflm6EyAiIuqtrVu34mtf+xpGjhyJV199FUOGDImeu+aaa7Bp0ya8+OKLMY8ZNmwYvvnNb8Yc++1vf4uLL74Yv/vd7zB+/HhcffXVMecPPfTQbo9JperqapSWlvb657vmc955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2/F169ZFz8sQiZuo7QEDBsQs6ocMGYLvfe97eO6557B161ZUVFTg1ltvTRg/md3nR44cCdd1sXHjxpjje/fuRUNDg7Q+OFg+mzdv7rZw37Rpk9I84jGtr4iIyBxcpBMRUdr48Y9/jIKCAlx++eXYu3dvt/ObN2/GPffc02Oc1tZWXHLJJairq8PPf/7zPv0ZtK7mzp2LVatWxfwCYf/+/XjggQcwatQoTJo0qd9txDNkyBBMnz4djz76KBoaGqLH16xZg5dffhlz584FAIRCIfj9/pjHDho0CEOHDu32J786y8/PB4CY2IlE2rr77rtjjt91110AgLPOOqvHGKl0xhlnYPfu3XjhhReix9ra2vDnP/9ZaR7xmNZXRERkDn4nnYiI0sbYsWPx5JNP4qKLLsLEiRNx6aWXYvLkyWhvb8ebb76Jf/zjH/jWt74V85jdu3fj8ccfBxB+93zt2rX4xz/+gaqqKlx//fW48sorU5LbT3/6U/ztb3/DmWeeiR/84AcoLy/Ho48+iq1bt+KZZ56BxyPv9+J33HEHzjzzTBxzzDH4zne+E/0TbCUlJdG/ad7U1IRDDjkEX/nKVzBt2jQUFhbilVdewTvvvIM777wzYey8vDxMmjQJTz31FA499FCUl5dj8uTJcb9fP23aNFx22WV44IEH0NDQgJNOOgmrVq3Co48+inPPPRennHKKrC6I68orr8R9992Hr3/96/jhD3+IIUOG4IknnkBubi6A3n9K4N///nf0ExGdHXvssX3+Pr9pfUVERObgIp2IiNLKOeecg48++gh33HEHnn/+efzxj39ETk4Opk6dijvvvLPbzt0ffPABLrnkkuima8OHD8eXvvQlXH755Zg5c2bK8ho8eDDefPNN/OQnP8G9996LtrY2TJ06Ff/617+kvys6e/ZsLF68GAsWLMCNN94In8+Hk046Cb/97W+jG47l5+fje9/7Hl5++WU8++yzcF0X48aNwx/+8AdcffXVB43/l7/8Bd///vdx3XXXob29HQsWLEi4Cd5f/vIXjBkzBo888gj++c9/orKyEjfccAMWLFiQ8rp7UlhYiFdffRXf//73cc8996CwsBCXXnopjj32WFxwwQXRxXpPbrzxxrjHH3744X5tumdSXxERkTkcoXOHFSIiIiLF7r77blx33XXYtWsXhg0bpjsdIiKiGFykExERkbVaW1tjdkZva2vDEUccgVAohA0bNmjMjIiIKD5+3J2IiIisdf7552PEiBGYPn06/H4/Hn/8caxbtw5PPPGE7tSIiIji4iKdiIiIrHXGGWfgL3/5C5544gmEQiFMmjQJ//u//4uLLrpId2pERERx8ePuRERERERERIbg30knIiIiIiIiMgQX6URERERERESGyLjvpLuui88++wxFRUVwHEd3OkRERERERGQ5IQSampowdOhQeDw9vFcuNPrPf/4jzj77bDFkyBABQPzzn//s8THLli0TRxxxhMjOzhZjx44VDz/8cFJt7ty5UwDgf/yP//E//sf/+B//43/8j//xP/7H/5T+t3Pnzh7XrFrfSd+/fz+mTZuGb3/72zj//PN7/PmtW7firLPOwlVXXYUnnngCS5cuxeWXX44hQ4bgjDPO6FWbRUVF0Vjl5eX9yp/MJYRAMBiEz+fjJya6sKlvTK5Fd24q25fZlozYqYoZDAbx8ssv44tf/CJ8Pl9KciPznHDCbdi714/Bg0vw+us36E7HKLrvc6lkci26c+N8oiYm5xT7+f1+jBgxIroePRiti/QzzzwTZ555Zq9//v7778fo0aNx5513AgAmTpyIFStW4He/+12vF+mRC6ioqAjFxcXJJ01pwXVd1NXVoaioqOePk2QYm/rG5Fp056ayfZltyYidqpjBYBD5+fkoLi7mCyqLeb058Hhy4PXm8HVDF7rvc6lkci26c+N8oiYm5xT7ua4LAL36hU5afSd95cqVmD17dsyxM844Az/60Y/0JEREREREZBhx4C8sC3Hg87VCQETPAQICnf8Ic+RYvMe4roumtg54W4NwHAchV6C+pR0h98BjD8SKxOtNbKB7ToBAyBVobGxCUSPgOJ6Yn4vEbA50YMXGffjStKGYMbLMuE8+EKVCWi3Sq6qqMHjw4JhjgwcPRmNjI1pbW5GXl9ftMYFAAIFAIPrvxsZGAOHfVgWDQbkJkzau66KjowPBYNC434jrZlPfmFyL7txUti+zLRmxUxUzModwLrFddBnBse5C930ulfpaS8gVaGgNor3DRX1LO7bWtKC6KYAO10VHSKDDDS88G1qCaAmGEAoJhET4WMgV6HBd1LeEH+8eWIm6Bxa1rggvUF0BdIRC8Hg80WNCAO0hF/7WIEJu18VuZnh57V689l8n9vrnTZ5PAM4pmSCZ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V+ORRx7Bk08+iSeeeAJDhgxBXl4eRo0ahQ8++AA33HADsrKycMkll+CVV15p9PxXX30Vl112GTIyMurd7nQ6kZ2d7fsvPj4esbGx9W7zrngdyKpVq/Dkk0/i8ccfx5QpU9C1a1f06tULDz/8MO68805MmTIF+/btAwD85z//wZtvvom3334bf/vb33DGGWcgLy8Pl156Kb788kuMGDEipH656aab8Mwzz+Dcc89F586dcd1112HixImN3qjQNA3Z2dnIyclBr169cPPNN2PFihUoKyvDX/7ylybjZGVlIScnB8OGDcMDDzyAH3/8ETt27AAAPPfcc+jWrRuysrLQq1cvvP76677nGYaBBx98EB06dEBsbCzatm2L22+/3Xd/3cvd8/LyAACXX345NE3z/d3wcndd1zF9+nS0b98esbGx6NevHxYsWOC7f/fu3dA0DR9++CFGjBiBhIQE9O3bFytXrvQ9puGVEd4Yr7/+OvLy8pCamoqrr74apaWlvseUlpbi2muvRWJiInJycvD0009j+PDhuPPOO0/ad96+r/tfmzZtfPcPHz4ckydPxp133olWrVph9OjRvisYPvvsMwwYMACxsbFYvnw5qqqqcPvttyMrKwtxcXE4++yzsWbNGl9bgZ5nNU7SSUmapiEhIYGfrvoRyX1jGAYeXbAVMz6r/bm1i07LwTWD86SsRXQ/WxnfzFhmtC16bIhUodK+FGwthmGgvLrG8v8qa/QWX4r/5ptvIikpCb///e/93u+dcN1888348ssv631SuXv3bnz11Ve4+eabW5RDIG+//TaSkpLwu9/9rtFq6XfddRfcbjc++OADXx09evTApZde2qgdTdOQmpoaME6wK7GXlJQ0ejPCn6ysLPzmN7/BvHnzQvpUPD4+HkDtJ77//e9/cccdd2DKlCm+T+gnTpyIJUuWAKj9esLTTz+N559/Htu3b8dHH32E0047zW+73snmq6++ivz8/HqTz7qeeeYZPPnkk5g5cyY2btyI0aNH41e/+hW2b99e73H33nsvpk6divXr16N79+645pprTvqp8s6dO/HRRx/hk08+wSeffIJly5bh0Ucf9d0/ZcoUrFixAvPmzcPChQvx9ddfY926dUH328m89tprcDqdWLFiBebMmeO7/a9//SseffRRbNmyBX369MHdd9+NDz74AK+99hrWrVuHrl27YvTo0SgsLKzXXsPnhQNXd6eo5z3ZUmOR3Ddvr96H55fVfofrjvO74Y7zu0mzmntDovvZyvhmxjKjbdFjQ5GFq7sHptK+FGwtFW4Pej/wuQUZNfbj9NFIcDb/87Xt27ejc+fOcDgcJ33c6NGj0bZtW7z66qu+xddef/115Obm4vzzz292/JP56aef0KVLF8TGxja6r23btkhJSfF9/3n79u3o0aNHyDGCXYn9m2++wbvvvotPP/00qDZ79eqF0tJSHDt2LKjLv/Pz8zFz5ky0a9cOPXr0wK233oobb7wRt912G1wuF04//XR8++23mDlzJkaMGIG9e/ciOzsbI0eOhMPhQIcOHTBo0CC/bbdu3RpA7Rsu2dnZAXOYOXMm/vKXv+Dqq68GADz22GNYsmQJZs2ahdmzZ/seN3XqVFx00UUAgIceeginnHIKduzYgZ49e/ptV9d1zJ071/dLCddffz0WL16Mhx9+GKWlpXjttdfw1ltv+bajV199FW3btm2yz0pKSpCUlFTvtnPOOQefffaZ7+9u3brh8ccf9/2dn58PAJg+fTpGjRoFADh+/Diee+45zJ07FxdeeCEA4MUXX8TChQvx8ssv489//rPv+XWfFy5c3Z2inmEYKCkpkXYBGJEitW+2Frgwbd4mAMB1Z3bAn0Z1h6ZB2lpE97OV8c2MZUbboseGIgtXdw9MpX0pEmppaW7BPt9ut+OGG27A3LlzfauXv/baa7jxxhtN/U1wwzB83/89Wa7N7QfDMDBmzBgkJSUhKSkJp5xySqPHbNq0CZdeeimmTZuGCy64IKg2vZ8sNzUBa9++PRITE9G2bVscP34cH3zwAZxOJ7Zs2YKhQ4fWe+zQoUOxZcsWAMBVV12FiooKdO7cGZMmTcJ///vfFn1H2uVy4eDBgyeN6VX3E+ScnNoFeg8fPhyw7by8vHo/ZZiTk+N7/K5du+B2u+u9wZCamhrUGy7JyclYv359vf9eeumleo8ZMGCA3+cOHDjQ9++dO3fC7XbXq93hcGDQoEGNaq/7vHAJZdvlJ+mkJMMw4Ha7YRiGEpfhhVMk9k3h8Wr85sVv4fYY6JqVhAcvqT2xylyL6NysjG9mLDPaFj02RKpQaV8KtpZ4hx0/Th9tYWa/TATjHS37Pe7u3btj+fLlcLvdTX6aftNNN2HGjBn48ssv4fF4sG/fPkycOLFF8YPJrbq6utEbAQcPHoTL5UL37t19j926dWuz4syZMwdutxuapjXqgx9//BHnn38+brnlFtx3331Bt7l161akpKQ0uTDb119/jZSUFGRlZdWbyDYlNzcX27Ztw6JFi7Bw4UL8/ve/xxNPPIFly5Y1OY4tVbd9735xsl8aaJiPpmnN+mWChmw2G7p27XrSxyQmJoZ0e1Oa+7yT4eruRKQMXTdwxzvfo/B4NbplJeH9W89CjJ2HLiIisp6maUhwxgj5r6VvhPzmN79BWVkZ/vWvf/m9v7i42PfvLl264Nxzz8Urr7yCuXPn4vzzz0fHjh1bFP9krr76apSVleH5559vdN/MmTPhcDhw5ZVXAqit46effsLHH3/c6LHeKyICadeuHbp27YquXbvWq2fz5s0YMWIEbrjhBjz88MNB53348GG88847uOyyy5q8yqBTp07o0qVLowl6r169sGLFinq3rVixAr179/b9HR8fj0suuQTPPvssli5dipUrV+KHH37wG8fhcJz0+/EpKSlo27ZtkzHDzftVi7rfky8pKbHkZ9y8unTp4vveupfb7caaNWtMrb05+Ek6EUntix8L8PX2o4hz2PDUuH5ISzj5CrFERETU2ODBg3H33XfjrrvuwoEDB3D55Zejbdu22LFjB+bMmYOzzz4bd9xxh+/xN998MyZNmgQAjS4tbi6Px4P169fXuy02NhZnnXUW7rjjDtx9992orKzEFVdcgZqaGrzxxht45plnMGvWLOTm5gIAxo0bh//+97+45pprcN999+GCCy5A69at8cMPP+Dpp5/GH//4R1x22WVB57Rp0yacd955GD16NKZMmYKCggIAtZf9e7/jDdS+AVBQUADDMFBcXIyVK1fikUceQWpqKmbMmNHsPvnzn/+McePGoW/fvjjzzDOxdOlSfPjhh1i0aBGA2lXUPR4PBg8ejISEBLzxxhuIj48P+KZJXl4eFi9ejKFDhyI2Nhbp6el+Y06bNg1dunRBv3798Oqrr2L9+vV48803m11HU5KTk3HDDTfgz3/+MzIyMpCVlYVp06bBZrMFtWCjd1zqysrKCukrGImJibjtttt8OXTo0AGPP/44ysvLTVsUsbmET9Jnz56NJ554AgUFBejbty/+7//+L+BiCJs3b8YDDzyAtWvXYs+ePXj66aebXLKfopOmaUhKSor4y+/MEEl9s35fMaa+txEAcMNZeTitff0VW2WuRXRuVsY3M5YZbYseGyJVqLQvyV5LMAueBeOxxx7DgAEDMHv2bMyZMwe6rqNLly749a9/jRtuuKHeY6+88kpMnjwZdrsdV1xxRVjil5WVoX///vVu69KlC3bs2IFZs2bhtNNOw3PPPYdp06bBbrfj9NNPx0cffYRLLrnE93hN0/DWW2/hhRdewCuvvIKHH34YMTEx6NatGyZMmIDRowN/HcFfP77//vs4cuQI3njjDbzxxhu+2zt27Ijdu3f7/na5XMjJyYGmaUhJSUGPHj0wYcIE3H777SddUb4pl112GZ555hnMnDkT+/btQ6dOnfDqq69i+PDhAGoXgXv00UcxZcoUeDwenHbaafjf//4X8PL6J598ElOmTMGLL76Idu3a1avB6/bbb0dJSQnuuusuHD58GL1798a8efPQrVu3ZtcRjKeeegq33norLr74YqSkpODuu+/Gvn37EBcXd9Lnefu+ofz8/JMukOfPo48+Cl3Xcf3116O0tBQDBw7E559/7vfNjHAL5fiiGQJXyHj33XcxYcIEzJkzB4MHD8asWbPw3nvvYdu2bX5XR1yzZg3+85//YMCAAfjTn/6Ev/zlLyFP0l0uF1JTU3H06NEmvztCROKs31eMcXNWotqjo19uGt655UzEtfD7eETh5Ha7MX/+fIwdO9b07wWSOAMGPIj8/BLk5KRi7doHRadDFqqsrMTPP/+MTp06NTmJkM3w4cPRr18/3+9nR7O8vDzceeed0n+wp+s6XC4XUlJSTF2gTybHjx9Hu3bt8OSTT0r3SXZzney44Z2HlpSUICUl5aTtCN0CnnrqKUyaNAkTJ05E7969MWfOHCQkJOCVV17x+/gzzjgDTzzxBK6++mq/P9FA5GUYBoqKiqRepVWUSOib41U1uPOd71Ht0ZGXmYDnrx/gd4Iucy2ic7MyvpmxzGhb9NhQZOHq7oGptC/JXEswK577869//QtJSUkBv7tsdnzRsR555BEkJSVh7969YW/by8q+UcH333+Pt99+Gzt37sS6detw7bXXAoDf37xXUUSs7l5dXY21a9finnvu8d1ms9kwcuRIrFy5MmxxqqqqUFVV5fvb5XIBqP0ExO12hy0OyUXXdVRVVfldJTTayd43x45X4453N2D3sXJkp8Tig98NRkq83e/+KnMt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wYMxd+5c9OjRA/n5+XjooYdwzjnnYNOmTUhOTkZBQQGcTmejhbratGmDgoLan0f961//ittuuw1du3ZFx44d8dJLL2H79u147bXXsHLlStx666344osvMHDgQLz44osBLwmva8aMGbj22mtx5513AgC6deuGZ599Fueeey6ee+45xMbGNtnG9u3bMWfOHAwcOBDJycmYOXMm/vKXv+Dqq68GADz22GNYsmQJZs2ahdmzZ2Pv3r3o1q0bzj77bHg8HnTp0iXgZcetW7cGAGRmZga8DP748eN47rnnMHfuXFx44YWoqanBCy+8gIULF+Lll1/Gn//8Z99jH374YZx77rm+/rzoootQWVmJuLg4v22npaXh//7v/+BwONCzZ09cdNFFWLx4MSZNmoStW7di0aJFWLNmje8NkpdeegndunVrss9++OGHRpfWX3fddZgzZ47v7/POOw933XWX7++vv/4abrcb//rXv9C3b18AtX0/b948rFixAkOGDAEAvPnmm8jNzcVHH32Eq666CgAaPa+5dF3H3LlzkZycDAC4/vrrsXjxYjz88MOoqqrCI488gkWLFuGss84CAHTu3BnLly/H888/7+v3SMVJOhGFlWEYeO+7/bjvo02o9tRe1tOldSL+NrYXJ+hERKQEvbQcnvwjAACjqrr+nR7dd59eUtrwqfAcK/bd35BRXvlLuxWVzc7PuxAaAPTp0weDBw9Gx44d8Z///Ac333xzUG2kpqbirbfe8l2CHhMTg/PPPx9PPPEE3nzzTezatQvbtm3DpEmTMH369EaLyPmzYcMGbNy4EW+++abvNsMwoOs6fv7554CLmZWUlCApKQm6rqOyshJnn302XnrpJbhcLhw8eBBDhw6t9/ihQ4diw4YNAGovVR81ahR69uyJCy64AJdccglGjx4dVB/4s3PnTrjd7noxHQ4HBg0a5PtKgJf36gMAyMnJAQAcPnwYHTp08Nt2z549632FICcnBz/88AMAYNu2bYiJicHpp5/uu79r165IT2/6tVWPHj0wb968erelpKTU+9vflRFOp7NeDVu2bEFMTAwGDx7suy0zMxM9evSoV3vD5zVXXl6eb4IO1PaH98qBHTt2oLy8HKNGjar3nOrqavTv3x+RjpN0UpLNZkNGRkbIi1tEAzP7xlXpxr3/3YT/bTgIAOiXm4b7L+6FAR0zwh4L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WWfhD3/4A9q0aYNTTz0VjzzyiO972d26dUN5eTm+//57FBYWYs2aNejTpw+Kiopw//3345///GdQtTY0efJkrFy5Eu+88w42btyIq666CmPGjMH27duD7hOHwwGHwwG3243jx49j9OjRSE9Px5o1a/Dee+9h0aJFmDx5MgCgpqYGl112Gc4991xs3LgRK1euxC233NJoDDRNw913341x48ZhzJgxyM/PR35+PoYMGdIo/oEDBzB27FicccYZ2LBhA5577jm8/PLL+Mc//lHvcf/+97+RmJiIb7/9Fo8//jimT5+OhQsXnrS2e++9F1OnTsX69evRvXt3XHPNNb7J/4oVK3DrrbfijjvuwPr16zFq1Cg8/PDDQffbyZSXl+Oxxx7DSy+9hM2bN/ve4Jk5cyb69u2L77//Hvfffz/Wrl2LcePG4eqrr8YPP/yABx98EPfff3+jrzg0fF5zPfTQQxg3bhw2btyIsWPH4tprr0VhYe0Vo8XFxTjvvPPQv39/fPfdd1iwYAEOHTqEcePGNTtesEI6vhhRpqSkxABgHD16VHQqZCJd143jx48buq6LTkUale4a45MNB43hTywxOv7lE6PjXz4xznpkkfHO6j1GdY1HdHrNIvM4i87NyvhmxjKj7XC1WV1dbXz00UdGdXV1mDIjGfXvP83IybnT6N9/muhUpCP6OBdO/mqpqKgwfvzxR6OioqLxE540DKPdif+WNLhvV537JvsJdkmd+xt6tc59H/ySW01NTUj9HBsba8TGxhr33HOPsW7dOuP555834uLijLlz5xqGYRj5+fkGACMhIcF46qmnjO+//96YMWOGoWmasXTp0npt1Y3fo0cPIzY21rjpppuM7777znjnnXeMjIwM48EHH/Q9/sMPPzROPfVUo0uXLsa0adMMwzCMm266yXj66aeNZcuWGf369TNOOeUU47333vM954YbbjAuvfRSX6xzzz3XuOOOOwzDMIw9e/YYdrvdOHDgQL28zj//fOOee+4J2Af/396dx0VV9Q8c/wzIviOyiCC4IZoKophaLoW5lKktWpl7+Zh7LpnVo6ZpqbhUWpYVmo+W9XPJLc1IzcgezS1NxX3JQFRkR5aZ+/uDZyYGhlWGGcbv+/Wal86Ze8/3nHPvncuZe+659evXV5YsWaIoiqLk5OQoc+fOVQBl69atyqeffqp4eHgo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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5874.276039,
   "end_time": "2025-08-03T18:11:54.556628",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-03T16:34:00.280589",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
