{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b33acb7a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-16T04:53:16.182487Z",
     "iopub.status.busy": "2025-08-16T04:53:16.181722Z",
     "iopub.status.idle": "2025-08-16T04:53:17.796511Z",
     "shell.execute_reply": "2025-08-16T04:53:17.795553Z"
    },
    "papermill": {
     "duration": 1.620276,
     "end_time": "2025-08-16T04:53:17.797776",
     "exception": false,
     "start_time": "2025-08-16T04:53:16.177500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "820241fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:53:17.803393Z",
     "iopub.status.busy": "2025-08-16T04:53:17.803026Z",
     "iopub.status.idle": "2025-08-16T04:53:33.503082Z",
     "shell.execute_reply": "2025-08-16T04:53:33.502430Z"
    },
    "papermill": {
     "duration": 15.70425,
     "end_time": "2025-08-16T04:53:33.504637",
     "exception": false,
     "start_time": "2025-08-16T04:53:17.800387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-16 04:53:19.486417: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755319999.681586      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755319999.739110      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0a24cf31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:53:33.510399Z",
     "iopub.status.busy": "2025-08-16T04:53:33.509882Z",
     "iopub.status.idle": "2025-08-16T04:53:33.514770Z",
     "shell.execute_reply": "2025-08-16T04:53:33.514208Z"
    },
    "papermill": {
     "duration": 0.008757,
     "end_time": "2025-08-16T04:53:33.515879",
     "exception": false,
     "start_time": "2025-08-16T04:53:33.507122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 8     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512 #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "51f34e8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:53:33.521350Z",
     "iopub.status.busy": "2025-08-16T04:53:33.520838Z",
     "iopub.status.idle": "2025-08-16T04:53:33.524194Z",
     "shell.execute_reply": "2025-08-16T04:53:33.523640Z"
    },
    "papermill": {
     "duration": 0.007296,
     "end_time": "2025-08-16T04:53:33.525447",
     "exception": false,
     "start_time": "2025-08-16T04:53:33.518151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b5db08e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:53:33.531190Z",
     "iopub.status.busy": "2025-08-16T04:53:33.530981Z",
     "iopub.status.idle": "2025-08-16T08:27:31.309878Z",
     "shell.execute_reply": "2025-08-16T08:27:31.309289Z"
    },
    "papermill": {
     "duration": 12837.783472,
     "end_time": "2025-08-16T08:27:31.311044",
     "exception": false,
     "start_time": "2025-08-16T04:53:33.527572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755320041.673870      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755320051.790927      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755320063.729763      56 service.cc:148] XLA service 0x7d76d8016340 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755320063.730433      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755320068.081797      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 13.28813, saving model to models/best_model_full.keras\n",
      "4375/4375 - 70s - 16ms/step - loss: 69.5241 - mae: 5.2206 - val_loss: 13.2881 - val_mae: 2.8599 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 13.28813 to 2.38090, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 5.2454 - mae: 1.7572 - val_loss: 2.3809 - val_mae: 1.2010 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 2.38090\n",
      "4375/4375 - 54s - 12ms/step - loss: 3.2671 - mae: 1.3895 - val_loss: 2.4158 - val_mae: 1.2337 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 2.38090\n",
      "4375/4375 - 54s - 12ms/step - loss: 2.5903 - mae: 1.1494 - val_loss: 2.8178 - val_mae: 1.2899 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.38090 to 0.77386, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 1.6018 - mae: 0.9655 - val_loss: 0.7739 - val_mae: 0.6676 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 0.77386\n",
      "4375/4375 - 54s - 12ms/step - loss: 1.2025 - mae: 0.8241 - val_loss: 5.3824 - val_mae: 1.7871 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.77386 to 0.75313, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.9539 - mae: 0.7285 - val_loss: 0.7531 - val_mae: 0.6773 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.75313 to 0.59825, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.7992 - mae: 0.6757 - val_loss: 0.5982 - val_mae: 0.6076 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.59825\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.5844 - mae: 0.5915 - val_loss: 0.6004 - val_mae: 0.6034 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.59825 to 0.37172, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.8265 - mae: 0.6211 - val_loss: 0.3717 - val_mae: 0.4740 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.37172 to 0.34331, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.7968 - mae: 0.6032 - val_loss: 0.3433 - val_mae: 0.4556 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.34331\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.4687 - mae: 0.5284 - val_loss: 0.5204 - val_mae: 0.5564 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.34331\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.9274 - mae: 0.6223 - val_loss: 0.5163 - val_mae: 0.5803 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.34331\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.4997 - mae: 0.5178 - val_loss: 0.3992 - val_mae: 0.4884 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.34331 to 0.29275, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.5558 - mae: 0.5256 - val_loss: 0.2927 - val_mae: 0.4220 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.29275\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.9947 - mae: 0.6112 - val_loss: 0.2983 - val_mae: 0.4283 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.29275\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.4096 - mae: 0.4886 - val_loss: 1.7398 - val_mae: 1.0394 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.29275 to 0.27635, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.6455 - mae: 0.5469 - val_loss: 0.2763 - val_mae: 0.4081 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.27635 to 0.27528, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.3077 - mae: 0.4320 - val_loss: 0.2753 - val_mae: 0.4067 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.27528\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.8113 - mae: 0.5721 - val_loss: 0.4169 - val_mae: 0.4926 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.27528\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.3350 - mae: 0.4445 - val_loss: 0.3565 - val_mae: 0.4706 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.27528\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.9078 - mae: 0.6080 - val_loss: 0.3857 - val_mae: 0.4827 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.27528\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.7117 - mae: 0.5491 - val_loss: 0.3323 - val_mae: 0.4570 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.27528\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.3085 - mae: 0.4317 - val_loss: 0.3386 - val_mae: 0.4361 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.27528 to 0.22120, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.3522 - mae: 0.4433 - val_loss: 0.2212 - val_mae: 0.3709 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.22120 to 0.19022, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.3114 - mae: 0.4288 - val_loss: 0.1902 - val_mae: 0.3400 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.19022\n",
      "4375/4375 - 53s - 12ms/step - loss: 1.1546 - mae: 0.5778 - val_loss: 2.5954 - val_mae: 0.7671 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.19022\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.3252 - mae: 0.4352 - val_loss: 1.1543 - val_mae: 0.4279 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.5227 - mae: 0.7331 - val_loss: 0.5085 - val_mae: 0.5525 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.0285 - mae: 0.6194 - val_loss: 1.8888 - val_mae: 1.0464 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.8864 - mae: 0.6521 - val_loss: 0.2910 - val_mae: 0.3956 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.1801 - mae: 0.6075 - val_loss: 0.4535 - val_mae: 0.5310 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.19022\n",
      "4375/4375 - 82s - 19ms/step - loss: 0.3659 - mae: 0.4674 - val_loss: 0.6755 - val_mae: 0.5611 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.8929 - mae: 0.8533 - val_loss: 0.6063 - val_mae: 0.5634 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.5431 - mae: 0.5517 - val_loss: 0.3605 - val_mae: 0.4794 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.5681 - mae: 0.7034 - val_loss: 3.8935 - val_mae: 1.3979 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.2813 - mae: 0.6217 - val_loss: 0.4488 - val_mae: 0.5267 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.0922 - mae: 0.6338 - val_loss: 0.4015 - val_mae: 0.4948 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.1099 - mae: 0.6122 - val_loss: 0.6092 - val_mae: 0.5935 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.6568 - mae: 0.5526 - val_loss: 0.9542 - val_mae: 0.5056 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.0952 - mae: 0.5905 - val_loss: 1.7061 - val_mae: 0.9407 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.4042 - mae: 0.4901 - val_loss: 0.5582 - val_mae: 0.5477 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.4596 - mae: 0.7424 - val_loss: 0.3859 - val_mae: 0.4588 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.5514 - mae: 0.5283 - val_loss: 0.2788 - val_mae: 0.3956 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 1.3544 - mae: 0.6020 - val_loss: 1.1793 - val_mae: 0.8348 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.19022\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.4626 - mae: 0.5200 - val_loss: 0.5692 - val_mae: 0.5552 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.19022 to 0.11278, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.1305 - mae: 0.2785 - val_loss: 0.1128 - val_mae: 0.2561 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.11278 to 0.07951, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0817 - mae: 0.2232 - val_loss: 0.0795 - val_mae: 0.2130 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.07951 to 0.05953, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0620 - mae: 0.1951 - val_loss: 0.0595 - val_mae: 0.1873 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.05953 to 0.05013, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0499 - mae: 0.1753 - val_loss: 0.0501 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.05013 to 0.04253, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0421 - mae: 0.1612 - val_loss: 0.0425 - val_mae: 0.1589 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.04253 to 0.03969, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0365 - mae: 0.1502 - val_loss: 0.0397 - val_mae: 0.1534 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.03969\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0326 - mae: 0.1421 - val_loss: 0.0471 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.03969\n",
      "4375/4375 - 51s - 12ms/step - loss: 0.0303 - mae: 0.1369 - val_loss: 0.0422 - val_mae: 0.1495 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.03969 to 0.03901, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0273 - mae: 0.1298 - val_loss: 0.0390 - val_mae: 0.1456 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.03901 to 0.02913, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0254 - mae: 0.1255 - val_loss: 0.0291 - val_mae: 0.1269 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.02913\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0241 - mae: 0.1220 - val_loss: 0.0311 - val_mae: 0.1319 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.02913 to 0.02871, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0230 - mae: 0.1193 - val_loss: 0.0287 - val_mae: 0.1295 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.02871 to 0.02681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0222 - mae: 0.1173 - val_loss: 0.0268 - val_mae: 0.1234 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.02681\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0208 - mae: 0.1134 - val_loss: 0.0271 - val_mae: 0.1279 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.02681 to 0.02170, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0200 - mae: 0.1116 - val_loss: 0.0217 - val_mae: 0.1151 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.02170\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0196 - mae: 0.1103 - val_loss: 0.0227 - val_mae: 0.1173 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.02170\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0187 - mae: 0.1077 - val_loss: 0.0253 - val_mae: 0.1254 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.02170 to 0.02121, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0183 - mae: 0.1065 - val_loss: 0.0212 - val_mae: 0.1135 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.02121\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0176 - mae: 0.1043 - val_loss: 0.0228 - val_mae: 0.1185 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.02121\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0175 - mae: 0.1043 - val_loss: 0.0224 - val_mae: 0.1168 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.02121 to 0.02052, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0168 - mae: 0.1024 - val_loss: 0.0205 - val_mae: 0.1110 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.02052\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0165 - mae: 0.1012 - val_loss: 0.0210 - val_mae: 0.1112 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.02052\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0161 - mae: 0.1001 - val_loss: 0.0210 - val_mae: 0.1122 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.02052\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0158 - mae: 0.0990 - val_loss: 0.0212 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.02052\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0155 - mae: 0.0981 - val_loss: 0.0215 - val_mae: 0.1144 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.02052\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0153 - mae: 0.0973 - val_loss: 0.0218 - val_mae: 0.1149 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.02052 to 0.01877, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0151 - mae: 0.0967 - val_loss: 0.0188 - val_mae: 0.1070 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.01877 to 0.01857, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0149 - mae: 0.0960 - val_loss: 0.0186 - val_mae: 0.1071 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0149 - mae: 0.0962 - val_loss: 0.0211 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0146 - mae: 0.0951 - val_loss: 0.0194 - val_mae: 0.1085 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0147 - mae: 0.0954 - val_loss: 0.0229 - val_mae: 0.1166 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0147 - mae: 0.0951 - val_loss: 0.0191 - val_mae: 0.1065 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0141 - mae: 0.0934 - val_loss: 0.0193 - val_mae: 0.1059 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0143 - mae: 0.0940 - val_loss: 0.0224 - val_mae: 0.1174 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0144 - mae: 0.0940 - val_loss: 0.0188 - val_mae: 0.1042 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0140 - mae: 0.0929 - val_loss: 0.0191 - val_mae: 0.1073 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.01857\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0140 - mae: 0.0928 - val_loss: 0.0190 - val_mae: 0.1047 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.01857 to 0.01781, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0140 - mae: 0.0930 - val_loss: 0.0178 - val_mae: 0.1034 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.01781\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0139 - mae: 0.0926 - val_loss: 0.0218 - val_mae: 0.1102 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.01781\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0139 - mae: 0.0926 - val_loss: 0.0201 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01781\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0919 - val_loss: 0.0194 - val_mae: 0.1078 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01781\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0919 - val_loss: 0.0178 - val_mae: 0.1041 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01781\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0136 - mae: 0.0916 - val_loss: 0.0183 - val_mae: 0.1051 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01781\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0136 - mae: 0.0916 - val_loss: 0.0179 - val_mae: 0.1047 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.01781 to 0.01738, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0916 - val_loss: 0.0174 - val_mae: 0.1029 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.01738\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0134 - mae: 0.0909 - val_loss: 0.0177 - val_mae: 0.1030 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.01738\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0135 - mae: 0.0911 - val_loss: 0.0190 - val_mae: 0.1083 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.01738 to 0.01731, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0136 - mae: 0.0915 - val_loss: 0.0173 - val_mae: 0.1018 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01731\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0133 - mae: 0.0905 - val_loss: 0.0184 - val_mae: 0.1054 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01731\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0134 - mae: 0.0909 - val_loss: 0.0194 - val_mae: 0.1095 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01731\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0136 - mae: 0.0916 - val_loss: 0.0201 - val_mae: 0.1101 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.01731\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0134 - mae: 0.0906 - val_loss: 0.0175 - val_mae: 0.1031 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01731\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0135 - mae: 0.0911 - val_loss: 0.0181 - val_mae: 0.1042 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01731\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0134 - mae: 0.0908 - val_loss: 0.0199 - val_mae: 0.1095 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.01731 to 0.01713, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0135 - mae: 0.0909 - val_loss: 0.0171 - val_mae: 0.1022 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01713\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0138 - mae: 0.0920 - val_loss: 0.0222 - val_mae: 0.1163 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01713\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0135 - mae: 0.0910 - val_loss: 0.0193 - val_mae: 0.1071 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01713\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0916 - val_loss: 0.0179 - val_mae: 0.1030 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01713\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0136 - mae: 0.0911 - val_loss: 0.0196 - val_mae: 0.1083 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.01713 to 0.01709, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0134 - mae: 0.0907 - val_loss: 0.0171 - val_mae: 0.1008 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.01709 to 0.01593, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0136 - mae: 0.0912 - val_loss: 0.0159 - val_mae: 0.0985 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0916 - val_loss: 0.0183 - val_mae: 0.1060 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0138 - mae: 0.0918 - val_loss: 0.0182 - val_mae: 0.1052 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0135 - mae: 0.0907 - val_loss: 0.0169 - val_mae: 0.1007 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0914 - val_loss: 0.0207 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0915 - val_loss: 0.0189 - val_mae: 0.1056 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0140 - mae: 0.0924 - val_loss: 0.0193 - val_mae: 0.1101 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0142 - mae: 0.0932 - val_loss: 0.0193 - val_mae: 0.1089 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0137 - mae: 0.0914 - val_loss: 0.0199 - val_mae: 0.1091 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0142 - mae: 0.0929 - val_loss: 0.0203 - val_mae: 0.1115 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0140 - mae: 0.0925 - val_loss: 0.0211 - val_mae: 0.1118 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0141 - mae: 0.0925 - val_loss: 0.0192 - val_mae: 0.1073 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0141 - mae: 0.0928 - val_loss: 0.0190 - val_mae: 0.1083 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0140 - mae: 0.0925 - val_loss: 0.0178 - val_mae: 0.1054 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01593\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0141 - mae: 0.0925 - val_loss: 0.0253 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.01593 to 0.01588, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0143 - mae: 0.0934 - val_loss: 0.0159 - val_mae: 0.0983 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01588\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0141 - mae: 0.0924 - val_loss: 0.0174 - val_mae: 0.1038 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01588\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0143 - mae: 0.0932 - val_loss: 0.0187 - val_mae: 0.1068 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01588\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0141 - mae: 0.0925 - val_loss: 0.0175 - val_mae: 0.1029 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01588\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0145 - mae: 0.0935 - val_loss: 0.0188 - val_mae: 0.1058 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01588\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0143 - mae: 0.0933 - val_loss: 0.0180 - val_mae: 0.1040 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.01588 to 0.00780, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0040 - mae: 0.0498 - val_loss: 0.0078 - val_mae: 0.0688 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.00780 to 0.00752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0075 - val_mae: 0.0674 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.00752\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0028 - mae: 0.0420 - val_loss: 0.0076 - val_mae: 0.0673 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.00752 to 0.00737, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0074 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.00737 to 0.00734, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0073 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.00734\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0075 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.00734\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0073 - val_mae: 0.0662 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.00734 to 0.00729, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0073 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00729\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0074 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00729\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0074 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.00729\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0020 - mae: 0.0355 - val_loss: 0.0075 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.00729 to 0.00718, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0019 - mae: 0.0350 - val_loss: 0.0072 - val_mae: 0.0652 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0073 - val_mae: 0.0657 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0073 - val_mae: 0.0657 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0075 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0072 - val_mae: 0.0654 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0072 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0073 - val_mae: 0.0656 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0072 - val_mae: 0.0653 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0016 - mae: 0.0321 - val_loss: 0.0073 - val_mae: 0.0658 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0073 - val_mae: 0.0654 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0073 - val_mae: 0.0656 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0015 - mae: 0.0311 - val_loss: 0.0074 - val_mae: 0.0657 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0073 - val_mae: 0.0656 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0073 - val_mae: 0.0656 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0015 - mae: 0.0304 - val_loss: 0.0073 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0074 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0074 - val_mae: 0.0654 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0074 - val_mae: 0.0658 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0014 - mae: 0.0294 - val_loss: 0.0074 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00718\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0013 - mae: 0.0290 - val_loss: 0.0073 - val_mae: 0.0654 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0013 - mae: 0.0289 - val_loss: 0.0074 - val_mae: 0.0656 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00718\n",
      "4375/4375 - 52s - 12ms/step - loss: 9.4288e-04 - mae: 0.0243 - val_loss: 0.0073 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.00718 to 0.00707, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 9.0835e-04 - mae: 0.0238 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00707\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.9460e-04 - mae: 0.0236 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.00707 to 0.00706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.8778e-04 - mae: 0.0235 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.8026e-04 - mae: 0.0234 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.7457e-04 - mae: 0.0233 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.6938e-04 - mae: 0.0233 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00706\n",
      "4375/4375 - 53s - 12ms/step - loss: 8.6354e-04 - mae: 0.0232 - val_loss: 0.0072 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.6006e-04 - mae: 0.0231 - val_loss: 0.0071 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00706\n",
      "4375/4375 - 53s - 12ms/step - loss: 8.5633e-04 - mae: 0.0231 - val_loss: 0.0072 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00706\n",
      "4375/4375 - 53s - 12ms/step - loss: 8.5306e-04 - mae: 0.0230 - val_loss: 0.0072 - val_mae: 0.0643 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.4914e-04 - mae: 0.0230 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.4635e-04 - mae: 0.0229 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00706\n",
      "4375/4375 - 53s - 12ms/step - loss: 8.4307e-04 - mae: 0.0229 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.3958e-04 - mae: 0.0228 - val_loss: 0.0071 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.3653e-04 - mae: 0.0228 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.00706 to 0.00706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 8.3272e-04 - mae: 0.0227 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.3085e-04 - mae: 0.0227 - val_loss: 0.0071 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.2837e-04 - mae: 0.0227 - val_loss: 0.0072 - val_mae: 0.0642 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.2453e-04 - mae: 0.0226 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.2267e-04 - mae: 0.0226 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 8.2038e-04 - mae: 0.0226 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00706\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.8701e-04 - mae: 0.0221 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00706\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.8283e-04 - mae: 0.0220 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.00706 to 0.00703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.8174e-04 - mae: 0.0220 - val_loss: 0.0070 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00703\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.8099e-04 - mae: 0.0220 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00703\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.8050e-04 - mae: 0.0220 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00703\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.8025e-04 - mae: 0.0220 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00703\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7979e-04 - mae: 0.0220 - val_loss: 0.0073 - val_mae: 0.0642 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00703\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7943e-04 - mae: 0.0220 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00703\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7917e-04 - mae: 0.0220 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00703\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7894e-04 - mae: 0.0220 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00703\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7840e-04 - mae: 0.0220 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.00703 to 0.00700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7815e-04 - mae: 0.0220 - val_loss: 0.0070 - val_mae: 0.0638 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7774e-04 - mae: 0.0219 - val_loss: 0.0070 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7760e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7711e-04 - mae: 0.0219 - val_loss: 0.0073 - val_mae: 0.0643 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7689e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7666e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7662e-04 - mae: 0.0219 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7607e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7595e-04 - mae: 0.0219 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7250e-04 - mae: 0.0219 - val_loss: 0.0073 - val_mae: 0.0642 - learning_rate: 1.0000e-07\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7187e-04 - mae: 0.0219 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7158e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7143e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7133e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7125e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7121e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7115e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7111e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7106e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7105e-04 - mae: 0.0219 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7098e-04 - mae: 0.0219 - val_loss: 0.0070 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7097e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7095e-04 - mae: 0.0219 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7091e-04 - mae: 0.0218 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7090e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7082e-04 - mae: 0.0218 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7083e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7079e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7074e-04 - mae: 0.0218 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7072e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7070e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7068e-04 - mae: 0.0218 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7064e-04 - mae: 0.0218 - val_loss: 0.0070 - val_mae: 0.0638 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7061e-04 - mae: 0.0218 - val_loss: 0.0070 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7060e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7056e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7057e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7050e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7047e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7048e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7043e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7038e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7036e-04 - mae: 0.0218 - val_loss: 0.0073 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7033e-04 - mae: 0.0218 - val_loss: 0.0072 - val_mae: 0.0641 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7031e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7029e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7026e-04 - mae: 0.0218 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7024e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7021e-04 - mae: 0.0218 - val_loss: 0.0070 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00700\n",
      "4375/4375 - 52s - 12ms/step - loss: 7.7019e-04 - mae: 0.0218 - val_loss: 0.0072 - val_mae: 0.0640 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00700\n",
      "4375/4375 - 53s - 12ms/step - loss: 7.7014e-04 - mae: 0.0218 - val_loss: 0.0071 - val_mae: 0.0639 - learning_rate: 1.0000e-07\n",
      "Epoch 243: early stopping\n",
      "Restoring model weights from the end of the best epoch: 193.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 6ms/step\n",
      "Mean positioning error: 0.1008 m\n",
      "Median positioning error: 0.0905 m\n",
      "90th percentile error: 0.1803 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeZiT1dk/8O+TTGbfh2XYkVVQAUVBcK+oiK1LrbXatyqtVq22VnzfVtsqal9rq6/WVmnt4tbFX7Vaba0URQQtilLBDRGUTWQZhtmSWTOZPOf3R5g4mUmYyUzOkpPv57q4gDyT+9z3efKckzNJThwhhAARERERERERaefRnQARERERERERRXCRTkRERERERGQILtKJiIiIiIiIDMFFOhEREREREZEhuEgnIiIiIiIiMgQX6URERERERESG4CKdiIiIiIiIyBBcpBMREREREREZgot0IiIiIiIiIkNwkU5ERKTYvn378KUvfQkVFRVwHAf33Xef7pSiLrvsMowdO7ZPP3vrrbfCcRyp+axatQqO42DVqlVS2yEiIjIFF+lERJR2tm7diiuvvBLjxo1Dbm4uiouLcdxxx+EXv/gFWltboz83duxYOI4Dx3Hg8XhQWlqKI444At/85jfx5ptvxo3d+fPd/1RWVqYs/+uvvx4vvPACbrrpJvzxj3/E/PnzE/5s1xw8Hg+GDx+O008/XdmitaWlBbfeemtGLpIfffTRhI8Hx3Hwxhtv6E6RiIgs5AghhO4kiIiI+ur555/HBRdcgJycHFxyySU4/PDD0d7ejtWrV+Ppp5/GZZddht/+9rcAIov0srIy3HDDDQCAxsZGfPjhh/jrX/+KqqoqXH/99bj33ntj4juOg9NOOw2XXHJJzO15eXk4//zzU1JDZWUl5s2bhz/96U+9/mzXfIQQ2L59O371q1+huroazz//PM4888yU5NQpFArBdV3k5OQAAGpqajB48GAsXrwYt956a8zPdnR0oKOjA7m5uSnNoSvXddHe3o7s7Gx4PGpfW3j00UexcOFC3H777TjkkEN6HJ8/fz4GDRqkNCciIrJflu4EiIiI+mr79u34yle+gjFjxuDll1/GsGHDoseuueYabNmyBc8//3zMfUaMGIH/+q//irntZz/7GS6++GL8/Oc/x8SJE3H11VfHHJ80aVKP+6RSdXU1SktL+/zz3fM577zzMG3aNNx3330pX6T7fL4+/2xWVhaysuQ+lfB4PFJ/CdAXZ555Jo4++uik7tPR0QHXdZGdnd3jWHNzMwoKCvqdjxACbW1tyMvL63cMIiIyF9/uTkREaeOuu+5CU1MTHnrooZgFeqcJEybguuuu6zVOXl4e/vjHP6K8vBx33HEHUvWmsm3btuGCCy5AeXk58vPzceyxx8b80qDz7dNCCCxZsiT6tulkHXHEERg0aBC2b98eve3ll1/GCSecgIKCApSWluKcc87Bhx9+GHO/xsZGfPe738XYsWORk5ODIUOG4LTTTsP69eujP9P1M+k7duzA4MGDAQC33XZbNN/OV9TjfSa9o6MDP/7xjzF+/Hjk5ORg7Nix+MEPfoBgMBjzc2PHjsXnP/95rF69GrNmzUJubi7GjRuHP/zhDzE/F+8z6SeffDIOP/xwbNy4Eaeccgry8/MxYsQI3HXXXT366pNPPsHZZ5+NgoICDBkyJPpRg1R+zn3Hjh1wHAf/93//h/vuuy9a+8aNG6N9tHHjRlx88cUoKyvD8ccf36++euGFF3D00UcjLy8Pv/nNb1KSOxERmYevpBMRUdp47rnnMG7cOMydO3fAsQoLC3HeeefhoYcewsaNG3HYYYdFj7W1taGmpibm54uKiqJvAY9n3759mDt3LlpaWvCd73wHFRUVeOyxx3D22WfjqaeewnnnnYcTTzwRf/zjH/G1r30t7lvq+6q+vh719fWYMGECAOCll17CmWeeiXHjxuHWW29Fa2sr7r//fhx33HFYv359dNF91VVX4amnnsK1116LqVOnora2FqtXr8aHH36Io446qkc7gwcPxq9//WtcffXVOO+88/DFL34RADBt2rSEuV1++eV47LHH8KUvfQk33HAD3nzzTdx555348MMP8cwzz8T87JYtW/ClL30J3/jGN3DppZfi4YcfxmWXXYaZM2fGnI9EfTB//nx88YtfxJe//GU89dRT+P73v48jjjgi+u6C5uZmfO5zn8PevXtx3XXXobKyEo8//jhWrlzZ574GAL/f3+Px4DgOKioqYm575JFH0NbWhm9+85vIyclBeXl59NgFF1yAiRMn4ic/+Un0l0LJ9NXmzZtx0UUX4corr8QVV1yByZMnJ1UDERGlEUFERJQG/H6/ACDOOeecPt9nzJgx4qyzzkp4/Oc//7kAIP7+979HbwMQ988jjzxy0La++93vCgDi3//+d/S2xsZGccghh4ixY8eKcDgc08Y111zTpxoAiG984xti//79orq6Wrz55pvi1FNPFQDEPffcI4QQYsaMGWLIkCGitrY2er93331XeDwecckll0RvKykp6bXdSy+9VIwZMyb6//379wsAYvHixT1+dvHixaLrU4l33nlHABCXX355zM/993//twAgXn755ehtY8aMEQDEq6++Gr2turpa5OTkiBtuuCF628qVKwUAsXLlyuhtJ510kgAg/vCHP0RvCwaDorKyUpx//vnR2+655x4BQDz77LPR21pbW8Whhx7aI2Y8jzzySMLHQ05OTvTntm/fLgCI4uJiUV1dHbePLrroopjb+9NXy5YtO2i+RERkB77dnYiI0kIgEAAQeUU7VQoLCwFE3gbe1TnnnIPly5fH/DnjjDMOGmvp0qWYNWtW9K3MnfG/+c1vYseOHdi4cWO/83zooYcwePBgDBkyBLNnz8Zrr72GRYsW4bvf/S727t2Ld955B5dddlnMK7fTpk3DaaedhqVLl0ZvKy0txZtvvok9e/b0O5eD6Wxr0aJFMbd3btzXfb+AqVOn4oQTToj+f/DgwZg8eTK2bdvWa1uFhYUxn9PPzs7GrFmzYu67bNkyjBgxAmeffXb0ttzcXFxxxRVJVAUsWbKkx+PhX//6V4+fO//886MfD+juqquuivl/sn11yCGH9PoYJCIiO/Dt7kRElBaKi4sB9FxQD0RTUxOAngv/kSNHYt68eUnF+uSTTzB79uwet0+ZMiV6/PDDD+9Xnueccw6uvfZaOI6DoqIiHHbYYdGNxz755BMAiPv25ylTpuCFF16IblR211134dJLL8WoUaMwc+ZMLFiwAJdccgnGjRvXr7y6++STT+DxeKJvw+9UWVmJ0tLSaK6dRo8e3SNGWVkZ6uvre21r5MiRPT4PX1ZWhvfeey8mn/Hjx/f4ue759WbWrFl92jgu3g7wiY4l21cHi01ERHbhK+lERJQWiouLMXz4cGzYsCFlMTtjJbtoU63zlwannnoqZs2a1e+dwb/85S9j27ZtuP/++zF8+HDcfffdOOyww+K+KjwQfd0Mz+v1xr1d9GEjv4HcV5aD7bae6Fhf+4o7uRMRZQ4u0omIKG18/vOfx9atW7FmzZoBx2pqasIzzzyDUaNGRV/tHogxY8Zg8+bNPW7ftGlT9LgMnXETtT1o0KCYRf2wYcPwrW99C88++yy2b9+OiooK3HHHHQnjJ7P7/JgxY+C6Lj7++OOY2/ft24eGhgZpfXCwfLZu3dpj4b5lyxalecRjWl8REZE5uEgnIqK08b3vfQ8FBQW4/PLLsW/fvh7Ht27dil/84he9xmltbcXXvvY11NXV4Yc//GG/vgatuwULFmDt2rUxv0Bobm7Gb3/7W4wdOxZTp04dcBvxDBs2DDNmzMBjjz2GhoaG6O0bNmzAiy++iAULFgAAwuEw/H5/zH2HDBmC4cOH9/jKr67y8/MBICZ2Ip1t3XfffTG333vvvQCAs846q9cYqXTGGWdg9+7d+Mc//hG9ra2tDb/73e+U5hGPaX1FRETm4GfSiYgobYwfPx6PP/44LrzwQkyZMgWXXHIJDj/8cLS3t+P111/HX//6V1x22WUx99m9ezf+9Kc/AYi8er5x40b89a9/RVVVFW644QZceeWVKcntxhtvxP/7f/8PZ555Jr7zne+gvLwcjz32GLZv346nn34aHo+834vffffdOPPMMzFnzhx84xvfiH4FW0lJSfQ7zRsbGzFy5Eh86UtfwvTp01FYWIiXXnoJ//nPf3DPPfckjJ2Xl4epU6fiiSeewKRJk1BeXo7DDz887ufrp0+fjksvvRS//e1v0dDQgJNOOglr167FY489hnPPPRennHKKrC6I68orr8QDDzyAiy66CNdddx2GDRuGP//5z8jNzQXQ93cJ/Otf/4q+I6KruXPn9vvz/Kb1FRERmYOLdCIiSitnn3023nvvPdx99934+9//jl//+tfIycnBtGnTcM899/TYufudd97B1772teima6NGjcIXvvAFXH755Zg1a1bK8ho6dChef/11fP/738f999+PtrY2TJs2Dc8995z0V0XnzZuHZcuWYfHixbjlllvg8/lw0kkn4Wc/+1l0w7H8/Hx861vfwosvvoi//e1vcF0XEyZMwK9+9StcffXVB43/+9//Ht/+9rdx/fXXo729HYsXL064Cd7vf/97jBs3Do8++iieeeYZVFZW4qabbsLixYtTXndvCgsL8fLLL+Pb3/42fvGLX6CwsBCXXHIJ5s6di/PPPz+6WO/NLbfcEvf2Rx55ZECb7pnUV0REZA5H6NxhhYiIiEix++67D9dffz127dqFESNG6E6HiIgo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Pps3b8YFF1yA5ORkxMfH49RTT8W+ffsabbewsBC33norsrKyEB0dje7du2PBggXe29966y1kZ2cjNTUVU6dOrfPYPXv2oHv37iguLq6z/ZlnnsG8efNaVnA9OTk53ne44+PjMXDgQHz44YchaXvatGlYvHix9+9JkyZ5X2TwyM7ORm5uLk4++eSQxPTIzc3FOeecE9I2ffH0Xf1/7777rumxg7Fq1SrceOONotMIOX7cnShMHS+twvWvrcb6/YWw2zRMHdsdN47oDAdXbSciIopoBQUFGD58OEaPHo3//e9/aN26NbZv317ne/c7d+7E6aefjhtuuAEzZsxAUlISNm3ahJiYGL/tVldXY+zYscjIyMCHH36Idu3aYe/evUhJSQEAHDt2DH/84x8xb948dO7cGeeeey7OPPNMnHfeeQCAW265BY888giSkpLqtJucnAwguHcaAzFz5kxMnjwZxcXFmD17Nq666ip06NABw4cPb1G7CQkJSEhIaDRfu92OzMzMFsXxxYw2/Xn11Vcxfvz4Ots8Y12f2+2Gpmmw2eo+D62urobT6fT5mMYE+rjWrdV8U4rP5klJmqbB4XAo+f2gQ4UV+Ofnv2DEY0uwfn8hUuIc+OCmobh1dNeAJugq9Y3MtYjOzcr4ZsYyo23RY0OkCpWOJdlrCTavRx99FNnZ2Xj11VcxePBgdOrUCWeffTa6dOnivc99992HCRMm4LHHHkP//v3RpUsXXHDBBcjIyPAb/5VXXkF+fj4++eQTDB8+HDk5ORg5ciT69u0LANi1axeSk5MxceJEnHrqqRg9ejQ2b94MAHjnnXfgcDhwySWXNGj/xI+7+6q1qqoK06ZNQ7t27RAfH48hQ4Zg6dKlTfZDYmIiMjMz0b17d8yZMwexsbH47LPPAAA///wzzjzzTMTGxiI9PR033ngjSktLvY9dunQpBg8ejPj4eKSkpGD48OHYu3cvgLofd//HP/6B1157DZ9++qn33ealS5f6/Lj7smXLMHjwYERHRyMrKwv33HMPampqvLefd955uP3223HXXXchLS0NmZmZePDBBxuMhefj7p4YH3/8MUaPHo24uDj07dsXK1asqPOYF198EdnZ2YiLi8PFF1+MJ5980u9k+0QpKSnIzMys88/zIs68efOQkpKC+fPno3fv3oiOjsa+ffuQk5ODf/zjH7j22muR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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12862.958407,
   "end_time": "2025-08-16T08:27:34.534845",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-16T04:53:11.576438",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
