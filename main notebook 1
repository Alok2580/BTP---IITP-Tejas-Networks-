{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a96477d8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-19T04:15:59.108783Z",
     "iopub.status.busy": "2025-08-19T04:15:59.108527Z",
     "iopub.status.idle": "2025-08-19T04:16:00.568814Z",
     "shell.execute_reply": "2025-08-19T04:16:00.567919Z"
    },
    "papermill": {
     "duration": 1.465019,
     "end_time": "2025-08-19T04:16:00.570134",
     "exception": false,
     "start_time": "2025-08-19T04:15:59.105115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b105c924",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:00.575717Z",
     "iopub.status.busy": "2025-08-19T04:16:00.575428Z",
     "iopub.status.idle": "2025-08-19T04:16:14.244754Z",
     "shell.execute_reply": "2025-08-19T04:16:14.244104Z"
    },
    "papermill": {
     "duration": 13.673505,
     "end_time": "2025-08-19T04:16:14.246255",
     "exception": false,
     "start_time": "2025-08-19T04:16:00.572750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-19 04:16:02.014812: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755576962.181707      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755576962.233349      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e1c0c594",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:14.251816Z",
     "iopub.status.busy": "2025-08-19T04:16:14.251350Z",
     "iopub.status.idle": "2025-08-19T04:16:14.255625Z",
     "shell.execute_reply": "2025-08-19T04:16:14.255121Z"
    },
    "papermill": {
     "duration": 0.008153,
     "end_time": "2025-08-19T04:16:14.256688",
     "exception": false,
     "start_time": "2025-08-19T04:16:14.248535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ba014934",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:14.261277Z",
     "iopub.status.busy": "2025-08-19T04:16:14.261086Z",
     "iopub.status.idle": "2025-08-19T04:16:14.264095Z",
     "shell.execute_reply": "2025-08-19T04:16:14.263572Z"
    },
    "papermill": {
     "duration": 0.00657,
     "end_time": "2025-08-19T04:16:14.265218",
     "exception": false,
     "start_time": "2025-08-19T04:16:14.258648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7c21c9f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:14.270226Z",
     "iopub.status.busy": "2025-08-19T04:16:14.270035Z",
     "iopub.status.idle": "2025-08-19T06:50:34.842136Z",
     "shell.execute_reply": "2025-08-19T06:50:34.841253Z"
    },
    "papermill": {
     "duration": 9260.576324,
     "end_time": "2025-08-19T06:50:34.843363",
     "exception": false,
     "start_time": "2025-08-19T04:16:14.267039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755576993.866499      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755577003.029364      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">50,816</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,488</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">198,272</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m50,816\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,488\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m198,272\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">281,354</span> (1.07 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m281,354\u001b[0m (1.07 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">281,094</span> (1.07 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m281,094\u001b[0m (1.07 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755577013.566485      56 service.cc:148] XLA service 0x7fd9480016b0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755577013.567322      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755577016.833039      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 23.18892, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 81.9942 - mae: 6.3541 - val_loss: 23.1889 - val_mae: 3.7918 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 23.18892 to 11.57634, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 18.5319 - mae: 3.3211 - val_loss: 11.5763 - val_mae: 2.6258 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 11.57634 to 10.06698, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 12.2158 - mae: 2.6957 - val_loss: 10.0670 - val_mae: 2.4591 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 10.06698 to 5.22681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 8.4075 - mae: 2.2082 - val_loss: 5.2268 - val_mae: 1.7751 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 5.22681 to 4.00002, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 5.2607 - mae: 1.7179 - val_loss: 4.0000 - val_mae: 1.5097 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 4.00002 to 2.47650, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 4.2355 - mae: 1.5657 - val_loss: 2.4765 - val_mae: 1.1937 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 2.47650 to 2.07001, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 2.9607 - mae: 1.2624 - val_loss: 2.0700 - val_mae: 1.1118 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 2.07001\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.5396 - mae: 1.1648 - val_loss: 3.5485 - val_mae: 1.4776 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 2.07001 to 1.75493, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.2748 - mae: 1.1426 - val_loss: 1.7549 - val_mae: 1.0188 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.75493\n",
      "4375/4375 - 23s - 5ms/step - loss: 3.3553 - mae: 1.3199 - val_loss: 3.6835 - val_mae: 1.4586 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 1.75493\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.1832 - mae: 1.0974 - val_loss: 2.0545 - val_mae: 1.1133 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 1.75493\n",
      "4375/4375 - 24s - 5ms/step - loss: 2.7371 - mae: 1.2033 - val_loss: 4.0131 - val_mae: 1.4851 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 1.75493 to 1.46787, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 3.0912 - mae: 1.2493 - val_loss: 1.4679 - val_mae: 0.9322 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 1.46787\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.9891 - mae: 1.1896 - val_loss: 12.0835 - val_mae: 2.7128 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 1.46787\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.6560 - mae: 0.9163 - val_loss: 2.2716 - val_mae: 1.1307 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 1.46787 to 0.95303, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 2.0949 - mae: 0.9604 - val_loss: 0.9530 - val_mae: 0.7501 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.95303\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3145 - mae: 0.8145 - val_loss: 1.7886 - val_mae: 0.9538 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.95303\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2920 - mae: 0.8151 - val_loss: 4.2571 - val_mae: 1.5755 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.95303 to 0.89315, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.5571 - mae: 0.8821 - val_loss: 0.8931 - val_mae: 0.7133 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.89315 to 0.64118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.0249 - mae: 0.7361 - val_loss: 0.6412 - val_mae: 0.6108 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5769 - mae: 0.8271 - val_loss: 14.5901 - val_mae: 2.9715 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.64118\n",
      "4375/4375 - 24s - 5ms/step - loss: 2.1383 - mae: 1.0016 - val_loss: 4.1635 - val_mae: 1.4097 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.1902 - mae: 0.7810 - val_loss: 0.8191 - val_mae: 0.7114 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.1635 - mae: 0.9976 - val_loss: 1.4757 - val_mae: 0.9276 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.64118\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.5702 - mae: 0.8634 - val_loss: 1.9075 - val_mae: 1.0435 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.6644 - mae: 0.8612 - val_loss: 1.2355 - val_mae: 0.8209 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5403 - mae: 0.8218 - val_loss: 4.8008 - val_mae: 1.6168 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.7652 - mae: 0.9167 - val_loss: 7.4843 - val_mae: 1.8737 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.0205 - mae: 0.9540 - val_loss: 4.6992 - val_mae: 1.4817 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.64118\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2011 - mae: 0.8040 - val_loss: 0.7197 - val_mae: 0.6494 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss improved from 0.64118 to 0.51574, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3784 - mae: 0.7872 - val_loss: 0.5157 - val_mae: 0.5501 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.51574\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.3284 - mae: 0.7314 - val_loss: 2.0469 - val_mae: 1.1166 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.51574\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.6928 - mae: 0.7965 - val_loss: 0.6138 - val_mae: 0.5990 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.51574\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3837 - mae: 0.7899 - val_loss: 1.9821 - val_mae: 1.0517 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.51574\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.4383 - mae: 0.7952 - val_loss: 0.7766 - val_mae: 0.6873 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.51574 to 0.46787, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.8349 - mae: 0.6737 - val_loss: 0.4679 - val_mae: 0.5280 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.46787\n",
      "4375/4375 - 24s - 5ms/step - loss: 2.1344 - mae: 0.8806 - val_loss: 0.5394 - val_mae: 0.5692 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.46787\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2497 - mae: 0.7500 - val_loss: 0.5250 - val_mae: 0.5530 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.46787\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5688 - mae: 0.7398 - val_loss: 1.8785 - val_mae: 1.0214 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.46787\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.0656 - mae: 0.7379 - val_loss: 0.4991 - val_mae: 0.5513 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.46787\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2856 - mae: 0.7185 - val_loss: 0.7583 - val_mae: 0.6634 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.46787\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.9091 - mae: 0.8078 - val_loss: 4.5914 - val_mae: 1.4272 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.46787\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.8999 - mae: 0.6659 - val_loss: 0.7110 - val_mae: 0.6498 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.46787 to 0.44442, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.0609 - mae: 0.8290 - val_loss: 0.4444 - val_mae: 0.5163 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.1829 - mae: 0.7237 - val_loss: 1.1135 - val_mae: 0.8038 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3105 - mae: 0.7602 - val_loss: 0.7247 - val_mae: 0.6288 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3469 - mae: 0.7185 - val_loss: 0.6393 - val_mae: 0.6110 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.5779 - mae: 0.5626 - val_loss: 1.5614 - val_mae: 0.9186 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3966 - mae: 0.7482 - val_loss: 0.4447 - val_mae: 0.5047 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 3.8436 - mae: 1.0107 - val_loss: 1.5462 - val_mae: 0.9154 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.4098 - mae: 0.8104 - val_loss: 1.1654 - val_mae: 0.8016 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.44442\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.9200 - mae: 0.6740 - val_loss: 0.5114 - val_mae: 0.5475 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5564 - mae: 0.7562 - val_loss: 0.5917 - val_mae: 0.6006 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5333 - mae: 0.7976 - val_loss: 0.8199 - val_mae: 0.6930 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.0319 - mae: 0.6274 - val_loss: 41.4176 - val_mae: 4.7949 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.44442\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3156 - mae: 0.7439 - val_loss: 0.4540 - val_mae: 0.5234 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.44442 to 0.42926, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.9538 - mae: 0.6967 - val_loss: 0.4293 - val_mae: 0.5090 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.42926\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2948 - mae: 0.7207 - val_loss: 0.5346 - val_mae: 0.5568 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.42926\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.0043 - mae: 0.8515 - val_loss: 0.4644 - val_mae: 0.5261 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.42926 to 0.42663, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.1230 - mae: 0.6996 - val_loss: 0.4266 - val_mae: 0.5025 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.42663\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.4389 - mae: 0.7727 - val_loss: 0.6009 - val_mae: 0.5972 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.42663\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.8740 - mae: 0.6588 - val_loss: 0.4989 - val_mae: 0.5479 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.42663\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.9613 - mae: 0.8746 - val_loss: 0.6807 - val_mae: 0.6364 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.42663 to 0.39003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.9970 - mae: 0.6824 - val_loss: 0.3900 - val_mae: 0.4746 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.39003\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.1776 - mae: 0.7054 - val_loss: 0.6640 - val_mae: 0.6190 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2301 - mae: 0.7291 - val_loss: 1.2287 - val_mae: 0.8509 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.7758 - mae: 0.8447 - val_loss: 1.0227 - val_mae: 0.7506 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.6169 - mae: 0.5908 - val_loss: 0.4068 - val_mae: 0.4917 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3070 - mae: 0.7608 - val_loss: 0.6177 - val_mae: 0.6038 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.7502 - mae: 0.9633 - val_loss: 0.7286 - val_mae: 0.6641 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.39003\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.1301 - mae: 0.7179 - val_loss: 4.6480 - val_mae: 1.5149 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.9147 - mae: 0.6778 - val_loss: 0.5249 - val_mae: 0.5629 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.39003\n",
      "4375/4375 - 24s - 5ms/step - loss: 1.6085 - mae: 0.8283 - val_loss: 0.6184 - val_mae: 0.5998 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.6079 - mae: 0.8268 - val_loss: 0.5149 - val_mae: 0.5540 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.1514 - mae: 0.7056 - val_loss: 0.7117 - val_mae: 0.6381 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.4916 - mae: 0.7807 - val_loss: 1.0457 - val_mae: 0.7540 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3800 - mae: 0.7444 - val_loss: 0.6867 - val_mae: 0.6248 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.9263 - mae: 0.6510 - val_loss: 0.6113 - val_mae: 0.5852 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.8671 - mae: 0.8617 - val_loss: 0.9034 - val_mae: 0.7229 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.6122 - mae: 0.8020 - val_loss: 1.4239 - val_mae: 0.8882 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.6770 - mae: 0.7513 - val_loss: 1.6217 - val_mae: 0.9500 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5010 - mae: 0.8056 - val_loss: 0.6444 - val_mae: 0.6245 - learning_rate: 0.0100\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2619 - mae: 0.7627 - val_loss: 0.5935 - val_mae: 0.5876 - learning_rate: 0.0100\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.39003\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.7674 - mae: 0.6089 - val_loss: 0.9446 - val_mae: 0.5502 - learning_rate: 0.0100\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.39003 to 0.15456, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.1907 - mae: 0.3313 - val_loss: 0.1546 - val_mae: 0.3018 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.15456 to 0.12023, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.1348 - mae: 0.2832 - val_loss: 0.1202 - val_mae: 0.2661 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.12023 to 0.10332, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.1087 - mae: 0.2550 - val_loss: 0.1033 - val_mae: 0.2477 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.10332 to 0.09258, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0932 - mae: 0.2366 - val_loss: 0.0926 - val_mae: 0.2340 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.09258 to 0.08271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0816 - mae: 0.2215 - val_loss: 0.0827 - val_mae: 0.2213 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.08271 to 0.07922, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0737 - mae: 0.2107 - val_loss: 0.0792 - val_mae: 0.2175 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.07922 to 0.07744, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0684 - mae: 0.2030 - val_loss: 0.0774 - val_mae: 0.2152 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.07744 to 0.06652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0638 - mae: 0.1964 - val_loss: 0.0665 - val_mae: 0.1985 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.06652 to 0.06439, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0607 - mae: 0.1915 - val_loss: 0.0644 - val_mae: 0.1952 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.06439 to 0.06254, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0581 - mae: 0.1877 - val_loss: 0.0625 - val_mae: 0.1923 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.06254 to 0.05981, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0550 - mae: 0.1823 - val_loss: 0.0598 - val_mae: 0.1876 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.05981\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0524 - mae: 0.1784 - val_loss: 0.0621 - val_mae: 0.1914 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.05981\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0502 - mae: 0.1746 - val_loss: 0.0719 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.05981 to 0.05677, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0483 - mae: 0.1711 - val_loss: 0.0568 - val_mae: 0.1809 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.05677\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0473 - mae: 0.1691 - val_loss: 0.0637 - val_mae: 0.1919 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.05677\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0456 - mae: 0.1664 - val_loss: 0.0588 - val_mae: 0.1858 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.05677 to 0.05106, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0450 - mae: 0.1650 - val_loss: 0.0511 - val_mae: 0.1734 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.05106 to 0.04772, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0498 - mae: 0.1625 - val_loss: 0.0477 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.04772 to 0.04611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0423 - mae: 0.1606 - val_loss: 0.0461 - val_mae: 0.1646 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04611\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0415 - mae: 0.1587 - val_loss: 0.0506 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04611\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0404 - mae: 0.1567 - val_loss: 0.0505 - val_mae: 0.1724 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.04611 to 0.04491, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0394 - mae: 0.1548 - val_loss: 0.0449 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04491\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0392 - mae: 0.1535 - val_loss: 0.0468 - val_mae: 0.1649 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.04491 to 0.04451, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0386 - mae: 0.1522 - val_loss: 0.0445 - val_mae: 0.1602 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04451\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0376 - mae: 0.1513 - val_loss: 0.0470 - val_mae: 0.1648 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04451\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0375 - mae: 0.1510 - val_loss: 0.0483 - val_mae: 0.1663 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.04451\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0372 - mae: 0.1504 - val_loss: 0.0447 - val_mae: 0.1607 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.04451 to 0.04359, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0366 - mae: 0.1489 - val_loss: 0.0436 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.04359 to 0.03976, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0811 - mae: 0.1558 - val_loss: 0.0398 - val_mae: 0.1510 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0354 - mae: 0.1466 - val_loss: 0.0474 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0365 - mae: 0.1489 - val_loss: 0.0453 - val_mae: 0.1636 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0361 - mae: 0.1478 - val_loss: 0.0447 - val_mae: 0.1620 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0357 - mae: 0.1472 - val_loss: 0.0440 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03976\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0354 - mae: 0.1465 - val_loss: 0.0444 - val_mae: 0.1573 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0350 - mae: 0.1456 - val_loss: 0.0440 - val_mae: 0.1565 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0349 - mae: 0.1449 - val_loss: 0.0422 - val_mae: 0.1552 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0349 - mae: 0.1456 - val_loss: 0.0453 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0356 - mae: 0.1450 - val_loss: 0.0403 - val_mae: 0.1529 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0339 - mae: 0.1430 - val_loss: 0.0438 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03976\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0340 - mae: 0.1435 - val_loss: 0.0464 - val_mae: 0.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.03976 to 0.03840, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0340 - mae: 0.1438 - val_loss: 0.0384 - val_mae: 0.1488 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.03840 to 0.03674, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0339 - mae: 0.1429 - val_loss: 0.0367 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0341 - mae: 0.1431 - val_loss: 0.0424 - val_mae: 0.1552 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0329 - mae: 0.1412 - val_loss: 0.0395 - val_mae: 0.1512 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0339 - mae: 0.1430 - val_loss: 0.0434 - val_mae: 0.1591 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0337 - mae: 0.1427 - val_loss: 0.0486 - val_mae: 0.1683 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0334 - mae: 0.1425 - val_loss: 0.0443 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03674\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0336 - mae: 0.1426 - val_loss: 0.0401 - val_mae: 0.1525 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0334 - mae: 0.1418 - val_loss: 0.0468 - val_mae: 0.1658 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0328 - mae: 0.1411 - val_loss: 0.0404 - val_mae: 0.1532 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0332 - mae: 0.1419 - val_loss: 0.0422 - val_mae: 0.1570 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0337 - mae: 0.1419 - val_loss: 0.0405 - val_mae: 0.1544 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0336 - mae: 0.1424 - val_loss: 0.0436 - val_mae: 0.1532 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0331 - mae: 0.1412 - val_loss: 0.0404 - val_mae: 0.1527 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0342 - mae: 0.1421 - val_loss: 0.0433 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0334 - mae: 0.1421 - val_loss: 0.0369 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0343 - mae: 0.1426 - val_loss: 0.0395 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0336 - mae: 0.1425 - val_loss: 0.0476 - val_mae: 0.1677 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0341 - mae: 0.1435 - val_loss: 0.0423 - val_mae: 0.1570 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0341 - mae: 0.1432 - val_loss: 0.0496 - val_mae: 0.1711 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03674\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0342 - mae: 0.1429 - val_loss: 0.0401 - val_mae: 0.1515 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03674\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0344 - mae: 0.1436 - val_loss: 0.0429 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.03674 to 0.02234, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0147 - mae: 0.0939 - val_loss: 0.0223 - val_mae: 0.1120 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.02234 to 0.02131, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0124 - mae: 0.0871 - val_loss: 0.0213 - val_mae: 0.1091 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.02131 to 0.02118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0117 - mae: 0.0849 - val_loss: 0.0212 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.02118 to 0.02107, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0114 - mae: 0.0837 - val_loss: 0.0211 - val_mae: 0.1082 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02107\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0111 - mae: 0.0827 - val_loss: 0.0213 - val_mae: 0.1083 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.02107 to 0.02089, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0109 - mae: 0.0818 - val_loss: 0.0209 - val_mae: 0.1075 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02089\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0107 - mae: 0.0812 - val_loss: 0.0210 - val_mae: 0.1069 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02089\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0105 - mae: 0.0805 - val_loss: 0.0214 - val_mae: 0.1082 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.02089 to 0.02060, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0104 - mae: 0.0801 - val_loss: 0.0206 - val_mae: 0.1064 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02060 to 0.02059, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0103 - mae: 0.0795 - val_loss: 0.0206 - val_mae: 0.1061 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02059\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0102 - mae: 0.0792 - val_loss: 0.0207 - val_mae: 0.1063 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02059\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0101 - mae: 0.0788 - val_loss: 0.0206 - val_mae: 0.1059 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02059\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0100 - mae: 0.0784 - val_loss: 0.0207 - val_mae: 0.1061 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02059\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0099 - mae: 0.0781 - val_loss: 0.0206 - val_mae: 0.1057 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02059\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0098 - mae: 0.0778 - val_loss: 0.0212 - val_mae: 0.1078 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.02059 to 0.02046, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0097 - mae: 0.0774 - val_loss: 0.0205 - val_mae: 0.1055 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.02046 to 0.02017, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0096 - mae: 0.0772 - val_loss: 0.0202 - val_mae: 0.1049 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02017\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0096 - mae: 0.0768 - val_loss: 0.0202 - val_mae: 0.1043 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02017\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0095 - mae: 0.0767 - val_loss: 0.0206 - val_mae: 0.1059 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02017\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0094 - mae: 0.0763 - val_loss: 0.0205 - val_mae: 0.1052 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02017\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0094 - mae: 0.0760 - val_loss: 0.0204 - val_mae: 0.1048 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.02017 to 0.02012, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0093 - mae: 0.0758 - val_loss: 0.0201 - val_mae: 0.1040 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02012\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0093 - mae: 0.0756 - val_loss: 0.0202 - val_mae: 0.1044 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.02012 to 0.02008, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0092 - mae: 0.0753 - val_loss: 0.0201 - val_mae: 0.1041 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02008\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0091 - mae: 0.0751 - val_loss: 0.0203 - val_mae: 0.1045 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.02008 to 0.02007, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0091 - mae: 0.0750 - val_loss: 0.0201 - val_mae: 0.1040 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02007\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0090 - mae: 0.0746 - val_loss: 0.0201 - val_mae: 0.1041 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02007\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0090 - mae: 0.0746 - val_loss: 0.0203 - val_mae: 0.1043 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02007\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0089 - mae: 0.0742 - val_loss: 0.0202 - val_mae: 0.1043 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02007\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0089 - mae: 0.0741 - val_loss: 0.0201 - val_mae: 0.1041 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss improved from 0.02007 to 0.02001, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0088 - mae: 0.0740 - val_loss: 0.0200 - val_mae: 0.1036 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02001\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0088 - mae: 0.0739 - val_loss: 0.0201 - val_mae: 0.1039 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.02001 to 0.01994, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0087 - mae: 0.0737 - val_loss: 0.0199 - val_mae: 0.1032 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01994\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0087 - mae: 0.0734 - val_loss: 0.0202 - val_mae: 0.1040 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.01994 to 0.01979, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0087 - mae: 0.0732 - val_loss: 0.0198 - val_mae: 0.1029 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0087 - mae: 0.0732 - val_loss: 0.0201 - val_mae: 0.1040 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0086 - mae: 0.0729 - val_loss: 0.0201 - val_mae: 0.1040 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0086 - mae: 0.0728 - val_loss: 0.0200 - val_mae: 0.1033 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0201 - val_mae: 0.1036 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0085 - mae: 0.0723 - val_loss: 0.0200 - val_mae: 0.1035 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0085 - mae: 0.0723 - val_loss: 0.0200 - val_mae: 0.1029 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0084 - mae: 0.0721 - val_loss: 0.0203 - val_mae: 0.1041 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0084 - mae: 0.0721 - val_loss: 0.0201 - val_mae: 0.1036 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0084 - mae: 0.0720 - val_loss: 0.0200 - val_mae: 0.1038 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0083 - mae: 0.0717 - val_loss: 0.0201 - val_mae: 0.1037 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01979\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0083 - mae: 0.0716 - val_loss: 0.0199 - val_mae: 0.1029 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.01979 to 0.01978, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0083 - mae: 0.0716 - val_loss: 0.0198 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01978\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0198 - val_mae: 0.1025 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.01978 to 0.01965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0082 - mae: 0.0713 - val_loss: 0.0197 - val_mae: 0.1025 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0082 - mae: 0.0712 - val_loss: 0.0197 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0082 - mae: 0.0711 - val_loss: 0.0197 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0081 - mae: 0.0709 - val_loss: 0.0197 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0081 - mae: 0.0707 - val_loss: 0.0201 - val_mae: 0.1031 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0081 - mae: 0.0706 - val_loss: 0.0199 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0080 - mae: 0.0705 - val_loss: 0.0200 - val_mae: 0.1031 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0080 - mae: 0.0704 - val_loss: 0.0198 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01965\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0080 - mae: 0.0702 - val_loss: 0.0199 - val_mae: 0.1031 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss improved from 0.01965 to 0.01954, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0080 - mae: 0.0701 - val_loss: 0.0195 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01954\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0079 - mae: 0.0700 - val_loss: 0.0198 - val_mae: 0.1032 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01954\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0079 - mae: 0.0699 - val_loss: 0.0197 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss improved from 0.01954 to 0.01951, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0079 - mae: 0.0698 - val_loss: 0.0195 - val_mae: 0.1017 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01951\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0078 - mae: 0.0696 - val_loss: 0.0202 - val_mae: 0.1040 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01951\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0078 - mae: 0.0696 - val_loss: 0.0198 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01951\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0078 - mae: 0.0696 - val_loss: 0.0198 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01951\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0078 - mae: 0.0694 - val_loss: 0.0197 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01951\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0078 - mae: 0.0692 - val_loss: 0.0197 - val_mae: 0.1021 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01951\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0196 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01951\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0199 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01951\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0077 - mae: 0.0689 - val_loss: 0.0196 - val_mae: 0.1018 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01951\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0077 - mae: 0.0690 - val_loss: 0.0197 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.01951 to 0.01946, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0077 - mae: 0.0689 - val_loss: 0.0195 - val_mae: 0.1013 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01946\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0076 - mae: 0.0686 - val_loss: 0.0196 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01946\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0076 - mae: 0.0686 - val_loss: 0.0196 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01946\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0076 - mae: 0.0686 - val_loss: 0.0196 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.01946 to 0.01935, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0076 - mae: 0.0684 - val_loss: 0.0194 - val_mae: 0.1014 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0198 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0075 - mae: 0.0681 - val_loss: 0.0196 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0075 - mae: 0.0680 - val_loss: 0.0197 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0075 - mae: 0.0681 - val_loss: 0.0194 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0075 - mae: 0.0680 - val_loss: 0.0194 - val_mae: 0.1014 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0074 - mae: 0.0678 - val_loss: 0.0195 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0074 - mae: 0.0677 - val_loss: 0.0196 - val_mae: 0.1018 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0074 - mae: 0.0676 - val_loss: 0.0194 - val_mae: 0.1013 - learning_rate: 1.0000e-04\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0074 - mae: 0.0675 - val_loss: 0.0198 - val_mae: 0.1023 - learning_rate: 1.0000e-04\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0074 - mae: 0.0676 - val_loss: 0.0197 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0197 - val_mae: 0.1015 - learning_rate: 1.0000e-04\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0073 - mae: 0.0673 - val_loss: 0.0194 - val_mae: 0.1012 - learning_rate: 1.0000e-04\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0073 - mae: 0.0673 - val_loss: 0.0195 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0073 - mae: 0.0672 - val_loss: 0.0197 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0073 - mae: 0.0671 - val_loss: 0.0195 - val_mae: 0.1015 - learning_rate: 1.0000e-04\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01935\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0073 - mae: 0.0670 - val_loss: 0.0194 - val_mae: 0.1017 - learning_rate: 1.0000e-04\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss improved from 0.01935 to 0.01922, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0072 - mae: 0.0669 - val_loss: 0.0192 - val_mae: 0.1006 - learning_rate: 1.0000e-04\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01922\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0072 - mae: 0.0669 - val_loss: 0.0197 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01922\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0072 - mae: 0.0668 - val_loss: 0.0197 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01922\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0072 - mae: 0.0666 - val_loss: 0.0195 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01922\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0072 - mae: 0.0666 - val_loss: 0.0194 - val_mae: 0.1013 - learning_rate: 1.0000e-04\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01922\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0072 - mae: 0.0666 - val_loss: 0.0194 - val_mae: 0.1011 - learning_rate: 1.0000e-04\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01922\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0071 - mae: 0.0664 - val_loss: 0.0195 - val_mae: 0.1014 - learning_rate: 1.0000e-04\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.01922 to 0.01919, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0071 - mae: 0.0664 - val_loss: 0.0192 - val_mae: 0.1004 - learning_rate: 1.0000e-04\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0071 - mae: 0.0661 - val_loss: 0.0192 - val_mae: 0.1005 - learning_rate: 1.0000e-04\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01919\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0071 - mae: 0.0661 - val_loss: 0.0198 - val_mae: 0.1023 - learning_rate: 1.0000e-04\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0071 - mae: 0.0661 - val_loss: 0.0193 - val_mae: 0.1011 - learning_rate: 1.0000e-04\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0071 - mae: 0.0661 - val_loss: 0.0192 - val_mae: 0.1005 - learning_rate: 1.0000e-04\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0070 - mae: 0.0659 - val_loss: 0.0194 - val_mae: 0.1010 - learning_rate: 1.0000e-04\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01919\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0070 - mae: 0.0660 - val_loss: 0.0197 - val_mae: 0.1021 - learning_rate: 1.0000e-04\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0070 - mae: 0.0660 - val_loss: 0.0194 - val_mae: 0.1010 - learning_rate: 1.0000e-04\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0071 - mae: 0.0659 - val_loss: 0.0195 - val_mae: 0.1008 - learning_rate: 1.0000e-04\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0070 - mae: 0.0658 - val_loss: 0.0192 - val_mae: 0.1007 - learning_rate: 1.0000e-04\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0070 - mae: 0.0657 - val_loss: 0.0195 - val_mae: 0.1014 - learning_rate: 1.0000e-04\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0070 - mae: 0.0656 - val_loss: 0.0194 - val_mae: 0.1012 - learning_rate: 1.0000e-04\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01919\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0193 - val_mae: 0.1010 - learning_rate: 1.0000e-04\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01919\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0194 - val_mae: 0.1013 - learning_rate: 1.0000e-04\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss improved from 0.01919 to 0.01840, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0057 - mae: 0.0594 - val_loss: 0.0184 - val_mae: 0.0977 - learning_rate: 1.0000e-05\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss improved from 0.01840 to 0.01835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0056 - mae: 0.0587 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss improved from 0.01835 to 0.01835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0056 - mae: 0.0585 - val_loss: 0.0183 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01835\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0184 - val_mae: 0.0977 - learning_rate: 1.0000e-05\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01835\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0184 - val_mae: 0.0976 - learning_rate: 1.0000e-05\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01835\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0184 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss improved from 0.01835 to 0.01833, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0582 - val_loss: 0.0183 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01833\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0582 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01833\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0582 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01833\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0581 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.01833 to 0.01832, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0582 - val_loss: 0.0183 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0581 - val_loss: 0.0184 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0581 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0581 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0581 - val_loss: 0.0183 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0055 - mae: 0.0580 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0580 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0580 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01832\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0580 - val_loss: 0.0184 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0055 - mae: 0.0580 - val_loss: 0.0183 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01832\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0055 - mae: 0.0580 - val_loss: 0.0184 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01832\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0053 - mae: 0.0573 - val_loss: 0.0183 - val_mae: 0.0973 - learning_rate: 1.0000e-06\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss improved from 0.01832 to 0.01829, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss improved from 0.01829 to 0.01829, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01829\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01829\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01829\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.01829\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01829\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss improved from 0.01829 to 0.01828, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01828\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01828\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01828\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01828\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.01828\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.01828\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.01828\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss improved from 0.01828 to 0.01827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01827\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss improved from 0.01827 to 0.01827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0973 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0571 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.01827\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss improved from 0.01827 to 0.01827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.01827\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.01827\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0973 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.01827\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 384/1000\n",
      "\n",
      "Epoch 384: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0973 - learning_rate: 1.0000e-07\n",
      "Epoch 385/1000\n",
      "\n",
      "Epoch 385: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 386/1000\n",
      "\n",
      "Epoch 386: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 387/1000\n",
      "\n",
      "Epoch 387: val_loss did not improve from 0.01827\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 388/1000\n",
      "\n",
      "Epoch 388: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 389/1000\n",
      "\n",
      "Epoch 389: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 390/1000\n",
      "\n",
      "Epoch 390: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 391/1000\n",
      "\n",
      "Epoch 391: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 392/1000\n",
      "\n",
      "Epoch 392: val_loss did not improve from 0.01827\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0053 - mae: 0.0570 - val_loss: 0.0183 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 392: early stopping\n",
      "Restoring model weights from the end of the best epoch: 342.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1534 m\n",
      "Median positioning error: 0.1297 m\n",
      "90th percentile error: 0.2776 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9283.515074,
   "end_time": "2025-08-19T06:50:38.591039",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-19T04:15:55.075965",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
