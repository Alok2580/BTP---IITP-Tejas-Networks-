{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f00908a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-27T15:59:03.784849Z",
     "iopub.status.busy": "2025-08-27T15:59:03.784585Z",
     "iopub.status.idle": "2025-08-27T15:59:05.368740Z",
     "shell.execute_reply": "2025-08-27T15:59:05.367801Z"
    },
    "papermill": {
     "duration": 1.589116,
     "end_time": "2025-08-27T15:59:05.370136",
     "exception": false,
     "start_time": "2025-08-27T15:59:03.781020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Training)Dataset-1-001.npz\n",
      "/kaggle/input/dataset-128-24/(128 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "39dd925b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T15:59:05.375861Z",
     "iopub.status.busy": "2025-08-27T15:59:05.375127Z",
     "iopub.status.idle": "2025-08-27T15:59:20.445858Z",
     "shell.execute_reply": "2025-08-27T15:59:20.444911Z"
    },
    "papermill": {
     "duration": 15.07462,
     "end_time": "2025-08-27T15:59:20.447273",
     "exception": false,
     "start_time": "2025-08-27T15:59:05.372653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-27 15:59:07.035778: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756310347.247399      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756310347.305112      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aeac6d1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T15:59:20.452897Z",
     "iopub.status.busy": "2025-08-27T15:59:20.452424Z",
     "iopub.status.idle": "2025-08-27T15:59:20.457090Z",
     "shell.execute_reply": "2025-08-27T15:59:20.456393Z"
    },
    "papermill": {
     "duration": 0.008519,
     "end_time": "2025-08-27T15:59:20.458267",
     "exception": false,
     "start_time": "2025-08-27T15:59:20.449748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 13   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea8e88b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T15:59:20.463381Z",
     "iopub.status.busy": "2025-08-27T15:59:20.462700Z",
     "iopub.status.idle": "2025-08-27T15:59:20.466249Z",
     "shell.execute_reply": "2025-08-27T15:59:20.465674Z"
    },
    "papermill": {
     "duration": 0.007097,
     "end_time": "2025-08-27T15:59:20.467240",
     "exception": false,
     "start_time": "2025-08-27T15:59:20.460143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91b431e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T15:59:20.472389Z",
     "iopub.status.busy": "2025-08-27T15:59:20.472144Z",
     "iopub.status.idle": "2025-08-27T18:55:44.072719Z",
     "shell.execute_reply": "2025-08-27T18:55:44.072048Z"
    },
    "papermill": {
     "duration": 10583.605021,
     "end_time": "2025-08-27T18:55:44.074225",
     "exception": false,
     "start_time": "2025-08-27T15:59:20.469204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1756310383.431580      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1756310393.118407      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">120,064</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,464</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m120,064\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,464\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">711,178</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m711,178\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">710,662</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m710,662\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1756310404.267036      59 service.cc:148] XLA service 0x7aa768015ef0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1756310404.267973      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1756310408.117822      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 24.43305, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 69.5932 - mae: 6.0087 - val_loss: 24.4331 - val_mae: 3.9554 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 24.43305 to 11.82632, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 17.0195 - mae: 3.1451 - val_loss: 11.8263 - val_mae: 2.6120 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 11.82632 to 7.79541, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 8.2455 - mae: 2.1613 - val_loss: 7.7954 - val_mae: 2.2032 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.79541 to 6.47933, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 5.5652 - mae: 1.7343 - val_loss: 6.4793 - val_mae: 1.9585 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 6.47933 to 4.21502, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.8314 - mae: 1.5638 - val_loss: 4.2150 - val_mae: 1.6189 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 4.21502\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6777 - mae: 1.1834 - val_loss: 19.4609 - val_mae: 3.1521 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 4.21502 to 1.77703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1990 - mae: 1.2632 - val_loss: 1.7770 - val_mae: 1.0456 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.77703 to 0.90192, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4791 - mae: 0.8783 - val_loss: 0.9019 - val_mae: 0.7389 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.90192\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.5003 - mae: 1.3287 - val_loss: 1.7583 - val_mae: 1.0245 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.90192\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7934 - mae: 1.1660 - val_loss: 1.3962 - val_mae: 0.9302 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.90192\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.2104 - mae: 1.1980 - val_loss: 2.2212 - val_mae: 1.1575 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.90192\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8692 - mae: 1.0308 - val_loss: 1.0912 - val_mae: 0.8045 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.90192\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7767 - mae: 0.9616 - val_loss: 2.4844 - val_mae: 1.2196 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.90192\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.9132 - mae: 1.1587 - val_loss: 1.3641 - val_mae: 0.9045 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.90192 to 0.65368, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6478 - mae: 0.9089 - val_loss: 0.6537 - val_mae: 0.6306 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.65368\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0965 - mae: 0.7404 - val_loss: 1.1577 - val_mae: 0.8198 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.65368\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3536 - mae: 0.8176 - val_loss: 0.6742 - val_mae: 0.6369 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.65368\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.5871 - mae: 0.8283 - val_loss: 0.7284 - val_mae: 0.6708 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.65368 to 0.49817, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.0004 - mae: 0.7179 - val_loss: 0.4982 - val_mae: 0.5378 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.49817\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.0663 - mae: 0.7321 - val_loss: 0.5582 - val_mae: 0.5802 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.49817\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.2645 - mae: 0.6502 - val_loss: 2.2589 - val_mae: 1.1191 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss improved from 0.49817 to 0.41043, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8680 - mae: 0.6522 - val_loss: 0.4104 - val_mae: 0.5002 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.41043\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.2670 - mae: 0.7635 - val_loss: 0.5761 - val_mae: 0.5928 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.41043\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.5329 - mae: 0.7577 - val_loss: 0.5980 - val_mae: 0.6137 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.41043\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3186 - mae: 0.6990 - val_loss: 0.7606 - val_mae: 0.6764 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.41043\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7788 - mae: 0.8047 - val_loss: 1.0885 - val_mae: 0.7920 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.41043\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5716 - mae: 0.5805 - val_loss: 0.4671 - val_mae: 0.5367 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.41043\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8368 - mae: 0.8134 - val_loss: 0.6440 - val_mae: 0.6161 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.41043 to 0.32658, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5478 - mae: 0.5634 - val_loss: 0.3266 - val_mae: 0.4457 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6590 - mae: 0.5392 - val_loss: 0.3411 - val_mae: 0.4546 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0259 - mae: 0.6207 - val_loss: 0.3787 - val_mae: 0.4790 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6774 - mae: 0.5569 - val_loss: 0.3577 - val_mae: 0.4589 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8025 - mae: 0.5949 - val_loss: 1.1198 - val_mae: 0.8020 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4142 - mae: 1.0010 - val_loss: 3.9412 - val_mae: 1.4392 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9854 - mae: 0.7465 - val_loss: 0.7627 - val_mae: 0.6742 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.0608 - mae: 1.3002 - val_loss: 2.1047 - val_mae: 1.1144 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6796 - mae: 0.9428 - val_loss: 1.1604 - val_mae: 0.8065 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9200 - mae: 0.9138 - val_loss: 2.3767 - val_mae: 1.0663 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7564 - mae: 0.9192 - val_loss: 2.4475 - val_mae: 0.9278 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3648 - mae: 0.8299 - val_loss: 5.7331 - val_mae: 1.6213 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6760 - mae: 0.8510 - val_loss: 0.8609 - val_mae: 0.7141 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 5.4209 - mae: 1.5924 - val_loss: 1.4120 - val_mae: 0.9119 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1264 - mae: 0.8022 - val_loss: 0.6376 - val_mae: 0.6271 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.32658\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1250 - mae: 0.7183 - val_loss: 0.6291 - val_mae: 0.6078 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.32658 to 0.25132, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6008 - mae: 0.5437 - val_loss: 0.2513 - val_mae: 0.3944 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9423 - mae: 0.6405 - val_loss: 0.2580 - val_mae: 0.3957 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3861 - mae: 0.4812 - val_loss: 0.2766 - val_mae: 0.4121 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2261 - mae: 0.6344 - val_loss: 0.5368 - val_mae: 0.4968 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3363 - mae: 0.4521 - val_loss: 0.3564 - val_mae: 0.4668 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5769 - mae: 0.7287 - val_loss: 0.5063 - val_mae: 0.5559 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5893 - mae: 0.8278 - val_loss: 2.3598 - val_mae: 1.0622 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7674 - mae: 0.6132 - val_loss: 0.3963 - val_mae: 0.5001 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2695 - mae: 0.6874 - val_loss: 0.3395 - val_mae: 0.4547 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.5445 - mae: 1.0068 - val_loss: 7.7259 - val_mae: 2.1574 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.2748 - mae: 1.1564 - val_loss: 1.0349 - val_mae: 0.7857 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.0192 - mae: 1.3405 - val_loss: 30.3788 - val_mae: 4.2217 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.7393 - mae: 1.5124 - val_loss: 1.9697 - val_mae: 1.0872 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0392 - mae: 0.8925 - val_loss: 0.4432 - val_mae: 0.5117 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7534 - mae: 0.6241 - val_loss: 0.8337 - val_mae: 0.6964 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5923 - mae: 0.7861 - val_loss: 0.4780 - val_mae: 0.5364 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4620 - mae: 0.5235 - val_loss: 0.4629 - val_mae: 0.5223 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7286 - mae: 0.7902 - val_loss: 0.3578 - val_mae: 0.4621 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1858 - mae: 0.6953 - val_loss: 0.4327 - val_mae: 0.5170 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1747 - mae: 0.6612 - val_loss: 0.5177 - val_mae: 0.5542 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.25132\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4415 - mae: 0.5097 - val_loss: 0.3534 - val_mae: 0.4580 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.25132 to 0.08692, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1095 - mae: 0.2558 - val_loss: 0.0869 - val_mae: 0.2279 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.08692 to 0.06692, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0750 - mae: 0.2138 - val_loss: 0.0669 - val_mae: 0.1990 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.06692 to 0.06246, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0587 - mae: 0.1895 - val_loss: 0.0625 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.06246 to 0.04768, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0483 - mae: 0.1724 - val_loss: 0.0477 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.04768 to 0.04717, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0422 - mae: 0.1612 - val_loss: 0.0472 - val_mae: 0.1690 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.04717 to 0.04090, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0370 - mae: 0.1510 - val_loss: 0.0409 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.04090 to 0.03948, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0334 - mae: 0.1435 - val_loss: 0.0395 - val_mae: 0.1549 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.03948 to 0.03159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0308 - mae: 0.1376 - val_loss: 0.0316 - val_mae: 0.1369 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.03159 to 0.03146, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0282 - mae: 0.1319 - val_loss: 0.0315 - val_mae: 0.1370 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.03146 to 0.02823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0266 - mae: 0.1280 - val_loss: 0.0282 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.02823 to 0.02734, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1234 - val_loss: 0.0273 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.02734 to 0.02701, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0239 - mae: 0.1214 - val_loss: 0.0270 - val_mae: 0.1270 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02701\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0229 - mae: 0.1188 - val_loss: 0.0277 - val_mae: 0.1286 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02701\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0271 - mae: 0.1205 - val_loss: 0.0277 - val_mae: 0.1268 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.02701 to 0.02627, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0195 - mae: 0.1096 - val_loss: 0.0263 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.02627 to 0.02390, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0209 - mae: 0.1133 - val_loss: 0.0239 - val_mae: 0.1205 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02390\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0207 - mae: 0.1127 - val_loss: 0.0255 - val_mae: 0.1243 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02390\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1106 - val_loss: 0.0247 - val_mae: 0.1224 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.02390 to 0.02117, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0203 - mae: 0.1105 - val_loss: 0.0212 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02117\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1073 - val_loss: 0.0263 - val_mae: 0.1279 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02117\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0185 - mae: 0.1068 - val_loss: 0.0224 - val_mae: 0.1147 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.02117 to 0.02082, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0182 - mae: 0.1059 - val_loss: 0.0208 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1063 - val_loss: 0.0221 - val_mae: 0.1153 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1045 - val_loss: 0.0214 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1037 - val_loss: 0.0212 - val_mae: 0.1119 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02082\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0173 - mae: 0.1031 - val_loss: 0.0239 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0171 - mae: 0.1028 - val_loss: 0.0209 - val_mae: 0.1112 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02082\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0168 - mae: 0.1018 - val_loss: 0.0233 - val_mae: 0.1177 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.02082 to 0.02057, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0166 - mae: 0.1012 - val_loss: 0.0206 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.02057 to 0.02036, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0167 - mae: 0.1013 - val_loss: 0.0204 - val_mae: 0.1093 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02036\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0170 - mae: 0.1021 - val_loss: 0.0229 - val_mae: 0.1169 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.02036 to 0.02019, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0164 - mae: 0.1006 - val_loss: 0.0202 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02019\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0168 - mae: 0.1014 - val_loss: 0.0210 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.02019 to 0.02004, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0166 - mae: 0.1008 - val_loss: 0.0200 - val_mae: 0.1091 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.02004 to 0.01884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.1009 - val_loss: 0.0188 - val_mae: 0.1061 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01884\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.0998 - val_loss: 0.0219 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01884\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0164 - mae: 0.1003 - val_loss: 0.0227 - val_mae: 0.1169 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01884\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0166 - mae: 0.1009 - val_loss: 0.0225 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01884\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0168 - mae: 0.1014 - val_loss: 0.0252 - val_mae: 0.1232 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01884\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0167 - mae: 0.1010 - val_loss: 0.0192 - val_mae: 0.1078 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.01884 to 0.01748, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0163 - mae: 0.1000 - val_loss: 0.0175 - val_mae: 0.1026 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.1006 - val_loss: 0.0192 - val_mae: 0.1070 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0167 - mae: 0.1010 - val_loss: 0.0194 - val_mae: 0.1074 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0163 - mae: 0.0999 - val_loss: 0.0212 - val_mae: 0.1119 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.1003 - val_loss: 0.0199 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0167 - mae: 0.1011 - val_loss: 0.0237 - val_mae: 0.1208 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0167 - mae: 0.1010 - val_loss: 0.0201 - val_mae: 0.1104 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0168 - mae: 0.1012 - val_loss: 0.0198 - val_mae: 0.1076 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0167 - mae: 0.1012 - val_loss: 0.0176 - val_mae: 0.1020 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0164 - mae: 0.1002 - val_loss: 0.0198 - val_mae: 0.1095 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.1003 - val_loss: 0.0223 - val_mae: 0.1161 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0167 - mae: 0.1008 - val_loss: 0.0231 - val_mae: 0.1197 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.1004 - val_loss: 0.0254 - val_mae: 0.1213 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0169 - mae: 0.1013 - val_loss: 0.0239 - val_mae: 0.1206 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0162 - mae: 0.0993 - val_loss: 0.0195 - val_mae: 0.1083 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01748\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0172 - mae: 0.1025 - val_loss: 0.0199 - val_mae: 0.1099 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.01748 to 0.01724, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.1004 - val_loss: 0.0172 - val_mae: 0.1019 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0169 - mae: 0.1017 - val_loss: 0.0199 - val_mae: 0.1100 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0172 - mae: 0.1021 - val_loss: 0.0237 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0168 - mae: 0.1010 - val_loss: 0.0212 - val_mae: 0.1124 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0168 - mae: 0.1012 - val_loss: 0.0259 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1029 - val_loss: 0.0203 - val_mae: 0.1110 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0168 - mae: 0.1011 - val_loss: 0.0182 - val_mae: 0.1046 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1031 - val_loss: 0.0185 - val_mae: 0.1059 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0173 - mae: 0.1027 - val_loss: 0.0190 - val_mae: 0.1066 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1026 - val_loss: 0.0197 - val_mae: 0.1094 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0171 - mae: 0.1018 - val_loss: 0.0220 - val_mae: 0.1166 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0174 - mae: 0.1028 - val_loss: 0.0201 - val_mae: 0.1095 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1030 - val_loss: 0.0246 - val_mae: 0.1218 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1036 - val_loss: 0.0192 - val_mae: 0.1083 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1042 - val_loss: 0.0226 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1036 - val_loss: 0.0175 - val_mae: 0.1025 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1037 - val_loss: 0.0190 - val_mae: 0.1073 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1042 - val_loss: 0.0205 - val_mae: 0.1118 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1044 - val_loss: 0.0238 - val_mae: 0.1203 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1042 - val_loss: 0.0181 - val_mae: 0.1040 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1041 - val_loss: 0.0213 - val_mae: 0.1131 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.01724 to 0.00801, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0051 - mae: 0.0555 - val_loss: 0.0080 - val_mae: 0.0687 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.00801 to 0.00755, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0497 - val_loss: 0.0075 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss improved from 0.00755 to 0.00720, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0072 - val_mae: 0.0648 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.00720 to 0.00707, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0071 - val_mae: 0.0640 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00707\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0072 - val_mae: 0.0646 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00707\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0445 - val_loss: 0.0071 - val_mae: 0.0645 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.00707 to 0.00694, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0437 - val_loss: 0.0069 - val_mae: 0.0635 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00694\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0070 - val_mae: 0.0637 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.00694 to 0.00689, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0426 - val_loss: 0.0069 - val_mae: 0.0632 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.00689 to 0.00663, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0066 - val_mae: 0.0616 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00663\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0068 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00663\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0413 - val_loss: 0.0070 - val_mae: 0.0636 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00663\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0067 - val_mae: 0.0621 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00663\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0066 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00663\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0066 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.00663 to 0.00662, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0066 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00662\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0067 - val_mae: 0.0617 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00662\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0067 - val_mae: 0.0620 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.00662 to 0.00654, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00654\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0067 - val_mae: 0.0622 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.00654 to 0.00648, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0065 - val_mae: 0.0607 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00648\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00648\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss improved from 0.00648 to 0.00648, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0065 - val_mae: 0.0608 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00648\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0066 - val_mae: 0.0613 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00648\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0065 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.00648 to 0.00647, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0372 - val_loss: 0.0065 - val_mae: 0.0608 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00647\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0370 - val_loss: 0.0066 - val_mae: 0.0614 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.00647 to 0.00644, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0368 - val_loss: 0.0064 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0365 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0363 - val_loss: 0.0065 - val_mae: 0.0607 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.00644 to 0.00633, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0063 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00633\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00633\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0065 - val_mae: 0.0608 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00633\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0356 - val_loss: 0.0065 - val_mae: 0.0611 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00633\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0354 - val_loss: 0.0065 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.00633 to 0.00631, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0353 - val_loss: 0.0063 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00631\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0352 - val_loss: 0.0064 - val_mae: 0.0605 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00631\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0064 - val_mae: 0.0604 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss improved from 0.00631 to 0.00626, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0063 - val_mae: 0.0598 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0065 - val_mae: 0.0606 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00626\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.00626 to 0.00622, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0345 - val_loss: 0.0062 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0340 - val_loss: 0.0062 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0339 - val_loss: 0.0064 - val_mae: 0.0601 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0063 - val_mae: 0.0597 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0337 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.00622 to 0.00621, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0062 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00621\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0332 - val_loss: 0.0064 - val_mae: 0.0604 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.00621 to 0.00616, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0331 - val_loss: 0.0062 - val_mae: 0.0590 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0063 - val_mae: 0.0597 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0062 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0063 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0062 - val_mae: 0.0591 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0064 - val_mae: 0.0601 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0062 - val_mae: 0.0595 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00616\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0321 - val_loss: 0.0063 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss improved from 0.00616 to 0.00584, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0270 - val_loss: 0.0058 - val_mae: 0.0571 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.00584 to 0.00583, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00583\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0263 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00583\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0262 - val_loss: 0.0058 - val_mae: 0.0571 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.00583 to 0.00583, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0261 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.00583 to 0.00582, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0260 - val_loss: 0.0058 - val_mae: 0.0569 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00582\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0260 - val_loss: 0.0058 - val_mae: 0.0569 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00582\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0259 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00582\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0259 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.00582 to 0.00581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0258 - val_loss: 0.0058 - val_mae: 0.0569 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.00581 to 0.00581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0258 - val_loss: 0.0058 - val_mae: 0.0569 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0058 - val_mae: 0.0569 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0257 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0256 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0256 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0256 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0058 - val_mae: 0.0569 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0058 - val_mae: 0.0569 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0255 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00581\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0010 - mae: 0.0254 - val_loss: 0.0058 - val_mae: 0.0570 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.00581 to 0.00580, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9713e-04 - mae: 0.0249 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.00580 to 0.00579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.9127e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8976e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8909e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8865e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8830e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8788e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss improved from 0.00579 to 0.00579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8751e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8711e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8686e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8642e-04 - mae: 0.0248 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8633e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8590e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8542e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8512e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.00579 to 0.00579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8498e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8490e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8457e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8424e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.8395e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss improved from 0.00579 to 0.00579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7942e-04 - mae: 0.0247 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7865e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7839e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss improved from 0.00579 to 0.00579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7823e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7814e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7807e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7801e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7798e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7797e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7791e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7790e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7784e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7781e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7779e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7776e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7773e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7772e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7768e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7766e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7764e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7764e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7759e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7756e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7751e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7749e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7748e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7749e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7742e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7741e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7740e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7736e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7736e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7733e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7727e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7728e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7726e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7723e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7720e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0568 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7717e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7715e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7713e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7711e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7710e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7707e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7704e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7703e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7698e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7698e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7694e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7692e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00579\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.7689e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7690e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7684e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00579\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7684e-04 - mae: 0.0246 - val_loss: 0.0058 - val_mae: 0.0567 - learning_rate: 1.0000e-07\n",
      "Epoch 301: early stopping\n",
      "Restoring model weights from the end of the best epoch: 251.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.0894 m\n",
      "Median positioning error: 0.0771 m\n",
      "90th percentile error: 0.1626 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031037,
     "sourceId": 12707182,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10608.153799,
   "end_time": "2025-08-27T18:55:47.684695",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T15:58:59.530896",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
