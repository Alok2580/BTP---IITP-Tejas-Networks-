{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c995b607",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T13:51:09.450789Z",
     "iopub.status.busy": "2025-08-07T13:51:09.450572Z",
     "iopub.status.idle": "2025-08-07T13:51:10.841328Z",
     "shell.execute_reply": "2025-08-07T13:51:10.840521Z"
    },
    "papermill": {
     "duration": 1.395295,
     "end_time": "2025-08-07T13:51:10.842608",
     "exception": false,
     "start_time": "2025-08-07T13:51:09.447313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3a8c733f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:51:10.847767Z",
     "iopub.status.busy": "2025-08-07T13:51:10.847438Z",
     "iopub.status.idle": "2025-08-07T13:51:24.518730Z",
     "shell.execute_reply": "2025-08-07T13:51:24.518093Z"
    },
    "papermill": {
     "duration": 13.675181,
     "end_time": "2025-08-07T13:51:24.520166",
     "exception": false,
     "start_time": "2025-08-07T13:51:10.844985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 13:51:12.228089: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754574672.408140      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754574672.463783      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8b45f703",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:51:24.525346Z",
     "iopub.status.busy": "2025-08-07T13:51:24.524875Z",
     "iopub.status.idle": "2025-08-07T13:51:24.529064Z",
     "shell.execute_reply": "2025-08-07T13:51:24.528539Z"
    },
    "papermill": {
     "duration": 0.007776,
     "end_time": "2025-08-07T13:51:24.530153",
     "exception": false,
     "start_time": "2025-08-07T13:51:24.522377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43167495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:51:24.534344Z",
     "iopub.status.busy": "2025-08-07T13:51:24.534130Z",
     "iopub.status.idle": "2025-08-07T13:51:24.537156Z",
     "shell.execute_reply": "2025-08-07T13:51:24.536624Z"
    },
    "papermill": {
     "duration": 0.006245,
     "end_time": "2025-08-07T13:51:24.538166",
     "exception": false,
     "start_time": "2025-08-07T13:51:24.531921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-24/(32 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-24/(32 24(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9b04a913",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:51:24.542982Z",
     "iopub.status.busy": "2025-08-07T13:51:24.542796Z",
     "iopub.status.idle": "2025-08-07T16:44:52.386920Z",
     "shell.execute_reply": "2025-08-07T16:44:52.386261Z"
    },
    "papermill": {
     "duration": 10407.84835,
     "end_time": "2025-08-07T16:44:52.388250",
     "exception": false,
     "start_time": "2025-08-07T13:51:24.539900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754574708.407565      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754574717.628288      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">83,200</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">63,488</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m83,200\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m63,488\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">675,338</span> (2.58 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m675,338\u001b[0m (2.58 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">674,822</span> (2.57 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m674,822\u001b[0m (2.57 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754574728.348424      57 service.cc:148] XLA service 0x7bc004001f90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754574728.349257      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754574731.955869      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 34.19119, saving model to models/best_model_full.keras\n",
      "4375/4375 - 48s - 11ms/step - loss: 70.2416 - mae: 6.0966 - val_loss: 34.1912 - val_mae: 4.5717 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 34.19119 to 26.78148, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 19.2462 - mae: 3.3423 - val_loss: 26.7815 - val_mae: 4.0190 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 26.78148 to 11.59673, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 12.9966 - mae: 2.7372 - val_loss: 11.5967 - val_mae: 2.7028 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 11.59673 to 8.17690, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 6.7177 - mae: 1.9157 - val_loss: 8.1769 - val_mae: 2.1754 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 8.17690 to 3.19317, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.3844 - mae: 1.8924 - val_loss: 3.1932 - val_mae: 1.3983 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 3.19317 to 2.38111, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 4.0380 - mae: 1.4197 - val_loss: 2.3811 - val_mae: 1.2055 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 2.38111\n",
      "4375/4375 - 34s - 8ms/step - loss: 5.7983 - mae: 1.6087 - val_loss: 3.8419 - val_mae: 1.5083 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 2.38111\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.8515 - mae: 1.3902 - val_loss: 6.0849 - val_mae: 1.9003 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 2.38111 to 1.01734, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1906 - mae: 1.0867 - val_loss: 1.0173 - val_mae: 0.7807 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 1.01734 to 0.92264, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.6608 - mae: 1.0587 - val_loss: 0.9226 - val_mae: 0.7499 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.92264\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.3568 - mae: 1.1093 - val_loss: 2.8532 - val_mae: 1.2581 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.92264 to 0.80511, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1462 - mae: 0.7860 - val_loss: 0.8051 - val_mae: 0.6854 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.80511 to 0.59354, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3551 - mae: 0.7778 - val_loss: 0.5935 - val_mae: 0.6012 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.59354\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.5808 - mae: 0.9131 - val_loss: 0.7799 - val_mae: 0.6718 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.59354\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.0824 - mae: 0.9150 - val_loss: 5.4664 - val_mae: 1.4654 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.59354\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8982 - mae: 0.8898 - val_loss: 1.0872 - val_mae: 0.8018 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.59354\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8024 - mae: 0.6553 - val_loss: 14.5378 - val_mae: 2.4060 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.59354\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4900 - mae: 0.8248 - val_loss: 1.0612 - val_mae: 0.7962 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.59354\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.3696 - mae: 0.9200 - val_loss: 1.0479 - val_mae: 0.7894 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.59354\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8568 - mae: 0.6776 - val_loss: 0.8707 - val_mae: 0.7151 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.59354\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.7018 - mae: 0.8460 - val_loss: 0.8598 - val_mae: 0.7154 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss improved from 0.59354 to 0.48393, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6894 - mae: 0.6231 - val_loss: 0.4839 - val_mae: 0.5536 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.48393\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0915 - mae: 0.9199 - val_loss: 1.1815 - val_mae: 0.8283 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.48393\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.6304 - mae: 0.8534 - val_loss: 4.6997 - val_mae: 1.4212 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.48393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4241 - mae: 0.8283 - val_loss: 0.8245 - val_mae: 0.6970 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.48393\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4543 - mae: 0.7867 - val_loss: 2.4034 - val_mae: 1.1026 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.48393\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4151 - mae: 0.7266 - val_loss: 3.8805 - val_mae: 1.4634 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.48393\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8326 - mae: 0.6795 - val_loss: 0.7572 - val_mae: 0.6589 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.48393 to 0.33438, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.0362 - mae: 0.6792 - val_loss: 0.3344 - val_mae: 0.4478 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.0153 - mae: 0.8258 - val_loss: 0.6830 - val_mae: 0.6393 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5488 - mae: 0.5548 - val_loss: 0.8999 - val_mae: 0.7411 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7941 - mae: 0.5880 - val_loss: 0.3429 - val_mae: 0.4485 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8230 - mae: 0.7898 - val_loss: 0.6289 - val_mae: 0.6166 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6394 - mae: 0.5802 - val_loss: 0.4579 - val_mae: 0.5190 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.1406 - mae: 0.6817 - val_loss: 0.6365 - val_mae: 0.6066 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.1022 - mae: 0.7054 - val_loss: 0.6144 - val_mae: 0.6059 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4908 - mae: 0.5404 - val_loss: 0.3650 - val_mae: 0.4715 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.7344 - mae: 0.8579 - val_loss: 1.0815 - val_mae: 0.8062 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7449 - mae: 0.6157 - val_loss: 0.3629 - val_mae: 0.4702 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.9070 - mae: 0.7396 - val_loss: 88.3429 - val_mae: 6.6097 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.1761 - mae: 1.2022 - val_loss: 1.1106 - val_mae: 0.7759 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8395 - mae: 0.8089 - val_loss: 3.7800 - val_mae: 1.4077 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7912 - mae: 0.6672 - val_loss: 0.9868 - val_mae: 0.7746 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6543 - mae: 0.5931 - val_loss: 0.3848 - val_mae: 0.4861 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.3064 - mae: 0.9274 - val_loss: 0.6825 - val_mae: 0.6303 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.3674 - mae: 0.9447 - val_loss: 1.4868 - val_mae: 0.9157 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6393 - mae: 0.6142 - val_loss: 0.3759 - val_mae: 0.4856 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.0511 - mae: 0.6431 - val_loss: 1.4555 - val_mae: 0.9245 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.33438\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3023 - mae: 0.7323 - val_loss: 0.8154 - val_mae: 0.6888 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.33438 to 0.30864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4285 - mae: 0.4954 - val_loss: 0.3086 - val_mae: 0.4265 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.30864 to 0.20372, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.2467 - mae: 0.3837 - val_loss: 0.2037 - val_mae: 0.3511 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.20372 to 0.13929, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1595 - mae: 0.3098 - val_loss: 0.1393 - val_mae: 0.2891 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.13929 to 0.10942, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1185 - mae: 0.2674 - val_loss: 0.1094 - val_mae: 0.2567 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.10942 to 0.09229, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0947 - mae: 0.2396 - val_loss: 0.0923 - val_mae: 0.2351 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.09229 to 0.07647, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0776 - mae: 0.2176 - val_loss: 0.0765 - val_mae: 0.2149 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.07647 to 0.06842, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0662 - mae: 0.2011 - val_loss: 0.0684 - val_mae: 0.2035 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.06842 to 0.05694, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0589 - mae: 0.1900 - val_loss: 0.0569 - val_mae: 0.1853 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.05694\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0515 - mae: 0.1780 - val_loss: 0.0606 - val_mae: 0.1901 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.05694 to 0.05184, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0476 - mae: 0.1710 - val_loss: 0.0518 - val_mae: 0.1758 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.05184 to 0.04400, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0432 - mae: 0.1630 - val_loss: 0.0440 - val_mae: 0.1623 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.04400 to 0.04352, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0394 - mae: 0.1561 - val_loss: 0.0435 - val_mae: 0.1615 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.04352 to 0.03915, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0362 - mae: 0.1495 - val_loss: 0.0392 - val_mae: 0.1518 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.03915 to 0.03882, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0337 - mae: 0.1443 - val_loss: 0.0388 - val_mae: 0.1528 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.03882 to 0.03448, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0319 - mae: 0.1404 - val_loss: 0.0345 - val_mae: 0.1434 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.03448 to 0.03321, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0308 - mae: 0.1378 - val_loss: 0.0332 - val_mae: 0.1400 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.03321\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0289 - mae: 0.1336 - val_loss: 0.0352 - val_mae: 0.1457 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.03321 to 0.03033, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0281 - mae: 0.1315 - val_loss: 0.0303 - val_mae: 0.1341 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.03033\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0268 - mae: 0.1285 - val_loss: 0.0408 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.03033 to 0.02750, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0255 - mae: 0.1255 - val_loss: 0.0275 - val_mae: 0.1285 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.02750\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0252 - mae: 0.1248 - val_loss: 0.0314 - val_mae: 0.1375 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.02750\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0244 - mae: 0.1227 - val_loss: 0.0282 - val_mae: 0.1292 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.02750 to 0.02658, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0238 - mae: 0.1210 - val_loss: 0.0266 - val_mae: 0.1263 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.02658\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0231 - mae: 0.1193 - val_loss: 0.0273 - val_mae: 0.1274 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.02658 to 0.02594, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0224 - mae: 0.1174 - val_loss: 0.0259 - val_mae: 0.1239 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02594\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1164 - val_loss: 0.0263 - val_mae: 0.1253 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.02594 to 0.02420, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0214 - mae: 0.1148 - val_loss: 0.0242 - val_mae: 0.1184 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0211 - mae: 0.1137 - val_loss: 0.0266 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0204 - mae: 0.1120 - val_loss: 0.0264 - val_mae: 0.1259 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0202 - mae: 0.1115 - val_loss: 0.0265 - val_mae: 0.1263 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0197 - mae: 0.1100 - val_loss: 0.0242 - val_mae: 0.1203 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.02420 to 0.02304, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0194 - mae: 0.1091 - val_loss: 0.0230 - val_mae: 0.1176 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02304\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0194 - mae: 0.1094 - val_loss: 0.0232 - val_mae: 0.1183 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02304\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0195 - mae: 0.1094 - val_loss: 0.0289 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02304\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0191 - mae: 0.1082 - val_loss: 0.0232 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02304\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0189 - mae: 0.1078 - val_loss: 0.0236 - val_mae: 0.1196 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.02304 to 0.02145, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0183 - mae: 0.1062 - val_loss: 0.0214 - val_mae: 0.1129 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02145\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0187 - mae: 0.1073 - val_loss: 0.0218 - val_mae: 0.1150 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02145\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0180 - mae: 0.1052 - val_loss: 0.0218 - val_mae: 0.1152 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.02145 to 0.02054, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0179 - mae: 0.1048 - val_loss: 0.0205 - val_mae: 0.1111 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02054\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0179 - mae: 0.1046 - val_loss: 0.0216 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02054\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0173 - mae: 0.1032 - val_loss: 0.0206 - val_mae: 0.1104 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.02054 to 0.02003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0173 - mae: 0.1031 - val_loss: 0.0200 - val_mae: 0.1099 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.02003 to 0.01936, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0172 - mae: 0.1024 - val_loss: 0.0194 - val_mae: 0.1081 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01936\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0170 - mae: 0.1021 - val_loss: 0.0223 - val_mae: 0.1156 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01936\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0169 - mae: 0.1018 - val_loss: 0.0241 - val_mae: 0.1216 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01936\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0168 - mae: 0.1012 - val_loss: 0.0200 - val_mae: 0.1098 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.01936 to 0.01907, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0165 - mae: 0.1005 - val_loss: 0.0191 - val_mae: 0.1056 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.01907\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0169 - mae: 0.1017 - val_loss: 0.0220 - val_mae: 0.1144 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01907\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0166 - mae: 0.1007 - val_loss: 0.0205 - val_mae: 0.1107 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01907\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0168 - mae: 0.1014 - val_loss: 0.0232 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01907\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0162 - mae: 0.0995 - val_loss: 0.0203 - val_mae: 0.1104 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.01907 to 0.01800, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0164 - mae: 0.1002 - val_loss: 0.0180 - val_mae: 0.1030 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01800\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0161 - mae: 0.0995 - val_loss: 0.0189 - val_mae: 0.1066 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01800\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0164 - mae: 0.0999 - val_loss: 0.0246 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01800\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0163 - mae: 0.0991 - val_loss: 0.0194 - val_mae: 0.1069 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.01800 to 0.01675, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0162 - mae: 0.0995 - val_loss: 0.0168 - val_mae: 0.1005 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0161 - mae: 0.0988 - val_loss: 0.0188 - val_mae: 0.1057 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0162 - mae: 0.0995 - val_loss: 0.0219 - val_mae: 0.1159 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0161 - mae: 0.0992 - val_loss: 0.0193 - val_mae: 0.1069 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0163 - mae: 0.0998 - val_loss: 0.0190 - val_mae: 0.1062 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0163 - mae: 0.0996 - val_loss: 0.0197 - val_mae: 0.1077 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0163 - mae: 0.0999 - val_loss: 0.0211 - val_mae: 0.1122 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0162 - mae: 0.0995 - val_loss: 0.0195 - val_mae: 0.1094 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0165 - mae: 0.1002 - val_loss: 0.0182 - val_mae: 0.1047 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0163 - mae: 0.0993 - val_loss: 0.0207 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01675\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0165 - mae: 0.1004 - val_loss: 0.0190 - val_mae: 0.1068 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01675\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0164 - mae: 0.1002 - val_loss: 0.0199 - val_mae: 0.1083 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0170 - mae: 0.1013 - val_loss: 0.0226 - val_mae: 0.1146 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0166 - mae: 0.1002 - val_loss: 0.0195 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0171 - mae: 0.1019 - val_loss: 0.0190 - val_mae: 0.1048 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0171 - mae: 0.1019 - val_loss: 0.0188 - val_mae: 0.1069 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0170 - mae: 0.1016 - val_loss: 0.0223 - val_mae: 0.1158 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0176 - mae: 0.1030 - val_loss: 0.0363 - val_mae: 0.1444 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0169 - mae: 0.1010 - val_loss: 0.0186 - val_mae: 0.1055 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01675\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0171 - mae: 0.1018 - val_loss: 0.0183 - val_mae: 0.1042 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01675\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0175 - mae: 0.1032 - val_loss: 0.0213 - val_mae: 0.1146 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.01675 to 0.00796, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0585 - val_loss: 0.0080 - val_mae: 0.0679 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.00796 to 0.00772, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0077 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.00772 to 0.00746, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0516 - val_loss: 0.0075 - val_mae: 0.0653 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.00746 to 0.00728, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0073 - val_mae: 0.0646 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.00728 to 0.00719, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0040 - mae: 0.0497 - val_loss: 0.0072 - val_mae: 0.0643 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.00719 to 0.00712, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0038 - mae: 0.0490 - val_loss: 0.0071 - val_mae: 0.0641 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.00712 to 0.00706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0483 - val_loss: 0.0071 - val_mae: 0.0637 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.00706\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0071 - val_mae: 0.0641 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.00706 to 0.00681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0036 - mae: 0.0471 - val_loss: 0.0068 - val_mae: 0.0627 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00681\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0069 - val_mae: 0.0631 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.00681 to 0.00676, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0464 - val_loss: 0.0068 - val_mae: 0.0624 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.00676 to 0.00671, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0067 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00671\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0068 - val_mae: 0.0626 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00671\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0071 - val_mae: 0.0642 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00671\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0068 - val_mae: 0.0622 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.00671\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0068 - val_mae: 0.0623 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.00671 to 0.00660, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0066 - val_mae: 0.0613 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00660\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0067 - val_mae: 0.0619 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00660\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0068 - val_mae: 0.0618 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.00660 to 0.00658, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0066 - val_mae: 0.0612 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00658\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0433 - val_loss: 0.0070 - val_mae: 0.0620 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00658\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0066 - val_mae: 0.0616 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.00658 to 0.00640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00640\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0427 - val_loss: 0.0065 - val_mae: 0.0607 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00640\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0066 - val_mae: 0.0613 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.00640 to 0.00639, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0422 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00639\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0065 - val_mae: 0.0607 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.00639 to 0.00639, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00639\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0416 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00639\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0064 - val_mae: 0.0604 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00639\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0064 - val_mae: 0.0601 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.00639 to 0.00630, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0063 - val_mae: 0.0599 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.00630 to 0.00628, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0063 - val_mae: 0.0594 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00628\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0063 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.00628 to 0.00625, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00625\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00625\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0063 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss improved from 0.00625 to 0.00617, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0062 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00617\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0064 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00617\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0064 - val_mae: 0.0602 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00617\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0062 - val_mae: 0.0591 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00617\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0063 - val_mae: 0.0600 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00617\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0064 - val_mae: 0.0603 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00617\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0392 - val_loss: 0.0062 - val_mae: 0.0592 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.00617 to 0.00615, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0024 - mae: 0.0391 - val_loss: 0.0062 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00615\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0024 - mae: 0.0389 - val_loss: 0.0062 - val_mae: 0.0591 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.00615 to 0.00611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0061 - val_mae: 0.0587 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0063 - val_mae: 0.0596 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0384 - val_loss: 0.0062 - val_mae: 0.0589 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0382 - val_loss: 0.0061 - val_mae: 0.0589 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0062 - val_mae: 0.0593 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0380 - val_loss: 0.0062 - val_mae: 0.0588 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00611\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0062 - val_mae: 0.0589 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.00611 to 0.00603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0060 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00603\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0061 - val_mae: 0.0587 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00603\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0063 - val_mae: 0.0592 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.00603 to 0.00601, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0060 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0022 - mae: 0.0372 - val_loss: 0.0061 - val_mae: 0.0589 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0062 - val_mae: 0.0591 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0022 - mae: 0.0370 - val_loss: 0.0060 - val_mae: 0.0585 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0061 - val_mae: 0.0584 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0022 - mae: 0.0368 - val_loss: 0.0060 - val_mae: 0.0582 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.00601 to 0.00601, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0368 - val_loss: 0.0060 - val_mae: 0.0580 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0365 - val_loss: 0.0061 - val_mae: 0.0585 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0061 - val_mae: 0.0581 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0060 - val_mae: 0.0582 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0363 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0061 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0060 - val_mae: 0.0583 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0021 - mae: 0.0359 - val_loss: 0.0060 - val_mae: 0.0578 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0020 - mae: 0.0359 - val_loss: 0.0061 - val_mae: 0.0585 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00601\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0062 - val_mae: 0.0586 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 202: val_loss improved from 0.00601 to 0.00595, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0020 - mae: 0.0357 - val_loss: 0.0059 - val_mae: 0.0577 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.00595 to 0.00561, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0056 - val_mae: 0.0557 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss improved from 0.00561 to 0.00560, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0015 - mae: 0.0304 - val_loss: 0.0056 - val_mae: 0.0555 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.00560 to 0.00559, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0056 - val_mae: 0.0555 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00559\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0301 - val_loss: 0.0056 - val_mae: 0.0555 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss improved from 0.00559 to 0.00557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00557\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0056 - val_mae: 0.0557 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00557\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0056 - val_mae: 0.0555 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.00557 to 0.00556, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0056 - val_mae: 0.0555 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0056 - val_mae: 0.0553 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00556\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0295 - val_loss: 0.0056 - val_mae: 0.0555 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss improved from 0.00556 to 0.00555, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0295 - val_loss: 0.0055 - val_mae: 0.0553 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00555\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0295 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00555\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0295 - val_loss: 0.0056 - val_mae: 0.0555 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00555\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0294 - val_loss: 0.0056 - val_mae: 0.0553 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00555\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0294 - val_loss: 0.0056 - val_mae: 0.0554 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.00555 to 0.00553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0289 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss improved from 0.00553 to 0.00552, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0288 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0288 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss improved from 0.00552 to 0.00552, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00552\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss improved from 0.00552 to 0.00551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss improved from 0.00551 to 0.00551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss improved from 0.00551 to 0.00551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0552 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00551\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0055 - val_mae: 0.0551 - learning_rate: 1.0000e-07\n",
      "Epoch 304: early stopping\n",
      "Restoring model weights from the end of the best epoch: 254.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.0868 m\n",
      "Median positioning error: 0.0764 m\n",
      "90th percentile error: 0.1563 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACK4klEQVR4nOzdeXwTdf7H8fckbdP74GqLlEvuU0RBxAMVBVRExQtRcUVdFXTxlt+ueOwqXuuyiuLqIuyuIooK4oEIKHiAgiCKcgiI3KVcvdu0Teb3R9o0oQdtkzZp83o+HnkkmZlMvjMU+uEzn+9nDNM0TQEAAAAAAAANyBLoAQAAAAAAACD0kJQCAAAAAABAgyMpBQAAAAAAgAZHUgoAAAAAAAANjqQUAAAAAAAAGhxJKQAAAAAAADQ4klIAAAAAAABocCSlAAAAAAAA0OBISgEAAAAAAKDBkZQC0CQZhqFHH3201p/7/fffZRiGZs+e7fcxAQAABBPiJQCBRlIKQL2ZPXu2DMOQYRj6+uuvK6w3TVNpaWkyDEMXX3xxAEZYd8uXL5dhGHr33XcDPRQAANCIhUK8ZBiG3njjjUq3GTx4sAzDUK9evSpd73A41Lp1axmGoUWLFlW6zaOPPur+nsoe6enpfjsmAP4VFugBAGj6IiMjNWfOHJ1xxhley1esWKE9e/bIZrMFaGQAAADBoSnHS2XHdt1113kt//3337Vy5UpFRkZW+dnPP/9c+/fvV/v27fXmm29qxIgRVW47Y8YMxcbGVliemJhY57EDqF8kpQDUuwsvvFDz5s3TCy+8oLCw8n925syZo/79++vQoUMBHB0AAEDgNeV46cILL9TChQt16NAhtWjRwr18zpw5Sk5OVufOnXX06NFKP/vGG2/o5JNP1rhx4/R///d/ysvLU0xMTKXbXnHFFV77BxD8mL4HoN6NGTNGhw8f1pIlS9zLioqK9O677+raa6+t9DN5eXm69957lZaWJpvNpq5du+q5556TaZpe29ntdt19991q2bKl4uLidMkll2jPnj2V7nPv3r266aablJycLJvNpp49e+r111/334FW4rffftOVV16pZs2aKTo6Wqeddpo+/vjjCtu9+OKL6tmzp6Kjo5WUlKRTTjlFc+bMca/PycnRpEmT1L59e9lsNrVq1Urnn3++1q1bV6/jBwAADaMpx0ujRo2SzWbTvHnzvJbPmTNHV111laxWa6WfKygo0Pz583XNNdfoqquuUkFBgT744AOfxgIguJCUAlDv2rdvr0GDBumtt95yL1u0aJGysrJ0zTXXVNjeNE1dcskl+sc//qHhw4fr+eefV9euXXX//ffrnnvu8dr25ptv1rRp03TBBRfoqaeeUnh4uC666KIK+zxw4IBOO+00LV26VBMnTtQ///lPderUSePHj9e0adP8fsxl33n66adr8eLFuuOOO/TEE0+osLBQl1xyiebPn+/e7rXXXtNdd92lHj16aNq0aXrsscd00kkn6bvvvnNvc9ttt2nGjBkaPXq0Xn75Zd13332KiorSpk2b6mXsAACgYTXleCk6OlqjRo3yOrYff/xRv/zyS5UJN0lauHChcnNzdc011yglJUVDhgzRm2++WeX2R44c0aFDh7wemZmZdR43gAZgAkA9mTVrlinJXLNmjTl9+nQzLi7OzM/PN03TNK+88krznHPOMU3TNNu1a2dedNFF7s8tWLDAlGT+7W9/89rfFVdcYRqGYW7bts00TdNcv369Kcm84447vLa79tprTUnmI4884l42fvx4MzU11Tx06JDXttdcc42ZkJDgHteOHTtMSeasWbOqPbYvvvjClGTOmzevym0mTZpkSjK/+uor97KcnByzQ4cOZvv27U2Hw2GapmmOGjXK7NmzZ7Xfl5CQYE6YMKHabQAAQOMTKvHSRx99ZBqGYe7atcs0TdO8//77zY4dO5qmaZpnn312pbHQxRdfbA4ePNj9/tVXXzXDwsLMjIwMr+0eeeQRU1Klj65du1Y7RgCBRaUUgAZRVnL90UcfKScnRx999FGVV8Y++eQTWa1W3XXXXV7L7733Xpmm6b7zyieffCJJFbabNGmS13vTNPXee+9p5MiRMk3T6+rZsGHDlJWVVS/T4D755BMNGDDAq2FpbGysbr31Vv3+++/auHGjJFfzzT179mjNmjVV7isxMVHfffed9u3b5/dxAgCA4NCU46ULLrhAzZo109y5c2WapubOnasxY8ZUuf3hw4e1ePFir21Gjx4twzD0zjvvVPqZ9957T0uWLPF6zJo1q85jBlD/aHQOoEG0bNlSQ4cO1Zw5c5Sfny+Hw6Errrii0m137typ1q1bKy4uzmt59+7d3evLni0Wi0488USv7bp27er1/uDBg8rMzNSrr76qV199tdLvzMjIqNNxVWfnzp0aOHBgheWex9GrVy89+OCDWrp0qQYMGKBOnTrpggsu0LXXXqvBgwe7P/PMM89o3LhxSktLU//+/XXhhRfqhhtuUMeOHf0+bgAAEBhNOV4KDw/XlVdeqTlz5mjAgAHavXt3tVP33n77bRUXF6tfv37atm2be/nAgQP15ptvasKECRU+c9ZZZ9HoHGhkSEoBaDDXXnutbrnlFqWnp2vEiBENdntep9MpSbruuus0bty4Srfp06dPg4ylMt27d9eWLVv00Ucf6dNPP9V7772nl19+WVOmTNFjjz0myXXl9Mwzz9T8+fP12Wef6dlnn9XTTz+t999/v9pbIwMAgMalKcdL1157rV555RU9+uij6tu3r3r06FHltmW9ozwv0nn67bffuDgHNAEkpQA0mMsuu0x//OMf9e233+rtt9+ucrt27dpp6dKlysnJ8br6t3nzZvf6smen06nt27d7Xe3bsmWL1/7K7jTjcDg0dOhQfx5Stdq1a1dhLFLF45CkmJgYXX311br66qtVVFSkyy+/XE888YQmT56syMhISVJqaqruuOMO3XHHHcrIyNDJJ5+sJ554gqQUAABNSFOOl8444wy1bdtWy5cv19NPP13ldjt27NDKlSs1ceJEnX322V7rnE6nrr/+es2ZM0d/+ctf6mWcABoOPaUANJjY2FjNmDFDjz76qEaOHFnldhdeeKEcDoemT5/utfwf//iHDMNwJ2HKnl944QWv7Y69O4zVatXo0aP13nvv6eeff67wfQcPHqzL4RzXhRdeqNWrV2vVqlXuZXl5eXr11VfVvn1799XBw4cPe30uIiJCPXr0kGmaKi4ulsPhUFZWltc2rVq1UuvWrWW32+tl7AAAIDCacrxkGIZeeOEFPfLII7r++uur3K6sSuqBBx7QFVdc4fW46qqrdPbZZ1d7Fz4AjQeVUgAaVFXl4J5Gjhypc845R3/+85/1+++/q2/fvvrss8/0wQcfaNKkSe6eCCeddJLGjBmjl19+WVlZWTr99NO1bNkyr74DZZ566il98cUXGjhwoG655Rb16NFDR44c0bp167R06VIdOXKkTsfz3nvvua9IHnucDz30kN566y2NGDFCd911l5o1a6b//Oc/2rFjh9577z1ZLK7rAhdccIFSUlI0ePBgJScna9OmTZo+fbouuugixcXFKTMzU23atNEVV1yhvn37KjY2VkuXLtWaNWv097//vU7jBgAAwaupxUueRo0apVGjRlW7zZtvvqmTTjpJaWlpla6/5JJLdOedd2rdunU6+eST3cvfffddxcbGVtj+/PPPV3Jysm8DB1AvSEoBCDoWi0ULFy7UlClT9Pbbb2vWrFlq3769nn32Wd17771e277++utq2bKl3nzzTS1YsEDnnnuuPv744wpBTHJyslavXq3HH39c77//vl5++WU1b95cPXv2rLZ8/Hjmzp1b6fIhQ4bojDPO0MqVK/Xggw/qxRdfVGFhofr06aMPP/xQF110kXvbP/7xj3rzzTf1/PPPKzc3V23atNFdd93lLkmPjo7WHXfcoc8++0zvv/++nE6nOnXqpJdfflm33357nccOAAAar8YUL9XGunXrtHnzZj388MNVbjNy5EjdeeedeuONN7ySUlXFRV988QVJKSBIGaZpmoEeBAAAAAAAAEILPaUAAAAAAADQ4EhKAQAAAAAAoMGRlAIAAAAAAECDIykFAAAAAACABkdSCgAAAAAAAA2OpBQAAAAAAAAaXFigB1DfnE6n9u3bp7i4OBmGEejhAACARs40TeXk5Kh169ayWJrG9T3iJQAA4E81jZeafFJq3759SktLC/QwAABAE7N79261adMm0MPwC+IlAABQH44XLzX5pFRcXJwk14mIj48P8GgAAEBjl52drbS0NHeM0RQQLwEAAH+qabzU5JNSZSXo8fHxBFkAAMBvmtI0N+IlAABQH44XLzWNRggAAAAAAABoVEhKAQAAAAAAoMGRlAIAAAAAAECDa/I9pQAATZfD4VBxcXGgh4EmJjw8XFarNdDDAADAL5xOp4qKigI9DDQx/oqXSEoBABod0zSVnp6uzMzMQA8FTVRiYqJSUlKaVDNzAEDoKSoq0o4dO+R0OgM9FDRB/oiXSEoBABqdsoRUq1atFB0dTeIAfmOapvLz85WRkSFJSk1NDfCIAACoG9M0tX//flmtVqWlpclioXsP/MOf8RJJKQBAo+JwONwJqebNmwd6OGiCoqKiJEkZGRlq1aoVU/kAAI1SSUmJ8vPz1bp1a0VHRwd6OGhi/BUvkSoFADQqZT2kCK5Qn8p+vuhZBgBorBwOhyQpIiIiwCNBU+WPeImkFACgUWLKHuoTP18AgKaC32moL/742SIpBQAAAAAAgAZHUgp1U1wo/e8yaeX0QI8EAEJa+/btNW3atBpvv3z5chmGwZ0LgYZgmtK746XFfw70SAAgpBEvBS+SUqib9J+k7Z9L388M9EgAoFEwDKPax6OPPlqn/a5Zs0a33nprjbc//fTTtX//fiUkJNTp+2qKYA6QlHtA+vld6btXAj0SAGgUQjVeSkpKUmFhode6NWvWuI+7Mt26dZPNZlN6enqFdUOGDKn0/N122231chy+4O57qBunw/sZAFCt/fv3u1+//fbbmjJlirZs2eJeFhsb635tmqYcDofCwo7/a7ply5a1GkdERIRSUlJq9RkAdUS8BAC1EqrxUlxcnObPn68xY8a4l82cOVNt27bVrl27Kmz/9ddfq6CgQFdccYX+85//6MEHH6ywzS233KLHH3/ca1kw3iiISinUkXnMMwCgOikpKe5HQkKCDMNwv9+8ebPi4uK0aNEi9e/fXzabTV9//bW2b9+uUaNGKTk5WbGxsTr11FO1dOlSr/0eW45uGIb+/e9/67LLLlN0dLQ6d+6shQsXutcfW8E0e/ZsJSYmavHixerevbtiY2M1fPhwr6CwpKREd911lxITE9W8eXM9+OCDGjdunC699NI6n4+jR4/qhhtuUFJSkqKjozVixAht3brVvX7nzp0aOXKkkpKSFBMTo549e+qTTz5xf3bs2LFq2bKloqKi1LlzZ82aNavOYwHqD/ESANRGqMZL48aN0+uvv+5+X1BQoLlz52rcuHGVbj9z5kxde+21uv76670+5yk6OtrrfKakpCg+Pv64Y2loJKVQN6az9JkgC0Dgmaap/KKSgDxMP/47+NBDD+mpp57Spk2b1KdPH+Xm5urCCy/UsmXL9MMPP2j48OEaOXJkpVfMPD322GO66qqr9NNPP+nCCy/U2LFjdeTIkSq3z8/P13PPPaf//e9/+vLLL7Vr1y7dd9997vVPP/203nzzTc2aNUvffPONsrOztWDBAp+O9cYbb9T333+vhQsXatWqVTJNUxdeeKH7lsITJkyQ3W7Xl19+qQ0bNujpp592Xx19+OGHtXHjRi1atEibNm3SjBkz1KJFC5/GA9SLsnhJImYCEHDES96CKV66/vrr9dVXX7nH/N5776l9+/Y6+eSTK2ybk5OjefPm6brrrtP555+vrKwsffXVVzX6nmDE9D3UTdk/KgRYAIJAQbFDPaYsDsh3b3x8mKIj/PPr9PHHH9f555/vft+sWTP17dvX/f6vf/2r5s+fr4ULF2rixIlV7ufGG290l38/+eSTeuGFF7R69WoNHz680u2Li4v1yiuv6MQTT5QkTZw40avc+8UXX9TkyZN12WWXSZKmT5/urlqqi61bt2rhwoX65ptvdPrpp0uS3nzzTaWlpWnBggW68sortWvXLo0ePVq9e/eWJHXs2NH9+V27dqlfv3465ZRTJLmufgJBySsp5ZQMa+DGAiDkES95C6Z4qVWrVhoxYoRmz56tKVOm6PXXX9dNN91U6bZz585V586d1bNnT0nSNddco5kzZ+rMM8/02u7ll1/Wv//9b69l//rXvzR27NgajamhUCmFunFXSjmr3w4AUGNlSZYyubm5uu+++9S9e3clJiYqNjZWmzZtOu6Vvz59+rhfx8TEKD4+XhkZGVVuHx0d7Q6wJCk1NdW9fVZWlg4cOKABAwa411utVvXv379Wx+Zp06ZNCgsL08CBA93Lmjdvrq5du2rTpk2SpLvuukt/+9vfNHjwYD3yyCP66aef3Nvefvvtmjt3rk466SQ98MADWrlyZZ3HAtQrz4t3xEwA4BdNNV666aabNHv2bP32229atWpVlcmj119/Xdddd537/XXXXad58+YpJyfHa7uxY8dq/fr1Xo9LLrmkxuNpKFRKoY7okQAgeESFW7Xx8WEB+25/iYmJ8Xp/3333acmSJXruuefUqVMnRUVF6YorrlBRUVG1+wkPD/d6bxiGnM6q/0Nc2fb+LLOvi5tvvlnDhg3Txx9/rM8++0xTp07V3//+d915550aMWKEdu7cqU8++URLlizReeedpwkTJui5554L6JiBCpi+ByCIEC95C7Z4acSIEbr11ls1fvx4jRw5Us2bN6+wzcaNG/Xtt99q9erVXs3NHQ6H5s6dq1tuucW9LCEhQZ06dfLb+OoLlVKoGyqlAAQRwzAUHREWkEdVt+n1h2+++UY33nijLrvsMvXu3VspKSn6/fff6+37KpOQkKDk5GStWbPGvczhcGjdunV13mf37t1VUlKi7777zr3s8OHD2rJli3r06OFelpaWpttuu03vv/++7r33Xr322mvudS1bttS4ceP0xhtvaNq0aXr11VfrPB6gQRAzAQgw4qX64494KSwsTDfccIOWL19e5dS9mTNn6qyzztKPP/7oVQF1zz33aObMmT4fRyBQKYW6oacUANS7zp076/3339fIkSNlGIYefvjhaq/g1Zc777xTU6dOVadOndStWze9+OKLOnr0aI0CzA0bNiguLs793jAM9e3bV6NGjdItt9yif/3rX4qLi9NDDz2kE044QaNGjZIkTZo0SSNGjFCXLl109OhRffHFF+revbskacqUKerfv7969uwpu92ujz76yL0OCCrH9pQCAPhdU4iXyvz1r3/V/fffX2mVVHFxsf73v//p8ccfV69evbzW3XzzzXr++ef1yy+/uHtN5efnKz093Ws7m82mpKSkOhxd/aFSCnXjTkoRYAFAfXn++eeVlJSk008/XSNHjtSwYcMqvQtLfXvwwQc1ZswY3XDDDRo0aJBiY2M1bNgwRUZGHvezZ511lvr16+d+lPVWmDVrlvr376+LL75YgwYNkmma+uSTT9yl8Q6HQxMmTFD37t01fPhwdenSRS+//LIkKSIiQpMnT1afPn101llnyWq1au7cufV3AoC68oqTuJAHAPWhKcRLZSIiItSiRYtKE1kLFy7U4cOH3Y3UPXXv3l3du3f3qpZ67bXXlJqa6vUoa+weTAwz0E0j6ll2drYSEhKUlZWl+Pj4QA+n6di6RHrzCim6ufTAb4EeDYAQUlhYqB07dqhDhw61+iUP/3E6nerevbuuuuoq/fWvfw30cOpFdT9nTTG2aIrHFBQyNksvlzb0n7xHssVVvz0A+BExU2ARL9UstmD6HuqGnlIAEDJ27typzz77TGeffbbsdrumT5+uHTt26Nprrw300IDgxvQ9AAgZxEt1w/Q91A09pQAgZFgsFs2ePVunnnqqBg8erA0bNmjp0qX0cQKOyyNOImYCgCaNeKluqJRC3bgrpQiwAKCpS0tL0zfffBPoYQCND5VSABAyiJfqhkop1JF5zDMAAAC8eCWliJkAADgWSSnUDT2lAAAAqueViCIpBQDAsUhKoW7oKQUAAFA9pu8BAFAtklKoGyqlAAAAjsOz0TkxEwAAxyIphTqipxQAAEC1TO6+BwBAdUhKoW6olAIAAKieSaUUAADVISmFuqGnFAAExJAhQzRp0iT3+/bt22vatGnVfsYwDC1YsMDn7/bXfhB6ftydqSUbD2hvZkGgh9Kw6CkFAAFBvNR4kJRC3biTUgRYAFATI0eO1PDhwytd99VXX8kwDP3000+13u+aNWt06623+jo8L48++qhOOumkCsv379+vESNG+PW7jjV79mwlJibW63c0RXv37tV1112n5s2bKyoqSr1799b3338f6GG5/XPZVt3y3+/1zdZDgR5Kw/KKk7iQBwDHQ7xUM7Nnz5ZhGOrevXuFdfPmzZNhGGrfvn2FdQUFBWrWrJlatGghu91eYX379u1lGEaFx1NPPVUfhyEpwEkph8Ohhx9+WB06dFBUVJROPPFE/fWvf5XpUX1jmqamTJmi1NRURUVFaejQodq6dWsARw0XekoBQG2MHz9eS5Ys0Z49eyqsmzVrlk455RT16dOn1vtt2bKloqOj/THE40pJSZHNZmuQ70LNHT16VIMHD1Z4eLgWLVqkjRs36u9//7uSkpICPTQ3q8WQJDlCrsKa6XsAUBvESzUXExOjjIwMrVq1ymv5zJkz1bZt20o/895776lnz57q1q1bldVcjz/+uPbv3+/1uPPOO/09fLeAJqWefvppzZgxQ9OnT9emTZv09NNP65lnntGLL77o3uaZZ57RCy+8oFdeeUXfffedYmJiNGzYMBUWFgZw5KCnFADUzsUXX6yWLVtq9uzZXstzc3M1b948jR8/XocPH9aYMWN0wgknKDo6Wr1799Zbb71V7X6PLUffunWrzjrrLEVGRqpHjx5asmRJhc88+OCD6tKli6Kjo9WxY0c9/PDDKi4uluS68vbYY4/pxx9/dF8dKxvzseXoGzZs0LnnnquoqCg1b95ct956q3Jzc93rb7zxRl166aV67rnnlJqaqubNm2vChAnu76qLXbt2adSoUYqNjVV8fLyuuuoqHThwwL3+xx9/1DnnnKO4uDjFx8erf//+7oqhnTt3auTIkUpKSlJMTIx69uypTz75pM5jCRZPP/200tLSNGvWLA0YMEAdOnTQBRdcoBNPPDHQQ3OzGq6kVIkzxJJSTN8DgFohXqp5vBQWFqZrr71Wr7/+unvZnj17tHz5cl177bWVfmbmzJm67rrrdN1112nmzJmVbhMXF6eUlBSvR0xMTLVj8UVYve25BlauXKlRo0bpoosukuT6QXnrrbe0evVqSa4qqWnTpukvf/mLRo0aJUn673//q+TkZC1YsEDXXHNNwMYe8o69m0xpsAkAAWGaUnF+YL47PLpG/waGhYXphhtu0OzZs/XnP/9ZRuln5s2bJ4fDoTFjxig3N1f9+/fXgw8+qPj4eH388ce6/vrrdeKJJ2rAgAHH/Q6n06nLL79cycnJ+u6775SVleXVT6FMXFycZs+erdatW2vDhg265ZZbFBcXpwceeEBXX321fv75Z3366adaunSpJCkhIaHCPvLy8jRs2DANGjRIa9asUUZGhm6++WZNnDjRK5D84osvlJqaqi+++ELbtm3T1VdfrZNOOkm33HLLcY+nsuMrS0itWLFCJSUlmjBhgq6++motX75ckjR27Fj169dPM2bMkNVq1fr16xUeHi5JmjBhgoqKivTll18qJiZGGzduVGxsbK3HEWwWLlyoYcOG6corr9SKFSt0wgkn6I477qjTOa4vVqvr590Zckkp7r4HIIgQL0lqWvHSTTfdpCFDhuif//ynoqOjNXv2bA0fPlzJyckVtt2+fbtWrVql999/X6Zp6u6779bOnTvVrl27456z+hTQpNTpp5+uV199Vb/++qu6dOmiH3/8UV9//bWef/55SdKOHTuUnp6uoUOHuj+TkJCggQMHatWqVZUmpex2u9fcyOzs7Po/kFDkdeWPpBSAACvOl55sHZjv/r99UkTNrh7ddNNNevbZZ7VixQoNGTJEkqsUffTo0UpISFBCQoLuu+8+9/Z33nmnFi9erHfeeadGQdbSpUu1efNmLV68WK1bu87Hk08+WaGvwV/+8hf36/bt2+u+++7T3Llz9cADDygqKkqxsbEKCwtTSkpKld81Z84cFRYW6r///a/76tn06dM1cuRIPf300+5gKCkpSdOnT5fValW3bt100UUXadmyZXVKmCxbtkwbNmzQjh07lJaWJsl1sapnz55as2aNTj31VO3atUv333+/unXrJknq3Lmz+/O7du3S6NGj1bt3b0lSx44daz2GYPTbb79pxowZuueee/R///d/WrNmje666y5FRERo3LhxlX6moeMlKqVEUgpA4BEvSWpa8VK/fv3UsWNHvfvuu7r++us1e/ZsPf/88/rtt98qbPv6669rxIgR7un9w4YN06xZs/Too496bffggw96HbskLVq0SGeeeWa1Y6mrgE7fe+ihh3TNNdeoW7duCg8PV79+/TRp0iSNHTtWkpSeni5JFbJ8ycnJ7nXHmjp1qvsHNSEhwR20wt/MKl4DAKrSrVs3nX766e4y623btumrr77S+PHjJbl6Lf71r39V79691axZM8XGxmrx4sXatWtXjfa/adMmpaWluQMsSRo0aFCF7d5++20NHjxYKSkpio2N1V/+8pcaf4fnd/Xt29ernHvw4MFyOp3asmWLe1nPnj1ltVrd71NTU5WRkVGr7/L8zrS0NK/f7T169FBiYqI2bdokSbrnnnt08803a+jQoXrqqae0fft297Z33XWX/va3v2nw4MF65JFH6tQoNRg5nU6dfPLJevLJJ9WvXz/deuutuuWWW/TKK69U+ZmGjpfCLKFaKcX0PQCoLeKl2sVLN910k2bNmqUVK1YoLy9PF154YYVtHA6H/vOf/+i6665zL7vuuus0e/ZsOZ3ev5/uv/9+rV+/3utxyimn1PiYayuglVLvvPOO3nzzTc2ZM0c9e/bU+vXrNWnSJLVu3brKK3vHM3nyZN1zzz3u99nZ2SSm6kOFIMta5aYAUO/Co11X4AL13bUwfvx43XnnnXrppZc0a9YsnXjiiTr77LMlSc8++6z++c9/atq0aerdu7diYmI0adIkFRUV+W24q1at0tixY/XYY49p2LBhSkhI0Ny5c/X3v//db9/hqWzqXBnDMCoEP/706KOP6tprr9XHH3+sRYsW6ZFHHtHcuXN12WWX6eabb9awYcP08ccf67PPPtPUqVP197//vV6bdzaE1NRU9ejRw2tZ9+7d9d5771X5mYaOlyyWEK2U4iIegGBCvFRjjSleGjt2rB544AE9+uijuv766xUWVjHNs3jxYu3du1dXX32113KHw6Fly5bp/PPPdy9r0aKFOnXqVIejqJuAJqXuv/9+d7WUJPXu3Vs7d+7U1KlTNW7cOHcZ3IEDB5Samur+3IEDByq99aIk2Ww27gzUEOiRACCYGEaNS8ID7aqrrtKf/vQnzZkzR//97391++23u/slfPPNNxo1apT7KpbT6dSvv/5aIeFQle7du2v37t3av3+/+/fmt99+67XNypUr1a5dO/35z392L9u5c6fXNhEREXI4HMf9rtmzZysvL8999e+bb76RxWJR165dazTe2io7vt27d7sTKBs3blRmZqbXOerSpYu6dOmiu+++W2PGjNGsWbN02WWXSZLS0tJ022236bbbbtPkyZP12muvNfqk1ODBg72utkrSr7/+Wm2PiIaOl9yVUqEWM1ApBSCYEC9JanrxUrNmzXTJJZfonXfeqbJKeubMmbrmmmu8jkeSnnjiCc2cOdMrKdXQAjp9Lz8/XxaL9xCsVqs7I9ihQwelpKRo2bJl7vXZ2dn67rvvKi2vQwMiyAKAOomNjdXVV1+tyZMna//+/brxxhvd6zp37qwlS5Zo5cqV2rRpk/74xz963VnueIYOHaouXbpo3Lhx+vHHH/XVV19VCD46d+6sXbt2ae7cudq+fbteeOEFzZ8/32ub9u3ba8eOHVq/fr0OHTrk1XuozNixYxUZGalx48bp559/1hdffKE777xT119/faXNNWvD4XBUKBvftGmThg4dqt69e2vs2LFat26dVq9erRtuuEFnn322TjnlFBUUFGjixIlavny5du7cqW+++UZr1qxR9+7dJUmTJk3S4sWLtWPHDq1bt05ffPGFe11jdvfdd+vbb7/Vk08+qW3btmnOnDl69dVXNWHChEAPzc1dKeUItaSU52viJQCoKeKl2pk9e7YOHTrk7qnp6eDBg/rwww81btw49erVy+txww03aMGCBTpy5Ih7+5ycHKWnp3s96rP3ZECTUiNHjtQTTzyhjz/+WL///rvmz5+v559/3n010zAMTZo0SX/729+0cOFCbdiwQTfccINat26tSy+9NJBDB+XoAFBn48eP19GjRzVs2DCvfgZ/+ctfdPLJJ2vYsGEaMmSIUlJSavX7zmKxaP78+SooKNCAAQN0880364knnvDa5pJLLtHdd9+tiRMn6qSTTtLKlSv18MMPe20zevRoDR8+XOecc45atmxZ6W2Wo6OjtXjxYh05ckSnnnqqrrjiCp133nmaPn167U5GJXJzc9WvXz+vx8iRI2UYhj744AMlJSXprLPO0tChQ9WxY0e9/fbbklwXtg4fPqwbbrhBXbp00VVXXaURI0bosccek+RKdk2YMEHdu3fX8OHD1aVLF7388ss+jzfQTj31VM2fP19vvfWWevXqpb/+9a+aNm2au0dnMCirlHLU49TNoESjcwCoM+KlmouKilLz5s0rXVfWZP28886rsO68885TVFSU3njjDfeyKVOmKDU11evxwAMP+HW8ngzTDNxvyJycHD388MOaP3++MjIy1Lp1a40ZM0ZTpkxRRESEJMk0TT3yyCN69dVXlZmZqTPOOEMvv/yyunTpUqPvyM7OVkJCgrKyshQfH1+fhxNa1syUPi7tRVGLOykAgK8KCwu1Y8cOdejQQZGRkYEe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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7790940,
     "sourceId": 12357670,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10430.786178,
   "end_time": "2025-08-07T16:44:56.235559",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T13:51:05.449381",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
