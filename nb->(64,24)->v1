{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75cb8f9e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-22T09:33:04.658626Z",
     "iopub.status.busy": "2025-07-22T09:33:04.658411Z",
     "iopub.status.idle": "2025-07-22T09:33:05.966938Z",
     "shell.execute_reply": "2025-07-22T09:33:05.966092Z"
    },
    "papermill": {
     "duration": 1.312906,
     "end_time": "2025-07-22T09:33:05.968094",
     "exception": false,
     "start_time": "2025-07-22T09:33:04.655188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3511f4a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:33:05.973878Z",
     "iopub.status.busy": "2025-07-22T09:33:05.973378Z",
     "iopub.status.idle": "2025-07-22T09:33:19.750944Z",
     "shell.execute_reply": "2025-07-22T09:33:19.750284Z"
    },
    "papermill": {
     "duration": 13.781646,
     "end_time": "2025-07-22T09:33:19.752376",
     "exception": false,
     "start_time": "2025-07-22T09:33:05.970730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-22 09:33:07.351956: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753176787.528865      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753176787.580713      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d52a191",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:33:19.757620Z",
     "iopub.status.busy": "2025-07-22T09:33:19.757157Z",
     "iopub.status.idle": "2025-07-22T09:33:19.761348Z",
     "shell.execute_reply": "2025-07-22T09:33:19.760813Z"
    },
    "papermill": {
     "duration": 0.007697,
     "end_time": "2025-07-22T09:33:19.762282",
     "exception": false,
     "start_time": "2025-07-22T09:33:19.754585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.1  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.001\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3c9a5b7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:33:19.766660Z",
     "iopub.status.busy": "2025-07-22T09:33:19.766454Z",
     "iopub.status.idle": "2025-07-22T09:33:19.769582Z",
     "shell.execute_reply": "2025-07-22T09:33:19.768946Z"
    },
    "papermill": {
     "duration": 0.00644,
     "end_time": "2025-07-22T09:33:19.770563",
     "exception": false,
     "start_time": "2025-07-22T09:33:19.764123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e7b33527",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:33:19.775559Z",
     "iopub.status.busy": "2025-07-22T09:33:19.775370Z",
     "iopub.status.idle": "2025-07-22T11:36:47.024867Z",
     "shell.execute_reply": "2025-07-22T11:36:47.023891Z"
    },
    "papermill": {
     "duration": 7407.254009,
     "end_time": "2025-07-22T11:36:47.026358",
     "exception": false,
     "start_time": "2025-07-22T09:33:19.772349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753176821.956497      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753176831.500033      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,256,202</span> (4.79 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,256,202\u001b[0m (4.79 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,255,686</span> (4.79 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,255,686\u001b[0m (4.79 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753176846.123466      59 service.cc:148] XLA service 0x7be2c40020e0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753176846.124211      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753176852.843351      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 37.66262, saving model to models/best_model_full.keras\n",
      "4375/4375 - 80s - 18ms/step - loss: 125.3639 - mae: 8.0056 - val_loss: 37.6626 - val_mae: 4.7265 - learning_rate: 0.0010\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 37.66262 to 18.86664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 22.3133 - mae: 3.6160 - val_loss: 18.8666 - val_mae: 3.3282 - learning_rate: 0.0010\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 18.86664 to 18.81466, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 12.6435 - mae: 2.7237 - val_loss: 18.8147 - val_mae: 3.3138 - learning_rate: 0.0010\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 18.81466 to 9.41323, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 9.2030 - mae: 2.3144 - val_loss: 9.4132 - val_mae: 2.4186 - learning_rate: 0.0010\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 9.41323 to 8.93950, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 6.7022 - mae: 1.9841 - val_loss: 8.9395 - val_mae: 2.2964 - learning_rate: 0.0010\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 8.93950 to 7.83452, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 5.9670 - mae: 1.8502 - val_loss: 7.8345 - val_mae: 2.2439 - learning_rate: 0.0010\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 7.83452 to 7.15475, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 4.5629 - mae: 1.6205 - val_loss: 7.1548 - val_mae: 2.1006 - learning_rate: 0.0010\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 7.15475 to 6.13068, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 3.8178 - mae: 1.4695 - val_loss: 6.1307 - val_mae: 1.9606 - learning_rate: 0.0010\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 6.13068 to 5.08058, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 3.1128 - mae: 1.3338 - val_loss: 5.0806 - val_mae: 1.7458 - learning_rate: 0.0010\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 5.08058\n",
      "4375/4375 - 60s - 14ms/step - loss: 2.8513 - mae: 1.2654 - val_loss: 5.4881 - val_mae: 1.8045 - learning_rate: 0.0010\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 5.08058 to 3.57362, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 1.8812 - mae: 1.0582 - val_loss: 3.5736 - val_mae: 1.5083 - learning_rate: 0.0010\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 3.57362\n",
      "4375/4375 - 60s - 14ms/step - loss: 2.2904 - mae: 1.1004 - val_loss: 4.6559 - val_mae: 1.6798 - learning_rate: 0.0010\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 3.57362 to 3.37571, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 1.5191 - mae: 0.9349 - val_loss: 3.3757 - val_mae: 1.3363 - learning_rate: 0.0010\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 3.37571\n",
      "4375/4375 - 60s - 14ms/step - loss: 1.3150 - mae: 0.8603 - val_loss: 3.9298 - val_mae: 1.5213 - learning_rate: 0.0010\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 3.37571\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.9923 - mae: 0.7708 - val_loss: 3.5980 - val_mae: 1.4154 - learning_rate: 0.0010\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 3.37571\n",
      "4375/4375 - 60s - 14ms/step - loss: 1.0895 - mae: 0.7794 - val_loss: 4.1679 - val_mae: 1.5653 - learning_rate: 0.0010\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 3.37571 to 3.13081, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 1.0418 - mae: 0.7627 - val_loss: 3.1308 - val_mae: 1.3285 - learning_rate: 0.0010\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 3.13081\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.6871 - mae: 0.6458 - val_loss: 3.2304 - val_mae: 1.3494 - learning_rate: 0.0010\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 3.13081\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.7032 - mae: 0.6399 - val_loss: 3.3749 - val_mae: 1.3681 - learning_rate: 0.0010\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 3.13081 to 2.85051, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.5360 - mae: 0.5711 - val_loss: 2.8505 - val_mae: 1.2925 - learning_rate: 0.0010\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 2.85051\n",
      "4375/4375 - 60s - 14ms/step - loss: 1.0698 - mae: 0.6612 - val_loss: 3.8890 - val_mae: 1.4468 - learning_rate: 0.0010\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss improved from 2.85051 to 2.65914, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.7255 - mae: 0.6030 - val_loss: 2.6591 - val_mae: 1.2265 - learning_rate: 0.0010\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 2.65914\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.5922 - mae: 0.5662 - val_loss: 3.4761 - val_mae: 1.3718 - learning_rate: 0.0010\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 2.65914\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.4510 - mae: 0.5202 - val_loss: 2.6863 - val_mae: 1.1519 - learning_rate: 0.0010\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 2.65914 to 2.19830, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.4232 - mae: 0.5028 - val_loss: 2.1983 - val_mae: 1.1186 - learning_rate: 0.0010\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 2.19830 to 2.17340, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.4675 - mae: 0.5068 - val_loss: 2.1734 - val_mae: 1.1107 - learning_rate: 0.0010\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 2.17340\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.3520 - mae: 0.4644 - val_loss: 3.3067 - val_mae: 1.2896 - learning_rate: 0.0010\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 2.17340\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.5243 - mae: 0.4983 - val_loss: 2.2617 - val_mae: 1.1016 - learning_rate: 0.0010\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 2.17340\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.4704 - mae: 0.4862 - val_loss: 2.5623 - val_mae: 1.1808 - learning_rate: 0.0010\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 2.17340\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2951 - mae: 0.4226 - val_loss: 2.5407 - val_mae: 1.1563 - learning_rate: 0.0010\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss improved from 2.17340 to 2.13470, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.2933 - mae: 0.4216 - val_loss: 2.1347 - val_mae: 1.0199 - learning_rate: 0.0010\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2956 - mae: 0.4179 - val_loss: 2.5543 - val_mae: 1.1990 - learning_rate: 0.0010\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2775 - mae: 0.4061 - val_loss: 2.2852 - val_mae: 1.1229 - learning_rate: 0.0010\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2424 - mae: 0.3829 - val_loss: 2.1611 - val_mae: 1.0495 - learning_rate: 0.0010\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2405 - mae: 0.3821 - val_loss: 2.3645 - val_mae: 1.1353 - learning_rate: 0.0010\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.3197 - mae: 0.3992 - val_loss: 2.1385 - val_mae: 1.1019 - learning_rate: 0.0010\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2256 - mae: 0.3678 - val_loss: 3.0710 - val_mae: 1.2561 - learning_rate: 0.0010\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.3059 - mae: 0.3983 - val_loss: 2.2163 - val_mae: 1.0935 - learning_rate: 0.0010\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2197 - mae: 0.3567 - val_loss: 2.4506 - val_mae: 1.1255 - learning_rate: 0.0010\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 2.13470\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1930 - mae: 0.3438 - val_loss: 2.2071 - val_mae: 1.1002 - learning_rate: 0.0010\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 2.13470 to 2.13077, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.1907 - mae: 0.3424 - val_loss: 2.1308 - val_mae: 1.1017 - learning_rate: 0.0010\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 2.13077\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1791 - mae: 0.3316 - val_loss: 2.3195 - val_mae: 1.0999 - learning_rate: 0.0010\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 2.13077\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.2810 - mae: 0.3574 - val_loss: 2.6982 - val_mae: 1.1897 - learning_rate: 0.0010\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 2.13077\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1488 - mae: 0.3015 - val_loss: 2.1744 - val_mae: 1.0748 - learning_rate: 0.0010\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 2.13077\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1540 - mae: 0.3073 - val_loss: 2.3065 - val_mae: 1.0500 - learning_rate: 0.0010\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 2.13077\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1528 - mae: 0.3067 - val_loss: 2.1446 - val_mae: 1.0455 - learning_rate: 0.0010\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 2.13077 to 2.10101, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1735 - mae: 0.3164 - val_loss: 2.1010 - val_mae: 1.0598 - learning_rate: 0.0010\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 2.10101\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1433 - mae: 0.2967 - val_loss: 2.2789 - val_mae: 1.0957 - learning_rate: 0.0010\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 2.10101\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.1437 - mae: 0.2963 - val_loss: 2.1345 - val_mae: 1.0431 - learning_rate: 0.0010\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 2.10101 to 2.03307, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1335 - mae: 0.2860 - val_loss: 2.0331 - val_mae: 1.0462 - learning_rate: 0.0010\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 2.03307\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1312 - mae: 0.2832 - val_loss: 2.1275 - val_mae: 1.0866 - learning_rate: 0.0010\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 2.03307\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1234 - mae: 0.2751 - val_loss: 2.3388 - val_mae: 1.1134 - learning_rate: 0.0010\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 2.03307 to 1.97709, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1204 - mae: 0.2716 - val_loss: 1.9771 - val_mae: 1.0183 - learning_rate: 0.0010\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 1.97709 to 1.89834, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1131 - mae: 0.2634 - val_loss: 1.8983 - val_mae: 1.0378 - learning_rate: 0.0010\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 1.89834\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1099 - mae: 0.2597 - val_loss: 1.9652 - val_mae: 1.0269 - learning_rate: 0.0010\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 1.89834 to 1.88362, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.1596 - mae: 0.2706 - val_loss: 1.8836 - val_mae: 0.9989 - learning_rate: 0.0010\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 1.88362\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0987 - mae: 0.2458 - val_loss: 2.0968 - val_mae: 1.0471 - learning_rate: 0.0010\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 1.88362 to 1.85650, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.1107 - mae: 0.2499 - val_loss: 1.8565 - val_mae: 0.9890 - learning_rate: 0.0010\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 1.85650\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0948 - mae: 0.2416 - val_loss: 2.0477 - val_mae: 1.0477 - learning_rate: 0.0010\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 1.85650\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0995 - mae: 0.2477 - val_loss: 2.2113 - val_mae: 1.0408 - learning_rate: 0.0010\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 1.85650 to 1.74373, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0985 - mae: 0.2459 - val_loss: 1.7437 - val_mae: 0.9539 - learning_rate: 0.0010\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 1.74373\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.2374 - mae: 0.3073 - val_loss: 1.7937 - val_mae: 0.9899 - learning_rate: 0.0010\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 1.74373 to 1.71489, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0890 - mae: 0.2335 - val_loss: 1.7149 - val_mae: 0.9697 - learning_rate: 0.0010\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 1.71489\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0899 - mae: 0.2347 - val_loss: 1.7174 - val_mae: 0.9741 - learning_rate: 0.0010\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 1.71489\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0941 - mae: 0.2402 - val_loss: 1.7260 - val_mae: 0.9482 - learning_rate: 0.0010\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 1.71489\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0919 - mae: 0.2370 - val_loss: 1.9509 - val_mae: 1.0176 - learning_rate: 0.0010\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 1.71489\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0908 - mae: 0.2360 - val_loss: 1.8997 - val_mae: 1.0309 - learning_rate: 0.0010\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 1.71489\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0868 - mae: 0.2309 - val_loss: 1.9543 - val_mae: 1.0354 - learning_rate: 0.0010\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 1.71489\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0858 - mae: 0.2293 - val_loss: 1.7592 - val_mae: 0.9953 - learning_rate: 0.0010\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 1.71489\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0829 - mae: 0.2252 - val_loss: 1.8744 - val_mae: 1.0047 - learning_rate: 0.0010\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 1.71489 to 1.45810, saving model to models/best_model_full.keras\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0808 - mae: 0.2227 - val_loss: 1.4581 - val_mae: 0.9457 - learning_rate: 0.0010\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0804 - mae: 0.2220 - val_loss: 1.5136 - val_mae: 0.8990 - learning_rate: 0.0010\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.1292 - mae: 0.2482 - val_loss: 1.6419 - val_mae: 0.9627 - learning_rate: 0.0010\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0697 - mae: 0.2062 - val_loss: 1.6339 - val_mae: 0.9348 - learning_rate: 0.0010\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0774 - mae: 0.2184 - val_loss: 1.9076 - val_mae: 1.0283 - learning_rate: 0.0010\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0791 - mae: 0.2201 - val_loss: 1.7533 - val_mae: 0.9825 - learning_rate: 0.0010\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0770 - mae: 0.2166 - val_loss: 1.8261 - val_mae: 0.9760 - learning_rate: 0.0010\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0775 - mae: 0.2182 - val_loss: 1.6002 - val_mae: 0.9529 - learning_rate: 0.0010\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0749 - mae: 0.2144 - val_loss: 1.7012 - val_mae: 0.9610 - learning_rate: 0.0010\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0725 - mae: 0.2108 - val_loss: 1.7720 - val_mae: 0.9985 - learning_rate: 0.0010\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0740 - mae: 0.2132 - val_loss: 1.7960 - val_mae: 0.9898 - learning_rate: 0.0010\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0737 - mae: 0.2121 - val_loss: 1.8296 - val_mae: 0.9902 - learning_rate: 0.0010\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0700 - mae: 0.2073 - val_loss: 1.7200 - val_mae: 0.9775 - learning_rate: 0.0010\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0716 - mae: 0.2094 - val_loss: 1.7659 - val_mae: 0.9892 - learning_rate: 0.0010\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0722 - mae: 0.2092 - val_loss: 1.6503 - val_mae: 0.9429 - learning_rate: 0.0010\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0822 - mae: 0.2081 - val_loss: 1.6897 - val_mae: 0.9779 - learning_rate: 0.0010\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0678 - mae: 0.2035 - val_loss: 1.7281 - val_mae: 0.9958 - learning_rate: 0.0010\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0685 - mae: 0.2051 - val_loss: 1.6721 - val_mae: 0.9414 - learning_rate: 0.0010\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0812 - mae: 0.2171 - val_loss: 1.7331 - val_mae: 0.9797 - learning_rate: 0.0010\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0651 - mae: 0.1999 - val_loss: 1.6891 - val_mae: 0.9903 - learning_rate: 0.0010\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n",
      "\n",
      "Epoch 91: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0666 - mae: 0.2024 - val_loss: 1.6962 - val_mae: 0.9819 - learning_rate: 0.0010\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0222 - mae: 0.1169 - val_loss: 1.5689 - val_mae: 0.9349 - learning_rate: 1.0000e-04\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0182 - mae: 0.1065 - val_loss: 1.6330 - val_mae: 0.9570 - learning_rate: 1.0000e-04\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0171 - mae: 0.1030 - val_loss: 1.5677 - val_mae: 0.9404 - learning_rate: 1.0000e-04\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0160 - mae: 0.0998 - val_loss: 1.6345 - val_mae: 0.9572 - learning_rate: 1.0000e-04\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 1.45810\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0152 - mae: 0.0975 - val_loss: 1.6380 - val_mae: 0.9588 - learning_rate: 1.0000e-04\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 1.45810\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0147 - mae: 0.0957 - val_loss: 1.6082 - val_mae: 0.9507 - learning_rate: 1.0000e-04\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0144 - mae: 0.0945 - val_loss: 1.5705 - val_mae: 0.9426 - learning_rate: 1.0000e-04\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0139 - mae: 0.0932 - val_loss: 1.5710 - val_mae: 0.9367 - learning_rate: 1.0000e-04\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0135 - mae: 0.0919 - val_loss: 1.5851 - val_mae: 0.9408 - learning_rate: 1.0000e-04\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0132 - mae: 0.0908 - val_loss: 1.6310 - val_mae: 0.9554 - learning_rate: 1.0000e-04\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 1.45810\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0130 - mae: 0.0899 - val_loss: 1.5552 - val_mae: 0.9358 - learning_rate: 1.0000e-04\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0128 - mae: 0.0891 - val_loss: 1.5813 - val_mae: 0.9478 - learning_rate: 1.0000e-04\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0125 - mae: 0.0881 - val_loss: 1.5483 - val_mae: 0.9264 - learning_rate: 1.0000e-04\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0122 - mae: 0.0871 - val_loss: 1.5765 - val_mae: 0.9431 - learning_rate: 1.0000e-04\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0122 - mae: 0.0871 - val_loss: 1.5311 - val_mae: 0.9255 - learning_rate: 1.0000e-04\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 1.45810\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0120 - mae: 0.0862 - val_loss: 1.5172 - val_mae: 0.9221 - learning_rate: 1.0000e-04\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0117 - mae: 0.0853 - val_loss: 1.5436 - val_mae: 0.9256 - learning_rate: 1.0000e-04\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0116 - mae: 0.0848 - val_loss: 1.5731 - val_mae: 0.9443 - learning_rate: 1.0000e-04\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0115 - mae: 0.0845 - val_loss: 1.5258 - val_mae: 0.9250 - learning_rate: 1.0000e-04\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n",
      "\n",
      "Epoch 111: val_loss did not improve from 1.45810\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0112 - mae: 0.0837 - val_loss: 1.5953 - val_mae: 0.9513 - learning_rate: 1.0000e-04\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 1.45810\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0092 - mae: 0.0755 - val_loss: 1.5770 - val_mae: 0.9421 - learning_rate: 1.0000e-05\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0090 - mae: 0.0748 - val_loss: 1.5812 - val_mae: 0.9425 - learning_rate: 1.0000e-05\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0089 - mae: 0.0743 - val_loss: 1.5631 - val_mae: 0.9392 - learning_rate: 1.0000e-05\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0089 - mae: 0.0742 - val_loss: 1.5820 - val_mae: 0.9436 - learning_rate: 1.0000e-05\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0088 - mae: 0.0739 - val_loss: 1.5615 - val_mae: 0.9369 - learning_rate: 1.0000e-05\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 1.45810\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0088 - mae: 0.0736 - val_loss: 1.5629 - val_mae: 0.9400 - learning_rate: 1.0000e-05\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 1.45810\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0088 - mae: 0.0737 - val_loss: 1.5703 - val_mae: 0.9412 - learning_rate: 1.0000e-05\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 1.45810\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 1.5605 - val_mae: 0.9367 - learning_rate: 1.0000e-05\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 1.45810\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0087 - mae: 0.0732 - val_loss: 1.5661 - val_mae: 0.9402 - learning_rate: 1.0000e-05\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 1.45810\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0086 - mae: 0.0732 - val_loss: 1.5720 - val_mae: 0.9391 - learning_rate: 1.0000e-05\n",
      "Epoch 121: early stopping\n",
      "Restoring model weights from the end of the best epoch: 71.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 6ms/step\n",
      "Mean positioning error: 1.5153 m\n",
      "Median positioning error: 1.4375 m\n",
      "90th percentile error: 2.6219 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7429.83748,
   "end_time": "2025-07-22T11:36:50.494440",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-22T09:33:00.656960",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
