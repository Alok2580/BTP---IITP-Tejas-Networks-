{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "73f20d4e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-11T13:38:04.647312Z",
     "iopub.status.busy": "2025-07-11T13:38:04.646835Z",
     "iopub.status.idle": "2025-07-11T13:38:06.097357Z",
     "shell.execute_reply": "2025-07-11T13:38:06.096501Z"
    },
    "papermill": {
     "duration": 1.455395,
     "end_time": "2025-07-11T13:38:06.098652",
     "exception": false,
     "start_time": "2025-07-11T13:38:04.643257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4d641885",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T13:38:06.104359Z",
     "iopub.status.busy": "2025-07-11T13:38:06.103622Z",
     "iopub.status.idle": "2025-07-11T13:38:19.732672Z",
     "shell.execute_reply": "2025-07-11T13:38:19.732050Z"
    },
    "papermill": {
     "duration": 13.632869,
     "end_time": "2025-07-11T13:38:19.733993",
     "exception": false,
     "start_time": "2025-07-11T13:38:06.101124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-11 13:38:07.574933: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752241087.752973      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752241087.808089      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0d291794",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T13:38:19.739777Z",
     "iopub.status.busy": "2025-07-11T13:38:19.738913Z",
     "iopub.status.idle": "2025-07-11T13:38:19.743523Z",
     "shell.execute_reply": "2025-07-11T13:38:19.742812Z"
    },
    "papermill": {
     "duration": 0.008408,
     "end_time": "2025-07-11T13:38:19.744674",
     "exception": false,
     "start_time": "2025-07-11T13:38:19.736266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "18cf65ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T13:38:19.749558Z",
     "iopub.status.busy": "2025-07-11T13:38:19.749096Z",
     "iopub.status.idle": "2025-07-11T13:38:19.752096Z",
     "shell.execute_reply": "2025-07-11T13:38:19.751568Z"
    },
    "papermill": {
     "duration": 0.006523,
     "end_time": "2025-07-11T13:38:19.753173",
     "exception": false,
     "start_time": "2025-07-11T13:38:19.746650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-24/(64 24)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-24/(64 24)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "518237f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T13:38:19.758217Z",
     "iopub.status.busy": "2025-07-11T13:38:19.758024Z",
     "iopub.status.idle": "2025-07-11T16:38:37.627061Z",
     "shell.execute_reply": "2025-07-11T16:38:37.626320Z"
    },
    "papermill": {
     "duration": 10817.873354,
     "end_time": "2025-07-11T16:38:37.628362",
     "exception": false,
     "start_time": "2025-07-11T13:38:19.755008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752241119.580962      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1752241128.847674      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1752241139.529383      58 service.cc:148] XLA service 0x7b1d74016540 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1752241139.530195      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1752241143.371747      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 8.39009, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 72.1264 - mae: 5.4745 - val_loss: 8.3901 - val_mae: 2.2343 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 8.39009 to 4.26917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.4349 - mae: 1.9194 - val_loss: 4.2692 - val_mae: 1.5926 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 4.26917 to 1.91361, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.7463 - mae: 1.4108 - val_loss: 1.9136 - val_mae: 1.0647 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 1.91361 to 1.16338, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2850 - mae: 1.0864 - val_loss: 1.1634 - val_mae: 0.8386 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.16338\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3238 - mae: 0.8831 - val_loss: 1.8367 - val_mae: 1.0590 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.16338\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2521 - mae: 1.0560 - val_loss: 2.7229 - val_mae: 1.3034 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.16338 to 0.81098, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8771 - mae: 0.7214 - val_loss: 0.8110 - val_mae: 0.7077 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.81098 to 0.69048, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1937 - mae: 0.7403 - val_loss: 0.6905 - val_mae: 0.6535 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.69048\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3432 - mae: 0.8087 - val_loss: 0.8953 - val_mae: 0.7114 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.69048 to 0.58966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9325 - mae: 0.6848 - val_loss: 0.5897 - val_mae: 0.6094 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.58966 to 0.33882, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5742 - mae: 0.5704 - val_loss: 0.3388 - val_mae: 0.4600 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.33882\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3959 - mae: 0.7364 - val_loss: 0.6280 - val_mae: 0.6151 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.33882\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2882 - mae: 0.7474 - val_loss: 0.5583 - val_mae: 0.5729 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.33882\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5441 - mae: 0.5594 - val_loss: 1.3497 - val_mae: 0.8782 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.33882\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9149 - mae: 0.6405 - val_loss: 0.4262 - val_mae: 0.5157 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.33882\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.4780 - mae: 0.5108 - val_loss: 0.3825 - val_mae: 0.4900 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.33882 to 0.31281, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9638 - mae: 0.6259 - val_loss: 0.3128 - val_mae: 0.4353 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9083 - mae: 0.6283 - val_loss: 0.8380 - val_mae: 0.7037 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7071 - mae: 0.6396 - val_loss: 0.5520 - val_mae: 0.5833 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.31281\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.4732 - mae: 0.5346 - val_loss: 0.3612 - val_mae: 0.4702 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2226 - mae: 0.6996 - val_loss: 0.4723 - val_mae: 0.5367 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3831 - mae: 0.4825 - val_loss: 0.6834 - val_mae: 0.6543 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2349 - mae: 0.6865 - val_loss: 0.4340 - val_mae: 0.5119 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5543 - mae: 0.5491 - val_loss: 0.5283 - val_mae: 0.5450 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1619 - mae: 0.6786 - val_loss: 1.3144 - val_mae: 0.8769 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6905 - mae: 0.5949 - val_loss: 0.4679 - val_mae: 0.5272 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2368 - mae: 0.6841 - val_loss: 0.4660 - val_mae: 0.5379 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7355 - mae: 0.5844 - val_loss: 0.4311 - val_mae: 0.5132 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1110 - mae: 0.6226 - val_loss: 1.7897 - val_mae: 0.9793 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0403 - mae: 0.6717 - val_loss: 0.8195 - val_mae: 0.6942 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9906 - mae: 0.6539 - val_loss: 0.4722 - val_mae: 0.5362 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7176 - mae: 0.7790 - val_loss: 0.5338 - val_mae: 0.5592 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4299 - mae: 0.5077 - val_loss: 0.4783 - val_mae: 0.5493 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3846 - mae: 0.4746 - val_loss: 0.4727 - val_mae: 0.5416 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3690 - mae: 0.8975 - val_loss: 22.5298 - val_mae: 2.6424 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4202 - mae: 0.7673 - val_loss: 1.3062 - val_mae: 0.7684 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4158 - mae: 0.7553 - val_loss: 1.0025 - val_mae: 0.7574 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3737 - mae: 0.4699 - val_loss: 0.8285 - val_mae: 0.4301 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.31281\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2191 - mae: 0.3649 - val_loss: 1.1114 - val_mae: 0.3571 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.31281 to 0.24975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1476 - mae: 0.2992 - val_loss: 0.2497 - val_mae: 0.2908 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.24975 to 0.19053, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1093 - mae: 0.2578 - val_loss: 0.1905 - val_mae: 0.2533 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.19053 to 0.08878, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0860 - mae: 0.2293 - val_loss: 0.0888 - val_mae: 0.2236 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.08878 to 0.07553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0715 - mae: 0.2091 - val_loss: 0.0755 - val_mae: 0.2118 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.07553\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0632 - mae: 0.1965 - val_loss: 0.3111 - val_mae: 0.2005 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.07553 to 0.06765, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0561 - mae: 0.1851 - val_loss: 0.0677 - val_mae: 0.2037 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.06765\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0485 - mae: 0.1723 - val_loss: 0.0760 - val_mae: 0.1738 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.06765 to 0.04904, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0438 - mae: 0.1640 - val_loss: 0.0490 - val_mae: 0.1695 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.04904\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0416 - mae: 0.1595 - val_loss: 0.0491 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.04904 to 0.04100, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0389 - mae: 0.1544 - val_loss: 0.0410 - val_mae: 0.1590 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.04100\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0394 - mae: 0.1555 - val_loss: 0.0412 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.04100\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0368 - mae: 0.1503 - val_loss: 0.0438 - val_mae: 0.1651 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.04100 to 0.03692, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0337 - mae: 0.1440 - val_loss: 0.0369 - val_mae: 0.1507 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.03692 to 0.03653, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0336 - mae: 0.1436 - val_loss: 0.0365 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.03653 to 0.03311, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0302 - mae: 0.1363 - val_loss: 0.0331 - val_mae: 0.1423 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.03311 to 0.02975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0293 - mae: 0.1346 - val_loss: 0.0298 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.02975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0276 - mae: 0.1303 - val_loss: 0.0304 - val_mae: 0.1375 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.02975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0267 - mae: 0.1282 - val_loss: 0.0356 - val_mae: 0.1486 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.02975 to 0.02945, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1260 - val_loss: 0.0294 - val_mae: 0.1336 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.02945 to 0.02736, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0249 - mae: 0.1240 - val_loss: 0.0274 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.02736\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1233 - val_loss: 0.0325 - val_mae: 0.1421 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.02736\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0236 - mae: 0.1209 - val_loss: 0.0358 - val_mae: 0.1487 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.02736\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0234 - mae: 0.1202 - val_loss: 0.0373 - val_mae: 0.1525 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.02736\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0228 - mae: 0.1188 - val_loss: 0.0289 - val_mae: 0.1317 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.02736 to 0.02705, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1177 - val_loss: 0.0270 - val_mae: 0.1281 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.02705\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0233 - mae: 0.1197 - val_loss: 0.0341 - val_mae: 0.1453 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.02705\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0236 - mae: 0.1203 - val_loss: 0.0284 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.02705 to 0.02366, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0217 - mae: 0.1156 - val_loss: 0.0237 - val_mae: 0.1196 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.02366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1177 - val_loss: 0.0278 - val_mae: 0.1301 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.02366 to 0.02098, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0218 - mae: 0.1158 - val_loss: 0.0210 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0217 - mae: 0.1157 - val_loss: 0.0233 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0216 - mae: 0.1152 - val_loss: 0.0250 - val_mae: 0.1241 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1137 - val_loss: 0.0210 - val_mae: 0.1133 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0207 - mae: 0.1127 - val_loss: 0.0217 - val_mae: 0.1151 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1108 - val_loss: 0.0293 - val_mae: 0.1338 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0201 - mae: 0.1112 - val_loss: 0.0237 - val_mae: 0.1203 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0195 - mae: 0.1096 - val_loss: 0.0229 - val_mae: 0.1164 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0205 - mae: 0.1109 - val_loss: 0.0212 - val_mae: 0.1135 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02098\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1091 - val_loss: 0.0344 - val_mae: 0.1397 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.02098 to 0.02061, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1083 - val_loss: 0.0206 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02061\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1095 - val_loss: 0.0559 - val_mae: 0.1297 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.02061\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0205 - mae: 0.1117 - val_loss: 0.0309 - val_mae: 0.1142 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02061\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1091 - val_loss: 0.0295 - val_mae: 0.1335 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.02061 to 0.01977, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0195 - mae: 0.1095 - val_loss: 0.0198 - val_mae: 0.1106 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.01977\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0192 - mae: 0.1086 - val_loss: 0.0228 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.01977\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1094 - val_loss: 0.0256 - val_mae: 0.1256 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.01977 to 0.01903, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0193 - mae: 0.1087 - val_loss: 0.0190 - val_mae: 0.1078 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0192 - mae: 0.1082 - val_loss: 0.0227 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0208 - mae: 0.1123 - val_loss: 0.0218 - val_mae: 0.1166 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0190 - mae: 0.1079 - val_loss: 0.0194 - val_mae: 0.1090 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01903\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0187 - mae: 0.1072 - val_loss: 0.0309 - val_mae: 0.1382 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.01903\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0187 - mae: 0.1072 - val_loss: 0.0196 - val_mae: 0.1096 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1071 - val_loss: 0.0209 - val_mae: 0.1129 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0185 - mae: 0.1067 - val_loss: 0.0209 - val_mae: 0.1125 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1070 - val_loss: 0.0214 - val_mae: 0.1148 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1073 - val_loss: 0.0217 - val_mae: 0.1150 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1070 - val_loss: 0.0233 - val_mae: 0.1201 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1065 - val_loss: 0.0220 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0186 - mae: 0.1067 - val_loss: 0.0220 - val_mae: 0.1058 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1072 - val_loss: 0.0357 - val_mae: 0.1476 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1087 - val_loss: 0.0215 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0193 - mae: 0.1087 - val_loss: 0.0196 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1069 - val_loss: 0.0221 - val_mae: 0.1146 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1069 - val_loss: 0.0214 - val_mae: 0.1145 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0188 - mae: 0.1072 - val_loss: 0.0239 - val_mae: 0.1216 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1069 - val_loss: 0.0218 - val_mae: 0.1118 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01903\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1072 - val_loss: 0.0199 - val_mae: 0.1103 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.01903 to 0.00824, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0066 - mae: 0.0639 - val_loss: 0.0082 - val_mae: 0.0700 - learning_rate: 1.0000e-04\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.00824 to 0.00807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0599 - val_loss: 0.0081 - val_mae: 0.0693 - learning_rate: 1.0000e-04\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.00807 to 0.00787, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0586 - val_loss: 0.0079 - val_mae: 0.0687 - learning_rate: 1.0000e-04\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.00787\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0083 - val_mae: 0.0703 - learning_rate: 1.0000e-04\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.00787 to 0.00766, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0053 - mae: 0.0574 - val_loss: 0.0077 - val_mae: 0.0678 - learning_rate: 1.0000e-04\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.00766 to 0.00764, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0076 - val_mae: 0.0679 - learning_rate: 1.0000e-04\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.00764\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0051 - mae: 0.0566 - val_loss: 0.0077 - val_mae: 0.0678 - learning_rate: 1.0000e-04\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.00764 to 0.00762, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0051 - mae: 0.0563 - val_loss: 0.0076 - val_mae: 0.0677 - learning_rate: 1.0000e-04\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.00762 to 0.00742, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0050 - mae: 0.0560 - val_loss: 0.0074 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0050 - mae: 0.0557 - val_loss: 0.0076 - val_mae: 0.0672 - learning_rate: 1.0000e-04\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0049 - mae: 0.0555 - val_loss: 0.0076 - val_mae: 0.0671 - learning_rate: 1.0000e-04\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0049 - mae: 0.0552 - val_loss: 0.0077 - val_mae: 0.0676 - learning_rate: 1.0000e-04\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0078 - val_mae: 0.0683 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0048 - mae: 0.0549 - val_loss: 0.0077 - val_mae: 0.0675 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0048 - mae: 0.0547 - val_loss: 0.0076 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0076 - val_mae: 0.0671 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0075 - val_mae: 0.0665 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0047 - mae: 0.0541 - val_loss: 0.0076 - val_mae: 0.0671 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0047 - mae: 0.0539 - val_loss: 0.0075 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.00742\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0047 - mae: 0.0538 - val_loss: 0.0075 - val_mae: 0.0667 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.00742 to 0.00734, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0073 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.00734\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0074 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.00734\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0077 - val_mae: 0.0674 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.00734\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0074 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.00734\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0530 - val_loss: 0.0076 - val_mae: 0.0669 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.00734\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0529 - val_loss: 0.0075 - val_mae: 0.0664 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.00734\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0528 - val_loss: 0.0074 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.00734 to 0.00730, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0073 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.00730 to 0.00724, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0072 - val_mae: 0.0653 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0073 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0523 - val_loss: 0.0074 - val_mae: 0.0659 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.00724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0521 - val_loss: 0.0074 - val_mae: 0.0657 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00724\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0519 - val_loss: 0.0075 - val_mae: 0.0662 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss improved from 0.00724 to 0.00721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0519 - val_loss: 0.0072 - val_mae: 0.0647 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.00721\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0518 - val_loss: 0.0073 - val_mae: 0.0651 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.00721\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0517 - val_loss: 0.0073 - val_mae: 0.0653 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.00721\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0516 - val_loss: 0.0074 - val_mae: 0.0661 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00721\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0514 - val_loss: 0.0072 - val_mae: 0.0650 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss improved from 0.00721 to 0.00711, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0513 - val_loss: 0.0071 - val_mae: 0.0646 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0513 - val_loss: 0.0073 - val_mae: 0.0652 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0511 - val_loss: 0.0072 - val_mae: 0.0650 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0509 - val_loss: 0.0073 - val_mae: 0.0651 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0508 - val_loss: 0.0074 - val_mae: 0.0656 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0508 - val_loss: 0.0074 - val_mae: 0.0654 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0072 - val_mae: 0.0646 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0506 - val_loss: 0.0072 - val_mae: 0.0646 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0071 - val_mae: 0.0644 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0073 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0072 - val_mae: 0.0652 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0072 - val_mae: 0.0644 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0501 - val_loss: 0.0073 - val_mae: 0.0643 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0500 - val_loss: 0.0072 - val_mae: 0.0647 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0500 - val_loss: 0.0071 - val_mae: 0.0644 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0498 - val_loss: 0.0072 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00711\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0497 - val_loss: 0.0073 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.00711 to 0.00705, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0496 - val_loss: 0.0070 - val_mae: 0.0640 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00705\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0494 - val_loss: 0.0072 - val_mae: 0.0649 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00705\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0496 - val_loss: 0.0075 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00705\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0494 - val_loss: 0.0073 - val_mae: 0.0651 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss improved from 0.00705 to 0.00654, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.00654 to 0.00654, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0065 - val_mae: 0.0614 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.00654 to 0.00652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0443 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00652\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00652\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.00652 to 0.00646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0065 - val_mae: 0.0611 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0065 - val_mae: 0.0611 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0066 - val_mae: 0.0613 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0066 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0065 - val_mae: 0.0612 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0065 - val_mae: 0.0613 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0437 - val_loss: 0.0065 - val_mae: 0.0611 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.00646 to 0.00646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.00646 to 0.00646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.00646 to 0.00646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00646\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.00646 to 0.00645, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 206: val_loss improved from 0.00645 to 0.00645, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0066 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0066 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00645\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.00645 to 0.00644, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00644\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0066 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0608 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0608 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00644\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss improved from 0.00644 to 0.00643, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0608 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0608 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0066 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0066 - val_mae: 0.0610 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0064 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00643\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0065 - val_mae: 0.0609 - learning_rate: 1.0000e-07\n",
      "Epoch 307: early stopping\n",
      "Restoring model weights from the end of the best epoch: 257.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.0959 m\n",
      "Median positioning error: 0.0867 m\n",
      "90th percentile error: 0.1694 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848035,
     "sourceId": 12441225,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10840.956883,
   "end_time": "2025-07-11T16:38:41.654487",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-11T13:38:00.697604",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
