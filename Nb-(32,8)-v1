{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45f5554d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-07T05:54:06.370332Z",
     "iopub.status.busy": "2025-07-07T05:54:06.370038Z",
     "iopub.status.idle": "2025-07-07T05:54:07.881887Z",
     "shell.execute_reply": "2025-07-07T05:54:07.881069Z"
    },
    "papermill": {
     "duration": 1.516741,
     "end_time": "2025-07-07T05:54:07.883206",
     "exception": false,
     "start_time": "2025-07-07T05:54:06.366465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4f1e2f6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:54:07.888346Z",
     "iopub.status.busy": "2025-07-07T05:54:07.888023Z",
     "iopub.status.idle": "2025-07-07T05:54:24.673412Z",
     "shell.execute_reply": "2025-07-07T05:54:24.672791Z"
    },
    "papermill": {
     "duration": 16.789274,
     "end_time": "2025-07-07T05:54:24.674804",
     "exception": false,
     "start_time": "2025-07-07T05:54:07.885530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-07 05:54:09.987051: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1751867650.226563      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1751867650.293723      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b1c0d790",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:54:24.680827Z",
     "iopub.status.busy": "2025-07-07T05:54:24.679932Z",
     "iopub.status.idle": "2025-07-07T05:54:24.684487Z",
     "shell.execute_reply": "2025-07-07T05:54:24.683942Z"
    },
    "papermill": {
     "duration": 0.008448,
     "end_time": "2025-07-07T05:54:24.685438",
     "exception": false,
     "start_time": "2025-07-07T05:54:24.676990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "29eb923f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:54:24.690335Z",
     "iopub.status.busy": "2025-07-07T05:54:24.689759Z",
     "iopub.status.idle": "2025-07-07T05:54:24.693115Z",
     "shell.execute_reply": "2025-07-07T05:54:24.692416Z"
    },
    "papermill": {
     "duration": 0.00684,
     "end_time": "2025-07-07T05:54:24.694222",
     "exception": false,
     "start_time": "2025-07-07T05:54:24.687382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "831dfe27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T05:54:24.699522Z",
     "iopub.status.busy": "2025-07-07T05:54:24.699290Z",
     "iopub.status.idle": "2025-07-07T09:02:02.702108Z",
     "shell.execute_reply": "2025-07-07T09:02:02.701346Z"
    },
    "papermill": {
     "duration": 11258.007303,
     "end_time": "2025-07-07T09:02:02.703386",
     "exception": false,
     "start_time": "2025-07-07T05:54:24.696083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751867691.001597      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1751867700.496894      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization                  │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)             │               <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                         │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ transformer_encoder_block            │ ?                           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)            │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling1d             │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization                  │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)             │               \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │         \u001b[38;5;34m138,496\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                         │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │           \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)                  │          \u001b[38;5;34m61,952\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ transformer_encoder_block            │ ?                           │         \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)            │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling1d             │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                      │             \u001b[38;5;34m514\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1751867711.378005      57 service.cc:148] XLA service 0x79dee00064d0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1751867711.379411      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1751867715.264442      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 19.72508, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 72.2389 - mae: 5.9598 - val_loss: 19.7251 - val_mae: 3.4591 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 19.72508 to 10.06135, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 11.9105 - mae: 2.6298 - val_loss: 10.0614 - val_mae: 2.4686 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 10.06135 to 2.33331, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.9926 - mae: 1.6892 - val_loss: 2.3333 - val_mae: 1.1878 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 2.33331 to 1.55845, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.7109 - mae: 1.3666 - val_loss: 1.5585 - val_mae: 0.9685 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.55845\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5881 - mae: 0.9379 - val_loss: 22.8397 - val_mae: 3.7514 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.55845 to 0.96773, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.4704 - mae: 1.0758 - val_loss: 0.9677 - val_mae: 0.7614 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.96773\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7291 - mae: 0.9558 - val_loss: 1.0335 - val_mae: 0.7903 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.96773\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6842 - mae: 0.9465 - val_loss: 2.6418 - val_mae: 1.2061 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.96773\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2629 - mae: 0.8640 - val_loss: 1.3688 - val_mae: 0.9269 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.96773\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4095 - mae: 0.8127 - val_loss: 1.0095 - val_mae: 0.7600 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.96773 to 0.69028, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.4764 - mae: 0.8109 - val_loss: 0.6903 - val_mae: 0.6367 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.69028 to 0.59484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.9132 - mae: 0.6854 - val_loss: 0.5948 - val_mae: 0.5891 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.59484\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.9331 - mae: 0.6710 - val_loss: 0.6741 - val_mae: 0.6410 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.59484\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.0564 - mae: 0.9094 - val_loss: 4.0948 - val_mae: 1.5019 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.59484\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8740 - mae: 0.6895 - val_loss: 0.5974 - val_mae: 0.6031 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 0.59484 to 0.50132, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4006 - mae: 0.7842 - val_loss: 0.5013 - val_mae: 0.5498 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.50132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2191 - mae: 0.6981 - val_loss: 0.8041 - val_mae: 0.6916 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.50132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2063 - mae: 0.7110 - val_loss: 37.5674 - val_mae: 4.8226 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.50132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7945 - mae: 0.9395 - val_loss: 2.3115 - val_mae: 1.1732 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.50132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7037 - mae: 0.9089 - val_loss: 0.7039 - val_mae: 0.6517 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.50132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4123 - mae: 0.7786 - val_loss: 0.6544 - val_mae: 0.6265 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.50132\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3481 - mae: 0.7251 - val_loss: 3.7720 - val_mae: 1.3635 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.50132 to 0.42250, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8026 - mae: 0.6693 - val_loss: 0.4225 - val_mae: 0.5078 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6029 - mae: 0.7844 - val_loss: 0.4538 - val_mae: 0.5239 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9012 - mae: 0.8430 - val_loss: 1.6757 - val_mae: 1.0131 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7561 - mae: 0.9091 - val_loss: 2.6651 - val_mae: 1.2390 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2000 - mae: 1.0174 - val_loss: 1.1012 - val_mae: 0.7927 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9021 - mae: 0.7061 - val_loss: 0.8685 - val_mae: 0.7182 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7723 - mae: 0.8323 - val_loss: 0.6825 - val_mae: 0.6413 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1824 - mae: 0.9718 - val_loss: 4.6822 - val_mae: 1.6029 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.0817 - mae: 1.3456 - val_loss: 5.3178 - val_mae: 1.7990 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7618 - mae: 1.1065 - val_loss: 0.9534 - val_mae: 0.7509 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.42250\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.8573 - mae: 0.9013 - val_loss: 0.7880 - val_mae: 0.6853 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8794 - mae: 0.9080 - val_loss: 0.7494 - val_mae: 0.6653 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8411 - mae: 0.8140 - val_loss: 0.7520 - val_mae: 0.6676 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0272 - mae: 0.8168 - val_loss: 1.3387 - val_mae: 0.8938 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.42250\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3866 - mae: 0.8372 - val_loss: 0.5859 - val_mae: 0.5955 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.42250\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1026 - mae: 0.7548 - val_loss: 0.7765 - val_mae: 0.6900 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.42250 to 0.39309, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1113 - mae: 0.6839 - val_loss: 0.3931 - val_mae: 0.4823 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9900 - mae: 0.8031 - val_loss: 1.0005 - val_mae: 0.7663 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6854 - mae: 0.6318 - val_loss: 2.3221 - val_mae: 1.0781 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.3085 - mae: 1.1684 - val_loss: 1.2728 - val_mae: 0.8671 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1822 - mae: 0.7997 - val_loss: 0.8656 - val_mae: 0.7185 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7968 - mae: 1.0499 - val_loss: 13.7820 - val_mae: 2.7666 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4810 - mae: 0.8439 - val_loss: 0.6356 - val_mae: 0.6149 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7714 - mae: 0.9183 - val_loss: 0.9829 - val_mae: 0.7427 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8355 - mae: 0.6766 - val_loss: 0.6572 - val_mae: 0.6400 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0956 - mae: 0.6844 - val_loss: 0.5920 - val_mae: 0.6061 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.3201 - mae: 1.0643 - val_loss: 0.7059 - val_mae: 0.6487 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3907 - mae: 0.7145 - val_loss: 1.7258 - val_mae: 0.9878 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3687 - mae: 0.7536 - val_loss: 0.9493 - val_mae: 0.7661 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9859 - mae: 0.6891 - val_loss: 0.6563 - val_mae: 0.6303 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.39309\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.3277 - mae: 0.8491 - val_loss: 1.4033 - val_mae: 0.8884 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1503 - mae: 0.7482 - val_loss: 0.5226 - val_mae: 0.5574 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3341 - mae: 0.7460 - val_loss: 0.4946 - val_mae: 0.5481 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6847 - mae: 0.8439 - val_loss: 28.7071 - val_mae: 3.9275 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8505 - mae: 1.1983 - val_loss: 1.0841 - val_mae: 0.7994 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.3997 - mae: 1.1920 - val_loss: 0.7938 - val_mae: 0.6883 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.39309\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2679 - mae: 0.7411 - val_loss: 0.5508 - val_mae: 0.5844 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.39309 to 0.22134, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2418 - mae: 0.3810 - val_loss: 0.2213 - val_mae: 0.3665 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.22134 to 0.21611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1860 - mae: 0.3358 - val_loss: 0.2161 - val_mae: 0.3629 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.21611 to 0.14096, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1477 - mae: 0.2998 - val_loss: 0.1410 - val_mae: 0.2947 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.14096 to 0.12622, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1278 - mae: 0.2790 - val_loss: 0.1262 - val_mae: 0.2773 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.12622\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1104 - mae: 0.2597 - val_loss: 0.1264 - val_mae: 0.2791 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.12622 to 0.10065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0993 - mae: 0.2463 - val_loss: 0.1006 - val_mae: 0.2458 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.10065 to 0.09658, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0879 - mae: 0.2320 - val_loss: 0.0966 - val_mae: 0.2425 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.09658 to 0.09604, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0819 - mae: 0.2240 - val_loss: 0.0960 - val_mae: 0.2407 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.09604 to 0.09090, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0762 - mae: 0.2162 - val_loss: 0.0909 - val_mae: 0.2348 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.09090 to 0.07869, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0713 - mae: 0.2095 - val_loss: 0.0787 - val_mae: 0.2180 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.07869 to 0.07760, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0661 - mae: 0.2018 - val_loss: 0.0776 - val_mae: 0.2170 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.07760 to 0.07469, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0621 - mae: 0.1953 - val_loss: 0.0747 - val_mae: 0.2120 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.07469 to 0.06747, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0591 - mae: 0.1907 - val_loss: 0.0675 - val_mae: 0.2017 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.06747\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0561 - mae: 0.1860 - val_loss: 0.0765 - val_mae: 0.2163 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.06747 to 0.06314, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0561 - mae: 0.1857 - val_loss: 0.0631 - val_mae: 0.1950 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.06314\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0548 - mae: 0.1835 - val_loss: 0.0639 - val_mae: 0.1966 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.06314 to 0.06039, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0513 - mae: 0.1780 - val_loss: 0.0604 - val_mae: 0.1906 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.06039\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0495 - mae: 0.1748 - val_loss: 0.0711 - val_mae: 0.2079 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.06039\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0475 - mae: 0.1710 - val_loss: 0.0682 - val_mae: 0.2044 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.06039 to 0.06007, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0455 - mae: 0.1676 - val_loss: 0.0601 - val_mae: 0.1891 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.06007 to 0.05528, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0433 - mae: 0.1634 - val_loss: 0.0553 - val_mae: 0.1811 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.05528\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0417 - mae: 0.1605 - val_loss: 0.0568 - val_mae: 0.1850 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.05528 to 0.05504, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0406 - mae: 0.1582 - val_loss: 0.0550 - val_mae: 0.1814 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.05504 to 0.05037, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0395 - mae: 0.1562 - val_loss: 0.0504 - val_mae: 0.1740 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.05037\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0390 - mae: 0.1552 - val_loss: 0.0517 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.05037 to 0.04991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0380 - mae: 0.1531 - val_loss: 0.0499 - val_mae: 0.1726 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04991\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0371 - mae: 0.1512 - val_loss: 0.0504 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.04991 to 0.04662, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0353 - mae: 0.1477 - val_loss: 0.0466 - val_mae: 0.1656 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.04662 to 0.04462, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0348 - mae: 0.1468 - val_loss: 0.0446 - val_mae: 0.1632 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04462\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0347 - mae: 0.1463 - val_loss: 0.0532 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.04462\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0337 - mae: 0.1441 - val_loss: 0.0488 - val_mae: 0.1708 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04462\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0337 - mae: 0.1442 - val_loss: 0.0462 - val_mae: 0.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04462\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0334 - mae: 0.1433 - val_loss: 0.0471 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.04462 to 0.04120, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0319 - mae: 0.1405 - val_loss: 0.0412 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0320 - mae: 0.1403 - val_loss: 0.0438 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0315 - mae: 0.1393 - val_loss: 0.0431 - val_mae: 0.1606 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0310 - mae: 0.1383 - val_loss: 0.0479 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0309 - mae: 0.1380 - val_loss: 0.0446 - val_mae: 0.1632 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0305 - mae: 0.1374 - val_loss: 0.0449 - val_mae: 0.1629 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04120\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0304 - mae: 0.1368 - val_loss: 0.0447 - val_mae: 0.1645 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0301 - mae: 0.1362 - val_loss: 0.0451 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0296 - mae: 0.1350 - val_loss: 0.0433 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.04120\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0298 - mae: 0.1355 - val_loss: 0.0417 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0296 - mae: 0.1351 - val_loss: 0.0432 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04120\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0295 - mae: 0.1349 - val_loss: 0.0417 - val_mae: 0.1581 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0297 - mae: 0.1334 - val_loss: 0.0475 - val_mae: 0.1695 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0289 - mae: 0.1332 - val_loss: 0.0414 - val_mae: 0.1584 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04120\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0290 - mae: 0.1337 - val_loss: 0.0440 - val_mae: 0.1621 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04120\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0292 - mae: 0.1339 - val_loss: 0.0455 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.04120 to 0.03561, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0288 - mae: 0.1329 - val_loss: 0.0356 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0283 - mae: 0.1323 - val_loss: 0.0421 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0286 - mae: 0.1324 - val_loss: 0.0404 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0281 - mae: 0.1318 - val_loss: 0.0403 - val_mae: 0.1557 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0282 - mae: 0.1315 - val_loss: 0.0381 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03561\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0278 - mae: 0.1309 - val_loss: 0.0399 - val_mae: 0.1557 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0277 - mae: 0.1307 - val_loss: 0.0378 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0280 - mae: 0.1312 - val_loss: 0.0364 - val_mae: 0.1468 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0277 - mae: 0.1303 - val_loss: 0.0406 - val_mae: 0.1570 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03561\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0277 - mae: 0.1303 - val_loss: 0.0394 - val_mae: 0.1542 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0277 - mae: 0.1304 - val_loss: 0.0379 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0274 - mae: 0.1300 - val_loss: 0.0360 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03561\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0272 - mae: 0.1292 - val_loss: 0.0357 - val_mae: 0.1465 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.03561 to 0.03488, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0270 - mae: 0.1288 - val_loss: 0.0349 - val_mae: 0.1454 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03488\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0277 - mae: 0.1303 - val_loss: 0.0386 - val_mae: 0.1528 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03488\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0267 - mae: 0.1281 - val_loss: 0.0447 - val_mae: 0.1631 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03488\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0266 - mae: 0.1280 - val_loss: 0.0399 - val_mae: 0.1565 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.03488 to 0.03391, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0265 - mae: 0.1275 - val_loss: 0.0339 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03391\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0269 - mae: 0.1286 - val_loss: 0.0390 - val_mae: 0.1540 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03391\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1273 - val_loss: 0.0353 - val_mae: 0.1429 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03391\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1266 - val_loss: 0.0347 - val_mae: 0.1457 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03391\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0257 - mae: 0.1257 - val_loss: 0.0424 - val_mae: 0.1589 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03391\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1270 - val_loss: 0.0369 - val_mae: 0.1492 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03391\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0259 - mae: 0.1261 - val_loss: 0.0357 - val_mae: 0.1463 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03391\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1256 - val_loss: 0.0385 - val_mae: 0.1510 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03391\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0255 - mae: 0.1250 - val_loss: 0.0359 - val_mae: 0.1461 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.03391 to 0.03247, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1258 - val_loss: 0.0325 - val_mae: 0.1386 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1256 - val_loss: 0.0327 - val_mae: 0.1399 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0256 - mae: 0.1255 - val_loss: 0.0352 - val_mae: 0.1463 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0254 - mae: 0.1248 - val_loss: 0.0354 - val_mae: 0.1462 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1258 - val_loss: 0.0373 - val_mae: 0.1504 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1263 - val_loss: 0.0390 - val_mae: 0.1543 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1262 - val_loss: 0.0360 - val_mae: 0.1468 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0260 - mae: 0.1260 - val_loss: 0.0382 - val_mae: 0.1503 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1253 - val_loss: 0.0368 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0257 - mae: 0.1255 - val_loss: 0.0350 - val_mae: 0.1454 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0256 - mae: 0.1249 - val_loss: 0.0369 - val_mae: 0.1475 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03247\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0254 - mae: 0.1245 - val_loss: 0.0352 - val_mae: 0.1458 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0255 - mae: 0.1250 - val_loss: 0.0366 - val_mae: 0.1453 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0254 - mae: 0.1241 - val_loss: 0.0370 - val_mae: 0.1479 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.03247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0256 - mae: 0.1249 - val_loss: 0.0336 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.03247\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0255 - mae: 0.1246 - val_loss: 0.0350 - val_mae: 0.1437 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.03247 to 0.03227, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0253 - mae: 0.1239 - val_loss: 0.0323 - val_mae: 0.1397 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0248 - mae: 0.1230 - val_loss: 0.0395 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.03227\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0254 - mae: 0.1240 - val_loss: 0.0344 - val_mae: 0.1445 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.03227\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0249 - mae: 0.1232 - val_loss: 0.0357 - val_mae: 0.1465 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.03227\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0251 - mae: 0.1234 - val_loss: 0.0337 - val_mae: 0.1419 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1237 - val_loss: 0.0343 - val_mae: 0.1421 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1221 - val_loss: 0.0335 - val_mae: 0.1419 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1236 - val_loss: 0.0352 - val_mae: 0.1444 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0252 - mae: 0.1237 - val_loss: 0.0342 - val_mae: 0.1428 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0253 - mae: 0.1245 - val_loss: 0.0337 - val_mae: 0.1435 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0249 - mae: 0.1232 - val_loss: 0.0383 - val_mae: 0.1517 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0252 - mae: 0.1236 - val_loss: 0.0404 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1230 - val_loss: 0.0374 - val_mae: 0.1490 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.03227\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0246 - mae: 0.1223 - val_loss: 0.0407 - val_mae: 0.1545 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1233 - val_loss: 0.0364 - val_mae: 0.1487 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.03227\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1222 - val_loss: 0.0391 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.03227 to 0.03201, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1226 - val_loss: 0.0320 - val_mae: 0.1386 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.03201\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0248 - mae: 0.1228 - val_loss: 0.0386 - val_mae: 0.1519 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.03201\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0246 - mae: 0.1223 - val_loss: 0.0401 - val_mae: 0.1567 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.03201\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0249 - mae: 0.1226 - val_loss: 0.0345 - val_mae: 0.1430 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.03201\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1220 - val_loss: 0.0372 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.03201\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1219 - val_loss: 0.0345 - val_mae: 0.1448 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.03201\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0252 - mae: 0.1238 - val_loss: 0.0360 - val_mae: 0.1456 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.03201 to 0.03113, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1216 - val_loss: 0.0311 - val_mae: 0.1371 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1224 - val_loss: 0.0362 - val_mae: 0.1482 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.03113\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0246 - mae: 0.1224 - val_loss: 0.0322 - val_mae: 0.1394 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.03113\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0250 - mae: 0.1234 - val_loss: 0.0317 - val_mae: 0.1379 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1224 - val_loss: 0.0313 - val_mae: 0.1368 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1223 - val_loss: 0.0347 - val_mae: 0.1445 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1235 - val_loss: 0.0404 - val_mae: 0.1584 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1218 - val_loss: 0.0438 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0248 - mae: 0.1227 - val_loss: 0.0351 - val_mae: 0.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1222 - val_loss: 0.0338 - val_mae: 0.1423 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1223 - val_loss: 0.0348 - val_mae: 0.1440 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.03113\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1230 - val_loss: 0.0346 - val_mae: 0.1448 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.03113 to 0.03097, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1217 - val_loss: 0.0310 - val_mae: 0.1365 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0256 - mae: 0.1248 - val_loss: 0.0334 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1233 - val_loss: 0.0327 - val_mae: 0.1404 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0252 - mae: 0.1239 - val_loss: 0.0343 - val_mae: 0.1440 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1227 - val_loss: 0.0312 - val_mae: 0.1377 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0257 - mae: 0.1247 - val_loss: 0.0328 - val_mae: 0.1411 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1226 - val_loss: 0.0395 - val_mae: 0.1539 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1225 - val_loss: 0.0333 - val_mae: 0.1418 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.03097\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0251 - mae: 0.1235 - val_loss: 0.0424 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1214 - val_loss: 0.0388 - val_mae: 0.1546 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0248 - mae: 0.1228 - val_loss: 0.0395 - val_mae: 0.1552 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.03097\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1229 - val_loss: 0.0321 - val_mae: 0.1381 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.03097 to 0.03020, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0241 - mae: 0.1210 - val_loss: 0.0302 - val_mae: 0.1351 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.03020\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0245 - mae: 0.1221 - val_loss: 0.0333 - val_mae: 0.1421 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1218 - val_loss: 0.0309 - val_mae: 0.1367 - learning_rate: 1.0000e-03\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1234 - val_loss: 0.0368 - val_mae: 0.1492 - learning_rate: 1.0000e-03\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1211 - val_loss: 0.0387 - val_mae: 0.1489 - learning_rate: 1.0000e-03\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.03020\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0245 - mae: 0.1217 - val_loss: 0.0341 - val_mae: 0.1439 - learning_rate: 1.0000e-03\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1222 - val_loss: 0.0351 - val_mae: 0.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1211 - val_loss: 0.0447 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1214 - val_loss: 0.0416 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1214 - val_loss: 0.0349 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1211 - val_loss: 0.0435 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0254 - mae: 0.1156 - val_loss: 0.0366 - val_mae: 0.1494 - learning_rate: 1.0000e-03\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1185 - val_loss: 0.0409 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1221 - val_loss: 0.0348 - val_mae: 0.1447 - learning_rate: 1.0000e-03\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1219 - val_loss: 0.0348 - val_mae: 0.1441 - learning_rate: 1.0000e-03\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1216 - val_loss: 0.0333 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1216 - val_loss: 0.0365 - val_mae: 0.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1205 - val_loss: 0.0308 - val_mae: 0.1373 - learning_rate: 1.0000e-03\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1217 - val_loss: 0.0308 - val_mae: 0.1366 - learning_rate: 1.0000e-03\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0234 - mae: 0.1190 - val_loss: 0.0304 - val_mae: 0.1350 - learning_rate: 1.0000e-03\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.03020\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0239 - mae: 0.1207 - val_loss: 0.0356 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss improved from 0.03020 to 0.01602, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0075 - mae: 0.0675 - val_loss: 0.0160 - val_mae: 0.0961 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss improved from 0.01602 to 0.01533, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0057 - mae: 0.0596 - val_loss: 0.0153 - val_mae: 0.0938 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.01533 to 0.01533, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0051 - mae: 0.0565 - val_loss: 0.0153 - val_mae: 0.0936 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss improved from 0.01533 to 0.01496, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0048 - mae: 0.0545 - val_loss: 0.0150 - val_mae: 0.0926 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01496\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0530 - val_loss: 0.0150 - val_mae: 0.0924 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.01496 to 0.01477, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0519 - val_loss: 0.0148 - val_mae: 0.0917 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss improved from 0.01477 to 0.01473, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0508 - val_loss: 0.0147 - val_mae: 0.0913 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss improved from 0.01473 to 0.01458, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0500 - val_loss: 0.0146 - val_mae: 0.0909 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0492 - val_loss: 0.0147 - val_mae: 0.0915 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.01458 to 0.01453, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0038 - mae: 0.0485 - val_loss: 0.0145 - val_mae: 0.0906 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01453\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0145 - val_mae: 0.0907 - learning_rate: 1.0000e-04\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01453\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0473 - val_loss: 0.0145 - val_mae: 0.0907 - learning_rate: 1.0000e-04\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01453\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0146 - val_mae: 0.0908 - learning_rate: 1.0000e-04\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01453\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0146 - val_mae: 0.0908 - learning_rate: 1.0000e-04\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss improved from 0.01453 to 0.01440, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0144 - val_mae: 0.0901 - learning_rate: 1.0000e-04\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01440\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0452 - val_loss: 0.0145 - val_mae: 0.0903 - learning_rate: 1.0000e-04\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss improved from 0.01440 to 0.01438, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0144 - val_mae: 0.0901 - learning_rate: 1.0000e-04\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss improved from 0.01438 to 0.01432, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0143 - val_mae: 0.0897 - learning_rate: 1.0000e-04\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01432\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0144 - val_mae: 0.0900 - learning_rate: 1.0000e-04\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01432\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0145 - val_mae: 0.0903 - learning_rate: 1.0000e-04\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01432\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0145 - val_mae: 0.0905 - learning_rate: 1.0000e-04\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01432\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0145 - val_mae: 0.0903 - learning_rate: 1.0000e-04\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01432\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0144 - val_mae: 0.0902 - learning_rate: 1.0000e-04\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01432\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0423 - val_loss: 0.0144 - val_mae: 0.0900 - learning_rate: 1.0000e-04\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01432\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0145 - val_mae: 0.0905 - learning_rate: 1.0000e-04\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss improved from 0.01432 to 0.01426, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0143 - val_mae: 0.0895 - learning_rate: 1.0000e-04\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.01426 to 0.01424, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0142 - val_mae: 0.0896 - learning_rate: 1.0000e-04\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0144 - val_mae: 0.0901 - learning_rate: 1.0000e-04\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0408 - val_loss: 0.0143 - val_mae: 0.0897 - learning_rate: 1.0000e-04\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0143 - val_mae: 0.0896 - learning_rate: 1.0000e-04\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0144 - val_mae: 0.0902 - learning_rate: 1.0000e-04\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0400 - val_loss: 0.0145 - val_mae: 0.0902 - learning_rate: 1.0000e-04\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0144 - val_mae: 0.0897 - learning_rate: 1.0000e-04\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0145 - val_mae: 0.0902 - learning_rate: 1.0000e-04\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0392 - val_loss: 0.0145 - val_mae: 0.0901 - learning_rate: 1.0000e-04\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01424\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0144 - val_mae: 0.0901 - learning_rate: 1.0000e-04\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01424\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0143 - val_mae: 0.0895 - learning_rate: 1.0000e-04\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss improved from 0.01424 to 0.01422, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0142 - val_mae: 0.0894 - learning_rate: 1.0000e-04\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0384 - val_loss: 0.0143 - val_mae: 0.0894 - learning_rate: 1.0000e-04\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0144 - val_mae: 0.0896 - learning_rate: 1.0000e-04\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0144 - val_mae: 0.0899 - learning_rate: 1.0000e-04\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0144 - val_mae: 0.0898 - learning_rate: 1.0000e-04\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0375 - val_loss: 0.0144 - val_mae: 0.0896 - learning_rate: 1.0000e-04\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0372 - val_loss: 0.0143 - val_mae: 0.0895 - learning_rate: 1.0000e-04\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0144 - val_mae: 0.0897 - learning_rate: 1.0000e-04\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01422\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0144 - val_mae: 0.0895 - learning_rate: 1.0000e-04\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss improved from 0.01422 to 0.01387, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss improved from 0.01387 to 0.01385, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0305 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-05\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01385\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-05\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01385\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0301 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.01385 to 0.01385, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0300 - val_loss: 0.0138 - val_mae: 0.0874 - learning_rate: 1.0000e-05\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01385\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-05\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.01385 to 0.01384, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0138 - val_mae: 0.0874 - learning_rate: 1.0000e-05\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-05\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0295 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0295 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0294 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0293 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0014 - mae: 0.0293 - val_loss: 0.0140 - val_mae: 0.0878 - learning_rate: 1.0000e-05\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0292 - val_loss: 0.0139 - val_mae: 0.0878 - learning_rate: 1.0000e-05\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0292 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0291 - val_loss: 0.0139 - val_mae: 0.0877 - learning_rate: 1.0000e-05\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0291 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0291 - val_loss: 0.0139 - val_mae: 0.0876 - learning_rate: 1.0000e-05\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0014 - mae: 0.0290 - val_loss: 0.0139 - val_mae: 0.0877 - learning_rate: 1.0000e-05\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0284 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-06\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-06\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.01384\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0875 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.01384\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0139 - val_mae: 0.0874 - learning_rate: 1.0000e-07\n",
      "Epoch 321: early stopping\n",
      "Restoring model weights from the end of the best epoch: 271.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1378 m\n",
      "Median positioning error: 0.1202 m\n",
      "90th percentile error: 0.2515 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11284.379553,
   "end_time": "2025-07-07T09:02:06.306216",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-07T05:54:01.926663",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
