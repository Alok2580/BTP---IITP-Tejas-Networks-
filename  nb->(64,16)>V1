{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "860ac05e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-15T04:40:46.016092Z",
     "iopub.status.busy": "2025-08-15T04:40:46.015503Z",
     "iopub.status.idle": "2025-08-15T04:40:47.549120Z",
     "shell.execute_reply": "2025-08-15T04:40:47.548297Z"
    },
    "papermill": {
     "duration": 1.538731,
     "end_time": "2025-08-15T04:40:47.550482",
     "exception": false,
     "start_time": "2025-08-15T04:40:46.011751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "68e3d09d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:40:47.556048Z",
     "iopub.status.busy": "2025-08-15T04:40:47.555540Z",
     "iopub.status.idle": "2025-08-15T04:41:02.393644Z",
     "shell.execute_reply": "2025-08-15T04:41:02.393028Z"
    },
    "papermill": {
     "duration": 14.842073,
     "end_time": "2025-08-15T04:41:02.395172",
     "exception": false,
     "start_time": "2025-08-15T04:40:47.553099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-15 04:40:49.177923: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755232849.378989      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755232849.434175      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ff7ebaf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:41:02.400850Z",
     "iopub.status.busy": "2025-08-15T04:41:02.400352Z",
     "iopub.status.idle": "2025-08-15T04:41:02.405263Z",
     "shell.execute_reply": "2025-08-15T04:41:02.404467Z"
    },
    "papermill": {
     "duration": 0.008983,
     "end_time": "2025-08-15T04:41:02.406408",
     "exception": false,
     "start_time": "2025-08-15T04:41:02.397425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 13  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "29e2fde8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:41:02.411417Z",
     "iopub.status.busy": "2025-08-15T04:41:02.411211Z",
     "iopub.status.idle": "2025-08-15T04:41:02.414415Z",
     "shell.execute_reply": "2025-08-15T04:41:02.413890Z"
    },
    "papermill": {
     "duration": 0.006738,
     "end_time": "2025-08-15T04:41:02.415426",
     "exception": false,
     "start_time": "2025-08-15T04:41:02.408688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "41bea671",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:41:02.420854Z",
     "iopub.status.busy": "2025-08-15T04:41:02.420603Z",
     "iopub.status.idle": "2025-08-15T07:50:18.180697Z",
     "shell.execute_reply": "2025-08-15T07:50:18.179873Z"
    },
    "papermill": {
     "duration": 11355.764648,
     "end_time": "2025-08-15T07:50:18.181972",
     "exception": false,
     "start_time": "2025-08-15T04:41:02.417324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755232884.653473      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755232894.127568      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">120,064</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,464</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m120,064\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,464\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">711,178</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m711,178\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">710,662</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m710,662\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755232905.169656      58 service.cc:148] XLA service 0x7e35a0006e20 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755232905.170477      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755232909.104075      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 12.25415, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 76.9484 - mae: 6.1023 - val_loss: 12.2542 - val_mae: 2.7032 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 12.25415 to 5.32625, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 10.3767 - mae: 2.4731 - val_loss: 5.3263 - val_mae: 1.7846 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.32625 to 3.43683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 4.3281 - mae: 1.5630 - val_loss: 3.4368 - val_mae: 1.4654 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.43683 to 1.38244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.9765 - mae: 1.0648 - val_loss: 1.3824 - val_mae: 0.9037 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.38244\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.3150 - mae: 1.0378 - val_loss: 1.5783 - val_mae: 0.9885 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.38244 to 0.83111, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.1921 - mae: 0.8163 - val_loss: 0.8311 - val_mae: 0.7242 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.83111\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.1103 - mae: 0.7856 - val_loss: 3.1268 - val_mae: 1.3688 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.83111\n",
      "4375/4375 - 40s - 9ms/step - loss: 4.1164 - mae: 1.4656 - val_loss: 2.6459 - val_mae: 1.2518 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.83111\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.7007 - mae: 0.9879 - val_loss: 0.8705 - val_mae: 0.7320 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.83111 to 0.57177, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.4083 - mae: 0.7967 - val_loss: 0.5718 - val_mae: 0.5981 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.57177\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2939 - mae: 0.7095 - val_loss: 0.7987 - val_mae: 0.6989 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.57177\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.7718 - mae: 0.6589 - val_loss: 0.7757 - val_mae: 0.5546 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.57177 to 0.52762, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.1749 - mae: 0.6946 - val_loss: 0.5276 - val_mae: 0.5661 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.52762\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.0941 - mae: 0.8046 - val_loss: 0.8637 - val_mae: 0.7218 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.52762 to 0.39322, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.5201 - mae: 0.5578 - val_loss: 0.3932 - val_mae: 0.4980 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.39322\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.4313 - mae: 0.7212 - val_loss: 4.3685 - val_mae: 0.7373 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.39322 to 0.35657, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4032 - mae: 0.4940 - val_loss: 0.3566 - val_mae: 0.4120 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.7748 - mae: 0.7550 - val_loss: 0.9363 - val_mae: 0.7485 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3274 - mae: 0.4461 - val_loss: 0.4402 - val_mae: 0.4765 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.4795 - mae: 0.7120 - val_loss: 0.4807 - val_mae: 0.5490 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.8115 - mae: 0.5699 - val_loss: 1.0296 - val_mae: 0.7716 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6262 - mae: 0.5744 - val_loss: 0.5749 - val_mae: 0.4314 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.4441 - mae: 0.6690 - val_loss: 1.1453 - val_mae: 0.8356 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4564 - mae: 0.5232 - val_loss: 0.3635 - val_mae: 0.4831 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.2123 - mae: 0.6650 - val_loss: 0.3979 - val_mae: 0.4956 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.35657\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3340 - mae: 0.4524 - val_loss: 0.4529 - val_mae: 0.5042 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.35657\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2194 - mae: 0.6695 - val_loss: 0.3967 - val_mae: 0.4958 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss improved from 0.35657 to 0.23397, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3203 - mae: 0.4424 - val_loss: 0.2340 - val_mae: 0.3755 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6569 - mae: 0.5617 - val_loss: 4.1386 - val_mae: 1.0100 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.4691 - mae: 0.7678 - val_loss: 0.8469 - val_mae: 0.5499 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4228 - mae: 0.5018 - val_loss: 0.2660 - val_mae: 0.4011 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.7714 - mae: 0.8676 - val_loss: 0.4795 - val_mae: 0.5368 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.23397\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6598 - mae: 0.5810 - val_loss: 0.4167 - val_mae: 0.5081 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.5161 - mae: 0.7498 - val_loss: 0.7861 - val_mae: 0.6240 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4438 - mae: 0.5191 - val_loss: 0.3737 - val_mae: 0.4862 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4516 - mae: 0.5159 - val_loss: 0.3401 - val_mae: 0.4639 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2767 - mae: 0.4097 - val_loss: 0.2630 - val_mae: 0.4078 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.4983 - mae: 0.6029 - val_loss: 3.9115 - val_mae: 1.4054 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6418 - mae: 0.5926 - val_loss: 0.2688 - val_mae: 0.4094 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.23397\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2892 - mae: 0.4202 - val_loss: 0.4529 - val_mae: 0.5368 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.23397 to 0.18824, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.7598 - mae: 0.5406 - val_loss: 0.1882 - val_mae: 0.3409 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.5637 - mae: 0.6911 - val_loss: 0.3996 - val_mae: 0.4972 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3366 - mae: 0.4545 - val_loss: 0.5542 - val_mae: 0.6004 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.9640 - mae: 0.5909 - val_loss: 0.4552 - val_mae: 0.5245 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3518 - mae: 0.4595 - val_loss: 2.3175 - val_mae: 1.0838 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.7974 - mae: 0.5819 - val_loss: 0.4041 - val_mae: 0.4990 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4028 - mae: 0.4736 - val_loss: 0.6681 - val_mae: 0.6272 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3132 - mae: 0.4342 - val_loss: 0.4229 - val_mae: 0.5200 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.7643 - mae: 0.7393 - val_loss: 0.3542 - val_mae: 0.4692 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3278 - mae: 0.4478 - val_loss: 0.3129 - val_mae: 0.4421 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.3129 - mae: 0.7944 - val_loss: 0.6383 - val_mae: 0.6244 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.4414 - mae: 0.5173 - val_loss: 0.5222 - val_mae: 0.5773 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.0474 - mae: 0.8165 - val_loss: 0.5977 - val_mae: 0.6017 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.5549 - mae: 0.6357 - val_loss: 116.8199 - val_mae: 5.8842 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.3008 - mae: 0.7684 - val_loss: 0.4426 - val_mae: 0.5215 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.1497 - mae: 0.5795 - val_loss: 3.5719 - val_mae: 1.3842 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5457 - mae: 0.5585 - val_loss: 0.3058 - val_mae: 0.4359 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.1740 - mae: 0.5948 - val_loss: 1.0912 - val_mae: 0.8041 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.2308 - mae: 0.7228 - val_loss: 3.8946 - val_mae: 1.3820 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.3122 - mae: 0.7757 - val_loss: 8.4171 - val_mae: 2.3430 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2036 - mae: 0.7572 - val_loss: 0.8644 - val_mae: 0.7132 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3305 - mae: 0.4452 - val_loss: 0.2847 - val_mae: 0.4007 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.18824\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2195 - mae: 0.3653 - val_loss: 0.2152 - val_mae: 0.3315 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.18824\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1496 - mae: 0.3034 - val_loss: 0.5173 - val_mae: 0.3029 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.18824 to 0.18529, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1101 - mae: 0.2608 - val_loss: 0.1853 - val_mae: 0.2569 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.18529 to 0.09414, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0896 - mae: 0.2348 - val_loss: 0.0941 - val_mae: 0.2266 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.09414 to 0.09068, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0797 - mae: 0.2214 - val_loss: 0.0907 - val_mae: 0.2204 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.09068\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0691 - mae: 0.2065 - val_loss: 0.1002 - val_mae: 0.2280 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.09068\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0612 - mae: 0.1945 - val_loss: 0.1204 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.09068 to 0.05937, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0554 - mae: 0.1848 - val_loss: 0.0594 - val_mae: 0.1863 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.05937 to 0.05923, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0517 - mae: 0.1786 - val_loss: 0.0592 - val_mae: 0.1898 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.05923 to 0.05059, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0466 - mae: 0.1697 - val_loss: 0.0506 - val_mae: 0.1780 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.05059 to 0.04296, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0425 - mae: 0.1624 - val_loss: 0.0430 - val_mae: 0.1625 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.04296\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0405 - mae: 0.1586 - val_loss: 0.0458 - val_mae: 0.1682 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.04296\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0393 - mae: 0.1558 - val_loss: 0.0433 - val_mae: 0.1629 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.04296 to 0.03902, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0369 - mae: 0.1511 - val_loss: 0.0390 - val_mae: 0.1551 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03902\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0334 - mae: 0.1441 - val_loss: 0.0392 - val_mae: 0.1563 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.03902 to 0.03669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0315 - mae: 0.1400 - val_loss: 0.0367 - val_mae: 0.1508 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.03669 to 0.03225, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0303 - mae: 0.1372 - val_loss: 0.0323 - val_mae: 0.1412 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03225\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0289 - mae: 0.1339 - val_loss: 0.0354 - val_mae: 0.1482 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.03225 to 0.03158, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0282 - mae: 0.1324 - val_loss: 0.0316 - val_mae: 0.1396 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.03158 to 0.02741, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0273 - mae: 0.1302 - val_loss: 0.0274 - val_mae: 0.1301 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.02741 to 0.02730, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0261 - mae: 0.1275 - val_loss: 0.0273 - val_mae: 0.1296 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02730\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0260 - mae: 0.1272 - val_loss: 0.0330 - val_mae: 0.1426 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02730\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0249 - mae: 0.1242 - val_loss: 0.0278 - val_mae: 0.1298 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.02730 to 0.02540, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0244 - mae: 0.1231 - val_loss: 0.0254 - val_mae: 0.1248 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02540\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0239 - mae: 0.1217 - val_loss: 0.0288 - val_mae: 0.1333 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02540\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0234 - mae: 0.1206 - val_loss: 0.0280 - val_mae: 0.1319 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02540\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0230 - mae: 0.1194 - val_loss: 0.0259 - val_mae: 0.1267 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02540\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0225 - mae: 0.1183 - val_loss: 0.0290 - val_mae: 0.1346 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02540\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0225 - mae: 0.1179 - val_loss: 0.0264 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.02540 to 0.02297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0218 - mae: 0.1165 - val_loss: 0.0230 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.02297 to 0.02244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0217 - mae: 0.1161 - val_loss: 0.0224 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0218 - mae: 0.1162 - val_loss: 0.0270 - val_mae: 0.1290 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0214 - mae: 0.1151 - val_loss: 0.0273 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0213 - mae: 0.1150 - val_loss: 0.0280 - val_mae: 0.1309 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0209 - mae: 0.1139 - val_loss: 0.0261 - val_mae: 0.1266 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0202 - mae: 0.1120 - val_loss: 0.0231 - val_mae: 0.1190 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0204 - mae: 0.1124 - val_loss: 0.0271 - val_mae: 0.1308 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02244\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0199 - mae: 0.1111 - val_loss: 0.0263 - val_mae: 0.1280 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0197 - mae: 0.1108 - val_loss: 0.0233 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0199 - mae: 0.1111 - val_loss: 0.0232 - val_mae: 0.1189 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0197 - mae: 0.1105 - val_loss: 0.0228 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0195 - mae: 0.1100 - val_loss: 0.0269 - val_mae: 0.1280 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.02244 to 0.02241, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0193 - mae: 0.1094 - val_loss: 0.0224 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02241\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0194 - mae: 0.1096 - val_loss: 0.0245 - val_mae: 0.1226 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.02241 to 0.02238, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0190 - mae: 0.1087 - val_loss: 0.0224 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02238\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0190 - mae: 0.1086 - val_loss: 0.0275 - val_mae: 0.1297 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.02238 to 0.02216, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0188 - mae: 0.1079 - val_loss: 0.0222 - val_mae: 0.1166 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02216\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0187 - mae: 0.1075 - val_loss: 0.0272 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02216\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0191 - mae: 0.1086 - val_loss: 0.0235 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.02216 to 0.02212, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0188 - mae: 0.1078 - val_loss: 0.0221 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02212\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0184 - mae: 0.1069 - val_loss: 0.0248 - val_mae: 0.1237 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02212\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0184 - mae: 0.1067 - val_loss: 0.0261 - val_mae: 0.1260 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.02212 to 0.02108, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0188 - mae: 0.1078 - val_loss: 0.0211 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02108\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0184 - mae: 0.1066 - val_loss: 0.0222 - val_mae: 0.1172 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0180 - mae: 0.1056 - val_loss: 0.0223 - val_mae: 0.1179 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0185 - mae: 0.1068 - val_loss: 0.0239 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0183 - mae: 0.1063 - val_loss: 0.0228 - val_mae: 0.1184 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0183 - mae: 0.1063 - val_loss: 0.0232 - val_mae: 0.1194 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0181 - mae: 0.1058 - val_loss: 0.0254 - val_mae: 0.1250 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0182 - mae: 0.1059 - val_loss: 0.0295 - val_mae: 0.1345 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0181 - mae: 0.1055 - val_loss: 0.0242 - val_mae: 0.1215 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02108\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0180 - mae: 0.1055 - val_loss: 0.0227 - val_mae: 0.1183 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0179 - mae: 0.1049 - val_loss: 0.0244 - val_mae: 0.1221 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0180 - mae: 0.1051 - val_loss: 0.0218 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02108\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0180 - mae: 0.1056 - val_loss: 0.0238 - val_mae: 0.1212 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02108\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0180 - mae: 0.1052 - val_loss: 0.0221 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.02108 to 0.01952, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0179 - mae: 0.1052 - val_loss: 0.0195 - val_mae: 0.1085 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0181 - mae: 0.1056 - val_loss: 0.0238 - val_mae: 0.1204 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0175 - mae: 0.1039 - val_loss: 0.0255 - val_mae: 0.1246 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0179 - mae: 0.1050 - val_loss: 0.0240 - val_mae: 0.1212 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0176 - mae: 0.1042 - val_loss: 0.0203 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01952\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0179 - mae: 0.1050 - val_loss: 0.0223 - val_mae: 0.1168 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01952\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0176 - mae: 0.1041 - val_loss: 0.0204 - val_mae: 0.1121 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0179 - mae: 0.1051 - val_loss: 0.0211 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0177 - mae: 0.1042 - val_loss: 0.0212 - val_mae: 0.1137 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0180 - mae: 0.1051 - val_loss: 0.0203 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0176 - mae: 0.1040 - val_loss: 0.0261 - val_mae: 0.1271 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0180 - mae: 0.1051 - val_loss: 0.0222 - val_mae: 0.1160 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01952\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0178 - mae: 0.1044 - val_loss: 0.0211 - val_mae: 0.1138 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01952\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0179 - mae: 0.1049 - val_loss: 0.0242 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0181 - mae: 0.1052 - val_loss: 0.0223 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01952\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0177 - mae: 0.1042 - val_loss: 0.0218 - val_mae: 0.1160 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01952\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0178 - mae: 0.1045 - val_loss: 0.0295 - val_mae: 0.1341 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0179 - mae: 0.1047 - val_loss: 0.0278 - val_mae: 0.1301 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0184 - mae: 0.1061 - val_loss: 0.0233 - val_mae: 0.1194 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01952\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0176 - mae: 0.1039 - val_loss: 0.0249 - val_mae: 0.1229 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01952\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0182 - mae: 0.1057 - val_loss: 0.0208 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.01952 to 0.01059, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0063 - mae: 0.0626 - val_loss: 0.0106 - val_mae: 0.0799 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.01059 to 0.01018, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0102 - val_mae: 0.0786 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01018\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0052 - mae: 0.0573 - val_loss: 0.0103 - val_mae: 0.0789 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01018\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0051 - mae: 0.0564 - val_loss: 0.0102 - val_mae: 0.0789 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.01018 to 0.00986, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0049 - mae: 0.0557 - val_loss: 0.0099 - val_mae: 0.0771 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00986\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0048 - mae: 0.0551 - val_loss: 0.0100 - val_mae: 0.0774 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00986\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0047 - mae: 0.0547 - val_loss: 0.0099 - val_mae: 0.0776 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.00986 to 0.00982, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0047 - mae: 0.0542 - val_loss: 0.0098 - val_mae: 0.0769 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.00982 to 0.00974, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0046 - mae: 0.0540 - val_loss: 0.0097 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00974\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0099 - val_mae: 0.0771 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00974\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0045 - mae: 0.0533 - val_loss: 0.0098 - val_mae: 0.0769 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00974\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0099 - val_mae: 0.0774 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00974\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0044 - mae: 0.0528 - val_loss: 0.0097 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00974\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0099 - val_mae: 0.0776 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00974\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0044 - mae: 0.0523 - val_loss: 0.0098 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.00974 to 0.00965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0043 - mae: 0.0522 - val_loss: 0.0097 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0043 - mae: 0.0519 - val_loss: 0.0098 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0043 - mae: 0.0518 - val_loss: 0.0098 - val_mae: 0.0770 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0042 - mae: 0.0516 - val_loss: 0.0098 - val_mae: 0.0766 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0042 - mae: 0.0513 - val_loss: 0.0099 - val_mae: 0.0770 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0042 - mae: 0.0511 - val_loss: 0.0097 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0041 - mae: 0.0511 - val_loss: 0.0098 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0041 - mae: 0.0509 - val_loss: 0.0099 - val_mae: 0.0771 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0041 - mae: 0.0506 - val_loss: 0.0100 - val_mae: 0.0777 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0101 - val_mae: 0.0782 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0040 - mae: 0.0504 - val_loss: 0.0102 - val_mae: 0.0785 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0097 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00965\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0040 - mae: 0.0501 - val_loss: 0.0098 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00965\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0040 - mae: 0.0498 - val_loss: 0.0098 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.00965 to 0.00926, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0093 - val_mae: 0.0744 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.00926 to 0.00921, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0451 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00921\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0450 - val_loss: 0.0092 - val_mae: 0.0743 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00921\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss improved from 0.00921 to 0.00920, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0092 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.00920 to 0.00919, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0092 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0092 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0447 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0447 - val_loss: 0.0092 - val_mae: 0.0743 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0092 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0445 - val_loss: 0.0092 - val_mae: 0.0743 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0445 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0445 - val_loss: 0.0092 - val_mae: 0.0743 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0445 - val_loss: 0.0092 - val_mae: 0.0743 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0092 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00919\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0092 - val_mae: 0.0743 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00919\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0092 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.00919 to 0.00917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.00917 to 0.00917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00917\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00917\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00917\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00917\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00917\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00917\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss improved from 0.00917 to 0.00917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00917\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00917\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss improved from 0.00917 to 0.00916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.00916 to 0.00916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss improved from 0.00916 to 0.00916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss improved from 0.00916 to 0.00916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.00916 to 0.00916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00916\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00916\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0092 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 278: early stopping\n",
      "Restoring model weights from the end of the best epoch: 228.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1168 m\n",
      "Median positioning error: 0.1057 m\n",
      "90th percentile error: 0.2069 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11380.390969,
   "end_time": "2025-08-15T07:50:22.170273",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-15T04:40:41.779304",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
