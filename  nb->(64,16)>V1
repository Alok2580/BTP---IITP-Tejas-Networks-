{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "166ccffd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T13:57:50.152319Z",
     "iopub.status.busy": "2025-08-07T13:57:50.151664Z",
     "iopub.status.idle": "2025-08-07T13:57:51.637316Z",
     "shell.execute_reply": "2025-08-07T13:57:51.636479Z"
    },
    "papermill": {
     "duration": 1.490468,
     "end_time": "2025-08-07T13:57:51.638572",
     "exception": false,
     "start_time": "2025-08-07T13:57:50.148104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0ee00129",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:57:51.643985Z",
     "iopub.status.busy": "2025-08-07T13:57:51.643640Z",
     "iopub.status.idle": "2025-08-07T13:58:05.687824Z",
     "shell.execute_reply": "2025-08-07T13:58:05.687012Z"
    },
    "papermill": {
     "duration": 14.048275,
     "end_time": "2025-08-07T13:58:05.689317",
     "exception": false,
     "start_time": "2025-08-07T13:57:51.641042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 13:57:53.084657: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754575073.266403      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754575073.320865      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f42f109",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:05.694931Z",
     "iopub.status.busy": "2025-08-07T13:58:05.694084Z",
     "iopub.status.idle": "2025-08-07T13:58:05.698726Z",
     "shell.execute_reply": "2025-08-07T13:58:05.698041Z"
    },
    "papermill": {
     "duration": 0.00839,
     "end_time": "2025-08-07T13:58:05.699894",
     "exception": false,
     "start_time": "2025-08-07T13:58:05.691504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 7  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc9504cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:05.704577Z",
     "iopub.status.busy": "2025-08-07T13:58:05.704167Z",
     "iopub.status.idle": "2025-08-07T13:58:05.707223Z",
     "shell.execute_reply": "2025-08-07T13:58:05.706689Z"
    },
    "papermill": {
     "duration": 0.006489,
     "end_time": "2025-08-07T13:58:05.708274",
     "exception": false,
     "start_time": "2025-08-07T13:58:05.701785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d837311c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:05.713202Z",
     "iopub.status.busy": "2025-08-07T13:58:05.712804Z",
     "iopub.status.idle": "2025-08-07T18:49:28.052061Z",
     "shell.execute_reply": "2025-08-07T18:49:28.051218Z"
    },
    "papermill": {
     "duration": 17482.343284,
     "end_time": "2025-08-07T18:49:28.053352",
     "exception": false,
     "start_time": "2025-08-07T13:58:05.710068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754575109.732297      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754575119.453207      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">330,122</span> (1.26 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m330,122\u001b[0m (1.26 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">329,862</span> (1.26 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m329,862\u001b[0m (1.26 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754575134.142928      56 service.cc:148] XLA service 0x79cc18002220 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754575134.143879      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754575138.391292      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 478.03845, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 489.7119 - mae: 17.5594 - val_loss: 478.0385 - val_mae: 17.3777 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss did not improve from 478.03845\n",
      "4375/4375 - 40s - 9ms/step - loss: 485.5428 - mae: 17.5074 - val_loss: 478.9076 - val_mae: 17.3873 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 478.03845\n",
      "4375/4375 - 41s - 9ms/step - loss: 484.8820 - mae: 17.4946 - val_loss: 481.7730 - val_mae: 17.4176 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 478.03845\n",
      "4375/4375 - 41s - 9ms/step - loss: 484.9103 - mae: 17.4914 - val_loss: 478.8547 - val_mae: 17.3825 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 478.03845\n",
      "4375/4375 - 41s - 9ms/step - loss: 484.6765 - mae: 17.4932 - val_loss: 481.2214 - val_mae: 17.4128 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 478.03845 to 127.24739, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 219.7985 - mae: 11.6499 - val_loss: 127.2474 - val_mae: 9.2898 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 127.24739\n",
      "4375/4375 - 40s - 9ms/step - loss: 133.0603 - mae: 9.4742 - val_loss: 151.7327 - val_mae: 10.0922 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 127.24739 to 101.13056, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 128.9574 - mae: 9.2994 - val_loss: 101.1306 - val_mae: 8.1350 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 117.3968 - mae: 8.7373 - val_loss: 107.9140 - val_mae: 8.3788 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 174.9986 - mae: 10.4219 - val_loss: 153.5051 - val_mae: 9.8559 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 158.4671 - mae: 10.1493 - val_loss: 190.7033 - val_mae: 11.2058 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 148.3127 - mae: 9.7892 - val_loss: 112.4371 - val_mae: 8.5234 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 136.7612 - mae: 9.2795 - val_loss: 983.2406 - val_mae: 22.4402 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 251.3198 - mae: 12.4562 - val_loss: 245.5534 - val_mae: 12.7470 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 193.1975 - mae: 11.1258 - val_loss: 183.8609 - val_mae: 10.9107 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 166.0621 - mae: 10.2878 - val_loss: 185.2377 - val_mae: 10.6037 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 159.4556 - mae: 10.0711 - val_loss: 314.0693 - val_mae: 14.1482 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 156.9858 - mae: 10.1300 - val_loss: 269.3716 - val_mae: 12.6618 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 158.6901 - mae: 10.2243 - val_loss: 198.6764 - val_mae: 11.3052 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 159.9691 - mae: 10.2410 - val_loss: 142.6793 - val_mae: 9.6167 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 101.13056\n",
      "4375/4375 - 39s - 9ms/step - loss: 208.3457 - mae: 11.3433 - val_loss: 323.7269 - val_mae: 13.8911 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 237.9188 - mae: 12.2542 - val_loss: 168.2300 - val_mae: 10.5053 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 162.3730 - mae: 10.3747 - val_loss: 145.6944 - val_mae: 9.8244 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 144.8938 - mae: 9.7573 - val_loss: 146.0889 - val_mae: 9.8701 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 141.2264 - mae: 9.5630 - val_loss: 127.4073 - val_mae: 9.1285 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 143.4235 - mae: 9.5940 - val_loss: 183.1713 - val_mae: 10.8756 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 135.7902 - mae: 9.3763 - val_loss: 111.1622 - val_mae: 8.5003 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 28: val_loss did not improve from 101.13056\n",
      "4375/4375 - 40s - 9ms/step - loss: 147.2178 - mae: 9.6967 - val_loss: 140.2347 - val_mae: 9.5304 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 101.13056 to 97.99580, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 106.4272 - mae: 8.3618 - val_loss: 97.9958 - val_mae: 7.9968 - learning_rate: 1.0000e-03\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 97.99580 to 89.47066, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 95.9039 - mae: 7.9046 - val_loss: 89.4707 - val_mae: 7.5363 - learning_rate: 1.0000e-03\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss improved from 89.47066 to 84.29638, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 88.1203 - mae: 7.4946 - val_loss: 84.2964 - val_mae: 7.2555 - learning_rate: 1.0000e-03\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss improved from 84.29638 to 73.66945, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 79.1921 - mae: 7.0084 - val_loss: 73.6694 - val_mae: 6.7434 - learning_rate: 1.0000e-03\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss improved from 73.66945 to 66.51585, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 68.7282 - mae: 6.4743 - val_loss: 66.5159 - val_mae: 6.3234 - learning_rate: 1.0000e-03\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss improved from 66.51585 to 63.07146, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 64.2949 - mae: 6.2143 - val_loss: 63.0715 - val_mae: 6.0931 - learning_rate: 1.0000e-03\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss improved from 63.07146 to 55.79336, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 57.4869 - mae: 5.8523 - val_loss: 55.7934 - val_mae: 5.7148 - learning_rate: 1.0000e-03\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 55.79336 to 52.62077, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 52.3081 - mae: 5.5564 - val_loss: 52.6208 - val_mae: 5.4752 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss improved from 52.62077 to 48.01405, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 47.6746 - mae: 5.2897 - val_loss: 48.0140 - val_mae: 5.2250 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss improved from 48.01405 to 41.67269, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 40.9165 - mae: 4.8536 - val_loss: 41.6727 - val_mae: 4.7301 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 41.67269 to 38.30470, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 34.8656 - mae: 4.4538 - val_loss: 38.3047 - val_mae: 4.5265 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 38.30470 to 31.26835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 29.5215 - mae: 4.0790 - val_loss: 31.2684 - val_mae: 4.0424 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 31.26835 to 26.24652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 26.3449 - mae: 3.8192 - val_loss: 26.2465 - val_mae: 3.7118 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 26.24652 to 24.79866, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 24.2711 - mae: 3.6473 - val_loss: 24.7987 - val_mae: 3.6337 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 24.79866 to 23.42070, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 23.1221 - mae: 3.5196 - val_loss: 23.4207 - val_mae: 3.4567 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 23.42070 to 21.24691, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 18.9264 - mae: 3.2049 - val_loss: 21.2469 - val_mae: 3.3839 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 21.24691 to 17.25276, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 16.1808 - mae: 2.9866 - val_loss: 17.2528 - val_mae: 2.9780 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 17.25276 to 14.59881, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 14.1151 - mae: 2.7978 - val_loss: 14.5988 - val_mae: 2.7656 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 14.59881 to 13.22387, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 11.7181 - mae: 2.5611 - val_loss: 13.2239 - val_mae: 2.5949 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 13.22387 to 10.44584, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 9.9740 - mae: 2.3620 - val_loss: 10.4458 - val_mae: 2.2940 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 10.44584\n",
      "4375/4375 - 40s - 9ms/step - loss: 8.8655 - mae: 2.2134 - val_loss: 13.5846 - val_mae: 2.6046 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 10.44584 to 8.65838, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 7.7163 - mae: 2.0713 - val_loss: 8.6584 - val_mae: 2.0572 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 8.65838 to 7.81143, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 7.1494 - mae: 1.9810 - val_loss: 7.8114 - val_mae: 1.9716 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 7.81143 to 7.45038, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 6.1392 - mae: 1.8433 - val_loss: 7.4504 - val_mae: 1.8518 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 7.45038\n",
      "4375/4375 - 40s - 9ms/step - loss: 5.4364 - mae: 1.7421 - val_loss: 9.5499 - val_mae: 2.0660 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 7.45038 to 5.63605, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 4.7641 - mae: 1.6305 - val_loss: 5.6360 - val_mae: 1.6401 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 5.63605\n",
      "4375/4375 - 40s - 9ms/step - loss: 4.2139 - mae: 1.5382 - val_loss: 6.7887 - val_mae: 1.6461 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 5.63605 to 5.32731, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 4.3346 - mae: 1.5236 - val_loss: 5.3273 - val_mae: 1.5402 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 5.32731\n",
      "4375/4375 - 41s - 9ms/step - loss: 3.9638 - mae: 1.4622 - val_loss: 5.7308 - val_mae: 1.6378 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 5.32731 to 4.08575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 3.2489 - mae: 1.3496 - val_loss: 4.0858 - val_mae: 1.4458 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 4.08575\n",
      "4375/4375 - 42s - 10ms/step - loss: 3.5727 - mae: 1.3490 - val_loss: 4.6843 - val_mae: 1.4402 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 4.08575 to 3.60726, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 3.0106 - mae: 1.2827 - val_loss: 3.6073 - val_mae: 1.2487 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 3.60726 to 2.79958, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.5684 - mae: 1.1837 - val_loss: 2.7996 - val_mae: 1.1413 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 2.79958 to 2.40621, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.0558 - mae: 1.0799 - val_loss: 2.4062 - val_mae: 1.0767 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 2.40621\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.7994 - mae: 1.0162 - val_loss: 2.4818 - val_mae: 1.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 2.40621 to 2.21354, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.6431 - mae: 0.9705 - val_loss: 2.2135 - val_mae: 1.0161 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 2.21354\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.5732 - mae: 0.9241 - val_loss: 2.2443 - val_mae: 0.9525 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 2.21354\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.3551 - mae: 0.8667 - val_loss: 2.5745 - val_mae: 0.9152 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 2.21354\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2459 - mae: 0.8277 - val_loss: 11.2926 - val_mae: 2.0215 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 2.21354 to 1.89395, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.2923 - mae: 0.8406 - val_loss: 1.8939 - val_mae: 0.8341 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 1.89395 to 1.52684, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.0334 - mae: 0.7652 - val_loss: 1.5268 - val_mae: 0.7726 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 1.52684\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.0774 - mae: 0.7581 - val_loss: 1.5922 - val_mae: 0.8196 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 1.52684\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.9217 - mae: 0.7102 - val_loss: 1.8391 - val_mae: 0.9151 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 1.52684 to 1.12727, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.8086 - mae: 0.6818 - val_loss: 1.1273 - val_mae: 0.7216 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 1.12727 to 0.72664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.7130 - mae: 0.6445 - val_loss: 0.7266 - val_mae: 0.6059 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.72664\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6605 - mae: 0.6167 - val_loss: 0.7397 - val_mae: 0.5872 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.72664 to 0.67166, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.7970 - mae: 0.6468 - val_loss: 0.6717 - val_mae: 0.5667 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.67166 to 0.53743, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5532 - mae: 0.5686 - val_loss: 0.5374 - val_mae: 0.5497 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.53743\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4782 - mae: 0.5330 - val_loss: 0.5398 - val_mae: 0.5329 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.53743\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.2973 - mae: 0.7420 - val_loss: 0.7838 - val_mae: 0.6439 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.53743\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6525 - mae: 0.6002 - val_loss: 0.6915 - val_mae: 0.5995 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.53743\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4873 - mae: 0.5335 - val_loss: 0.5816 - val_mae: 0.5060 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.53743\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4344 - mae: 0.4958 - val_loss: 0.6645 - val_mae: 0.5398 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.53743 to 0.37877, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3972 - mae: 0.4818 - val_loss: 0.3788 - val_mae: 0.4649 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.37877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5805 - mae: 0.4887 - val_loss: 0.4738 - val_mae: 0.4543 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.37877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4186 - mae: 0.4728 - val_loss: 0.4505 - val_mae: 0.4694 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.37877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3271 - mae: 0.4393 - val_loss: 0.5136 - val_mae: 0.4859 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.37877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3377 - mae: 0.4380 - val_loss: 0.6335 - val_mae: 0.5300 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.37877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2768 - mae: 0.4061 - val_loss: 0.4218 - val_mae: 0.4576 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.37877 to 0.34067, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3371 - mae: 0.4275 - val_loss: 0.3407 - val_mae: 0.4017 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.34067\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4335 - mae: 0.4446 - val_loss: 0.3525 - val_mae: 0.3968 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.34067 to 0.25366, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2469 - mae: 0.3832 - val_loss: 0.2537 - val_mae: 0.3778 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.25366\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2346 - mae: 0.3755 - val_loss: 1.3404 - val_mae: 0.6854 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.25366\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5130 - mae: 0.4553 - val_loss: 0.3147 - val_mae: 0.4210 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.25366 to 0.20285, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2227 - mae: 0.3646 - val_loss: 0.2029 - val_mae: 0.3466 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.20285\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2055 - mae: 0.3516 - val_loss: 0.2556 - val_mae: 0.3810 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.20285\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2010 - mae: 0.3476 - val_loss: 0.2381 - val_mae: 0.3640 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.20285\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1916 - mae: 0.3383 - val_loss: 0.2091 - val_mae: 0.3524 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.20285\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3046 - mae: 0.3558 - val_loss: 0.2256 - val_mae: 0.3626 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.20285 to 0.16044, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1572 - mae: 0.3078 - val_loss: 0.1604 - val_mae: 0.2942 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.16044\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2149 - mae: 0.3410 - val_loss: 0.2496 - val_mae: 0.3385 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.16044\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1538 - mae: 0.3026 - val_loss: 0.1836 - val_mae: 0.3104 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.16044 to 0.15620, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1536 - mae: 0.3043 - val_loss: 0.1562 - val_mae: 0.3016 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.15620\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1753 - mae: 0.3133 - val_loss: 0.1582 - val_mae: 0.2970 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.15620\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1427 - mae: 0.2923 - val_loss: 0.1888 - val_mae: 0.3322 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.15620\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3453 - mae: 0.3450 - val_loss: 0.2269 - val_mae: 0.3429 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.15620 to 0.14676, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1341 - mae: 0.2831 - val_loss: 0.1468 - val_mae: 0.2693 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.14676 to 0.14520, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1241 - mae: 0.2747 - val_loss: 0.1452 - val_mae: 0.2943 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.14520 to 0.11319, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1285 - mae: 0.2795 - val_loss: 0.1132 - val_mae: 0.2505 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.11319\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1269 - mae: 0.2765 - val_loss: 0.1575 - val_mae: 0.2861 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.11319\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1207 - mae: 0.2696 - val_loss: 0.1179 - val_mae: 0.2653 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.11319\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1777 - mae: 0.2952 - val_loss: 0.1383 - val_mae: 0.2903 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.11319\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0979 - mae: 0.2441 - val_loss: 0.1308 - val_mae: 0.2738 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.11319\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2147 - mae: 0.3107 - val_loss: 0.1350 - val_mae: 0.2871 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.11319\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1077 - mae: 0.2552 - val_loss: 0.1334 - val_mae: 0.2774 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.11319\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1119 - mae: 0.2601 - val_loss: 0.1497 - val_mae: 0.2926 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.11319 to 0.10166, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1353 - mae: 0.2623 - val_loss: 0.1017 - val_mae: 0.2458 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.10166\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1020 - mae: 0.2491 - val_loss: 0.1079 - val_mae: 0.2535 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.10166\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1053 - mae: 0.2522 - val_loss: 0.1428 - val_mae: 0.2541 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.10166\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1615 - mae: 0.2798 - val_loss: 0.1259 - val_mae: 0.2585 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.10166 to 0.09557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0900 - mae: 0.2331 - val_loss: 0.0956 - val_mae: 0.2354 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1024 - mae: 0.2475 - val_loss: 0.1216 - val_mae: 0.2470 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0957 - mae: 0.2408 - val_loss: 0.1281 - val_mae: 0.2817 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0946 - mae: 0.2393 - val_loss: 0.0968 - val_mae: 0.2408 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0947 - mae: 0.2389 - val_loss: 0.0979 - val_mae: 0.2413 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2481 - mae: 0.2895 - val_loss: 0.1194 - val_mae: 0.2616 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0821 - mae: 0.2222 - val_loss: 0.1021 - val_mae: 0.2183 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0871 - mae: 0.2297 - val_loss: 0.1135 - val_mae: 0.2553 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0928 - mae: 0.2344 - val_loss: 0.0965 - val_mae: 0.2379 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.09557\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1362 - mae: 0.2567 - val_loss: 0.1127 - val_mae: 0.2376 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.09557\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0927 - mae: 0.2251 - val_loss: 0.6511 - val_mae: 0.6105 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.09557\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0842 - mae: 0.2238 - val_loss: 0.1307 - val_mae: 0.2425 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.09557 to 0.08921, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0856 - mae: 0.2276 - val_loss: 0.0892 - val_mae: 0.2323 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.08921\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0857 - mae: 0.2268 - val_loss: 0.1063 - val_mae: 0.2393 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.08921 to 0.08024, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1617 - mae: 0.2664 - val_loss: 0.0802 - val_mae: 0.2125 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0733 - mae: 0.2114 - val_loss: 0.0872 - val_mae: 0.2245 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0851 - mae: 0.2256 - val_loss: 0.1027 - val_mae: 0.2226 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1366 - mae: 0.2570 - val_loss: 0.0854 - val_mae: 0.2243 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3125 - mae: 0.3160 - val_loss: 0.1079 - val_mae: 0.2518 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0832 - mae: 0.2245 - val_loss: 0.0964 - val_mae: 0.2414 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1232 - mae: 0.2452 - val_loss: 0.0810 - val_mae: 0.2188 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0759 - mae: 0.2136 - val_loss: 0.0820 - val_mae: 0.2177 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0808 - mae: 0.2215 - val_loss: 0.1160 - val_mae: 0.2578 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.08024\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0814 - mae: 0.2223 - val_loss: 0.0817 - val_mae: 0.2203 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.08024 to 0.07393, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0796 - mae: 0.2141 - val_loss: 0.0739 - val_mae: 0.2125 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.07393\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0762 - mae: 0.2148 - val_loss: 0.1105 - val_mae: 0.2575 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.07393\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1061 - mae: 0.2290 - val_loss: 0.2568 - val_mae: 0.3335 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.07393\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0893 - mae: 0.2215 - val_loss: 0.0792 - val_mae: 0.2218 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.07393\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0706 - mae: 0.2073 - val_loss: 0.0929 - val_mae: 0.2398 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.07393\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0722 - mae: 0.2094 - val_loss: 0.0845 - val_mae: 0.2279 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.07393 to 0.07215, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1088 - mae: 0.2360 - val_loss: 0.0722 - val_mae: 0.2081 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.07215\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1738 - mae: 0.2714 - val_loss: 0.0782 - val_mae: 0.2170 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.07215\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0718 - mae: 0.2077 - val_loss: 0.0969 - val_mae: 0.2438 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.07215\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0754 - mae: 0.2134 - val_loss: 0.1011 - val_mae: 0.2458 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.07215 to 0.06785, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0716 - mae: 0.2083 - val_loss: 0.0679 - val_mae: 0.2037 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.06785\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0722 - mae: 0.2085 - val_loss: 0.0693 - val_mae: 0.1951 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.06785\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0698 - mae: 0.2054 - val_loss: 0.0705 - val_mae: 0.2067 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.06785\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0693 - mae: 0.2041 - val_loss: 0.0902 - val_mae: 0.2232 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.06785 to 0.06262, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0675 - mae: 0.2002 - val_loss: 0.0626 - val_mae: 0.1960 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.06262\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0659 - mae: 0.2001 - val_loss: 0.0701 - val_mae: 0.2086 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.06262\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0654 - mae: 0.1990 - val_loss: 0.0691 - val_mae: 0.2021 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.06262\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0639 - mae: 0.1968 - val_loss: 0.0786 - val_mae: 0.2189 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.06262 to 0.06134, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0644 - mae: 0.1972 - val_loss: 0.0613 - val_mae: 0.1948 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.06134\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6173 - mae: 0.2381 - val_loss: 2.8485 - val_mae: 1.1246 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.06134\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1807 - mae: 0.3010 - val_loss: 0.0825 - val_mae: 0.2220 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.06134\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0667 - mae: 0.2013 - val_loss: 0.0669 - val_mae: 0.1981 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.06134\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0661 - mae: 0.2005 - val_loss: 0.0723 - val_mae: 0.2098 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss improved from 0.06134 to 0.05850, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0640 - mae: 0.1971 - val_loss: 0.0585 - val_mae: 0.1855 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0658 - mae: 0.1984 - val_loss: 0.1525 - val_mae: 0.2908 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0620 - mae: 0.1925 - val_loss: 0.0654 - val_mae: 0.1992 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0622 - mae: 0.1940 - val_loss: 0.0752 - val_mae: 0.2132 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1181 - mae: 0.2278 - val_loss: 0.0856 - val_mae: 0.2299 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0558 - mae: 0.1848 - val_loss: 0.0636 - val_mae: 0.1978 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0592 - mae: 0.1894 - val_loss: 0.0630 - val_mae: 0.1954 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0624 - mae: 0.1945 - val_loss: 0.0838 - val_mae: 0.2215 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0596 - mae: 0.1898 - val_loss: 0.0839 - val_mae: 0.2303 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0599 - mae: 0.1895 - val_loss: 0.0617 - val_mae: 0.1895 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1389 - mae: 0.2453 - val_loss: 0.0598 - val_mae: 0.1894 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0521 - mae: 0.1786 - val_loss: 0.0617 - val_mae: 0.1919 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0592 - mae: 0.1895 - val_loss: 0.0754 - val_mae: 0.2145 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2233 - mae: 0.2704 - val_loss: 0.1040 - val_mae: 0.2491 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0689 - mae: 0.2034 - val_loss: 0.0679 - val_mae: 0.2037 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0608 - mae: 0.1895 - val_loss: 0.0629 - val_mae: 0.1962 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0595 - mae: 0.1897 - val_loss: 0.0792 - val_mae: 0.2159 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0621 - mae: 0.1932 - val_loss: 0.0651 - val_mae: 0.2014 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.05850\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2845 - mae: 0.2531 - val_loss: 0.0958 - val_mae: 0.2377 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.05850\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0688 - mae: 0.2021 - val_loss: 0.0602 - val_mae: 0.1906 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.05850 to 0.05298, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0554 - mae: 0.1837 - val_loss: 0.0530 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.05298\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0610 - mae: 0.1918 - val_loss: 0.1021 - val_mae: 0.2461 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.05298\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0607 - mae: 0.1915 - val_loss: 0.0685 - val_mae: 0.2034 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.05298\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0597 - mae: 0.1896 - val_loss: 0.0966 - val_mae: 0.2454 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.05298\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0867 - mae: 0.2052 - val_loss: 0.0624 - val_mae: 0.1950 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.05298 to 0.04671, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0486 - mae: 0.1718 - val_loss: 0.0467 - val_mae: 0.1695 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.04671\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0573 - mae: 0.1854 - val_loss: 0.0672 - val_mae: 0.2019 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.04671\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0603 - mae: 0.1879 - val_loss: 0.0467 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.04671\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0730 - mae: 0.1972 - val_loss: 0.0726 - val_mae: 0.2100 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04671\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0491 - mae: 0.1731 - val_loss: 0.0669 - val_mae: 0.2000 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04671\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0546 - mae: 0.1818 - val_loss: 0.0687 - val_mae: 0.1990 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04671\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0566 - mae: 0.1842 - val_loss: 0.0533 - val_mae: 0.1809 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.04671 to 0.04571, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0567 - mae: 0.1850 - val_loss: 0.0457 - val_mae: 0.1660 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.04571\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0543 - mae: 0.1812 - val_loss: 0.0675 - val_mae: 0.2037 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.04571 to 0.03934, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0708 - mae: 0.1900 - val_loss: 0.0393 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.03934\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0434 - mae: 0.1627 - val_loss: 0.0494 - val_mae: 0.1750 - learning_rate: 1.0000e-03\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.03934\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0564 - mae: 0.1826 - val_loss: 0.0657 - val_mae: 0.1979 - learning_rate: 1.0000e-03\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.03934\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0532 - mae: 0.1795 - val_loss: 0.0704 - val_mae: 0.2082 - learning_rate: 1.0000e-03\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.03934\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0545 - mae: 0.1817 - val_loss: 0.0461 - val_mae: 0.1678 - learning_rate: 1.0000e-03\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.03934\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0521 - mae: 0.1773 - val_loss: 0.0624 - val_mae: 0.1952 - learning_rate: 1.0000e-03\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.03934\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0530 - mae: 0.1787 - val_loss: 0.0587 - val_mae: 0.1891 - learning_rate: 1.0000e-03\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.03934\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0591 - mae: 0.1833 - val_loss: 0.0508 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.03934\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0452 - mae: 0.1660 - val_loss: 0.0510 - val_mae: 0.1781 - learning_rate: 1.0000e-03\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.03934\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2895 - mae: 0.2264 - val_loss: 0.0952 - val_mae: 0.2046 - learning_rate: 1.0000e-03\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.03934 to 0.03877, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0755 - mae: 0.1745 - val_loss: 0.0388 - val_mae: 0.1538 - learning_rate: 1.0000e-03\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0475 - mae: 0.1700 - val_loss: 0.0495 - val_mae: 0.1741 - learning_rate: 1.0000e-03\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0537 - mae: 0.1803 - val_loss: 0.0731 - val_mae: 0.2021 - learning_rate: 1.0000e-03\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0524 - mae: 0.1786 - val_loss: 0.0552 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.03877\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0509 - mae: 0.1759 - val_loss: 0.0589 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.03877\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0524 - mae: 0.1772 - val_loss: 0.0522 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0527 - mae: 0.1777 - val_loss: 0.0521 - val_mae: 0.1810 - learning_rate: 1.0000e-03\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0490 - mae: 0.1724 - val_loss: 0.0481 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0805 - mae: 0.1967 - val_loss: 0.0410 - val_mae: 0.1573 - learning_rate: 1.0000e-03\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0479 - mae: 0.1703 - val_loss: 0.0639 - val_mae: 0.1944 - learning_rate: 1.0000e-03\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.03877\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0519 - mae: 0.1759 - val_loss: 0.0502 - val_mae: 0.1730 - learning_rate: 1.0000e-03\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0497 - mae: 0.1732 - val_loss: 0.0464 - val_mae: 0.1676 - learning_rate: 1.0000e-03\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0526 - mae: 0.1705 - val_loss: 0.0527 - val_mae: 0.1798 - learning_rate: 1.0000e-03\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0939 - mae: 0.1938 - val_loss: 0.0595 - val_mae: 0.1892 - learning_rate: 1.0000e-03\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0421 - mae: 0.1600 - val_loss: 0.0585 - val_mae: 0.1897 - learning_rate: 1.0000e-03\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0506 - mae: 0.1750 - val_loss: 0.0617 - val_mae: 0.1927 - learning_rate: 1.0000e-03\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0495 - mae: 0.1731 - val_loss: 0.0669 - val_mae: 0.1968 - learning_rate: 1.0000e-03\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.03877\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0544 - mae: 0.1773 - val_loss: 0.1823 - val_mae: 0.2417 - learning_rate: 1.0000e-03\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0453 - mae: 0.1649 - val_loss: 0.0499 - val_mae: 0.1759 - learning_rate: 1.0000e-03\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0476 - mae: 0.1699 - val_loss: 0.0468 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.03877\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1269 - mae: 0.1915 - val_loss: 0.0594 - val_mae: 0.1887 - learning_rate: 1.0000e-03\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss improved from 0.03877 to 0.03190, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0351 - mae: 0.1428 - val_loss: 0.0319 - val_mae: 0.1374 - learning_rate: 1.0000e-04\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss improved from 0.03190 to 0.02336, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0240 - mae: 0.1201 - val_loss: 0.0234 - val_mae: 0.1177 - learning_rate: 1.0000e-04\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss improved from 0.02336 to 0.01885, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0172 - mae: 0.1025 - val_loss: 0.0189 - val_mae: 0.1057 - learning_rate: 1.0000e-04\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss improved from 0.01885 to 0.01733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0138 - mae: 0.0921 - val_loss: 0.0173 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss improved from 0.01733 to 0.01565, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0120 - mae: 0.0863 - val_loss: 0.0157 - val_mae: 0.0964 - learning_rate: 1.0000e-04\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss improved from 0.01565 to 0.01465, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0110 - mae: 0.0828 - val_loss: 0.0146 - val_mae: 0.0935 - learning_rate: 1.0000e-04\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss improved from 0.01465 to 0.01424, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0103 - mae: 0.0799 - val_loss: 0.0142 - val_mae: 0.0916 - learning_rate: 1.0000e-04\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss improved from 0.01424 to 0.01400, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0098 - mae: 0.0780 - val_loss: 0.0140 - val_mae: 0.0909 - learning_rate: 1.0000e-04\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss improved from 0.01400 to 0.01394, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0093 - mae: 0.0762 - val_loss: 0.0139 - val_mae: 0.0906 - learning_rate: 1.0000e-04\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss improved from 0.01394 to 0.01347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0090 - mae: 0.0749 - val_loss: 0.0135 - val_mae: 0.0892 - learning_rate: 1.0000e-04\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01347\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0140 - val_mae: 0.0906 - learning_rate: 1.0000e-04\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01347\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0084 - mae: 0.0726 - val_loss: 0.0135 - val_mae: 0.0896 - learning_rate: 1.0000e-04\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.01347 to 0.01254, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0083 - mae: 0.0719 - val_loss: 0.0125 - val_mae: 0.0860 - learning_rate: 1.0000e-04\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01254\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0081 - mae: 0.0708 - val_loss: 0.0126 - val_mae: 0.0864 - learning_rate: 1.0000e-04\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.01254 to 0.01228, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0079 - mae: 0.0701 - val_loss: 0.0123 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01228\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0132 - val_mae: 0.0883 - learning_rate: 1.0000e-04\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01228\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0129 - val_mae: 0.0873 - learning_rate: 1.0000e-04\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01228\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0124 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss improved from 0.01228 to 0.01195, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0120 - val_mae: 0.0835 - learning_rate: 1.0000e-04\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss improved from 0.01195 to 0.01192, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0072 - mae: 0.0671 - val_loss: 0.0119 - val_mae: 0.0836 - learning_rate: 1.0000e-04\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss improved from 0.01192 to 0.01164, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0071 - mae: 0.0667 - val_loss: 0.0116 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01164\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0118 - val_mae: 0.0831 - learning_rate: 1.0000e-04\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01164\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0069 - mae: 0.0658 - val_loss: 0.0121 - val_mae: 0.0843 - learning_rate: 1.0000e-04\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01164\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0068 - mae: 0.0654 - val_loss: 0.0118 - val_mae: 0.0835 - learning_rate: 1.0000e-04\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss improved from 0.01164 to 0.01139, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0067 - mae: 0.0649 - val_loss: 0.0114 - val_mae: 0.0815 - learning_rate: 1.0000e-04\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01139\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0067 - mae: 0.0645 - val_loss: 0.0124 - val_mae: 0.0857 - learning_rate: 1.0000e-04\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01139\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0066 - mae: 0.0642 - val_loss: 0.0116 - val_mae: 0.0824 - learning_rate: 1.0000e-04\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01139\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0065 - mae: 0.0638 - val_loss: 0.0115 - val_mae: 0.0823 - learning_rate: 1.0000e-04\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01139\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0064 - mae: 0.0633 - val_loss: 0.0118 - val_mae: 0.0831 - learning_rate: 1.0000e-04\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01139\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0064 - mae: 0.0631 - val_loss: 0.0119 - val_mae: 0.0833 - learning_rate: 1.0000e-04\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01139\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0063 - mae: 0.0629 - val_loss: 0.0115 - val_mae: 0.0819 - learning_rate: 1.0000e-04\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01139\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0063 - mae: 0.0627 - val_loss: 0.0115 - val_mae: 0.0823 - learning_rate: 1.0000e-04\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01139\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0062 - mae: 0.0622 - val_loss: 0.0117 - val_mae: 0.0828 - learning_rate: 1.0000e-04\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01139\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0061 - mae: 0.0619 - val_loss: 0.0115 - val_mae: 0.0818 - learning_rate: 1.0000e-04\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss improved from 0.01139 to 0.01128, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0061 - mae: 0.0617 - val_loss: 0.0113 - val_mae: 0.0810 - learning_rate: 1.0000e-04\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01128\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0060 - mae: 0.0615 - val_loss: 0.0115 - val_mae: 0.0817 - learning_rate: 1.0000e-04\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01128\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0060 - mae: 0.0610 - val_loss: 0.0115 - val_mae: 0.0820 - learning_rate: 1.0000e-04\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01128\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0059 - mae: 0.0608 - val_loss: 0.0113 - val_mae: 0.0815 - learning_rate: 1.0000e-04\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.01128 to 0.01103, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0059 - mae: 0.0608 - val_loss: 0.0110 - val_mae: 0.0801 - learning_rate: 1.0000e-04\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01103\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0113 - val_mae: 0.0814 - learning_rate: 1.0000e-04\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01103\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0601 - val_loss: 0.0113 - val_mae: 0.0809 - learning_rate: 1.0000e-04\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01103\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0600 - val_loss: 0.0113 - val_mae: 0.0811 - learning_rate: 1.0000e-04\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss improved from 0.01103 to 0.01100, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0057 - mae: 0.0599 - val_loss: 0.0110 - val_mae: 0.0799 - learning_rate: 1.0000e-04\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01100\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0057 - mae: 0.0595 - val_loss: 0.0113 - val_mae: 0.0809 - learning_rate: 1.0000e-04\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01100\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0056 - mae: 0.0594 - val_loss: 0.0115 - val_mae: 0.0818 - learning_rate: 1.0000e-04\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01100\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0056 - mae: 0.0593 - val_loss: 0.0112 - val_mae: 0.0807 - learning_rate: 1.0000e-04\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01100\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0055 - mae: 0.0589 - val_loss: 0.0116 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01100\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0112 - val_mae: 0.0809 - learning_rate: 1.0000e-04\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01100\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0055 - mae: 0.0585 - val_loss: 0.0111 - val_mae: 0.0804 - learning_rate: 1.0000e-04\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01100\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0054 - mae: 0.0583 - val_loss: 0.0116 - val_mae: 0.0813 - learning_rate: 1.0000e-04\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss improved from 0.01100 to 0.01096, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0054 - mae: 0.0583 - val_loss: 0.0110 - val_mae: 0.0793 - learning_rate: 1.0000e-04\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0114 - val_mae: 0.0804 - learning_rate: 1.0000e-04\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0110 - val_mae: 0.0798 - learning_rate: 1.0000e-04\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0110 - val_mae: 0.0794 - learning_rate: 1.0000e-04\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0053 - mae: 0.0575 - val_loss: 0.0115 - val_mae: 0.0819 - learning_rate: 1.0000e-04\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0053 - mae: 0.0575 - val_loss: 0.0111 - val_mae: 0.0799 - learning_rate: 1.0000e-04\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0113 - val_mae: 0.0805 - learning_rate: 1.0000e-04\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0110 - val_mae: 0.0800 - learning_rate: 1.0000e-04\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01096\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0112 - val_mae: 0.0809 - learning_rate: 1.0000e-04\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss improved from 0.01096 to 0.00969, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0037 - mae: 0.0481 - val_loss: 0.0097 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00969\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0036 - mae: 0.0474 - val_loss: 0.0097 - val_mae: 0.0744 - learning_rate: 1.0000e-05\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss improved from 0.00969 to 0.00966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0036 - mae: 0.0472 - val_loss: 0.0097 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00966\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0036 - mae: 0.0471 - val_loss: 0.0097 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss improved from 0.00966 to 0.00965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0096 - val_mae: 0.0739 - learning_rate: 1.0000e-05\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00965\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0035 - mae: 0.0469 - val_loss: 0.0097 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00965\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0097 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00965\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0035 - mae: 0.0467 - val_loss: 0.0097 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0097 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0097 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0097 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0097 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0097 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0097 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00965\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0035 - mae: 0.0464 - val_loss: 0.0097 - val_mae: 0.0739 - learning_rate: 1.0000e-05\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0464 - val_loss: 0.0097 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0463 - val_loss: 0.0097 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0097 - val_mae: 0.0739 - learning_rate: 1.0000e-05\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0097 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0097 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00965\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0097 - val_mae: 0.0742 - learning_rate: 1.0000e-05\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss improved from 0.00965 to 0.00964, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-06\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss improved from 0.00964 to 0.00961, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0452 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss improved from 0.00961 to 0.00959, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00959\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss improved from 0.00959 to 0.00957, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-06\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-06\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00957\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.00957\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.00957\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-06\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.00957\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.00957\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.00957\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.00957\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-06\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss improved from 0.00957 to 0.00956, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.00956\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0450 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.00956\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0450 - val_loss: 0.0097 - val_mae: 0.0737 - learning_rate: 1.0000e-06\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0450 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-06\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.00956\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.00956\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.00956\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0734 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.00956\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.00956\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss improved from 0.00956 to 0.00956, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.00956\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 384/1000\n",
      "\n",
      "Epoch 384: val_loss improved from 0.00956 to 0.00955, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0095 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 385/1000\n",
      "\n",
      "Epoch 385: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 386/1000\n",
      "\n",
      "Epoch 386: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 387/1000\n",
      "\n",
      "Epoch 387: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 388/1000\n",
      "\n",
      "Epoch 388: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 389/1000\n",
      "\n",
      "Epoch 389: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 390/1000\n",
      "\n",
      "Epoch 390: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 391/1000\n",
      "\n",
      "Epoch 391: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 392/1000\n",
      "\n",
      "Epoch 392: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 393/1000\n",
      "\n",
      "Epoch 393: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 394/1000\n",
      "\n",
      "Epoch 394: val_loss did not improve from 0.00955\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 395/1000\n",
      "\n",
      "Epoch 395: val_loss did not improve from 0.00955\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 396/1000\n",
      "\n",
      "Epoch 396: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 397/1000\n",
      "\n",
      "Epoch 397: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 398/1000\n",
      "\n",
      "Epoch 398: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 399/1000\n",
      "\n",
      "Epoch 399: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 400/1000\n",
      "\n",
      "Epoch 400: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 401/1000\n",
      "\n",
      "Epoch 401: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 402/1000\n",
      "\n",
      "Epoch 402: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 403/1000\n",
      "\n",
      "Epoch 403: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 404/1000\n",
      "\n",
      "Epoch 404: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 405/1000\n",
      "\n",
      "Epoch 405: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 406/1000\n",
      "\n",
      "Epoch 406: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 407/1000\n",
      "\n",
      "Epoch 407: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 408/1000\n",
      "\n",
      "Epoch 408: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 409/1000\n",
      "\n",
      "Epoch 409: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0734 - learning_rate: 1.0000e-07\n",
      "Epoch 410/1000\n",
      "\n",
      "Epoch 410: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 411/1000\n",
      "\n",
      "Epoch 411: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 412/1000\n",
      "\n",
      "Epoch 412: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 413/1000\n",
      "\n",
      "Epoch 413: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 414/1000\n",
      "\n",
      "Epoch 414: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 415/1000\n",
      "\n",
      "Epoch 415: val_loss did not improve from 0.00955\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 416/1000\n",
      "\n",
      "Epoch 416: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 417/1000\n",
      "\n",
      "Epoch 417: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 418/1000\n",
      "\n",
      "Epoch 418: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 419/1000\n",
      "\n",
      "Epoch 419: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 420/1000\n",
      "\n",
      "Epoch 420: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 421/1000\n",
      "\n",
      "Epoch 421: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 422/1000\n",
      "\n",
      "Epoch 422: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 423/1000\n",
      "\n",
      "Epoch 423: val_loss did not improve from 0.00955\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 424/1000\n",
      "\n",
      "Epoch 424: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 425/1000\n",
      "\n",
      "Epoch 425: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0097 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 426/1000\n",
      "\n",
      "Epoch 426: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 427/1000\n",
      "\n",
      "Epoch 427: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 428/1000\n",
      "\n",
      "Epoch 428: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 429/1000\n",
      "\n",
      "Epoch 429: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0097 - val_mae: 0.0738 - learning_rate: 1.0000e-07\n",
      "Epoch 430/1000\n",
      "\n",
      "Epoch 430: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0735 - learning_rate: 1.0000e-07\n",
      "Epoch 431/1000\n",
      "\n",
      "Epoch 431: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 432/1000\n",
      "\n",
      "Epoch 432: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 433/1000\n",
      "\n",
      "Epoch 433: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0736 - learning_rate: 1.0000e-07\n",
      "Epoch 434/1000\n",
      "\n",
      "Epoch 434: val_loss did not improve from 0.00955\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0096 - val_mae: 0.0737 - learning_rate: 1.0000e-07\n",
      "Epoch 434: early stopping\n",
      "Restoring model weights from the end of the best epoch: 384.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 6ms/step\n",
      "Mean positioning error: 0.1159 m\n",
      "Median positioning error: 0.1019 m\n",
      "90th percentile error: 0.2078 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17505.586984,
   "end_time": "2025-08-07T18:49:31.666799",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T13:57:46.079815",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
