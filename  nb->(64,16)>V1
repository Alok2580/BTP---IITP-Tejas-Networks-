{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f4ed773b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-28T15:51:46.251370Z",
     "iopub.status.busy": "2025-08-28T15:51:46.251104Z",
     "iopub.status.idle": "2025-08-28T15:51:47.834937Z",
     "shell.execute_reply": "2025-08-28T15:51:47.834086Z"
    },
    "papermill": {
     "duration": 1.588702,
     "end_time": "2025-08-28T15:51:47.836444",
     "exception": false,
     "start_time": "2025-08-28T15:51:46.247742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a8002e9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T15:51:47.842203Z",
     "iopub.status.busy": "2025-08-28T15:51:47.841888Z",
     "iopub.status.idle": "2025-08-28T15:52:04.186402Z",
     "shell.execute_reply": "2025-08-28T15:52:04.185561Z"
    },
    "papermill": {
     "duration": 16.348807,
     "end_time": "2025-08-28T15:52:04.187920",
     "exception": false,
     "start_time": "2025-08-28T15:51:47.839113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-28 15:51:49.824781: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756396310.056513      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756396310.123905      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb227d1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T15:52:04.193493Z",
     "iopub.status.busy": "2025-08-28T15:52:04.193011Z",
     "iopub.status.idle": "2025-08-28T15:52:04.197345Z",
     "shell.execute_reply": "2025-08-28T15:52:04.196860Z"
    },
    "papermill": {
     "duration": 0.00826,
     "end_time": "2025-08-28T15:52:04.198465",
     "exception": false,
     "start_time": "2025-08-28T15:52:04.190205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 7  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "638a2e15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T15:52:04.203343Z",
     "iopub.status.busy": "2025-08-28T15:52:04.203157Z",
     "iopub.status.idle": "2025-08-28T15:52:04.206171Z",
     "shell.execute_reply": "2025-08-28T15:52:04.205678Z"
    },
    "papermill": {
     "duration": 0.0065,
     "end_time": "2025-08-28T15:52:04.207100",
     "exception": false,
     "start_time": "2025-08-28T15:52:04.200600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9b71030a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-28T15:52:04.212319Z",
     "iopub.status.busy": "2025-08-28T15:52:04.212135Z",
     "iopub.status.idle": "2025-08-28T19:34:20.022649Z",
     "shell.execute_reply": "2025-08-28T19:34:20.021808Z"
    },
    "papermill": {
     "duration": 13335.815033,
     "end_time": "2025-08-28T19:34:20.023967",
     "exception": false,
     "start_time": "2025-08-28T15:52:04.208934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1756396347.285284      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1756396356.783139      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">64,768</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">64,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m64,768\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m64,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">657,418</span> (2.51 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m657,418\u001b[0m (2.51 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">656,902</span> (2.51 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m656,902\u001b[0m (2.51 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1756396367.662147      58 service.cc:148] XLA service 0x7aaf100172a0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1756396367.663106      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1756396371.229619      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 36.20981, saving model to models/best_model_full.keras\n",
      "4375/4375 - 48s - 11ms/step - loss: 76.6661 - mae: 6.5559 - val_loss: 36.2098 - val_mae: 4.6984 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 36.20981 to 11.93096, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 21.2016 - mae: 3.5548 - val_loss: 11.9310 - val_mae: 2.6673 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 11.93096 to 8.00498, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 13.3666 - mae: 2.7829 - val_loss: 8.0050 - val_mae: 2.1775 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 8.00498 to 3.35147, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.9408 - mae: 1.9416 - val_loss: 3.3515 - val_mae: 1.4242 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 3.35147\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1097 - mae: 1.3089 - val_loss: 11.5541 - val_mae: 2.4882 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 3.35147 to 2.54915, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.4504 - mae: 1.2914 - val_loss: 2.5491 - val_mae: 1.2545 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 2.54915 to 0.95171, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0867 - mae: 1.0743 - val_loss: 0.9517 - val_mae: 0.7576 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.95171 to 0.70057, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5716 - mae: 0.8968 - val_loss: 0.7006 - val_mae: 0.6433 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.70057 to 0.52395, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6525 - mae: 0.8545 - val_loss: 0.5240 - val_mae: 0.5624 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.52395 to 0.50009, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5328 - mae: 0.8309 - val_loss: 0.5001 - val_mae: 0.5559 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9075 - mae: 0.7059 - val_loss: 0.5824 - val_mae: 0.6000 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1908 - mae: 0.7545 - val_loss: 0.8390 - val_mae: 0.7115 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.8759 - mae: 1.4004 - val_loss: 12.6386 - val_mae: 2.7441 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.50009\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.1975 - mae: 1.0242 - val_loss: 7.1700 - val_mae: 1.8416 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1178 - mae: 1.0060 - val_loss: 0.6863 - val_mae: 0.6450 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5927 - mae: 0.8748 - val_loss: 5.4579 - val_mae: 1.4854 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9017 - mae: 0.6879 - val_loss: 0.6208 - val_mae: 0.6048 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0714 - mae: 0.6623 - val_loss: 0.5158 - val_mae: 0.5634 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.50009\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6096 - mae: 0.7558 - val_loss: 1.0349 - val_mae: 0.7629 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.50009\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1955 - mae: 0.6994 - val_loss: 0.5430 - val_mae: 0.5905 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.50009 to 0.46394, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.8398 - mae: 0.6239 - val_loss: 0.4639 - val_mae: 0.5346 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.46394\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.4705 - mae: 0.6677 - val_loss: 2.3471 - val_mae: 1.1479 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.46394\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.6505 - mae: 0.6072 - val_loss: 0.4667 - val_mae: 0.5326 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss improved from 0.46394 to 0.43611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1744 - mae: 0.8106 - val_loss: 0.4361 - val_mae: 0.5065 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.43611\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4734 - mae: 0.5244 - val_loss: 2.3703 - val_mae: 1.0119 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.43611\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7260 - mae: 0.9911 - val_loss: 0.4718 - val_mae: 0.5350 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.43611 to 0.43224, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1090 - mae: 0.7185 - val_loss: 0.4322 - val_mae: 0.5106 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.43224\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8631 - mae: 0.6335 - val_loss: 0.7154 - val_mae: 0.6502 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.43224 to 0.33683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4304 - mae: 0.7360 - val_loss: 0.3368 - val_mae: 0.4566 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6560 - mae: 0.8300 - val_loss: 1.7217 - val_mae: 1.0136 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0478 - mae: 0.7419 - val_loss: 0.4750 - val_mae: 0.5307 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6852 - mae: 0.5749 - val_loss: 0.7058 - val_mae: 0.6464 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6893 - mae: 0.7754 - val_loss: 0.3953 - val_mae: 0.4897 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8975 - mae: 0.8989 - val_loss: 1.1917 - val_mae: 0.8301 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8046 - mae: 0.8840 - val_loss: 0.6668 - val_mae: 0.6260 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3118 - mae: 0.7722 - val_loss: 21.7845 - val_mae: 3.7796 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.33683\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.5533 - mae: 0.8075 - val_loss: 0.4368 - val_mae: 0.5109 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.33683\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.8772 - mae: 0.7945 - val_loss: 2.2964 - val_mae: 1.1326 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.33683\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.9009 - mae: 0.6857 - val_loss: 0.4648 - val_mae: 0.5337 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8017 - mae: 0.8297 - val_loss: 0.5990 - val_mae: 0.5993 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5400 - mae: 0.7618 - val_loss: 0.5646 - val_mae: 0.5841 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4120 - mae: 0.4987 - val_loss: 0.5852 - val_mae: 0.6012 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5240 - mae: 0.7183 - val_loss: 0.4176 - val_mae: 0.5063 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.33683\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4044 - mae: 0.6803 - val_loss: 0.9307 - val_mae: 0.7361 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6165 - mae: 0.5844 - val_loss: 0.4383 - val_mae: 0.5286 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8941 - mae: 0.8472 - val_loss: 1.0792 - val_mae: 0.7964 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7746 - mae: 0.6415 - val_loss: 0.4752 - val_mae: 0.5273 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.33683\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1320 - mae: 0.6743 - val_loss: 0.4407 - val_mae: 0.5222 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.33683 to 0.29338, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2002 - mae: 0.6531 - val_loss: 0.2934 - val_mae: 0.4204 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.29338\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2621 - mae: 0.8859 - val_loss: 0.4797 - val_mae: 0.5374 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.29338\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5024 - mae: 0.5482 - val_loss: 0.5233 - val_mae: 0.5583 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.29338\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2991 - mae: 0.7400 - val_loss: 0.8050 - val_mae: 0.6846 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.29338\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5976 - mae: 0.7873 - val_loss: 1.5100 - val_mae: 0.9432 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.29338\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6697 - mae: 0.6250 - val_loss: 0.5268 - val_mae: 0.5635 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.29338\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8040 - mae: 0.8280 - val_loss: 0.4532 - val_mae: 0.5259 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.29338\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5128 - mae: 0.5514 - val_loss: 0.6298 - val_mae: 0.6188 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.29338\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8957 - mae: 0.8042 - val_loss: 0.4886 - val_mae: 0.5367 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.29338 to 0.28782, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8866 - mae: 0.6178 - val_loss: 0.2878 - val_mae: 0.4201 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.28782\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4976 - mae: 0.6740 - val_loss: 0.6687 - val_mae: 0.6315 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.28782 to 0.21971, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3912 - mae: 0.4803 - val_loss: 0.2197 - val_mae: 0.3663 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7819 - mae: 0.7072 - val_loss: 1.3802 - val_mae: 0.8623 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7016 - mae: 0.6112 - val_loss: 0.3428 - val_mae: 0.4512 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6252 - mae: 0.7905 - val_loss: 0.4380 - val_mae: 0.5101 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.21971\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.6986 - mae: 0.7559 - val_loss: 0.6607 - val_mae: 0.6307 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4654 - mae: 0.5275 - val_loss: 0.7420 - val_mae: 0.6850 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2236 - mae: 0.6695 - val_loss: 0.3929 - val_mae: 0.4794 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1049 - mae: 0.6519 - val_loss: 0.4912 - val_mae: 0.5412 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4243 - mae: 0.4979 - val_loss: 0.4329 - val_mae: 0.5152 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.21971\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.5012 - mae: 0.7326 - val_loss: 0.4979 - val_mae: 0.5481 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9276 - mae: 0.6521 - val_loss: 0.5050 - val_mae: 0.5399 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7328 - mae: 1.0334 - val_loss: 0.7961 - val_mae: 0.6901 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7457 - mae: 0.6652 - val_loss: 0.7702 - val_mae: 0.6779 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2744 - mae: 0.7681 - val_loss: 0.9904 - val_mae: 0.7722 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.21971\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.1736 - mae: 0.7505 - val_loss: 1.3285 - val_mae: 0.8469 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0811 - mae: 0.6561 - val_loss: 0.4381 - val_mae: 0.5102 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5586 - mae: 0.7362 - val_loss: 0.3767 - val_mae: 0.4787 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3797 - mae: 0.6437 - val_loss: 0.9638 - val_mae: 0.7541 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.21971\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5233 - mae: 0.5291 - val_loss: 7.6180 - val_mae: 1.7625 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.21971\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.1470 - mae: 0.8340 - val_loss: 0.3340 - val_mae: 0.4511 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.21971\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4028 - mae: 0.4864 - val_loss: 0.2607 - val_mae: 0.3998 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.21971 to 0.08130, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0970 - mae: 0.2419 - val_loss: 0.0813 - val_mae: 0.2228 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.08130 to 0.06235, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0674 - mae: 0.2027 - val_loss: 0.0624 - val_mae: 0.1935 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.06235 to 0.05270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0537 - mae: 0.1810 - val_loss: 0.0527 - val_mae: 0.1791 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.05270 to 0.04344, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0459 - mae: 0.1678 - val_loss: 0.0434 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04344\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0413 - mae: 0.1592 - val_loss: 0.0437 - val_mae: 0.1631 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.04344 to 0.04099, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0374 - mae: 0.1514 - val_loss: 0.0410 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.04099 to 0.03962, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0354 - mae: 0.1477 - val_loss: 0.0396 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.03962 to 0.03577, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0332 - mae: 0.1430 - val_loss: 0.0358 - val_mae: 0.1482 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.03577\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0312 - mae: 0.1385 - val_loss: 0.0420 - val_mae: 0.1602 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.03577 to 0.03063, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0299 - mae: 0.1353 - val_loss: 0.0306 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03063\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0279 - mae: 0.1311 - val_loss: 0.0313 - val_mae: 0.1386 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.03063 to 0.03039, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0271 - mae: 0.1293 - val_loss: 0.0304 - val_mae: 0.1359 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.03039 to 0.02917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1269 - val_loss: 0.0292 - val_mae: 0.1333 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02917\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0251 - mae: 0.1244 - val_loss: 0.0311 - val_mae: 0.1378 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.02917 to 0.02638, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1224 - val_loss: 0.0264 - val_mae: 0.1261 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02638\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0232 - mae: 0.1197 - val_loss: 0.0310 - val_mae: 0.1382 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02638\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0226 - mae: 0.1181 - val_loss: 0.0265 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.02638 to 0.02524, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0219 - mae: 0.1162 - val_loss: 0.0252 - val_mae: 0.1233 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02524\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0215 - mae: 0.1152 - val_loss: 0.0254 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02524\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0208 - mae: 0.1132 - val_loss: 0.0275 - val_mae: 0.1290 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02524\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0205 - mae: 0.1125 - val_loss: 0.0255 - val_mae: 0.1245 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.02524 to 0.02481, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1110 - val_loss: 0.0248 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02481\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1109 - val_loss: 0.0258 - val_mae: 0.1253 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.02481 to 0.02210, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0195 - mae: 0.1098 - val_loss: 0.0221 - val_mae: 0.1160 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02210\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0189 - mae: 0.1081 - val_loss: 0.0242 - val_mae: 0.1201 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02210\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0193 - mae: 0.1088 - val_loss: 0.0237 - val_mae: 0.1201 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02210\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0187 - mae: 0.1074 - val_loss: 0.0261 - val_mae: 0.1265 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.02210 to 0.02093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0186 - mae: 0.1071 - val_loss: 0.0209 - val_mae: 0.1126 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02093\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0185 - mae: 0.1067 - val_loss: 0.0240 - val_mae: 0.1202 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02093\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0186 - mae: 0.1072 - val_loss: 0.0319 - val_mae: 0.1406 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02093\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0189 - mae: 0.1080 - val_loss: 0.0271 - val_mae: 0.1248 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1065 - val_loss: 0.0223 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1060 - val_loss: 0.0220 - val_mae: 0.1159 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1051 - val_loss: 0.0258 - val_mae: 0.1246 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1051 - val_loss: 0.0218 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0184 - mae: 0.1059 - val_loss: 0.0212 - val_mae: 0.1119 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0177 - mae: 0.1043 - val_loss: 0.0277 - val_mae: 0.1297 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1048 - val_loss: 0.0258 - val_mae: 0.1250 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02093\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1040 - val_loss: 0.0212 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.02093 to 0.01973, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0174 - mae: 0.1034 - val_loss: 0.0197 - val_mae: 0.1093 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1050 - val_loss: 0.0240 - val_mae: 0.1201 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1046 - val_loss: 0.0211 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0176 - mae: 0.1041 - val_loss: 0.0221 - val_mae: 0.1159 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1048 - val_loss: 0.0211 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1052 - val_loss: 0.0217 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01973\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0177 - mae: 0.1042 - val_loss: 0.0232 - val_mae: 0.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1046 - val_loss: 0.0208 - val_mae: 0.1114 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1060 - val_loss: 0.0219 - val_mae: 0.1152 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1051 - val_loss: 0.0212 - val_mae: 0.1137 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01973\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0181 - mae: 0.1054 - val_loss: 0.0270 - val_mae: 0.1293 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01973\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0180 - mae: 0.1050 - val_loss: 0.0233 - val_mae: 0.1188 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1052 - val_loss: 0.0234 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0183 - mae: 0.1057 - val_loss: 0.0232 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0180 - mae: 0.1049 - val_loss: 0.0202 - val_mae: 0.1115 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1044 - val_loss: 0.0220 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01973\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0179 - mae: 0.1044 - val_loss: 0.0336 - val_mae: 0.1433 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1051 - val_loss: 0.0241 - val_mae: 0.1220 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0179 - mae: 0.1046 - val_loss: 0.0250 - val_mae: 0.1218 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0178 - mae: 0.1045 - val_loss: 0.0239 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0181 - mae: 0.1054 - val_loss: 0.0222 - val_mae: 0.1164 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.01973 to 0.01051, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0066 - mae: 0.0636 - val_loss: 0.0105 - val_mae: 0.0784 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.01051 to 0.01027, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0103 - val_mae: 0.0775 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.01027 to 0.00992, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0099 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.00992 to 0.00975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0050 - mae: 0.0560 - val_loss: 0.0097 - val_mae: 0.0754 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0099 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.00975 to 0.00967, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0097 - val_mae: 0.0749 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.00967 to 0.00956, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0538 - val_loss: 0.0096 - val_mae: 0.0745 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.00956 to 0.00951, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0533 - val_loss: 0.0095 - val_mae: 0.0744 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.00951 to 0.00947, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0528 - val_loss: 0.0095 - val_mae: 0.0744 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00947\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0044 - mae: 0.0523 - val_loss: 0.0095 - val_mae: 0.0742 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.00947 to 0.00925, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0520 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00925\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0515 - val_loss: 0.0096 - val_mae: 0.0749 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00925\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0511 - val_loss: 0.0093 - val_mae: 0.0734 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00925\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0510 - val_loss: 0.0094 - val_mae: 0.0739 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00925\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0093 - val_mae: 0.0732 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.00925 to 0.00919, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0040 - mae: 0.0504 - val_loss: 0.0092 - val_mae: 0.0730 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00919\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0500 - val_loss: 0.0094 - val_mae: 0.0739 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00919\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0497 - val_loss: 0.0092 - val_mae: 0.0730 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.00919 to 0.00915, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0091 - val_mae: 0.0727 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00915 to 0.00903, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0492 - val_loss: 0.0090 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00903\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0038 - mae: 0.0490 - val_loss: 0.0091 - val_mae: 0.0725 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.00903 to 0.00901, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0038 - mae: 0.0486 - val_loss: 0.0090 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00901\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0485 - val_loss: 0.0090 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00901\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0482 - val_loss: 0.0090 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00901\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0481 - val_loss: 0.0091 - val_mae: 0.0727 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00901\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0090 - val_mae: 0.0721 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00901\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0092 - val_mae: 0.0728 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00901\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0476 - val_loss: 0.0091 - val_mae: 0.0723 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.00901 to 0.00901, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0473 - val_loss: 0.0090 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.00901 to 0.00891, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0471 - val_loss: 0.0089 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00891\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0089 - val_mae: 0.0718 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00891\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0089 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.00891 to 0.00890, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0089 - val_mae: 0.0716 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00890\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0464 - val_loss: 0.0090 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00890\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0089 - val_mae: 0.0718 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00890\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0094 - val_mae: 0.0736 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00890\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0461 - val_loss: 0.0091 - val_mae: 0.0725 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss improved from 0.00890 to 0.00889, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0089 - val_mae: 0.0715 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00889\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0090 - val_mae: 0.0721 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00889\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0089 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00889\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0454 - val_loss: 0.0089 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00889\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0092 - val_mae: 0.0727 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00889\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0032 - mae: 0.0451 - val_loss: 0.0090 - val_mae: 0.0718 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.00889 to 0.00887, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0450 - val_loss: 0.0089 - val_mae: 0.0712 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.00887 to 0.00881, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0088 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00881\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0088 - val_mae: 0.0711 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00881\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0089 - val_mae: 0.0713 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00881\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0445 - val_loss: 0.0089 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.00881 to 0.00880, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0088 - val_mae: 0.0709 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00880\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0089 - val_mae: 0.0714 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00880\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0089 - val_mae: 0.0715 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00880\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0088 - val_mae: 0.0711 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00880\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0438 - val_loss: 0.0088 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00880\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0089 - val_mae: 0.0713 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.00880 to 0.00870, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0436 - val_loss: 0.0087 - val_mae: 0.0705 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0090 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00870\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0089 - val_mae: 0.0714 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0089 - val_mae: 0.0711 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0089 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0430 - val_loss: 0.0088 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00870\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0088 - val_mae: 0.0709 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0428 - val_loss: 0.0089 - val_mae: 0.0714 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0427 - val_loss: 0.0088 - val_mae: 0.0711 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00870\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0088 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0088 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00870\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0423 - val_loss: 0.0090 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0088 - val_mae: 0.0711 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00870\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0088 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss improved from 0.00870 to 0.00868, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0087 - val_mae: 0.0704 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0087 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0089 - val_mae: 0.0712 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0088 - val_mae: 0.0707 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0087 - val_mae: 0.0707 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0088 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0088 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00868\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0413 - val_loss: 0.0088 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0413 - val_loss: 0.0087 - val_mae: 0.0704 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00868\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0089 - val_mae: 0.0717 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0088 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00868\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0089 - val_mae: 0.0711 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0088 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0408 - val_loss: 0.0089 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0408 - val_loss: 0.0088 - val_mae: 0.0708 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00868\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0088 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0088 - val_mae: 0.0705 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0405 - val_loss: 0.0088 - val_mae: 0.0704 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0088 - val_mae: 0.0706 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00868\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0089 - val_mae: 0.0710 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00868\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0088 - val_mae: 0.0705 - learning_rate: 1.0000e-04\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss improved from 0.00868 to 0.00831, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0355 - val_loss: 0.0083 - val_mae: 0.0684 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss improved from 0.00831 to 0.00829, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss improved from 0.00829 to 0.00828, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss improved from 0.00828 to 0.00827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0347 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00827\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0019 - mae: 0.0347 - val_loss: 0.0083 - val_mae: 0.0684 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0083 - val_mae: 0.0684 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0345 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0345 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00827\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00827\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.00827 to 0.00825, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-05\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00825\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00825\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00825\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00825\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0083 - val_mae: 0.0682 - learning_rate: 1.0000e-05\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00825\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0083 - val_mae: 0.0683 - learning_rate: 1.0000e-05\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss improved from 0.00825 to 0.00824, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0336 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00824\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0336 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00824\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00824\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss improved from 0.00824 to 0.00823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00823\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss improved from 0.00823 to 0.00823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00823\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss improved from 0.00823 to 0.00823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00823\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00823\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-06\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.00823 to 0.00823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00823\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-06\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.00823 to 0.00822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss improved from 0.00822 to 0.00822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss improved from 0.00822 to 0.00822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss improved from 0.00822 to 0.00822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss improved from 0.00822 to 0.00822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.00822\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0082 - val_mae: 0.0680 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.00822\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0083 - val_mae: 0.0681 - learning_rate: 1.0000e-07\n",
      "Epoch 383: early stopping\n",
      "Restoring model weights from the end of the best epoch: 333.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1076 m\n",
      "Median positioning error: 0.0942 m\n",
      "90th percentile error: 0.1947 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13362.259676,
   "end_time": "2025-08-28T19:34:23.839175",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-28T15:51:41.579499",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
