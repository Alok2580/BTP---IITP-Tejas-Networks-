{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e9c15f8f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-22T09:52:34.848444Z",
     "iopub.status.busy": "2025-07-22T09:52:34.848194Z",
     "iopub.status.idle": "2025-07-22T09:52:36.217497Z",
     "shell.execute_reply": "2025-07-22T09:52:36.216642Z"
    },
    "papermill": {
     "duration": 1.373989,
     "end_time": "2025-07-22T09:52:36.218885",
     "exception": false,
     "start_time": "2025-07-22T09:52:34.844896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "814bbe6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:52:36.224492Z",
     "iopub.status.busy": "2025-07-22T09:52:36.224120Z",
     "iopub.status.idle": "2025-07-22T09:52:50.692313Z",
     "shell.execute_reply": "2025-07-22T09:52:50.691445Z"
    },
    "papermill": {
     "duration": 14.472488,
     "end_time": "2025-07-22T09:52:50.693897",
     "exception": false,
     "start_time": "2025-07-22T09:52:36.221409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-22 09:52:37.801072: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753177957.994111      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753177958.049667      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8573f81f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:52:50.699054Z",
     "iopub.status.busy": "2025-07-22T09:52:50.698578Z",
     "iopub.status.idle": "2025-07-22T09:52:50.703027Z",
     "shell.execute_reply": "2025-07-22T09:52:50.702455Z"
    },
    "papermill": {
     "duration": 0.0081,
     "end_time": "2025-07-22T09:52:50.704144",
     "exception": false,
     "start_time": "2025-07-22T09:52:50.696044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.1  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.001\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa69aea1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:52:50.708903Z",
     "iopub.status.busy": "2025-07-22T09:52:50.708318Z",
     "iopub.status.idle": "2025-07-22T09:52:50.711565Z",
     "shell.execute_reply": "2025-07-22T09:52:50.711020Z"
    },
    "papermill": {
     "duration": 0.006469,
     "end_time": "2025-07-22T09:52:50.712514",
     "exception": false,
     "start_time": "2025-07-22T09:52:50.706045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe84de6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T09:52:50.717338Z",
     "iopub.status.busy": "2025-07-22T09:52:50.717151Z",
     "iopub.status.idle": "2025-07-22T10:40:58.073276Z",
     "shell.execute_reply": "2025-07-22T10:40:58.072627Z"
    },
    "papermill": {
     "duration": 2887.36009,
     "end_time": "2025-07-22T10:40:58.074388",
     "exception": false,
     "start_time": "2025-07-22T09:52:50.714298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753177993.113469      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753178002.404430      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">101,632</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m101,632\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">693,258</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m693,258\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">692,742</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m692,742\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753178013.200633      57 service.cc:148] XLA service 0x79339c019850 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753178013.201397      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753178017.919874      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 8.81812, saving model to models/best_model_full.keras\n",
      "4375/4375 - 50s - 12ms/step - loss: 61.8700 - mae: 4.3317 - val_loss: 8.8181 - val_mae: 2.3300 - learning_rate: 0.0010\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 8.81812 to 5.16975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.8160 - mae: 1.4980 - val_loss: 5.1698 - val_mae: 1.8612 - learning_rate: 0.0010\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.16975 to 3.93858, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.9387 - mae: 1.0711 - val_loss: 3.9386 - val_mae: 1.5721 - learning_rate: 0.0010\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.93858 to 3.52047, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.1186 - mae: 0.8189 - val_loss: 3.5205 - val_mae: 1.5101 - learning_rate: 0.0010\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 3.52047\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.7637 - mae: 0.6760 - val_loss: 4.3294 - val_mae: 1.6700 - learning_rate: 0.0010\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 3.52047\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.5615 - mae: 0.5809 - val_loss: 5.3737 - val_mae: 1.8646 - learning_rate: 0.0010\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 3.52047\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.4391 - mae: 0.5152 - val_loss: 3.9832 - val_mae: 1.5678 - learning_rate: 0.0010\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 3.52047\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.3629 - mae: 0.4690 - val_loss: 4.0152 - val_mae: 1.6243 - learning_rate: 0.0010\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 3.52047\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.3124 - mae: 0.4361 - val_loss: 3.5576 - val_mae: 1.4347 - learning_rate: 0.0010\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 3.52047 to 2.97104, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2696 - mae: 0.4046 - val_loss: 2.9710 - val_mae: 1.3536 - learning_rate: 0.0010\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2372 - mae: 0.3798 - val_loss: 3.9821 - val_mae: 1.4955 - learning_rate: 0.0010\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2177 - mae: 0.3634 - val_loss: 4.4040 - val_mae: 1.6735 - learning_rate: 0.0010\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1970 - mae: 0.3470 - val_loss: 3.2243 - val_mae: 1.3660 - learning_rate: 0.0010\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1804 - mae: 0.3318 - val_loss: 3.7725 - val_mae: 1.6068 - learning_rate: 0.0010\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 2.97104\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1689 - mae: 0.3204 - val_loss: 3.2175 - val_mae: 1.4202 - learning_rate: 0.0010\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1606 - mae: 0.3131 - val_loss: 3.5162 - val_mae: 1.4614 - learning_rate: 0.0010\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1506 - mae: 0.3034 - val_loss: 3.7580 - val_mae: 1.4343 - learning_rate: 0.0010\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1441 - mae: 0.2966 - val_loss: 3.6501 - val_mae: 1.4916 - learning_rate: 0.0010\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1346 - mae: 0.2872 - val_loss: 3.7438 - val_mae: 1.4930 - learning_rate: 0.0010\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1263 - mae: 0.2784 - val_loss: 3.7430 - val_mae: 1.5310 - learning_rate: 0.0010\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1230 - mae: 0.2744 - val_loss: 3.6621 - val_mae: 1.5375 - learning_rate: 0.0010\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1218 - mae: 0.2723 - val_loss: 3.1230 - val_mae: 1.3973 - learning_rate: 0.0010\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1148 - mae: 0.2647 - val_loss: 3.8179 - val_mae: 1.5138 - learning_rate: 0.0010\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1110 - mae: 0.2608 - val_loss: 4.0461 - val_mae: 1.5321 - learning_rate: 0.0010\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1083 - mae: 0.2572 - val_loss: 3.3736 - val_mae: 1.4198 - learning_rate: 0.0010\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1023 - mae: 0.2507 - val_loss: 3.9240 - val_mae: 1.5484 - learning_rate: 0.0010\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0997 - mae: 0.2471 - val_loss: 3.5839 - val_mae: 1.4585 - learning_rate: 0.0010\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 2.97104\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0989 - mae: 0.2464 - val_loss: 3.4235 - val_mae: 1.4379 - learning_rate: 0.0010\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 2.97104 to 2.63317, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0949 - mae: 0.2407 - val_loss: 2.6332 - val_mae: 1.2283 - learning_rate: 0.0010\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0929 - mae: 0.2388 - val_loss: 3.0259 - val_mae: 1.3325 - learning_rate: 0.0010\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0914 - mae: 0.2363 - val_loss: 3.2623 - val_mae: 1.3956 - learning_rate: 0.0010\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0885 - mae: 0.2325 - val_loss: 3.2663 - val_mae: 1.3990 - learning_rate: 0.0010\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0854 - mae: 0.2292 - val_loss: 3.1578 - val_mae: 1.3896 - learning_rate: 0.0010\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0838 - mae: 0.2269 - val_loss: 3.3483 - val_mae: 1.4376 - learning_rate: 0.0010\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0832 - mae: 0.2256 - val_loss: 3.1961 - val_mae: 1.3473 - learning_rate: 0.0010\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0798 - mae: 0.2212 - val_loss: 2.8946 - val_mae: 1.3105 - learning_rate: 0.0010\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0807 - mae: 0.2227 - val_loss: 2.8377 - val_mae: 1.3301 - learning_rate: 0.0010\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0780 - mae: 0.2190 - val_loss: 3.2908 - val_mae: 1.4143 - learning_rate: 0.0010\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 2.63317\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0763 - mae: 0.2163 - val_loss: 3.1934 - val_mae: 1.3723 - learning_rate: 0.0010\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0749 - mae: 0.2144 - val_loss: 3.3333 - val_mae: 1.4133 - learning_rate: 0.0010\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0745 - mae: 0.2139 - val_loss: 3.2606 - val_mae: 1.3820 - learning_rate: 0.0010\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0733 - mae: 0.2120 - val_loss: 3.1632 - val_mae: 1.3603 - learning_rate: 0.0010\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0726 - mae: 0.2109 - val_loss: 3.1748 - val_mae: 1.3744 - learning_rate: 0.0010\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0699 - mae: 0.2074 - val_loss: 3.2757 - val_mae: 1.4434 - learning_rate: 0.0010\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0703 - mae: 0.2078 - val_loss: 3.1803 - val_mae: 1.3853 - learning_rate: 0.0010\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0683 - mae: 0.2051 - val_loss: 3.3226 - val_mae: 1.4062 - learning_rate: 0.0010\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0676 - mae: 0.2039 - val_loss: 3.3980 - val_mae: 1.4326 - learning_rate: 0.0010\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0683 - mae: 0.2046 - val_loss: 3.0831 - val_mae: 1.3893 - learning_rate: 0.0010\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n",
      "\n",
      "Epoch 49: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0653 - mae: 0.2000 - val_loss: 2.9957 - val_mae: 1.3403 - learning_rate: 0.0010\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0285 - mae: 0.1317 - val_loss: 3.0058 - val_mae: 1.3341 - learning_rate: 1.0000e-04\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0214 - mae: 0.1153 - val_loss: 2.9892 - val_mae: 1.3270 - learning_rate: 1.0000e-04\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0188 - mae: 0.1084 - val_loss: 3.0262 - val_mae: 1.3405 - learning_rate: 1.0000e-04\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0172 - mae: 0.1039 - val_loss: 3.0236 - val_mae: 1.3333 - learning_rate: 1.0000e-04\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0160 - mae: 0.1001 - val_loss: 3.0288 - val_mae: 1.3365 - learning_rate: 1.0000e-04\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0152 - mae: 0.0979 - val_loss: 3.0549 - val_mae: 1.3471 - learning_rate: 1.0000e-04\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0145 - mae: 0.0955 - val_loss: 3.1103 - val_mae: 1.3538 - learning_rate: 1.0000e-04\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0139 - mae: 0.0934 - val_loss: 2.9861 - val_mae: 1.3255 - learning_rate: 1.0000e-04\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0134 - mae: 0.0917 - val_loss: 3.0640 - val_mae: 1.3522 - learning_rate: 1.0000e-04\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0130 - mae: 0.0906 - val_loss: 3.1235 - val_mae: 1.3577 - learning_rate: 1.0000e-04\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0126 - mae: 0.0892 - val_loss: 2.9895 - val_mae: 1.3271 - learning_rate: 1.0000e-04\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0123 - mae: 0.0880 - val_loss: 3.0612 - val_mae: 1.3424 - learning_rate: 1.0000e-04\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0120 - mae: 0.0868 - val_loss: 3.0576 - val_mae: 1.3450 - learning_rate: 1.0000e-04\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0116 - mae: 0.0858 - val_loss: 2.9975 - val_mae: 1.3300 - learning_rate: 1.0000e-04\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 2.63317\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0115 - mae: 0.0851 - val_loss: 2.9781 - val_mae: 1.3303 - learning_rate: 1.0000e-04\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0112 - mae: 0.0841 - val_loss: 3.0110 - val_mae: 1.3352 - learning_rate: 1.0000e-04\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0110 - mae: 0.0835 - val_loss: 2.9726 - val_mae: 1.3217 - learning_rate: 1.0000e-04\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0109 - mae: 0.0828 - val_loss: 2.9883 - val_mae: 1.3301 - learning_rate: 1.0000e-04\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0108 - mae: 0.0823 - val_loss: 3.0160 - val_mae: 1.3396 - learning_rate: 1.0000e-04\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n",
      "\n",
      "Epoch 69: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0105 - mae: 0.0814 - val_loss: 3.0673 - val_mae: 1.3468 - learning_rate: 1.0000e-04\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0087 - mae: 0.0740 - val_loss: 2.9694 - val_mae: 1.3232 - learning_rate: 1.0000e-05\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0084 - mae: 0.0730 - val_loss: 3.0127 - val_mae: 1.3341 - learning_rate: 1.0000e-05\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0083 - mae: 0.0725 - val_loss: 2.9742 - val_mae: 1.3245 - learning_rate: 1.0000e-05\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0082 - mae: 0.0720 - val_loss: 2.9897 - val_mae: 1.3302 - learning_rate: 1.0000e-05\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0082 - mae: 0.0721 - val_loss: 3.0039 - val_mae: 1.3312 - learning_rate: 1.0000e-05\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0081 - mae: 0.0717 - val_loss: 2.9796 - val_mae: 1.3288 - learning_rate: 1.0000e-05\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0082 - mae: 0.0716 - val_loss: 3.0155 - val_mae: 1.3351 - learning_rate: 1.0000e-05\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0081 - mae: 0.0715 - val_loss: 3.0149 - val_mae: 1.3357 - learning_rate: 1.0000e-05\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0081 - mae: 0.0713 - val_loss: 2.9697 - val_mae: 1.3244 - learning_rate: 1.0000e-05\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 2.63317\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0081 - mae: 0.0714 - val_loss: 3.0096 - val_mae: 1.3330 - learning_rate: 1.0000e-05\n",
      "Epoch 79: early stopping\n",
      "Restoring model weights from the end of the best epoch: 29.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 2.0005 m\n",
      "Median positioning error: 1.8008 m\n",
      "90th percentile error: 3.6927 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2911.214089,
   "end_time": "2025-07-22T10:41:02.006598",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-22T09:52:30.792509",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
