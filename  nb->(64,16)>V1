{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "045bc768",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-02T16:31:26.120936Z",
     "iopub.status.busy": "2025-08-02T16:31:26.120664Z",
     "iopub.status.idle": "2025-08-02T16:31:27.621002Z",
     "shell.execute_reply": "2025-08-02T16:31:27.619848Z"
    },
    "papermill": {
     "duration": 1.505938,
     "end_time": "2025-08-02T16:31:27.622982",
     "exception": false,
     "start_time": "2025-08-02T16:31:26.117044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7b87f66a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:31:27.631960Z",
     "iopub.status.busy": "2025-08-02T16:31:27.631591Z",
     "iopub.status.idle": "2025-08-02T16:31:42.372129Z",
     "shell.execute_reply": "2025-08-02T16:31:42.371313Z"
    },
    "papermill": {
     "duration": 14.74614,
     "end_time": "2025-08-02T16:31:42.373622",
     "exception": false,
     "start_time": "2025-08-02T16:31:27.627482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-02 16:31:29.190505: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754152289.375449      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754152289.425187      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "87a8e27b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:31:42.382483Z",
     "iopub.status.busy": "2025-08-02T16:31:42.381923Z",
     "iopub.status.idle": "2025-08-02T16:31:42.386941Z",
     "shell.execute_reply": "2025-08-02T16:31:42.386260Z"
    },
    "papermill": {
     "duration": 0.010107,
     "end_time": "2025-08-02T16:31:42.388530",
     "exception": false,
     "start_time": "2025-08-02T16:31:42.378423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 25  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "138b6a09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:31:42.393735Z",
     "iopub.status.busy": "2025-08-02T16:31:42.393481Z",
     "iopub.status.idle": "2025-08-02T16:31:42.397624Z",
     "shell.execute_reply": "2025-08-02T16:31:42.396913Z"
    },
    "papermill": {
     "duration": 0.008109,
     "end_time": "2025-08-02T16:31:42.398832",
     "exception": false,
     "start_time": "2025-08-02T16:31:42.390723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1b8e829c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:31:42.404585Z",
     "iopub.status.busy": "2025-08-02T16:31:42.404295Z",
     "iopub.status.idle": "2025-08-02T21:23:12.091405Z",
     "shell.execute_reply": "2025-08-02T21:23:12.090556Z"
    },
    "papermill": {
     "duration": 17489.691693,
     "end_time": "2025-08-02T21:23:12.092795",
     "exception": false,
     "start_time": "2025-08-02T16:31:42.401102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754152330.613408      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754152340.511690      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">232</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">230,656</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">232</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">232</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">59,392</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m232\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m230,656\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m232\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m232\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m59,392\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,345,802</span> (5.13 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,345,802\u001b[0m (5.13 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,345,286</span> (5.13 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,345,286\u001b[0m (5.13 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754152355.522657      56 service.cc:148] XLA service 0x7e7870002120 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754152355.523392      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754152360.652392      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 479.00311, saving model to models/best_model_full.keras\n",
      "4375/4375 - 77s - 18ms/step - loss: 489.6208 - mae: 17.5616 - val_loss: 479.0031 - val_mae: 17.3907 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 479.00311 to 478.02835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 486.4380 - mae: 17.5200 - val_loss: 478.0284 - val_mae: 17.3761 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 478.02835\n",
      "4375/4375 - 57s - 13ms/step - loss: 485.2913 - mae: 17.5001 - val_loss: 481.1260 - val_mae: 17.4118 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 478.02835\n",
      "4375/4375 - 58s - 13ms/step - loss: 485.1073 - mae: 17.4943 - val_loss: 478.7082 - val_mae: 17.3810 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 478.02835\n",
      "4375/4375 - 57s - 13ms/step - loss: 484.7518 - mae: 17.4935 - val_loss: 481.5976 - val_mae: 17.4175 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 478.02835\n",
      "4375/4375 - 57s - 13ms/step - loss: 484.0699 - mae: 17.4828 - val_loss: 478.6010 - val_mae: 17.3817 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 478.02835\n",
      "4375/4375 - 57s - 13ms/step - loss: 484.1347 - mae: 17.4857 - val_loss: 478.9445 - val_mae: 17.4003 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 478.02835\n",
      "4375/4375 - 56s - 13ms/step - loss: 483.8353 - mae: 17.4824 - val_loss: 480.4005 - val_mae: 17.4216 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 478.02835\n",
      "4375/4375 - 57s - 13ms/step - loss: 483.6721 - mae: 17.4761 - val_loss: 479.1397 - val_mae: 17.3933 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 478.02835\n",
      "4375/4375 - 57s - 13ms/step - loss: 483.8792 - mae: 17.4808 - val_loss: 478.8812 - val_mae: 17.3871 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 478.02835 to 478.02814, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 483.6500 - mae: 17.4807 - val_loss: 478.0281 - val_mae: 17.3752 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 478.02814 to 477.91321, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 483.7039 - mae: 17.4780 - val_loss: 477.9132 - val_mae: 17.3735 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 477.91321\n",
      "4375/4375 - 57s - 13ms/step - loss: 483.5396 - mae: 17.4766 - val_loss: 479.2368 - val_mae: 17.3906 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 477.91321\n",
      "4375/4375 - 57s - 13ms/step - loss: 483.4778 - mae: 17.4754 - val_loss: 478.4536 - val_mae: 17.3798 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 477.91321\n",
      "4375/4375 - 56s - 13ms/step - loss: 483.7256 - mae: 17.4825 - val_loss: 478.3138 - val_mae: 17.3851 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 477.91321 to 373.20917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 477.8907 - mae: 17.3462 - val_loss: 373.2092 - val_mae: 15.3631 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 373.20917 to 104.62702, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 126.9969 - mae: 9.0041 - val_loss: 104.6270 - val_mae: 8.0676 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 104.62702 to 75.54501, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 92.9188 - mae: 7.5283 - val_loss: 75.5450 - val_mae: 6.7253 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 75.54501\n",
      "4375/4375 - 56s - 13ms/step - loss: 125.3872 - mae: 8.6548 - val_loss: 96.5587 - val_mae: 7.4637 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 75.54501\n",
      "4375/4375 - 55s - 13ms/step - loss: 91.3908 - mae: 7.3226 - val_loss: 76.9112 - val_mae: 6.5610 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 75.54501\n",
      "4375/4375 - 55s - 13ms/step - loss: 134.8428 - mae: 8.9163 - val_loss: 165.3758 - val_mae: 10.3601 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 75.54501\n",
      "4375/4375 - 55s - 13ms/step - loss: 76.7925 - mae: 6.7516 - val_loss: 113.3253 - val_mae: 8.0507 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 75.54501\n",
      "4375/4375 - 55s - 13ms/step - loss: 68.3284 - mae: 6.2210 - val_loss: 89.8550 - val_mae: 7.0285 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss improved from 75.54501 to 55.36646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 70.4530 - mae: 6.3182 - val_loss: 55.3665 - val_mae: 5.7385 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 103.7863 - mae: 7.7679 - val_loss: 86.7113 - val_mae: 7.4609 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 102.2211 - mae: 7.6997 - val_loss: 185.9550 - val_mae: 10.7685 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 107.8196 - mae: 8.0486 - val_loss: 70.0869 - val_mae: 6.2024 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 89.8475 - mae: 6.9284 - val_loss: 72.9303 - val_mae: 6.3088 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 100.1023 - mae: 7.4394 - val_loss: 117.4202 - val_mae: 8.4844 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 97.2909 - mae: 7.5303 - val_loss: 128.1318 - val_mae: 8.4999 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 58.2214 - mae: 5.6612 - val_loss: 86.6038 - val_mae: 6.8503 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 55.36646\n",
      "4375/4375 - 56s - 13ms/step - loss: 141.4784 - mae: 8.9407 - val_loss: 82.8769 - val_mae: 7.1193 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss improved from 55.36646 to 40.63138, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 74.6766 - mae: 6.4352 - val_loss: 40.6314 - val_mae: 4.9055 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss improved from 40.63138 to 35.09411, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 70.3047 - mae: 6.1317 - val_loss: 35.0941 - val_mae: 4.5246 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 35.09411\n",
      "4375/4375 - 56s - 13ms/step - loss: 84.6989 - mae: 6.8734 - val_loss: 104.2148 - val_mae: 8.1988 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 35.09411 to 20.12815, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 48.9039 - mae: 5.2253 - val_loss: 20.1282 - val_mae: 3.3809 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss improved from 20.12815 to 7.35553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 15.9236 - mae: 2.9004 - val_loss: 7.3555 - val_mae: 2.0946 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 7.35553\n",
      "4375/4375 - 56s - 13ms/step - loss: 169.4682 - mae: 8.4483 - val_loss: 219.2374 - val_mae: 11.8409 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 7.35553\n",
      "4375/4375 - 56s - 13ms/step - loss: 268.0965 - mae: 12.8690 - val_loss: 458.2343 - val_mae: 16.9657 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 7.35553\n",
      "4375/4375 - 57s - 13ms/step - loss: 312.3564 - mae: 13.8818 - val_loss: 258.5413 - val_mae: 12.8746 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 14ms/step - loss: 288.0450 - mae: 13.3590 - val_loss: 203.6218 - val_mae: 11.5071 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 7.35553\n",
      "4375/4375 - 58s - 13ms/step - loss: 132.7037 - mae: 9.2304 - val_loss: 67.9135 - val_mae: 6.4807 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 13ms/step - loss: 86.1845 - mae: 7.0153 - val_loss: 181.1474 - val_mae: 10.0898 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 93.4123 - mae: 7.3056 - val_loss: 178.7280 - val_mae: 10.6029 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 56.6807 - mae: 5.6121 - val_loss: 79.2571 - val_mae: 6.7443 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 93.2971 - mae: 6.9910 - val_loss: 148.5317 - val_mae: 9.5748 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 85.7541 - mae: 7.0269 - val_loss: 41.3326 - val_mae: 4.9937 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 34.6591 - mae: 4.3066 - val_loss: 128.9210 - val_mae: 8.5090 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 109.0099 - mae: 7.9422 - val_loss: 94.7555 - val_mae: 7.5222 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 185.3909 - mae: 10.3417 - val_loss: 108.2925 - val_mae: 8.1909 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 62.7905 - mae: 5.9838 - val_loss: 27.3483 - val_mae: 3.9634 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 85.2109 - mae: 6.6205 - val_loss: 122.0477 - val_mae: 8.7501 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 78.0126 - mae: 6.7247 - val_loss: 30.8105 - val_mae: 4.2182 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 119.8119 - mae: 7.6672 - val_loss: 213.2386 - val_mae: 11.0787 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 139.2053 - mae: 9.2219 - val_loss: 91.9348 - val_mae: 7.3055 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 123.3675 - mae: 8.6320 - val_loss: 312.0923 - val_mae: 12.6920 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 57: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 145.0973 - mae: 9.0505 - val_loss: 99.6550 - val_mae: 7.7614 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 14ms/step - loss: 71.7327 - mae: 6.5078 - val_loss: 69.7362 - val_mae: 6.1971 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 60.1133 - mae: 5.9285 - val_loss: 67.8500 - val_mae: 6.1392 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 54.7668 - mae: 5.6356 - val_loss: 57.3735 - val_mae: 5.6141 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 47.7172 - mae: 5.2459 - val_loss: 51.1830 - val_mae: 5.2034 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 14ms/step - loss: 40.7507 - mae: 4.8664 - val_loss: 38.8911 - val_mae: 4.6226 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 13ms/step - loss: 32.9747 - mae: 4.3698 - val_loss: 36.1163 - val_mae: 4.3274 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 14ms/step - loss: 26.1442 - mae: 3.8960 - val_loss: 29.1884 - val_mae: 3.8788 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 13ms/step - loss: 20.6167 - mae: 3.4685 - val_loss: 22.3405 - val_mae: 3.4059 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 13ms/step - loss: 17.2147 - mae: 3.1635 - val_loss: 18.4309 - val_mae: 3.0389 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 13ms/step - loss: 14.2634 - mae: 2.8500 - val_loss: 13.5265 - val_mae: 2.6810 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 13.2278 - mae: 2.7302 - val_loss: 16.8664 - val_mae: 2.7670 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 10.7972 - mae: 2.4844 - val_loss: 16.1259 - val_mae: 2.5574 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 7.35553\n",
      "4375/4375 - 60s - 14ms/step - loss: 9.5117 - mae: 2.2971 - val_loss: 12.1056 - val_mae: 2.2315 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 7.35553\n",
      "4375/4375 - 59s - 13ms/step - loss: 7.6920 - mae: 2.0981 - val_loss: 12.1117 - val_mae: 2.0751 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 7.35553 to 5.62777, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 6.2957 - mae: 1.8866 - val_loss: 5.6278 - val_mae: 1.7230 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 5.62777 to 5.36580, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 5.2321 - mae: 1.7199 - val_loss: 5.3658 - val_mae: 1.7038 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 5.36580 to 4.22180, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 4.2615 - mae: 1.5589 - val_loss: 4.2218 - val_mae: 1.5304 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 4.22180\n",
      "4375/4375 - 56s - 13ms/step - loss: 4.6644 - mae: 1.5901 - val_loss: 5.8839 - val_mae: 1.5290 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 4.22180\n",
      "4375/4375 - 58s - 13ms/step - loss: 3.1970 - mae: 1.3521 - val_loss: 6.4744 - val_mae: 1.3949 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 4.22180 to 4.05837, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 2.7777 - mae: 1.2556 - val_loss: 4.0584 - val_mae: 1.3143 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 4.05837 to 3.70286, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 2.4927 - mae: 1.1924 - val_loss: 3.7029 - val_mae: 1.2612 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 3.70286 to 2.74522, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 2.4092 - mae: 1.1588 - val_loss: 2.7452 - val_mae: 1.1068 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 2.74522 to 2.15467, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 1.9213 - mae: 1.0263 - val_loss: 2.1547 - val_mae: 0.9616 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 2.15467\n",
      "4375/4375 - 57s - 13ms/step - loss: 1.4661 - mae: 0.9175 - val_loss: 2.3510 - val_mae: 1.1588 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 2.15467 to 1.47518, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 1.2521 - mae: 0.8477 - val_loss: 1.4752 - val_mae: 0.8523 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 1.47518\n",
      "4375/4375 - 57s - 13ms/step - loss: 1.5609 - mae: 0.8823 - val_loss: 2.7816 - val_mae: 0.9334 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 1.47518\n",
      "4375/4375 - 57s - 13ms/step - loss: 1.2353 - mae: 0.8321 - val_loss: 12.2730 - val_mae: 1.8581 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 1.47518\n",
      "4375/4375 - 57s - 13ms/step - loss: 1.0619 - mae: 0.7865 - val_loss: 3.7369 - val_mae: 0.8382 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 1.47518\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.9323 - mae: 0.7368 - val_loss: 2.9071 - val_mae: 0.7767 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 1.47518\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.8369 - mae: 0.6879 - val_loss: 2.7416 - val_mae: 0.7252 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 1.47518\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.6404 - mae: 0.6171 - val_loss: 3.2537 - val_mae: 0.7145 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 1.47518\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.6243 - mae: 0.6006 - val_loss: 2.0651 - val_mae: 0.6662 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 1.47518 to 1.23755, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.5543 - mae: 0.5720 - val_loss: 1.2376 - val_mae: 0.5860 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 1.23755 to 1.20216, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.4659 - mae: 0.5282 - val_loss: 1.2022 - val_mae: 0.5617 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 1.20216\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.4402 - mae: 0.5117 - val_loss: 1.6559 - val_mae: 0.6176 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 1.20216\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.4496 - mae: 0.5134 - val_loss: 1.3726 - val_mae: 0.6633 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 1.20216\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.4890 - mae: 0.5276 - val_loss: 2.0806 - val_mae: 0.5642 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 1.20216 to 0.85864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.4073 - mae: 0.4888 - val_loss: 0.8586 - val_mae: 0.5436 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3771 - mae: 0.4751 - val_loss: 0.9584 - val_mae: 0.4721 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3370 - mae: 0.4473 - val_loss: 1.4805 - val_mae: 0.9005 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.5298 - mae: 0.4724 - val_loss: 3.8752 - val_mae: 0.5531 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2820 - mae: 0.4129 - val_loss: 3.4540 - val_mae: 0.4759 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3772 - mae: 0.4221 - val_loss: 8.0082 - val_mae: 1.3943 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.85864\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.3095 - mae: 0.4205 - val_loss: 2.1073 - val_mae: 0.4795 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2847 - mae: 0.4124 - val_loss: 2.4428 - val_mae: 0.4616 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.85864\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.3009 - mae: 0.4136 - val_loss: 4.3125 - val_mae: 0.4588 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3111 - mae: 0.4232 - val_loss: 2.7056 - val_mae: 0.4358 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2361 - mae: 0.3770 - val_loss: 4.3156 - val_mae: 0.9514 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.2405 - mae: 0.3740 - val_loss: 4.3233 - val_mae: 0.4771 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1935 - mae: 0.3441 - val_loss: 2.6140 - val_mae: 0.3902 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.85864\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.1901 - mae: 0.3407 - val_loss: 1.0430 - val_mae: 0.4167 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.85864\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.1722 - mae: 0.3238 - val_loss: 2.1293 - val_mae: 0.3957 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.85864 to 0.44653, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1875 - mae: 0.3311 - val_loss: 0.4465 - val_mae: 0.3404 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.44653 to 0.32260, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1601 - mae: 0.3119 - val_loss: 0.3226 - val_mae: 0.3229 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1698 - mae: 0.3126 - val_loss: 0.8168 - val_mae: 0.3868 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1485 - mae: 0.3016 - val_loss: 0.8261 - val_mae: 0.3210 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1366 - mae: 0.2891 - val_loss: 0.3756 - val_mae: 0.3651 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1352 - mae: 0.2885 - val_loss: 0.4218 - val_mae: 0.2922 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1311 - mae: 0.2831 - val_loss: 0.4577 - val_mae: 0.3056 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1207 - mae: 0.2729 - val_loss: 0.9655 - val_mae: 0.3071 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1201 - mae: 0.2717 - val_loss: 1.1740 - val_mae: 0.3513 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.32260\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3824 - mae: 0.3575 - val_loss: 0.8420 - val_mae: 0.3120 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.32260 to 0.12857, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.1163 - mae: 0.2663 - val_loss: 0.1286 - val_mae: 0.2585 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.12857\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1107 - mae: 0.2611 - val_loss: 0.1605 - val_mae: 0.3021 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.12857\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1153 - mae: 0.2652 - val_loss: 0.3935 - val_mae: 0.4577 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.12857\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.5378 - mae: 0.3939 - val_loss: 0.6771 - val_mae: 0.5094 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.12857\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2094 - mae: 0.3486 - val_loss: 0.2090 - val_mae: 0.3301 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.12857\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.1614 - mae: 0.3015 - val_loss: 0.1849 - val_mae: 0.3133 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.12857\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1875 - mae: 0.3193 - val_loss: 0.1623 - val_mae: 0.3085 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.12857\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1128 - mae: 0.2635 - val_loss: 0.1330 - val_mae: 0.2721 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.12857\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1424 - mae: 0.2801 - val_loss: 0.1352 - val_mae: 0.2575 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.12857 to 0.11837, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0983 - mae: 0.2460 - val_loss: 0.1184 - val_mae: 0.2672 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.11837\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1045 - mae: 0.2523 - val_loss: 0.1296 - val_mae: 0.2704 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.11837 to 0.11152, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0957 - mae: 0.2427 - val_loss: 0.1115 - val_mae: 0.2598 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.11152 to 0.09965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0935 - mae: 0.2397 - val_loss: 0.0996 - val_mae: 0.2451 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.09965 to 0.09458, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0887 - mae: 0.2329 - val_loss: 0.0946 - val_mae: 0.2399 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.09458\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0866 - mae: 0.2309 - val_loss: 0.0954 - val_mae: 0.2413 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.09458\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0842 - mae: 0.2274 - val_loss: 0.1608 - val_mae: 0.2463 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.09458\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0786 - mae: 0.2199 - val_loss: 0.1547 - val_mae: 0.2411 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.09458\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.1764 - mae: 0.2770 - val_loss: 0.3132 - val_mae: 0.2598 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.09458\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.1397 - mae: 0.2670 - val_loss: 0.1015 - val_mae: 0.2419 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.09458 to 0.09048, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0811 - mae: 0.2236 - val_loss: 0.0905 - val_mae: 0.2233 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.09048\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0828 - mae: 0.2255 - val_loss: 0.1211 - val_mae: 0.2639 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.09048\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0836 - mae: 0.2251 - val_loss: 0.2015 - val_mae: 0.2352 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.09048\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0945 - mae: 0.2359 - val_loss: 0.1260 - val_mae: 0.2727 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.09048\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0768 - mae: 0.2178 - val_loss: 0.0966 - val_mae: 0.2362 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.09048 to 0.08964, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1286 - mae: 0.2379 - val_loss: 0.0896 - val_mae: 0.2271 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.08964\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0653 - mae: 0.2006 - val_loss: 0.0899 - val_mae: 0.2311 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.08964 to 0.07447, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0773 - mae: 0.2174 - val_loss: 0.0745 - val_mae: 0.2094 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.07447\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0764 - mae: 0.2158 - val_loss: 0.1060 - val_mae: 0.2509 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.07447\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0700 - mae: 0.2070 - val_loss: 0.0829 - val_mae: 0.2233 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.07447 to 0.07268, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0713 - mae: 0.2087 - val_loss: 0.0727 - val_mae: 0.2109 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.07268\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0695 - mae: 0.2060 - val_loss: 0.0774 - val_mae: 0.2098 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.07268\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0664 - mae: 0.2015 - val_loss: 0.0755 - val_mae: 0.2143 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.07268\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0704 - mae: 0.2025 - val_loss: 0.2734 - val_mae: 0.2344 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.07268\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.1922 - mae: 0.2890 - val_loss: 0.1286 - val_mae: 0.2535 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.07268\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0740 - mae: 0.2118 - val_loss: 0.0732 - val_mae: 0.2121 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.07268 to 0.06484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0815 - mae: 0.2160 - val_loss: 0.0648 - val_mae: 0.2001 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.06484\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0689 - mae: 0.2056 - val_loss: 0.0796 - val_mae: 0.2201 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.06484\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0697 - mae: 0.2060 - val_loss: 0.0660 - val_mae: 0.2024 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.06484\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0648 - mae: 0.1996 - val_loss: 0.0835 - val_mae: 0.2275 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.06484\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0694 - mae: 0.2019 - val_loss: 0.1564 - val_mae: 0.3089 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.06484\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0618 - mae: 0.1940 - val_loss: 0.0722 - val_mae: 0.2131 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.06484\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0624 - mae: 0.1957 - val_loss: 0.0714 - val_mae: 0.2077 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.06484\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0611 - mae: 0.1939 - val_loss: 0.0695 - val_mae: 0.2062 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.06484\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0596 - mae: 0.1905 - val_loss: 0.0753 - val_mae: 0.2140 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.06484\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0589 - mae: 0.1903 - val_loss: 0.0736 - val_mae: 0.2111 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.06484\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0582 - mae: 0.1889 - val_loss: 0.0738 - val_mae: 0.2127 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.06484\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0579 - mae: 0.1880 - val_loss: 0.0970 - val_mae: 0.2454 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.06484\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0563 - mae: 0.1851 - val_loss: 0.0683 - val_mae: 0.2029 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.06484\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0791 - mae: 0.1997 - val_loss: 0.0690 - val_mae: 0.2054 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.06484\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0500 - mae: 0.1753 - val_loss: 0.0798 - val_mae: 0.2226 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.06484 to 0.06014, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0550 - mae: 0.1834 - val_loss: 0.0601 - val_mae: 0.1904 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.06014\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0579 - mae: 0.1869 - val_loss: 0.0762 - val_mae: 0.1820 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.06014 to 0.05333, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0532 - mae: 0.1801 - val_loss: 0.0533 - val_mae: 0.1791 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.05333\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0777 - mae: 0.1942 - val_loss: 0.0844 - val_mae: 0.2212 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.05333\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0473 - mae: 0.1689 - val_loss: 0.0570 - val_mae: 0.1869 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0536 - mae: 0.1806 - val_loss: 0.0636 - val_mae: 0.1983 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1366 - mae: 0.1976 - val_loss: 0.0594 - val_mae: 0.1889 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0410 - mae: 0.1584 - val_loss: 0.0576 - val_mae: 0.1876 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0495 - mae: 0.1744 - val_loss: 0.0766 - val_mae: 0.2175 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0544 - mae: 0.1824 - val_loss: 0.0651 - val_mae: 0.2002 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0560 - mae: 0.1834 - val_loss: 0.1708 - val_mae: 0.3271 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0493 - mae: 0.1738 - val_loss: 0.0800 - val_mae: 0.2188 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.05333\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0505 - mae: 0.1758 - val_loss: 0.0563 - val_mae: 0.1858 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss improved from 0.05333 to 0.05019, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0532 - mae: 0.1781 - val_loss: 0.0502 - val_mae: 0.1747 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.05019\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0522 - mae: 0.1777 - val_loss: 0.0583 - val_mae: 0.1860 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.05019\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0500 - mae: 0.1742 - val_loss: 0.0535 - val_mae: 0.1770 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.05019\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0494 - mae: 0.1729 - val_loss: 0.0561 - val_mae: 0.1851 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.05019\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0493 - mae: 0.1734 - val_loss: 0.0750 - val_mae: 0.1965 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.05019\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0490 - mae: 0.1727 - val_loss: 0.0625 - val_mae: 0.1986 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.05019\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0475 - mae: 0.1698 - val_loss: 0.0643 - val_mae: 0.1976 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.05019\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0797 - mae: 0.1868 - val_loss: 0.0653 - val_mae: 0.1988 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.05019 to 0.04595, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0384 - mae: 0.1533 - val_loss: 0.0460 - val_mae: 0.1686 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0442 - mae: 0.1643 - val_loss: 0.0598 - val_mae: 0.1823 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0509 - mae: 0.1744 - val_loss: 0.0496 - val_mae: 0.1748 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0482 - mae: 0.1712 - val_loss: 0.0540 - val_mae: 0.1820 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0493 - mae: 0.1725 - val_loss: 0.0529 - val_mae: 0.1816 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0471 - mae: 0.1698 - val_loss: 0.0686 - val_mae: 0.2050 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0465 - mae: 0.1687 - val_loss: 0.0542 - val_mae: 0.1753 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0451 - mae: 0.1660 - val_loss: 0.0643 - val_mae: 0.1959 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.04595\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0465 - mae: 0.1682 - val_loss: 0.0712 - val_mae: 0.2025 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.04595 to 0.04572, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0461 - mae: 0.1670 - val_loss: 0.0457 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.04572\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0470 - mae: 0.1680 - val_loss: 0.0724 - val_mae: 0.2077 - learning_rate: 1.0000e-03\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.04572\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0449 - mae: 0.1653 - val_loss: 0.0613 - val_mae: 0.1941 - learning_rate: 1.0000e-03\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.04572\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0626 - mae: 0.1765 - val_loss: 0.1052 - val_mae: 0.2467 - learning_rate: 1.0000e-03\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss improved from 0.04572 to 0.04520, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0396 - mae: 0.1545 - val_loss: 0.0452 - val_mae: 0.1675 - learning_rate: 1.0000e-03\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.04520\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0406 - mae: 0.1576 - val_loss: 0.0488 - val_mae: 0.1735 - learning_rate: 1.0000e-03\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.04520\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0461 - mae: 0.1674 - val_loss: 0.0696 - val_mae: 0.2079 - learning_rate: 1.0000e-03\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.04520\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0448 - mae: 0.1648 - val_loss: 0.0691 - val_mae: 0.2080 - learning_rate: 1.0000e-03\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.04520 to 0.04341, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0442 - mae: 0.1636 - val_loss: 0.0434 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.04341\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0427 - mae: 0.1614 - val_loss: 0.0480 - val_mae: 0.1727 - learning_rate: 1.0000e-03\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.04341\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0444 - mae: 0.1634 - val_loss: 0.0528 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.04341\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0432 - mae: 0.1623 - val_loss: 0.0480 - val_mae: 0.1706 - learning_rate: 1.0000e-03\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.04341\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0455 - mae: 0.1655 - val_loss: 0.0599 - val_mae: 0.1879 - learning_rate: 1.0000e-03\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.04341\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0421 - mae: 0.1602 - val_loss: 0.0447 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.04341\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0430 - mae: 0.1612 - val_loss: 0.0530 - val_mae: 0.1771 - learning_rate: 1.0000e-03\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.04341\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0425 - mae: 0.1605 - val_loss: 0.0673 - val_mae: 0.2047 - learning_rate: 1.0000e-03\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.04341 to 0.04014, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0455 - mae: 0.1594 - val_loss: 0.0401 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.04014\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0416 - mae: 0.1589 - val_loss: 0.0503 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.04014\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0418 - mae: 0.1593 - val_loss: 0.0603 - val_mae: 0.1907 - learning_rate: 1.0000e-03\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.04014\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0424 - mae: 0.1607 - val_loss: 0.0559 - val_mae: 0.1858 - learning_rate: 1.0000e-03\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.04014\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0437 - mae: 0.1621 - val_loss: 0.0434 - val_mae: 0.1644 - learning_rate: 1.0000e-03\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.04014\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0433 - mae: 0.1616 - val_loss: 0.0513 - val_mae: 0.1776 - learning_rate: 1.0000e-03\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss improved from 0.04014 to 0.03720, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0418 - mae: 0.1584 - val_loss: 0.0372 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0421 - mae: 0.1598 - val_loss: 0.0534 - val_mae: 0.1787 - learning_rate: 1.0000e-03\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0428 - mae: 0.1599 - val_loss: 0.0408 - val_mae: 0.1564 - learning_rate: 1.0000e-03\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0407 - mae: 0.1570 - val_loss: 0.0581 - val_mae: 0.1860 - learning_rate: 1.0000e-03\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0397 - mae: 0.1556 - val_loss: 0.0495 - val_mae: 0.1688 - learning_rate: 1.0000e-03\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0403 - mae: 0.1560 - val_loss: 0.0679 - val_mae: 0.2054 - learning_rate: 1.0000e-03\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0404 - mae: 0.1570 - val_loss: 0.0372 - val_mae: 0.1496 - learning_rate: 1.0000e-03\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0397 - mae: 0.1554 - val_loss: 0.0617 - val_mae: 0.1929 - learning_rate: 1.0000e-03\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0444 - mae: 0.1611 - val_loss: 0.0467 - val_mae: 0.1681 - learning_rate: 1.0000e-03\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0354 - mae: 0.1470 - val_loss: 0.0748 - val_mae: 0.2185 - learning_rate: 1.0000e-03\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0393 - mae: 0.1546 - val_loss: 0.0462 - val_mae: 0.1690 - learning_rate: 1.0000e-03\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0484 - mae: 0.1637 - val_loss: 0.0425 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0352 - mae: 0.1466 - val_loss: 0.0454 - val_mae: 0.1661 - learning_rate: 1.0000e-03\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.03720\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0396 - mae: 0.1546 - val_loss: 0.0575 - val_mae: 0.1862 - learning_rate: 1.0000e-03\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.03720\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0413 - mae: 0.1581 - val_loss: 0.0832 - val_mae: 0.2258 - learning_rate: 1.0000e-03\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.03720\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0388 - mae: 0.1536 - val_loss: 0.0455 - val_mae: 0.1660 - learning_rate: 1.0000e-03\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.03720\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0397 - mae: 0.1555 - val_loss: 0.0404 - val_mae: 0.1567 - learning_rate: 1.0000e-03\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.03720\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0390 - mae: 0.1538 - val_loss: 0.0432 - val_mae: 0.1635 - learning_rate: 1.0000e-03\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.03720\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0403 - mae: 0.1544 - val_loss: 0.0437 - val_mae: 0.1631 - learning_rate: 1.0000e-03\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.03720\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0378 - mae: 0.1517 - val_loss: 0.0542 - val_mae: 0.1833 - learning_rate: 1.0000e-03\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.03720\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0388 - mae: 0.1518 - val_loss: 0.0419 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.03720 to 0.01696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0091 - mae: 0.0747 - val_loss: 0.0170 - val_mae: 0.1007 - learning_rate: 1.0000e-04\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss improved from 0.01696 to 0.01614, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0070 - mae: 0.0664 - val_loss: 0.0161 - val_mae: 0.0985 - learning_rate: 1.0000e-04\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.01614 to 0.01543, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0062 - mae: 0.0623 - val_loss: 0.0154 - val_mae: 0.0958 - learning_rate: 1.0000e-04\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01543\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0056 - mae: 0.0593 - val_loss: 0.0155 - val_mae: 0.0964 - learning_rate: 1.0000e-04\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss improved from 0.01543 to 0.01540, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0052 - mae: 0.0572 - val_loss: 0.0154 - val_mae: 0.0959 - learning_rate: 1.0000e-04\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss improved from 0.01540 to 0.01539, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0049 - mae: 0.0555 - val_loss: 0.0154 - val_mae: 0.0959 - learning_rate: 1.0000e-04\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss improved from 0.01539 to 0.01516, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0047 - mae: 0.0540 - val_loss: 0.0152 - val_mae: 0.0948 - learning_rate: 1.0000e-04\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss improved from 0.01516 to 0.01483, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0044 - mae: 0.0528 - val_loss: 0.0148 - val_mae: 0.0939 - learning_rate: 1.0000e-04\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01483\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0042 - mae: 0.0514 - val_loss: 0.0155 - val_mae: 0.0957 - learning_rate: 1.0000e-04\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss improved from 0.01483 to 0.01454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0040 - mae: 0.0504 - val_loss: 0.0145 - val_mae: 0.0928 - learning_rate: 1.0000e-04\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0148 - val_mae: 0.0938 - learning_rate: 1.0000e-04\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0037 - mae: 0.0486 - val_loss: 0.0146 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0148 - val_mae: 0.0934 - learning_rate: 1.0000e-04\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0148 - val_mae: 0.0936 - learning_rate: 1.0000e-04\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0145 - val_mae: 0.0927 - learning_rate: 1.0000e-04\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0151 - val_mae: 0.0946 - learning_rate: 1.0000e-04\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0148 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0147 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01454\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0161 - val_mae: 0.0927 - learning_rate: 1.0000e-04\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0029 - mae: 0.0426 - val_loss: 0.0155 - val_mae: 0.0935 - learning_rate: 1.0000e-04\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0029 - mae: 0.0427 - val_loss: 0.0159 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0182 - val_mae: 0.0941 - learning_rate: 1.0000e-04\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0187 - val_mae: 0.0933 - learning_rate: 1.0000e-04\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0169 - val_mae: 0.0936 - learning_rate: 1.0000e-04\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0026 - mae: 0.0408 - val_loss: 0.0226 - val_mae: 0.0951 - learning_rate: 1.0000e-04\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0221 - val_mae: 0.0942 - learning_rate: 1.0000e-04\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0192 - val_mae: 0.0934 - learning_rate: 1.0000e-04\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0202 - val_mae: 0.0941 - learning_rate: 1.0000e-04\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0024 - mae: 0.0392 - val_loss: 0.0210 - val_mae: 0.0944 - learning_rate: 1.0000e-04\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0215 - val_mae: 0.0940 - learning_rate: 1.0000e-04\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0015 - mae: 0.0306 - val_loss: 0.0210 - val_mae: 0.0911 - learning_rate: 1.0000e-05\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0014 - mae: 0.0300 - val_loss: 0.0203 - val_mae: 0.0911 - learning_rate: 1.0000e-05\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0014 - mae: 0.0298 - val_loss: 0.0172 - val_mae: 0.0903 - learning_rate: 1.0000e-05\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0014 - mae: 0.0296 - val_loss: 0.0162 - val_mae: 0.0903 - learning_rate: 1.0000e-05\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0014 - mae: 0.0294 - val_loss: 0.0215 - val_mae: 0.0913 - learning_rate: 1.0000e-05\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0014 - mae: 0.0293 - val_loss: 0.0264 - val_mae: 0.0916 - learning_rate: 1.0000e-05\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0014 - mae: 0.0292 - val_loss: 0.0227 - val_mae: 0.0912 - learning_rate: 1.0000e-05\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0014 - mae: 0.0291 - val_loss: 0.0201 - val_mae: 0.0911 - learning_rate: 1.0000e-05\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0014 - mae: 0.0290 - val_loss: 0.0215 - val_mae: 0.0912 - learning_rate: 1.0000e-05\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0013 - mae: 0.0289 - val_loss: 0.0209 - val_mae: 0.0911 - learning_rate: 1.0000e-05\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0013 - mae: 0.0288 - val_loss: 0.0226 - val_mae: 0.0912 - learning_rate: 1.0000e-05\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0013 - mae: 0.0288 - val_loss: 0.0200 - val_mae: 0.0911 - learning_rate: 1.0000e-05\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0013 - mae: 0.0287 - val_loss: 0.0212 - val_mae: 0.0914 - learning_rate: 1.0000e-05\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0223 - val_mae: 0.0914 - learning_rate: 1.0000e-05\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0013 - mae: 0.0286 - val_loss: 0.0173 - val_mae: 0.0904 - learning_rate: 1.0000e-05\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0013 - mae: 0.0285 - val_loss: 0.0206 - val_mae: 0.0912 - learning_rate: 1.0000e-05\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0013 - mae: 0.0284 - val_loss: 0.0206 - val_mae: 0.0911 - learning_rate: 1.0000e-05\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0206 - val_mae: 0.0911 - learning_rate: 1.0000e-05\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0013 - mae: 0.0283 - val_loss: 0.0212 - val_mae: 0.0912 - learning_rate: 1.0000e-05\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0208 - val_mae: 0.0910 - learning_rate: 1.0000e-05\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0012 - mae: 0.0274 - val_loss: 0.0220 - val_mae: 0.0911 - learning_rate: 1.0000e-06\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0012 - mae: 0.0273 - val_loss: 0.0214 - val_mae: 0.0910 - learning_rate: 1.0000e-06\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0216 - val_mae: 0.0910 - learning_rate: 1.0000e-06\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0217 - val_mae: 0.0910 - learning_rate: 1.0000e-06\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0171 - val_mae: 0.0903 - learning_rate: 1.0000e-06\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0202 - val_mae: 0.0908 - learning_rate: 1.0000e-06\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0222 - val_mae: 0.0910 - learning_rate: 1.0000e-06\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01454\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0187 - val_mae: 0.0906 - learning_rate: 1.0000e-06\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0208 - val_mae: 0.0909 - learning_rate: 1.0000e-06\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01454\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0012 - mae: 0.0271 - val_loss: 0.0200 - val_mae: 0.0907 - learning_rate: 1.0000e-06\n",
      "Epoch 302: early stopping\n",
      "Restoring model weights from the end of the best epoch: 252.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 5s - 7ms/step\n",
      "Mean positioning error: 0.1463 m\n",
      "Median positioning error: 0.1319 m\n",
      "90th percentile error: 0.2599 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17513.971831,
   "end_time": "2025-08-02T21:23:15.810015",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-02T16:31:21.838184",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
