{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2c268a49",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-29T06:18:23.549722Z",
     "iopub.status.busy": "2025-07-29T06:18:23.549435Z",
     "iopub.status.idle": "2025-07-29T06:18:24.964349Z",
     "shell.execute_reply": "2025-07-29T06:18:24.963541Z"
    },
    "papermill": {
     "duration": 1.419841,
     "end_time": "2025-07-29T06:18:24.965713",
     "exception": false,
     "start_time": "2025-07-29T06:18:23.545872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e22c7e05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:18:24.971260Z",
     "iopub.status.busy": "2025-07-29T06:18:24.970878Z",
     "iopub.status.idle": "2025-07-29T06:18:39.344538Z",
     "shell.execute_reply": "2025-07-29T06:18:39.343901Z"
    },
    "papermill": {
     "duration": 14.377672,
     "end_time": "2025-07-29T06:18:39.345958",
     "exception": false,
     "start_time": "2025-07-29T06:18:24.968286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-29 06:18:26.478251: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753769906.675426      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753769906.731047      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3ca53d24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:18:39.351373Z",
     "iopub.status.busy": "2025-07-29T06:18:39.350931Z",
     "iopub.status.idle": "2025-07-29T06:18:39.355169Z",
     "shell.execute_reply": "2025-07-29T06:18:39.354665Z"
    },
    "papermill": {
     "duration": 0.007842,
     "end_time": "2025-07-29T06:18:39.356157",
     "exception": false,
     "start_time": "2025-07-29T06:18:39.348315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fa477426",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:18:39.360630Z",
     "iopub.status.busy": "2025-07-29T06:18:39.360401Z",
     "iopub.status.idle": "2025-07-29T06:18:39.363312Z",
     "shell.execute_reply": "2025-07-29T06:18:39.362817Z"
    },
    "papermill": {
     "duration": 0.006144,
     "end_time": "2025-07-29T06:18:39.364217",
     "exception": false,
     "start_time": "2025-07-29T06:18:39.358073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8a9b22d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:18:39.369159Z",
     "iopub.status.busy": "2025-07-29T06:18:39.368953Z",
     "iopub.status.idle": "2025-07-29T10:15:29.468274Z",
     "shell.execute_reply": "2025-07-29T10:15:29.467668Z"
    },
    "papermill": {
     "duration": 14210.103492,
     "end_time": "2025-07-29T10:15:29.469515",
     "exception": false,
     "start_time": "2025-07-29T06:18:39.366023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753769941.276963      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753769950.481312      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">101,632</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m101,632\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">693,258</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m693,258\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">692,742</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m692,742\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753769961.116503      57 service.cc:148] XLA service 0x7ae934007140 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753769961.117379      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753769964.954548      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 3.98750, saving model to models/best_model_full.keras\n",
      "4375/4375 - 90s - 21ms/step - loss: 53.5108 - mae: 4.4376 - val_loss: 3.9875 - val_mae: 1.5594 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 3.98750 to 1.93376, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 3.8515 - mae: 1.5010 - val_loss: 1.9338 - val_mae: 1.0745 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 1.93376 to 1.80397, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 2.6435 - mae: 1.2389 - val_loss: 1.8040 - val_mae: 1.0633 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 1.80397 to 1.26717, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.5231 - mae: 0.9550 - val_loss: 1.2672 - val_mae: 0.8760 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.26717 to 0.90485, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.9812 - mae: 0.7689 - val_loss: 0.9049 - val_mae: 0.7551 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 0.90485 to 0.46435, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.7570 - mae: 0.6640 - val_loss: 0.4643 - val_mae: 0.5406 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.46435 to 0.41011, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4580 - mae: 0.5286 - val_loss: 0.4101 - val_mae: 0.5050 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.41011\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4755 - mae: 0.5344 - val_loss: 0.4777 - val_mae: 0.5434 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.41011 to 0.24504, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4162 - mae: 0.5016 - val_loss: 0.2450 - val_mae: 0.3883 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.24504\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3900 - mae: 0.4856 - val_loss: 0.4381 - val_mae: 0.5160 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.24504 to 0.19953, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3343 - mae: 0.4489 - val_loss: 0.1995 - val_mae: 0.3558 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3573 - mae: 0.4632 - val_loss: 0.2519 - val_mae: 0.3910 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.19953\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3083 - mae: 0.4323 - val_loss: 0.3325 - val_mae: 0.4478 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3042 - mae: 0.4288 - val_loss: 0.3608 - val_mae: 0.4702 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2737 - mae: 0.4070 - val_loss: 0.3344 - val_mae: 0.4604 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3182 - mae: 0.4375 - val_loss: 0.7486 - val_mae: 0.6868 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2745 - mae: 0.4086 - val_loss: 0.2656 - val_mae: 0.4118 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4697 - mae: 0.4824 - val_loss: 0.3154 - val_mae: 0.4457 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2690 - mae: 0.4045 - val_loss: 0.2831 - val_mae: 0.4199 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2935 - mae: 0.4213 - val_loss: 0.3701 - val_mae: 0.4853 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3384 - mae: 0.4450 - val_loss: 0.3678 - val_mae: 0.4905 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2642 - mae: 0.4003 - val_loss: 0.2127 - val_mae: 0.3572 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2621 - mae: 0.3971 - val_loss: 0.4051 - val_mae: 0.5078 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4421 - mae: 0.4617 - val_loss: 0.2907 - val_mae: 0.4187 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3107 - mae: 0.4312 - val_loss: 0.5732 - val_mae: 0.5771 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2868 - mae: 0.4178 - val_loss: 0.3085 - val_mae: 0.4310 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.19953\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2689 - mae: 0.4012 - val_loss: 0.2038 - val_mae: 0.3529 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.19953\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2692 - mae: 0.4000 - val_loss: 0.3797 - val_mae: 0.5040 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.19953\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.2575 - mae: 0.3943 - val_loss: 0.2360 - val_mae: 0.3858 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.19953\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.2733 - mae: 0.4043 - val_loss: 0.3179 - val_mae: 0.4374 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.19953\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.3596 - mae: 0.4380 - val_loss: 0.2158 - val_mae: 0.3642 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss improved from 0.19953 to 0.06029, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0694 - mae: 0.2061 - val_loss: 0.0603 - val_mae: 0.1932 - learning_rate: 1.0000e-03\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss improved from 0.06029 to 0.04550, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0512 - mae: 0.1778 - val_loss: 0.0455 - val_mae: 0.1676 - learning_rate: 1.0000e-03\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss improved from 0.04550 to 0.04460, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0409 - mae: 0.1593 - val_loss: 0.0446 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss improved from 0.04460 to 0.03477, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0354 - mae: 0.1481 - val_loss: 0.0348 - val_mae: 0.1465 - learning_rate: 1.0000e-03\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.03477 to 0.03450, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0316 - mae: 0.1400 - val_loss: 0.0345 - val_mae: 0.1466 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.03450\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0289 - mae: 0.1342 - val_loss: 0.0348 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss improved from 0.03450 to 0.02996, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0267 - mae: 0.1290 - val_loss: 0.0300 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.02996 to 0.02919, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0248 - mae: 0.1242 - val_loss: 0.0292 - val_mae: 0.1338 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.02919 to 0.02859, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0237 - mae: 0.1215 - val_loss: 0.0286 - val_mae: 0.1332 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.02859 to 0.02557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0226 - mae: 0.1185 - val_loss: 0.0256 - val_mae: 0.1247 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.02557 to 0.02442, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0214 - mae: 0.1156 - val_loss: 0.0244 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.02442\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0205 - mae: 0.1130 - val_loss: 0.0277 - val_mae: 0.1308 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.02442 to 0.02301, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0198 - mae: 0.1113 - val_loss: 0.0230 - val_mae: 0.1195 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.02301\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0193 - mae: 0.1097 - val_loss: 0.0233 - val_mae: 0.1188 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.02301 to 0.02297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0189 - mae: 0.1086 - val_loss: 0.0230 - val_mae: 0.1179 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.02297 to 0.02292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0181 - mae: 0.1062 - val_loss: 0.0229 - val_mae: 0.1186 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.02292 to 0.02185, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0174 - mae: 0.1044 - val_loss: 0.0218 - val_mae: 0.1158 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.02185\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0170 - mae: 0.1029 - val_loss: 0.0233 - val_mae: 0.1197 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.02185 to 0.02122, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0168 - mae: 0.1023 - val_loss: 0.0212 - val_mae: 0.1137 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.02122 to 0.02054, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0163 - mae: 0.1010 - val_loss: 0.0205 - val_mae: 0.1114 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.02054 to 0.01968, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0159 - mae: 0.0997 - val_loss: 0.0197 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.01968\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0158 - mae: 0.0992 - val_loss: 0.0206 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.01968 to 0.01941, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0155 - mae: 0.0983 - val_loss: 0.0194 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.01941 to 0.01857, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0153 - mae: 0.0977 - val_loss: 0.0186 - val_mae: 0.1062 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.01857\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0150 - mae: 0.0968 - val_loss: 0.0218 - val_mae: 0.1167 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.01857\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0148 - mae: 0.0960 - val_loss: 0.0233 - val_mae: 0.1196 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.01857\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0146 - mae: 0.0956 - val_loss: 0.0206 - val_mae: 0.1125 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.01857\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0146 - mae: 0.0955 - val_loss: 0.0199 - val_mae: 0.1101 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.01857\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0144 - mae: 0.0947 - val_loss: 0.0214 - val_mae: 0.1135 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.01857\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0145 - mae: 0.0948 - val_loss: 0.0204 - val_mae: 0.1109 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.01857\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0141 - mae: 0.0937 - val_loss: 0.0200 - val_mae: 0.1105 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.01857\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0139 - mae: 0.0932 - val_loss: 0.0196 - val_mae: 0.1101 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.01857\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0138 - mae: 0.0926 - val_loss: 0.0199 - val_mae: 0.1099 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.01857 to 0.01752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0139 - mae: 0.0928 - val_loss: 0.0175 - val_mae: 0.1032 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0138 - mae: 0.0928 - val_loss: 0.0204 - val_mae: 0.1114 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0136 - mae: 0.0918 - val_loss: 0.0197 - val_mae: 0.1100 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0135 - mae: 0.0916 - val_loss: 0.0223 - val_mae: 0.1174 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0135 - mae: 0.0915 - val_loss: 0.0184 - val_mae: 0.1066 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0134 - mae: 0.0912 - val_loss: 0.0186 - val_mae: 0.1063 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0134 - mae: 0.0911 - val_loss: 0.0272 - val_mae: 0.1293 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.01752\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0134 - mae: 0.0909 - val_loss: 0.0199 - val_mae: 0.1099 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0135 - mae: 0.0913 - val_loss: 0.0188 - val_mae: 0.1073 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.01752\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0131 - mae: 0.0902 - val_loss: 0.0187 - val_mae: 0.1067 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.01752\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0133 - mae: 0.0909 - val_loss: 0.0196 - val_mae: 0.1101 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.01752\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0134 - mae: 0.0911 - val_loss: 0.0199 - val_mae: 0.1103 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.01752\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0136 - mae: 0.0914 - val_loss: 0.0239 - val_mae: 0.1210 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.01752 to 0.01649, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0137 - mae: 0.0918 - val_loss: 0.0165 - val_mae: 0.1002 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.01649\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0138 - mae: 0.0925 - val_loss: 0.0186 - val_mae: 0.1068 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.01649\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0135 - mae: 0.0913 - val_loss: 0.0202 - val_mae: 0.1123 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.01649\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0134 - mae: 0.0911 - val_loss: 0.0220 - val_mae: 0.1167 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.01649\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0135 - mae: 0.0912 - val_loss: 0.0219 - val_mae: 0.1167 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.01649\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0136 - mae: 0.0916 - val_loss: 0.0185 - val_mae: 0.1065 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.01649\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0138 - mae: 0.0921 - val_loss: 0.0226 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.01649\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0135 - mae: 0.0913 - val_loss: 0.0209 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.01649\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0135 - mae: 0.0913 - val_loss: 0.0190 - val_mae: 0.1075 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01649\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0136 - mae: 0.0918 - val_loss: 0.0186 - val_mae: 0.1064 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01649\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0136 - mae: 0.0913 - val_loss: 0.0212 - val_mae: 0.1142 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01649\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0136 - mae: 0.0917 - val_loss: 0.0194 - val_mae: 0.1086 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.01649\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0137 - mae: 0.0918 - val_loss: 0.0215 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.01649 to 0.01577, saving model to models/best_model_full.keras\n",
      "4375/4375 - 77s - 18ms/step - loss: 0.0137 - mae: 0.0917 - val_loss: 0.0158 - val_mae: 0.0985 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.01577\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0140 - mae: 0.0925 - val_loss: 0.0185 - val_mae: 0.1062 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.01577\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0139 - mae: 0.0922 - val_loss: 0.0183 - val_mae: 0.1056 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.01577\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0139 - mae: 0.0923 - val_loss: 0.0177 - val_mae: 0.1036 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01577\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0140 - mae: 0.0926 - val_loss: 0.0214 - val_mae: 0.1137 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01577\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0140 - mae: 0.0923 - val_loss: 0.0199 - val_mae: 0.1111 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01577\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0138 - mae: 0.0918 - val_loss: 0.0253 - val_mae: 0.1254 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.01577\n",
      "4375/4375 - 78s - 18ms/step - loss: 0.0139 - mae: 0.0924 - val_loss: 0.0209 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01577\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0141 - mae: 0.0928 - val_loss: 0.0205 - val_mae: 0.1125 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01577\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0141 - mae: 0.0929 - val_loss: 0.0204 - val_mae: 0.1111 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01577\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0139 - mae: 0.0924 - val_loss: 0.0189 - val_mae: 0.1076 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01577\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0142 - mae: 0.0933 - val_loss: 0.0194 - val_mae: 0.1088 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01577\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0142 - mae: 0.0934 - val_loss: 0.0191 - val_mae: 0.1079 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01577\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0141 - mae: 0.0930 - val_loss: 0.0185 - val_mae: 0.1064 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01577\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0141 - mae: 0.0927 - val_loss: 0.0167 - val_mae: 0.1005 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01577\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0144 - mae: 0.0939 - val_loss: 0.0176 - val_mae: 0.1026 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01577\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0142 - mae: 0.0932 - val_loss: 0.0195 - val_mae: 0.1091 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01577\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0145 - mae: 0.0941 - val_loss: 0.0276 - val_mae: 0.1300 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01577\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0143 - mae: 0.0933 - val_loss: 0.0240 - val_mae: 0.1232 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01577\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0144 - mae: 0.0936 - val_loss: 0.0185 - val_mae: 0.1065 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01577\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0145 - mae: 0.0940 - val_loss: 0.0185 - val_mae: 0.1064 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.01577 to 0.00962, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0096 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.00962 to 0.00922, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0092 - val_mae: 0.0738 - learning_rate: 1.0000e-04\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.00922 to 0.00914, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0091 - val_mae: 0.0736 - learning_rate: 1.0000e-04\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.00914 to 0.00907, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0091 - val_mae: 0.0734 - learning_rate: 1.0000e-04\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.00907\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0091 - val_mae: 0.0732 - learning_rate: 1.0000e-04\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.00907\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0091 - val_mae: 0.0733 - learning_rate: 1.0000e-04\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss improved from 0.00907 to 0.00896, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0090 - val_mae: 0.0727 - learning_rate: 1.0000e-04\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.00896\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0023 - mae: 0.0380 - val_loss: 0.0090 - val_mae: 0.0733 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.00896 to 0.00885, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0022 - mae: 0.0373 - val_loss: 0.0089 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.00885\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0021 - mae: 0.0367 - val_loss: 0.0089 - val_mae: 0.0724 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.00885 to 0.00884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0088 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.00884\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0357 - val_loss: 0.0089 - val_mae: 0.0724 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.00884 to 0.00883, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0088 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.00883\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0088 - val_mae: 0.0721 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.00883\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0019 - mae: 0.0343 - val_loss: 0.0089 - val_mae: 0.0721 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.00883\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0018 - mae: 0.0338 - val_loss: 0.0091 - val_mae: 0.0732 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.00883 to 0.00882, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0088 - val_mae: 0.0719 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.00882\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0089 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.00882\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0017 - mae: 0.0327 - val_loss: 0.0091 - val_mae: 0.0732 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.00882\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0089 - val_mae: 0.0723 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.00882\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0089 - val_mae: 0.0723 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.00882\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0016 - mae: 0.0317 - val_loss: 0.0089 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.00882\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0089 - val_mae: 0.0723 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.00882\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0311 - val_loss: 0.0089 - val_mae: 0.0722 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.00882\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0307 - val_loss: 0.0089 - val_mae: 0.0721 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.00882\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0015 - mae: 0.0305 - val_loss: 0.0090 - val_mae: 0.0726 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.00882\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0014 - mae: 0.0302 - val_loss: 0.0089 - val_mae: 0.0720 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.00882\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0014 - mae: 0.0299 - val_loss: 0.0089 - val_mae: 0.0721 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.00882\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0014 - mae: 0.0297 - val_loss: 0.0089 - val_mae: 0.0723 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.00882 to 0.00866, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.9764e-04 - mae: 0.0249 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.00866 to 0.00865, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.5842e-04 - mae: 0.0244 - val_loss: 0.0086 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.4263e-04 - mae: 0.0242 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.3291e-04 - mae: 0.0241 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.2458e-04 - mae: 0.0239 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.1842e-04 - mae: 0.0239 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.1331e-04 - mae: 0.0238 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.0716e-04 - mae: 0.0237 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 9.0279e-04 - mae: 0.0236 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.9711e-04 - mae: 0.0236 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.9340e-04 - mae: 0.0235 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.8937e-04 - mae: 0.0234 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.8546e-04 - mae: 0.0234 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.8233e-04 - mae: 0.0234 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.7894e-04 - mae: 0.0233 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.7544e-04 - mae: 0.0233 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.7131e-04 - mae: 0.0232 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.6844e-04 - mae: 0.0232 - val_loss: 0.0087 - val_mae: 0.0711 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.6477e-04 - mae: 0.0231 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.6241e-04 - mae: 0.0231 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.5906e-04 - mae: 0.0230 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.2353e-04 - mae: 0.0225 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1860e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.1744e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1681e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1642e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1586e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1545e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1489e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1457e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1427e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1403e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1365e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1319e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1275e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1252e-04 - mae: 0.0224 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1219e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.1170e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-06\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.1147e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1110e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.1105e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-06\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0747e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-07\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0668e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-07\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0637e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-07\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0621e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-07\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0615e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-07\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0610e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-07\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0601e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-07\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0599e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-07\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0593e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0710 - learning_rate: 1.0000e-07\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00865\n",
      "4375/4375 - 73s - 17ms/step - loss: 8.0588e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-07\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00865\n",
      "4375/4375 - 74s - 17ms/step - loss: 8.0582e-04 - mae: 0.0223 - val_loss: 0.0087 - val_mae: 0.0709 - learning_rate: 1.0000e-07\n",
      "Epoch 192: early stopping\n",
      "Restoring model weights from the end of the best epoch: 142.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 5s - 8ms/step\n",
      "Mean positioning error: 0.1118 m\n",
      "Median positioning error: 0.0999 m\n",
      "90th percentile error: 0.2005 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeZxbVd0/8M9NJpOZzL503zeWUtpCsaVl1wKl7KIi+siiIKAoUp5HQYUCPoDiA4JQxQVk/4kiikotlNIihUKxZSulhe7QdjqdNTOdmUwm9/z+mCadzCSdyUzOkpPP+2WlvZl8z/d7Tu49OUnmxBFCCBARERERERGRdh7dCRARERERERFRJy7SiYiIiIiIiAzBRToRERERERGRIbhIJyIiIiIiIjIEF+lEREREREREhuAinYiIiIiIiMgQXKQTERERERERGYKLdCIiIiIiIiJDcJFOREREREREZAgu0omIiBTbs2cPvvCFL6CiogKO4+Dee+/VnVLMpZdeirFjx/bpZ2+55RY4jiM1nxUrVsBxHKxYsUJqO0RERKbgIp2IiDLO5s2bceWVV2L8+PHIy8tDcXExjjvuONx3331obW2N/dzYsWPhOA4cx4HH40FpaSmOPPJIfPOb38Sbb76ZMHb057v/GTp0aNryv+666/DCCy/gxhtvxOOPP4558+Yl/dmuOXg8HgwfPhynnXaaskVrS0sLbrnllqxcJD/yyCNJHw+O4+CNN97QnSIREVnIEUII3UkQERH11fPPP48vfvGL8Pv9uPjiizFlyhS0t7dj5cqV+Mtf/oJLL70Uv/3tbwF0LtLLyspw/fXXAwCamprw4Ycf4s9//jOqqqpw3XXX4Z577omL7zgOTj31VFx88cVxx/Pz83HBBRekpYahQ4di7ty5eOKJJ3r92a75CCGwdetW/OpXv0J1dTWef/55nHHGGWnJKSocDsN1Xfj9fgBATU0NBg0ahIULF+KWW26J+9mOjg50dHQgLy8vrTl05bou2tvbkZubC49H7XsLjzzyCC677DLcdtttGDduXI/b582bh8rKSqU5ERGR/XJ0J0BERNRXW7duxZe//GWMGTMGL7/8MoYNGxa77dvf/jY2bdqE559/Pu4+I0aMwH/913/FHfvZz36Gr3zlK/jFL36BSZMm4eqrr467/ZBDDulxn3Sqrq5GaWlpn3++ez7nn38+pk6dinvvvTfti3Sfz9fnn83JyUFOjtynEh6PR+qLAH1xxhln4JhjjknpPh0dHXBdF7m5uT1u27dvHwoKCvqdjxACbW1tyM/P73cMIiIyFz/uTkREGeOuu+5Cc3MzHnroobgFetTEiRNx7bXX9honPz8fjz/+OMrLy3H77bcjXR8q27JlC774xS+ivLwcgUAAxx57bNyLBtGPTwshsGjRotjHplN15JFHorKyElu3bo0de/nll3HCCSegoKAApaWlOPfcc/Hhhx/G3a+pqQnf+973MHbsWPj9fgwePBinnnoq1q5dG/uZrr+Tvm3bNgwaNAgAcOutt8byjb6jnuh30js6OvCTn/wEEyZMgN/vx9ixY/HDH/4QoVAo7ufGjh2Ls846CytXrsTMmTORl5eH8ePH47HHHov7uUS/k37yySdjypQpWL9+PU455RQEAgGMGDECd911V4++2r59O8455xwUFBRg8ODBsV81SOfvuW/btg2O4+D//u//cO+998ZqX79+fayP1q9fj6985SsoKyvD8ccf36++euGFF3DMMccgPz8fv/nNb9KSOxERmYfvpBMRUcb4xz/+gfHjx2POnDkDjlVYWIjzzz8fDz30ENavX48jjjgidltbWxtqamrifr6oqCj2EfBE9uzZgzlz5qClpQXf/e53UVFRgUcffRTnnHMOnnnmGZx//vk48cQT8fjjj+NrX/tawo/U91V9fT3q6+sxceJEAMBLL72EM844A+PHj8ctt9yC1tZW3H///TjuuOOwdu3a2KL7qquuwjPPPINrrrkGkydPRm1tLVauXIkPP/wQRx99dI92Bg0ahF//+te4+uqrcf755+Pzn/88AGDq1KlJc7v88svx6KOP4gtf+AKuv/56vPnmm7jzzjvx4Ycf4q9//Wvcz27atAlf+MIX8I1vfAOXXHIJHn74YVx66aWYMWNG3Hgk64N58+bh85//PL70pS/hmWeewQ9+8AMceeSRsU8X7Nu3D5/97Gexe/duXHvttRg6dCieeuopLF++vM99DQCNjY09Hg+O46CioiLu2B/+8Ae0tbXhm9/8Jvx+P8rLy2O3ffGLX8SkSZNwxx13xF4USqWvNm7ciIsuughXXnklrrjiChx66KEp1UBERBlEEBERZYDGxkYBQJx77rl9vs+YMWPEmWeemfT2X/ziFwKAeO6552LHACT884c//OGgbX3ve98TAMSrr74aO9bU1CTGjRsnxo4dKyKRSFwb3/72t/tUAwDxjW98Q+zdu1dUV1eLN998U3zuc58TAMTdd98thBBi+vTpYvDgwaK2tjZ2v3fffVd4PB5x8cUXx46VlJT02u4ll1wixowZE/v33r17BQCxcOHCHj+7cOFC0fWpxDvvvCMAiMsvvzzu5/77v/9bABAvv/xy7NiYMWMEAPHvf/87dqy6ulr4/X5x/fXXx44tX75cABDLly+PHTvppJMEAPHYY4/FjoVCITF06FBxwQUXxI7dfffdAoD429/+FjvW2toqDjvssB4xE/nDH/6Q9PHg9/tjP7d161YBQBQXF4vq6uqEfXTRRRfFHe9PXy1ZsuSg+RIRkR34cXciIsoIwWAQQOc72ulSWFgIoPNj4F2de+65WLp0adyf008//aCxFi9ejJkzZ8Y+yhyN/81vfhPbtm3D+vXr+53nQw89hEGDBmHw4MGYNWsWXnvtNSxYsADf+973sHv3brzzzju49NJL4965nTp1Kk499VQsXrw4dqy0tBRvvvkmdu3a1e9cDiba1oIFC+KORzfu675fwOTJk3HCCSfE/j1o0CAceuih2LJlS69tFRYWxv2efm5uLmbOnBl33yVLlmDEiBE455xzYsfy8vJwxRVXpFAVsGjRoh6Ph3/96189fu6CCy6I/XpAd1dddVXcv1Ptq3HjxvX6GCQiIjvw4+5ERJQRiouLAfRcUA9Ec3MzgJ4L/5EjR2Lu3Lkpxdq+fTtmzZrV4/jhhx8eu33KlCn9yvPcc8/FNddcA8dxUFRUhCOOOCK28dj27dsBIOHHnw8//HC88MILsY3K7rrrLlxyySUYNWoUZsyYgfnz5+Piiy/G+PHj+5VXd9u3b4fH44l9DD9q6NChKC0tjeUaNXr06B4xysrKUF9f32tbI0eO7PH78GVlZXjvvffi8pkwYUKPn+ueX29mzpzZp43jEu0An+y2VPvqYLGJiMgufCediIgyQnFxMYYPH45169alLWY0VqqLNtWiLxp87nOfw8yZM/u9M/iXvvQlbNmyBffffz+GDx+On//85zjiiCMSvis8EH3dDM/r9SY8Lvqwkd9A7ivLwXZbT3ZbX/uKO7kTEWUPLtKJiChjnHXWWdi8eTNWrVo14FjNzc3461//ilGjRsXe7R6IMWPGYOPGjT2Ob9iwIXa7DNG4ydqurKyMW9QPGzYM3/rWt/C3v/0NW7duRUVFBW6//fak8VPZfX7MmDFwXRcff/xx3PE9e/agoaFBWh8cLJ/Nmzf3WLhv2rRJaR6JmNZXRERkDi7SiYgoY3z/+99HQUEBLr/8cuzZs6fH7Zs3b8Z9993Xa5zW1lZ87WtfQ11dHX70ox/162vQups/fz5Wr14d9wLCvn378Nvf/hZjx47F5MmTB9xGIsOGDcP06dPx6KOPoqGhIXZ83bp1ePHFFzF//nwAQCQSQWNjY9x9Bw8ejOHDh/f4yq+uAoEAAMTFTiba1r333ht3/J577gEAnHnmmb3GSKfTTz8dO3fuxN///vfYsba2Nvzud79TmkcipvUVERGZg7+TTkREGWPChAl46qmncOGFF+Lwww/HxRdfjClTpqC9vR2vv/46/vznP+PSSy+Nu8/OnTvxxBNPAOh893z9+vX485//jKqqKlx//fW48sor05LbDTfcgP/3//4fzjjjDHz3u99FeXk5Hn30UWzduhV/+ctf4PHIe1385z//Oc444wzMnj0b3/jGN2JfwVZSUhL7TvOmpiaMHDkSX/jCFzBt2jQUFhbipZdewltvvYW77747aez8/HxMnjwZTz/9NA455BCUl5djypQpCX+/ftq0abjkkkvw29/+Fg0NDTjppJOwevVqPProozjvvPNwyimnyOqChK688ko88MADuOiii3Dttddi2LBhePLJJ5GXlweg758S+Ne//hX7RERXc+bM6ffv85vWV0REZA4u0omIKKOcc845eO+99/Dzn/8czz33HH7961/D7/dj6tSpuPvuu3vs3P3OO+/ga1/7WmzTtVGjRuHss8/G5ZdfjpkzZ6YtryFDhuD111/HD37wA9x///1oa2vD1KlT8Y9//EP6u6Jz587FkiVLsHDhQtx8883w+Xw46aST8LOf/Sy24VggEMC3vvUtvPjii3j22Wfhui4mTpyIX/3qV7j66qsPGv/3v/89vvOd7+C6665De3s7Fi5cmHQTvN///vcYP348HnnkEfz1r3/F0KFDceONN2LhwoVpr7s3hYWFePnll/Gd73wH9913HwoLC3HxxRdjzpw5uOCCC2KL9d7cfPPNCY//4Q9/GNCmeyb1FRERmcMROndYISIiIlLs3nvvxXXXXYdPP/0UI0aM0J0OERFRHC7S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1RDKO++8g5SUFPz2t79ttFr6XXfdBa/Xiw8//DDQR69evXDxxRc3iqNpGtLT00PmCXcl9pKSkkYvRgTTpk0b/PrXv8acOXMielc8MTERQN07vv/5z39wxx13YPLkyYF36CdOnIhFixYBqPt6wtNPP40XXngB27Ztw8cff4yTTjopaFz/xeZrr72G/Pz8ehefx3rmmWfw5JNPYvr06Vi3bh3GjBmDiy66CNu2bav3uPvuuw9TpkzBmjVr0LNnT1x99dXHfVd5x44d+Pjjj/HZZ5/hs88+w1dffYVHH300cP/kyZOxZMkSzJkzB/Pnz8c333yD1atXhz1ux/P666/D7XZjyZIlmDVrVuD2e+65B48++ig2bdqEfv364e6778aHH36I119/HatXr0b37t0xZswYFBYW1ovX8Hlm4OruFPP8J1tqLNrG5uMf9uPuD9ahxqejb24aXrhucOBPrcnci+ja7MxvZS4rYoueG4ouXN09NJX2pXB7qfT60Pf+L2yoqLGND41Bkrv5769t27YNXbt2hcvlOu7jxowZg3bt2uG1114LLL72xhtvoGPHjjj77LObnf94tm7dim7duiE+Pr7Rfe3atUNaWlrg+8/btm1Dr169Is4R7krsS5cuxXvvvYfPP/88rJh9+vRBaWkpjh49GtbHv/Pz8zF9+nS0b98evXr1wq233oobbrgBt912GzweDwYOHIjvvvsO06dPx6hRo7Bnzx7k5ORg9OjRcLlc6NSpE4YOHRo0duvWrQHUveCSk5MTsobp06fjz3/+M6666ioAwGOPPYZFixZhxowZmDlzZuBxU6ZMwfnnnw8AePDBB3HCCSdg+/bt6N27d9C4uq5j9uzZgb+UcN1112HhwoV4+OGHUVpaitdffx1vv/12YDt67bXX0K5duybHrKSkBCkpKfVuO/300/Hf//438HOPHj3w+OOPB37Oz88HADz00EM455xzAADl5eV4/vnnMXv2bJx33nkAgJdeegnz58/HK6+8gj/96U+B5x/7PLNwdXeKeYZhoKSkRNoFYESKprH5auth3PX+WtT4dAzNy8KsawchPfGXXy5k7kV0bXbmtzKXFbFFzw1FF67uHppK+1I09NLS2sJ9vtPpxPXXX4/Zs2cHVi9//fXXccMNN1j6N8ENwwh8//d4tTZ3HAzDwNixY5GSkoKUlBSccMIJjR6z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YMEC5Ofn46OPPgr6uLvvvhsffvghZs+eje+++w7du3fHmDFjUFhYWO9x9913H5588kl8//33iIuLw4033njcvr755hvs2LEDixYtwuuvv47Zs2fX+5j9hAkTcODAASxevBgffvghXnzxxWZ97D+Y6dOno3///vjhhx/w17/+FQBQUVGBxx57DC+//DI2bNiANm3a4IYbbsD333+POXPmYNmyZTAMA+PGjav3YkKw5zXHjh078PHHH+Ozzz7DZ599hq+++gqPPvpo4P5p06bhX//6F2bNmoUNGzbgj3/8I6699lp89dVXLRsMCfAinYhapNan44/vrcH/Nh5EfJwDD150Al68bjDSk1yiSyMiIrJE8fPvYle/y7Cr32WoXFL/u9re3QcC9x2+5+lGz82/9p7A/Q153pkbuK/ss+ZfaAwbNgyzZ8/GvHnz8Pzzz+Onn37C6aefHngXsqCgAG63u9FCXW3btkVBQQEA4J577kFcXBy6d++OTz75BC+//DK2bduG119/HX/9619x6623omvXrrjyyitRUlISVl3Tpk3DNddcgzvvvBM9evTA8OHD8eyzz+Jf//oXqqqqwoqxbds2zJo1C4MHD0ZqaiqmT5+OP//5z7jqqqvQq1cvPPbYYxgwYEDg3eU9e/agR48eOO2009C5c2ecdtppuPrqq4PGbt267i/QZGdnIycnB1lZWY0eU15ejueffx5PPPEEzjvvPPTt2xcvvvgiEhMT8corr9R77MMPP4wzzzwTffv2xT333IOlS5cet8+MjAz84x//QO/evXHBBRfg/PPPD3xvffPmzViwYAFeeuklDBs2DAMHDsTLL7+MysrKJsfsxx9/DHy83v/v1ltvrfeYs846C3fddRe6deuGbt26Aaj71MRzzz2H4cOHo1evXti/fz/mzJmDl19+Gaeffjr69++Pt956C/v376+3+F7D5yUlNe9NG13XMXv2bJx44ok4/fTTcd111wXGo7q6Go888gheffVVjBkzBl27dsUNN9yAa6+9Fi+88EKz8smE30knomYzDAN//WQ9Pv8xHy6nhhcnDMaZPfkn1oiISG16aQV8+YcBAEZ1Tf07fXrgPr2ktOFT4TtaHLi/IaOi6pe4leFdtAbjXwgNAPr164dhw4ahc+fO+Pe//42bbroprBjp6el4++23Ax9Bj4uLw9lnn40nnngC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cOedd5qex6w+HnjgAQwYMOC4MXft2gVN07BmzRpTcvppmoaPP/7Y1JjRZOTIkfW2jby8PMyYMUNYPZHgRToRhfTV1sO448MtOFpeg1Yp8Zh13SC0SUsQXRYRERGZaP/+/bj22muRnZ2NxMREnHTSSfj+++/rPWbTpk246KKLkJ6ejuTkZAwZMgR79uw5btzi4mL8/ve/R25uLuLj49GzZ0/MnTs3cP9bb72Fjh07IjMzE5MnT6733F27dqFnz57weDz1bn/mmWcwe/bsljXcQF5eXuAd7uTkZAwaNAgffPCBKbGnTJmChQsXBn6eOHFi4EUGv44dOyI/Px8nnniiKTn98vPzcd5555kaMxj/2DX89+6771qeOxIrV67ELbfcIroM0/Hj7kQxwjAMvPLtT3h47iYYBtAuIwGf/eF06ReHIyIiosgUFRVhxIgRGDVqFP773/+idevW2LZtW73v3e/YsQOnnXYabrrpJjz44INIS0vDhg0bkJAQ+oX7mpoanHPOOWjTpg0++OADtG/fHrt370ZGRgYA4MiRI/jNb36D2bNno2vXrjj//PNx1lln4YILLgAA/O53v8Ojjz6KtLS0enHT09MBRPZOYzgeeugh3HzzzfB4PJg+fTquueYadOrUCSNGjGhR3JSUFKSkpBy3XqfTiZycnBblCcaKmKG89tprGDt2bL3b/HPdkM/ng6ZpcDjqvwdcU1MDtzvy3zXDfV7r1q0jjh0N+E46KUnTNLhcLn4/6Gf7iysx4dUV+PvndRfol/Zvi88mnRb1F+gyz7Po2uzMb2UuK2KLnhsiVai0L8neS6R1PfbYY+jYsSNee+01DB06FF26dMG5556Lbt26BR5z3333Ydy4cXj88cdx8skno1u3brjooovQpk2bkPlfffVVFBYW4uOPP8aIESOQl5eHM888E/379wcA7Ny5E+np6Rg/fjyGDBmCUaNGYdOmTQCAd955By6XC5dddlmj+Md+3D1Yr9XV1ZgyZQrat2+P5ORkDBs2DIsXL25yHFJTU5GTk4OePXti5syZSExMxKeffgoA+PHHH3HWWWchMTER2dnZuOWWW1BWVhZ47uLFizF06FAkJycjIyMDI0aMwO7duwHU/7j73/72N7z++uv45JNPAu82L168OOjH3b/66isMHToU8fHxyM3NxT333IPa2trA/RdccAHuuOMO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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 14233.307628,
   "end_time": "2025-07-29T10:15:32.809483",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-29T06:18:19.501855",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
