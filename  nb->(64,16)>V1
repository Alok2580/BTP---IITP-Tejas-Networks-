{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e386aaff",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-08T05:41:27.192083Z",
     "iopub.status.busy": "2025-08-08T05:41:27.191372Z",
     "iopub.status.idle": "2025-08-08T05:41:28.664892Z",
     "shell.execute_reply": "2025-08-08T05:41:28.663998Z"
    },
    "papermill": {
     "duration": 1.478309,
     "end_time": "2025-08-08T05:41:28.666181",
     "exception": false,
     "start_time": "2025-08-08T05:41:27.187872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "feed37c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:41:28.671374Z",
     "iopub.status.busy": "2025-08-08T05:41:28.671035Z",
     "iopub.status.idle": "2025-08-08T05:41:42.244575Z",
     "shell.execute_reply": "2025-08-08T05:41:42.243925Z"
    },
    "papermill": {
     "duration": 13.577433,
     "end_time": "2025-08-08T05:41:42.245982",
     "exception": false,
     "start_time": "2025-08-08T05:41:28.668549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-08 05:41:30.068612: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754631690.240358      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754631690.292260      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2ff6e359",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:41:42.251961Z",
     "iopub.status.busy": "2025-08-08T05:41:42.250988Z",
     "iopub.status.idle": "2025-08-08T05:41:42.255688Z",
     "shell.execute_reply": "2025-08-08T05:41:42.255105Z"
    },
    "papermill": {
     "duration": 0.008284,
     "end_time": "2025-08-08T05:41:42.256659",
     "exception": false,
     "start_time": "2025-08-08T05:41:42.248375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.1  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f6fbfbdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:41:42.260995Z",
     "iopub.status.busy": "2025-08-08T05:41:42.260806Z",
     "iopub.status.idle": "2025-08-08T05:41:42.263909Z",
     "shell.execute_reply": "2025-08-08T05:41:42.263362Z"
    },
    "papermill": {
     "duration": 0.006463,
     "end_time": "2025-08-08T05:41:42.264956",
     "exception": false,
     "start_time": "2025-08-08T05:41:42.258493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c67a2723",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:41:42.269752Z",
     "iopub.status.busy": "2025-08-08T05:41:42.269525Z",
     "iopub.status.idle": "2025-08-08T06:50:27.532081Z",
     "shell.execute_reply": "2025-08-08T06:50:27.531227Z"
    },
    "papermill": {
     "duration": 4125.266657,
     "end_time": "2025-08-08T06:50:27.533398",
     "exception": false,
     "start_time": "2025-08-08T05:41:42.266741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754631736.084598      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754631745.623926      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">339,082</span> (1.29 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m339,082\u001b[0m (1.29 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">338,822</span> (1.29 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m338,822\u001b[0m (1.29 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754631760.050837      56 service.cc:148] XLA service 0x783538009f90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754631760.051645      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754631766.229948      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 285.20877, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 452.7759 - mae: 16.7826 - val_loss: 285.2088 - val_mae: 13.2670 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 285.20877 to 132.29877, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 200.3311 - mae: 11.3805 - val_loss: 132.2988 - val_mae: 9.4409 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 132.29877\n",
      "4375/4375 - 40s - 9ms/step - loss: 114.2187 - mae: 8.7033 - val_loss: 132.5067 - val_mae: 9.3427 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 132.29877 to 54.32546, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 83.8219 - mae: 7.1814 - val_loss: 54.3255 - val_mae: 5.7515 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 54.32546 to 32.32003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 34.5776 - mae: 4.4660 - val_loss: 32.3200 - val_mae: 4.2870 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 32.32003 to 19.26885, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 17.8308 - mae: 3.1800 - val_loss: 19.2689 - val_mae: 3.4794 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 19.26885\n",
      "4375/4375 - 40s - 9ms/step - loss: 14.1404 - mae: 2.8323 - val_loss: 24.3835 - val_mae: 3.7259 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 19.26885 to 14.74806, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 12.8626 - mae: 2.6164 - val_loss: 14.7481 - val_mae: 3.1019 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 14.74806\n",
      "4375/4375 - 40s - 9ms/step - loss: 26.8076 - mae: 3.6389 - val_loss: 31.8256 - val_mae: 4.1928 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 14.74806\n",
      "4375/4375 - 40s - 9ms/step - loss: 21.9619 - mae: 3.4174 - val_loss: 14.9484 - val_mae: 3.0461 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 14.74806 to 11.21752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 11.6981 - mae: 2.4655 - val_loss: 11.2175 - val_mae: 2.7493 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 11.21752\n",
      "4375/4375 - 40s - 9ms/step - loss: 20.3763 - mae: 3.0769 - val_loss: 16.5984 - val_mae: 3.1171 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 11.21752\n",
      "4375/4375 - 40s - 9ms/step - loss: 13.3701 - mae: 2.5156 - val_loss: 62.1260 - val_mae: 5.3813 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 11.21752\n",
      "4375/4375 - 40s - 9ms/step - loss: 18.6886 - mae: 3.1219 - val_loss: 31.3274 - val_mae: 4.4053 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 11.21752\n",
      "4375/4375 - 40s - 9ms/step - loss: 14.3502 - mae: 2.7073 - val_loss: 17.7263 - val_mae: 3.2195 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 11.21752 to 8.69292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 6.8161 - mae: 1.9217 - val_loss: 8.6929 - val_mae: 2.2325 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 36.6393 - mae: 4.1837 - val_loss: 47.5421 - val_mae: 5.0216 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 27.3541 - mae: 3.7309 - val_loss: 25.2815 - val_mae: 3.6850 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 32.3735 - mae: 3.9202 - val_loss: 35.0582 - val_mae: 4.5574 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 28.4463 - mae: 3.6079 - val_loss: 43.6328 - val_mae: 4.8112 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 46.9908 - mae: 4.6330 - val_loss: 80.4210 - val_mae: 6.7488 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 70.5556 - mae: 6.0830 - val_loss: 74.8380 - val_mae: 6.4136 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 106.8232 - mae: 7.7751 - val_loss: 118.2844 - val_mae: 8.5202 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 105.6695 - mae: 8.0257 - val_loss: 119.0272 - val_mae: 8.4658 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 86.3400 - mae: 7.0321 - val_loss: 79.1733 - val_mae: 6.6561 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 65.7786 - mae: 5.8572 - val_loss: 82.5894 - val_mae: 6.0536 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 33.5300 - mae: 4.1399 - val_loss: 23.4988 - val_mae: 3.7388 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 17.0281 - mae: 2.9359 - val_loss: 21.5136 - val_mae: 3.4181 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 98.3831 - mae: 7.3729 - val_loss: 91.0162 - val_mae: 7.3234 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 74.2468 - mae: 6.4375 - val_loss: 120.8797 - val_mae: 8.3473 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 77.7065 - mae: 6.5948 - val_loss: 349.7690 - val_mae: 12.9240 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 39.5449 - mae: 4.6639 - val_loss: 53.5312 - val_mae: 5.4135 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 38.1503 - mae: 4.4316 - val_loss: 35.6905 - val_mae: 4.4938 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 22.5433 - mae: 3.2859 - val_loss: 65.0745 - val_mae: 5.5753 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 26.9046 - mae: 3.5118 - val_loss: 51.4319 - val_mae: 4.9696 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 36: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 32.6830 - mae: 3.8935 - val_loss: 29.3643 - val_mae: 4.0084 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 10.1802 - mae: 2.3696 - val_loss: 13.8497 - val_mae: 2.9177 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 6.4414 - mae: 1.9081 - val_loss: 11.7521 - val_mae: 2.6699 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 8.69292\n",
      "4375/4375 - 40s - 9ms/step - loss: 4.7260 - mae: 1.6263 - val_loss: 10.0096 - val_mae: 2.4364 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 8.69292 to 8.68268, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 3.5426 - mae: 1.4112 - val_loss: 8.6827 - val_mae: 2.3182 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 8.68268 to 8.52631, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.6560 - mae: 1.2314 - val_loss: 8.5263 - val_mae: 2.2684 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 8.52631\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.0852 - mae: 1.0875 - val_loss: 9.0548 - val_mae: 2.3063 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 8.52631\n",
      "4375/4375 - 40s - 9ms/step - loss: 2.1141 - mae: 1.0580 - val_loss: 8.7909 - val_mae: 2.2530 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 8.52631 to 7.28500, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.9548 - mae: 1.0121 - val_loss: 7.2850 - val_mae: 2.0262 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 7.28500\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.4292 - mae: 0.8983 - val_loss: 8.4602 - val_mae: 2.1846 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 7.28500 to 7.13508, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.1726 - mae: 0.8216 - val_loss: 7.1351 - val_mae: 2.0002 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 7.13508\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.9968 - mae: 0.7561 - val_loss: 7.4210 - val_mae: 2.0107 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 7.13508\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.8634 - mae: 0.7102 - val_loss: 7.1964 - val_mae: 1.9993 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 7.13508 to 6.58526, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.7480 - mae: 0.6584 - val_loss: 6.5853 - val_mae: 1.9595 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 6.58526 to 6.21244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6730 - mae: 0.6245 - val_loss: 6.2124 - val_mae: 1.8870 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.5948 - mae: 0.5950 - val_loss: 6.9056 - val_mae: 1.9823 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.5171 - mae: 0.5559 - val_loss: 6.7868 - val_mae: 1.9604 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.5424 - mae: 0.5423 - val_loss: 6.6967 - val_mae: 1.9174 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.5504 - mae: 0.5390 - val_loss: 6.4983 - val_mae: 1.9385 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4092 - mae: 0.4970 - val_loss: 7.0324 - val_mae: 1.9914 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3853 - mae: 0.4803 - val_loss: 6.2927 - val_mae: 1.8487 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4553 - mae: 0.4865 - val_loss: 7.5335 - val_mae: 2.0593 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.3832 - mae: 0.4752 - val_loss: 6.8228 - val_mae: 1.9229 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.5204 - mae: 0.4978 - val_loss: 7.1267 - val_mae: 1.9933 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3052 - mae: 0.4309 - val_loss: 6.4116 - val_mae: 1.8940 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 6.21244\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.2965 - mae: 0.4228 - val_loss: 6.7565 - val_mae: 1.9085 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2719 - mae: 0.4067 - val_loss: 7.2225 - val_mae: 1.9955 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2549 - mae: 0.3931 - val_loss: 6.9058 - val_mae: 2.0067 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3721 - mae: 0.4171 - val_loss: 6.8945 - val_mae: 1.9850 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2383 - mae: 0.3810 - val_loss: 6.5876 - val_mae: 1.9290 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2308 - mae: 0.3743 - val_loss: 6.7184 - val_mae: 1.9537 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2154 - mae: 0.3607 - val_loss: 6.9676 - val_mae: 1.9740 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2233 - mae: 0.3627 - val_loss: 7.4886 - val_mae: 2.0810 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2189 - mae: 0.3613 - val_loss: 7.1394 - val_mae: 1.9938 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 70: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2464 - mae: 0.3730 - val_loss: 7.0597 - val_mae: 1.9969 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1583 - mae: 0.3105 - val_loss: 7.1396 - val_mae: 1.9974 - learning_rate: 1.0000e-04\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1421 - mae: 0.2952 - val_loss: 7.0157 - val_mae: 1.9808 - learning_rate: 1.0000e-04\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 6.21244\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.1329 - mae: 0.2854 - val_loss: 7.0397 - val_mae: 1.9759 - learning_rate: 1.0000e-04\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1282 - mae: 0.2804 - val_loss: 7.0262 - val_mae: 1.9726 - learning_rate: 1.0000e-04\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1256 - mae: 0.2774 - val_loss: 7.0512 - val_mae: 1.9853 - learning_rate: 1.0000e-04\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1238 - mae: 0.2750 - val_loss: 7.1434 - val_mae: 1.9987 - learning_rate: 1.0000e-04\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1204 - mae: 0.2714 - val_loss: 7.0332 - val_mae: 1.9939 - learning_rate: 1.0000e-04\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1178 - mae: 0.2687 - val_loss: 7.0387 - val_mae: 1.9815 - learning_rate: 1.0000e-04\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1153 - mae: 0.2661 - val_loss: 6.9781 - val_mae: 1.9687 - learning_rate: 1.0000e-04\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1151 - mae: 0.2655 - val_loss: 7.0407 - val_mae: 1.9768 - learning_rate: 1.0000e-04\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1128 - mae: 0.2629 - val_loss: 7.0435 - val_mae: 1.9836 - learning_rate: 1.0000e-04\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1114 - mae: 0.2615 - val_loss: 7.1576 - val_mae: 2.0087 - learning_rate: 1.0000e-04\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 6.21244\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1101 - mae: 0.2598 - val_loss: 6.9768 - val_mae: 1.9700 - learning_rate: 1.0000e-04\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1093 - mae: 0.2590 - val_loss: 7.1558 - val_mae: 2.0024 - learning_rate: 1.0000e-04\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 6.21244\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.1072 - mae: 0.2563 - val_loss: 7.0475 - val_mae: 1.9755 - learning_rate: 1.0000e-04\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1065 - mae: 0.2557 - val_loss: 7.1141 - val_mae: 1.9812 - learning_rate: 1.0000e-04\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 6.21244\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.1060 - mae: 0.2549 - val_loss: 7.0261 - val_mae: 1.9781 - learning_rate: 1.0000e-04\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1039 - mae: 0.2526 - val_loss: 7.1030 - val_mae: 1.9939 - learning_rate: 1.0000e-04\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1034 - mae: 0.2520 - val_loss: 7.0534 - val_mae: 1.9896 - learning_rate: 1.0000e-04\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 90: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1022 - mae: 0.2507 - val_loss: 7.0515 - val_mae: 1.9905 - learning_rate: 1.0000e-04\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0972 - mae: 0.2443 - val_loss: 7.0301 - val_mae: 1.9798 - learning_rate: 1.0000e-05\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0967 - mae: 0.2439 - val_loss: 6.9983 - val_mae: 1.9784 - learning_rate: 1.0000e-05\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0961 - mae: 0.2428 - val_loss: 7.0458 - val_mae: 1.9850 - learning_rate: 1.0000e-05\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0961 - mae: 0.2434 - val_loss: 7.0491 - val_mae: 1.9855 - learning_rate: 1.0000e-05\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0961 - mae: 0.2428 - val_loss: 6.9944 - val_mae: 1.9741 - learning_rate: 1.0000e-05\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0959 - mae: 0.2421 - val_loss: 7.0488 - val_mae: 1.9852 - learning_rate: 1.0000e-05\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0953 - mae: 0.2417 - val_loss: 6.9800 - val_mae: 1.9765 - learning_rate: 1.0000e-05\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0952 - mae: 0.2418 - val_loss: 6.9974 - val_mae: 1.9769 - learning_rate: 1.0000e-05\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0961 - mae: 0.2431 - val_loss: 7.0306 - val_mae: 1.9827 - learning_rate: 1.0000e-05\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 6.21244\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0953 - mae: 0.2420 - val_loss: 7.0151 - val_mae: 1.9806 - learning_rate: 1.0000e-05\n",
      "Epoch 100: early stopping\n",
      "Restoring model weights from the end of the best epoch: 50.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 3.0569 m\n",
      "Median positioning error: 2.9584 m\n",
      "90th percentile error: 5.3825 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4147.618245,
   "end_time": "2025-08-08T06:50:30.811219",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-08T05:41:23.192974",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
