{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a795a5f2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-06T17:42:46.859843Z",
     "iopub.status.busy": "2025-08-06T17:42:46.859487Z",
     "iopub.status.idle": "2025-08-06T17:42:48.701745Z",
     "shell.execute_reply": "2025-08-06T17:42:48.700719Z"
    },
    "papermill": {
     "duration": 1.847975,
     "end_time": "2025-08-06T17:42:48.703202",
     "exception": false,
     "start_time": "2025-08-06T17:42:46.855227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e30e8f95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:42:48.710312Z",
     "iopub.status.busy": "2025-08-06T17:42:48.709422Z",
     "iopub.status.idle": "2025-08-06T17:43:07.243549Z",
     "shell.execute_reply": "2025-08-06T17:43:07.242746Z"
    },
    "papermill": {
     "duration": 18.53949,
     "end_time": "2025-08-06T17:43:07.245618",
     "exception": false,
     "start_time": "2025-08-06T17:42:48.706128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-06 17:42:50.580779: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754502170.803840      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754502170.867140      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "092a7847",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:43:07.253207Z",
     "iopub.status.busy": "2025-08-06T17:43:07.251954Z",
     "iopub.status.idle": "2025-08-06T17:43:07.257516Z",
     "shell.execute_reply": "2025-08-06T17:43:07.256859Z"
    },
    "papermill": {
     "duration": 0.010413,
     "end_time": "2025-08-06T17:43:07.259017",
     "exception": false,
     "start_time": "2025-08-06T17:43:07.248604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 8     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1ea2b4dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:43:07.266153Z",
     "iopub.status.busy": "2025-08-06T17:43:07.265811Z",
     "iopub.status.idle": "2025-08-06T17:43:07.270092Z",
     "shell.execute_reply": "2025-08-06T17:43:07.269107Z"
    },
    "papermill": {
     "duration": 0.009798,
     "end_time": "2025-08-06T17:43:07.271548",
     "exception": false,
     "start_time": "2025-08-06T17:43:07.261750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a502f52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:43:07.278854Z",
     "iopub.status.busy": "2025-08-06T17:43:07.278160Z",
     "iopub.status.idle": "2025-08-06T22:27:11.788724Z",
     "shell.execute_reply": "2025-08-06T22:27:11.787827Z"
    },
    "papermill": {
     "duration": 17044.515961,
     "end_time": "2025-08-06T22:27:11.790194",
     "exception": false,
     "start_time": "2025-08-06T17:43:07.274233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754502211.349111      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754502222.937292      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">339,082</span> (1.29 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m339,082\u001b[0m (1.29 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">338,822</span> (1.29 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m338,822\u001b[0m (1.29 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754502240.660454      56 service.cc:148] XLA service 0x7eb80c003240 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754502240.661454      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754502246.064144      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 478.05756, saving model to models/best_model_full.keras\n",
      "4375/4375 - 81s - 19ms/step - loss: 489.5356 - mae: 17.5561 - val_loss: 478.0576 - val_mae: 17.3778 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss did not improve from 478.05756\n",
      "4375/4375 - 61s - 14ms/step - loss: 485.7062 - mae: 17.5099 - val_loss: 478.6254 - val_mae: 17.3837 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 478.05756\n",
      "4375/4375 - 61s - 14ms/step - loss: 485.0473 - mae: 17.4973 - val_loss: 481.4370 - val_mae: 17.4143 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 478.05756\n",
      "4375/4375 - 60s - 14ms/step - loss: 485.0407 - mae: 17.4934 - val_loss: 478.9401 - val_mae: 17.3834 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 478.05756\n",
      "4375/4375 - 60s - 14ms/step - loss: 484.7012 - mae: 17.4935 - val_loss: 481.1801 - val_mae: 17.4122 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 478.05756 to 347.52338, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 14ms/step - loss: 449.9141 - mae: 16.7688 - val_loss: 347.5234 - val_mae: 14.6797 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 347.52338\n",
      "4375/4375 - 59s - 13ms/step - loss: 394.5179 - mae: 15.5750 - val_loss: 388.8459 - val_mae: 15.6238 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 347.52338 to 145.09268, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 262.8198 - mae: 12.6422 - val_loss: 145.0927 - val_mae: 9.6019 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 145.09268\n",
      "4375/4375 - 58s - 13ms/step - loss: 139.3599 - mae: 9.4697 - val_loss: 178.1265 - val_mae: 10.7108 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 145.09268 to 81.58485, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 152.6752 - mae: 9.8274 - val_loss: 81.5849 - val_mae: 7.2262 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 81.58485 to 38.29984, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 67.2026 - mae: 6.3453 - val_loss: 38.2998 - val_mae: 4.7846 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 38.29984\n",
      "4375/4375 - 58s - 13ms/step - loss: 67.3094 - mae: 6.0749 - val_loss: 89.3813 - val_mae: 7.1433 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 38.29984\n",
      "4375/4375 - 58s - 13ms/step - loss: 82.9294 - mae: 6.7448 - val_loss: 52.4728 - val_mae: 5.5417 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 38.29984\n",
      "4375/4375 - 58s - 13ms/step - loss: 59.4369 - mae: 5.5668 - val_loss: 110.1752 - val_mae: 7.8497 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 38.29984\n",
      "4375/4375 - 58s - 13ms/step - loss: 44.1466 - mae: 4.9564 - val_loss: 58.3994 - val_mae: 5.1415 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 38.29984 to 16.61585, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 32.3629 - mae: 4.2299 - val_loss: 16.6159 - val_mae: 3.1659 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 16.61585 to 11.53099, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 22.3936 - mae: 3.4871 - val_loss: 11.5310 - val_mae: 2.6531 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 11.53099\n",
      "4375/4375 - 58s - 13ms/step - loss: 18.5483 - mae: 3.0901 - val_loss: 15.7832 - val_mae: 2.9667 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 11.53099 to 5.12321, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 11.0666 - mae: 2.4762 - val_loss: 5.1232 - val_mae: 1.7448 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 5.12321\n",
      "4375/4375 - 59s - 13ms/step - loss: 16.7345 - mae: 2.7848 - val_loss: 10.5177 - val_mae: 2.4552 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 5.12321\n",
      "4375/4375 - 59s - 13ms/step - loss: 11.3710 - mae: 2.4152 - val_loss: 11.1155 - val_mae: 2.4716 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 5.12321\n",
      "4375/4375 - 59s - 13ms/step - loss: 7.2653 - mae: 1.8648 - val_loss: 86.0342 - val_mae: 6.6732 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 28.0947 - mae: 3.6863 - val_loss: 9.0936 - val_mae: 2.2571 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 14.0719 - mae: 2.6291 - val_loss: 7.0751 - val_mae: 2.0115 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 27.0554 - mae: 3.4362 - val_loss: 47.2283 - val_mae: 4.9648 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 30.0723 - mae: 3.9045 - val_loss: 20.8907 - val_mae: 3.4129 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 17.7460 - mae: 2.9953 - val_loss: 13.3978 - val_mae: 2.7546 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 39.4109 - mae: 4.3623 - val_loss: 22.4507 - val_mae: 3.5541 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 17.6858 - mae: 3.0774 - val_loss: 14.4110 - val_mae: 2.7502 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 48.0274 - mae: 4.5265 - val_loss: 30.1650 - val_mae: 3.7791 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 24.6059 - mae: 3.3306 - val_loss: 137.7161 - val_mae: 8.1095 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 30.0580 - mae: 3.7961 - val_loss: 22.9019 - val_mae: 3.5083 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 23.6782 - mae: 3.3628 - val_loss: 650.7098 - val_mae: 18.1151 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 59.0610 - mae: 5.0561 - val_loss: 29.8450 - val_mae: 3.8746 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 52.2486 - mae: 4.8906 - val_loss: 30.3031 - val_mae: 3.9027 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 39.0469 - mae: 4.3139 - val_loss: 30.9376 - val_mae: 3.9165 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 26.0895 - mae: 3.6027 - val_loss: 52.2073 - val_mae: 5.0258 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 25.9346 - mae: 3.4984 - val_loss: 16.9446 - val_mae: 2.9339 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 39: val_loss did not improve from 5.12321\n",
      "4375/4375 - 57s - 13ms/step - loss: 20.0466 - mae: 2.9636 - val_loss: 17.7946 - val_mae: 2.7488 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 5.12321\n",
      "4375/4375 - 58s - 13ms/step - loss: 6.8222 - mae: 1.9681 - val_loss: 6.9757 - val_mae: 1.7623 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 5.12321 to 4.29777, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 3.5973 - mae: 1.4478 - val_loss: 4.2978 - val_mae: 1.3206 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 4.29777 to 2.91488, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 1.9818 - mae: 1.0790 - val_loss: 2.9149 - val_mae: 1.0107 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 2.91488 to 1.42142, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 1.2201 - mae: 0.8496 - val_loss: 1.4214 - val_mae: 0.7876 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 1.42142\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.8176 - mae: 0.6975 - val_loss: 1.6491 - val_mae: 0.6834 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 1.42142 to 0.77986, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.5965 - mae: 0.5972 - val_loss: 0.7799 - val_mae: 0.5846 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.77986 to 0.42782, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.4451 - mae: 0.5167 - val_loss: 0.4278 - val_mae: 0.4986 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.42782\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.3838 - mae: 0.4734 - val_loss: 0.4882 - val_mae: 0.4886 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.42782 to 0.32850, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.3028 - mae: 0.4281 - val_loss: 0.3285 - val_mae: 0.4228 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.32850 to 0.32257, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.2636 - mae: 0.3990 - val_loss: 0.3226 - val_mae: 0.4133 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.32257 to 0.31800, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.2385 - mae: 0.3767 - val_loss: 0.3180 - val_mae: 0.3851 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.31800\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.2061 - mae: 0.3536 - val_loss: 0.4078 - val_mae: 0.4029 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.31800 to 0.19041, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1884 - mae: 0.3378 - val_loss: 0.1904 - val_mae: 0.3395 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.19041 to 0.17578, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1643 - mae: 0.3161 - val_loss: 0.1758 - val_mae: 0.3227 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.17578\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1483 - mae: 0.3007 - val_loss: 0.1877 - val_mae: 0.3085 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.17578 to 0.15954, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1369 - mae: 0.2893 - val_loss: 0.1595 - val_mae: 0.3017 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.15954\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1277 - mae: 0.2801 - val_loss: 0.2463 - val_mae: 0.3092 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.15954\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.1198 - mae: 0.2711 - val_loss: 0.1599 - val_mae: 0.2785 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.15954\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1095 - mae: 0.2597 - val_loss: 0.1843 - val_mae: 0.2712 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.15954 to 0.11858, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.1035 - mae: 0.2523 - val_loss: 0.1186 - val_mae: 0.2564 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.11858\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0995 - mae: 0.2477 - val_loss: 0.1456 - val_mae: 0.2743 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.11858 to 0.10787, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0939 - mae: 0.2409 - val_loss: 0.1079 - val_mae: 0.2578 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.10787 to 0.09120, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0894 - mae: 0.2351 - val_loss: 0.0912 - val_mae: 0.2365 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.09120\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0858 - mae: 0.2301 - val_loss: 0.1018 - val_mae: 0.2402 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.09120 to 0.08464, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0824 - mae: 0.2257 - val_loss: 0.0846 - val_mae: 0.2275 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.08464\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0792 - mae: 0.2214 - val_loss: 0.0941 - val_mae: 0.2380 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.08464 to 0.08139, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0790 - mae: 0.2204 - val_loss: 0.0814 - val_mae: 0.2229 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.08139 to 0.07696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0756 - mae: 0.2161 - val_loss: 0.0770 - val_mae: 0.2164 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.07696\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0710 - mae: 0.2095 - val_loss: 0.0890 - val_mae: 0.2351 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.07696 to 0.07058, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0711 - mae: 0.2093 - val_loss: 0.0706 - val_mae: 0.2065 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.07058\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0669 - mae: 0.2036 - val_loss: 0.0709 - val_mae: 0.2056 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.07058\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0648 - mae: 0.2000 - val_loss: 0.0871 - val_mae: 0.2310 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.07058\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0630 - mae: 0.1973 - val_loss: 0.0800 - val_mae: 0.2206 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.07058 to 0.06628, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0614 - mae: 0.1946 - val_loss: 0.0663 - val_mae: 0.2002 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.06628\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0595 - mae: 0.1920 - val_loss: 0.0978 - val_mae: 0.2007 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.06628\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0576 - mae: 0.1888 - val_loss: 0.1065 - val_mae: 0.2102 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.06628 to 0.06593, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0566 - mae: 0.1873 - val_loss: 0.0659 - val_mae: 0.2020 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.06593 to 0.06178, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0552 - mae: 0.1846 - val_loss: 0.0618 - val_mae: 0.1949 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.06178 to 0.05580, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0548 - mae: 0.1837 - val_loss: 0.0558 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.05580\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0535 - mae: 0.1818 - val_loss: 0.0567 - val_mae: 0.1863 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.05580\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0845 - mae: 0.1948 - val_loss: 0.0624 - val_mae: 0.1892 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.05580 to 0.05569, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0493 - mae: 0.1747 - val_loss: 0.0557 - val_mae: 0.1832 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.05569\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0521 - mae: 0.1794 - val_loss: 0.0642 - val_mae: 0.1980 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.05569\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0510 - mae: 0.1777 - val_loss: 0.0879 - val_mae: 0.1853 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.05569\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0509 - mae: 0.1772 - val_loss: 0.0622 - val_mae: 0.1820 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.05569\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0498 - mae: 0.1756 - val_loss: 0.0971 - val_mae: 0.1902 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.05569\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0495 - mae: 0.1747 - val_loss: 0.0957 - val_mae: 0.1854 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.05569\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0474 - mae: 0.1712 - val_loss: 0.0615 - val_mae: 0.1804 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.05569 to 0.04882, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0468 - mae: 0.1701 - val_loss: 0.0488 - val_mae: 0.1742 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04882\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0497 - mae: 0.1739 - val_loss: 0.0552 - val_mae: 0.1816 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.04882\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0466 - mae: 0.1693 - val_loss: 0.1002 - val_mae: 0.2222 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04882\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0467 - mae: 0.1697 - val_loss: 0.0597 - val_mae: 0.1847 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04882\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0454 - mae: 0.1674 - val_loss: 0.0671 - val_mae: 0.1887 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04882\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0448 - mae: 0.1661 - val_loss: 0.1072 - val_mae: 0.2497 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04882\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0444 - mae: 0.1656 - val_loss: 0.0526 - val_mae: 0.1736 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04882\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0438 - mae: 0.1645 - val_loss: 0.0526 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04882\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0437 - mae: 0.1643 - val_loss: 0.0489 - val_mae: 0.1738 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04882\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0434 - mae: 0.1632 - val_loss: 0.0512 - val_mae: 0.1769 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.04882 to 0.04323, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0426 - mae: 0.1622 - val_loss: 0.0432 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04323\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0427 - mae: 0.1623 - val_loss: 0.0476 - val_mae: 0.1707 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04323\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0426 - mae: 0.1620 - val_loss: 0.0596 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.04323 to 0.04243, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0420 - mae: 0.1606 - val_loss: 0.0424 - val_mae: 0.1621 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.04243\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0425 - mae: 0.1619 - val_loss: 0.0495 - val_mae: 0.1731 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04243\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0404 - mae: 0.1578 - val_loss: 0.0494 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04243\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0425 - mae: 0.1612 - val_loss: 0.0621 - val_mae: 0.1976 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04243\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0409 - mae: 0.1586 - val_loss: 0.0490 - val_mae: 0.1724 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.04243\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0410 - mae: 0.1593 - val_loss: 0.0453 - val_mae: 0.1670 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04243\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0409 - mae: 0.1587 - val_loss: 0.0530 - val_mae: 0.1796 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04243\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0406 - mae: 0.1577 - val_loss: 0.0497 - val_mae: 0.1751 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.04243 to 0.03896, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0401 - mae: 0.1575 - val_loss: 0.0390 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03896\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0403 - mae: 0.1573 - val_loss: 0.0505 - val_mae: 0.1764 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0406 - mae: 0.1581 - val_loss: 0.0497 - val_mae: 0.1740 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03896\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0413 - mae: 0.1588 - val_loss: 0.0538 - val_mae: 0.1806 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0396 - mae: 0.1560 - val_loss: 0.0518 - val_mae: 0.1790 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0397 - mae: 0.1563 - val_loss: 0.0612 - val_mae: 0.1784 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0401 - mae: 0.1569 - val_loss: 0.0418 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0392 - mae: 0.1552 - val_loss: 0.0481 - val_mae: 0.1584 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0398 - mae: 0.1562 - val_loss: 0.0538 - val_mae: 0.1814 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0390 - mae: 0.1550 - val_loss: 0.0500 - val_mae: 0.1728 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03896\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0392 - mae: 0.1551 - val_loss: 0.0512 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03896\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0395 - mae: 0.1559 - val_loss: 0.0493 - val_mae: 0.1752 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03896\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0398 - mae: 0.1561 - val_loss: 0.0457 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03896\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0396 - mae: 0.1561 - val_loss: 0.0498 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03896\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0387 - mae: 0.1542 - val_loss: 0.0409 - val_mae: 0.1601 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0389 - mae: 0.1546 - val_loss: 0.0497 - val_mae: 0.1752 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0394 - mae: 0.1553 - val_loss: 0.0466 - val_mae: 0.1716 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0393 - mae: 0.1554 - val_loss: 0.0523 - val_mae: 0.1789 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03896\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0391 - mae: 0.1547 - val_loss: 0.0485 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03896\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0395 - mae: 0.1554 - val_loss: 0.0436 - val_mae: 0.1585 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03896\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0385 - mae: 0.1536 - val_loss: 0.0416 - val_mae: 0.1589 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.03896 to 0.01605, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0128 - mae: 0.0891 - val_loss: 0.0161 - val_mae: 0.0988 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.01605 to 0.01576, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0112 - mae: 0.0837 - val_loss: 0.0158 - val_mae: 0.0978 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.01576 to 0.01546, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0107 - mae: 0.0816 - val_loss: 0.0155 - val_mae: 0.0969 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01546\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0103 - mae: 0.0802 - val_loss: 0.0155 - val_mae: 0.0971 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.01546 to 0.01507, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0101 - mae: 0.0793 - val_loss: 0.0151 - val_mae: 0.0957 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01507\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0099 - mae: 0.0785 - val_loss: 0.0154 - val_mae: 0.0967 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01507\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0097 - mae: 0.0779 - val_loss: 0.0152 - val_mae: 0.0962 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.01507 to 0.01506, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0151 - val_mae: 0.0953 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.01506 to 0.01480, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0094 - mae: 0.0768 - val_loss: 0.0148 - val_mae: 0.0946 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.01480 to 0.01478, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0093 - mae: 0.0763 - val_loss: 0.0148 - val_mae: 0.0946 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01478\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0092 - mae: 0.0760 - val_loss: 0.0152 - val_mae: 0.0960 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.01478 to 0.01476, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0091 - mae: 0.0755 - val_loss: 0.0148 - val_mae: 0.0947 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.01476 to 0.01442, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0090 - mae: 0.0751 - val_loss: 0.0144 - val_mae: 0.0934 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.01442 to 0.01419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0089 - mae: 0.0747 - val_loss: 0.0142 - val_mae: 0.0928 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01419\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0088 - mae: 0.0744 - val_loss: 0.0149 - val_mae: 0.0952 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01419\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0087 - mae: 0.0739 - val_loss: 0.0143 - val_mae: 0.0929 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01419\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0087 - mae: 0.0738 - val_loss: 0.0146 - val_mae: 0.0942 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01419\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0086 - mae: 0.0734 - val_loss: 0.0149 - val_mae: 0.0948 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01419\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0085 - mae: 0.0731 - val_loss: 0.0142 - val_mae: 0.0929 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01419\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0084 - mae: 0.0727 - val_loss: 0.0143 - val_mae: 0.0931 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01419\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0144 - val_mae: 0.0934 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.01419 to 0.01400, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0083 - mae: 0.0723 - val_loss: 0.0140 - val_mae: 0.0920 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01400\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0082 - mae: 0.0717 - val_loss: 0.0143 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01400\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0082 - mae: 0.0716 - val_loss: 0.0150 - val_mae: 0.0952 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01400\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0081 - mae: 0.0712 - val_loss: 0.0148 - val_mae: 0.0946 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01400\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0081 - mae: 0.0712 - val_loss: 0.0143 - val_mae: 0.0932 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01400\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0080 - mae: 0.0707 - val_loss: 0.0150 - val_mae: 0.0954 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01400\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0079 - mae: 0.0705 - val_loss: 0.0145 - val_mae: 0.0938 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01400\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0079 - mae: 0.0704 - val_loss: 0.0143 - val_mae: 0.0933 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01400\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0078 - mae: 0.0699 - val_loss: 0.0147 - val_mae: 0.0945 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01400\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0143 - val_mae: 0.0929 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01400\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0140 - val_mae: 0.0920 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01400\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0143 - val_mae: 0.0929 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.01400 to 0.01390, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0076 - mae: 0.0692 - val_loss: 0.0139 - val_mae: 0.0916 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01390\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0141 - val_mae: 0.0921 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01390\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0139 - val_mae: 0.0918 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01390\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0142 - val_mae: 0.0925 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01390\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0074 - mae: 0.0683 - val_loss: 0.0142 - val_mae: 0.0927 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01390\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0143 - val_mae: 0.0929 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01390\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0073 - mae: 0.0677 - val_loss: 0.0141 - val_mae: 0.0923 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01390\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0142 - val_mae: 0.0925 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.01390 to 0.01379, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0072 - mae: 0.0674 - val_loss: 0.0138 - val_mae: 0.0912 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0072 - mae: 0.0671 - val_loss: 0.0142 - val_mae: 0.0925 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01379\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0072 - mae: 0.0670 - val_loss: 0.0142 - val_mae: 0.0926 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01379\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0071 - mae: 0.0667 - val_loss: 0.0143 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01379\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0145 - val_mae: 0.0935 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0070 - mae: 0.0664 - val_loss: 0.0142 - val_mae: 0.0927 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0143 - val_mae: 0.0927 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01379\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0145 - val_mae: 0.0937 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01379\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0069 - mae: 0.0659 - val_loss: 0.0139 - val_mae: 0.0913 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0142 - val_mae: 0.0926 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01379\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0068 - mae: 0.0654 - val_loss: 0.0144 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01379\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0068 - mae: 0.0653 - val_loss: 0.0141 - val_mae: 0.0923 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01379\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0068 - mae: 0.0652 - val_loss: 0.0145 - val_mae: 0.0936 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0067 - mae: 0.0648 - val_loss: 0.0142 - val_mae: 0.0925 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0067 - mae: 0.0648 - val_loss: 0.0141 - val_mae: 0.0921 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0067 - mae: 0.0646 - val_loss: 0.0142 - val_mae: 0.0924 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0066 - mae: 0.0645 - val_loss: 0.0142 - val_mae: 0.0925 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01379\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0066 - mae: 0.0644 - val_loss: 0.0141 - val_mae: 0.0921 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.01379 to 0.01373, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0066 - mae: 0.0641 - val_loss: 0.0137 - val_mae: 0.0912 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01373\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0065 - mae: 0.0639 - val_loss: 0.0142 - val_mae: 0.0927 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01373\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0065 - mae: 0.0637 - val_loss: 0.0143 - val_mae: 0.0929 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.01373 to 0.01293, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0051 - mae: 0.0564 - val_loss: 0.0129 - val_mae: 0.0880 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.01293 to 0.01289, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0050 - mae: 0.0557 - val_loss: 0.0129 - val_mae: 0.0879 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01289\n",
      "4375/4375 - 51s - 12ms/step - loss: 0.0050 - mae: 0.0555 - val_loss: 0.0129 - val_mae: 0.0879 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01289\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0049 - mae: 0.0553 - val_loss: 0.0130 - val_mae: 0.0881 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01289\n",
      "4375/4375 - 51s - 12ms/step - loss: 0.0049 - mae: 0.0552 - val_loss: 0.0129 - val_mae: 0.0879 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0129 - val_mae: 0.0880 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01289\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0049 - mae: 0.0550 - val_loss: 0.0129 - val_mae: 0.0880 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01289\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0049 - mae: 0.0549 - val_loss: 0.0129 - val_mae: 0.0879 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0049 - mae: 0.0549 - val_loss: 0.0129 - val_mae: 0.0880 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0130 - val_mae: 0.0881 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01289\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0130 - val_mae: 0.0882 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01289\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0048 - mae: 0.0547 - val_loss: 0.0130 - val_mae: 0.0881 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0048 - mae: 0.0547 - val_loss: 0.0129 - val_mae: 0.0881 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0129 - val_mae: 0.0880 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0129 - val_mae: 0.0881 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0129 - val_mae: 0.0880 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01289\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0048 - mae: 0.0545 - val_loss: 0.0130 - val_mae: 0.0884 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01289\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0048 - mae: 0.0545 - val_loss: 0.0130 - val_mae: 0.0882 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0048 - mae: 0.0544 - val_loss: 0.0130 - val_mae: 0.0882 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01289\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0048 - mae: 0.0544 - val_loss: 0.0130 - val_mae: 0.0882 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01289\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0048 - mae: 0.0543 - val_loss: 0.0130 - val_mae: 0.0882 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss improved from 0.01289 to 0.01288, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0535 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.01288 to 0.01286, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01286\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01286\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.01286 to 0.01285, saving model to models/best_model_full.keras\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01285\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01285\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01285\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01285\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0533 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss improved from 0.01285 to 0.01285, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0128 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01285\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01285\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01285\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01285\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01285\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01285\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01285\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01285\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss improved from 0.01285 to 0.01284, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0128 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01284\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01284\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.01284\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01284\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01284\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01284\n",
      "4375/4375 - 51s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01284\n",
      "4375/4375 - 51s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01284\n",
      "4375/4375 - 52s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01284\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01284\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01284\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01284\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.01284\n",
      "4375/4375 - 54s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01284\n",
      "4375/4375 - 53s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.01284\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0878 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.01284\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0046 - mae: 0.0532 - val_loss: 0.0129 - val_mae: 0.0877 - learning_rate: 1.0000e-07\n",
      "Epoch 308: early stopping\n",
      "Restoring model weights from the end of the best epoch: 258.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 7ms/step\n",
      "Mean positioning error: 0.1382 m\n",
      "Median positioning error: 0.1255 m\n",
      "90th percentile error: 0.2448 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17073.273656,
   "end_time": "2025-08-06T22:27:14.824656",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-06T17:42:41.551000",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
