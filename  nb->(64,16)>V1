{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "10d09831",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-19T04:15:59.680777Z",
     "iopub.status.busy": "2025-08-19T04:15:59.680519Z",
     "iopub.status.idle": "2025-08-19T04:16:01.170760Z",
     "shell.execute_reply": "2025-08-19T04:16:01.169782Z"
    },
    "papermill": {
     "duration": 1.495098,
     "end_time": "2025-08-19T04:16:01.172116",
     "exception": false,
     "start_time": "2025-08-19T04:15:59.677018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b4b12351",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:01.177415Z",
     "iopub.status.busy": "2025-08-19T04:16:01.177069Z",
     "iopub.status.idle": "2025-08-19T04:16:16.470167Z",
     "shell.execute_reply": "2025-08-19T04:16:16.469424Z"
    },
    "papermill": {
     "duration": 15.297227,
     "end_time": "2025-08-19T04:16:16.471728",
     "exception": false,
     "start_time": "2025-08-19T04:16:01.174501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-19 04:16:02.806969: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755576963.003140      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755576963.058754      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b8cff92d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:16.477079Z",
     "iopub.status.busy": "2025-08-19T04:16:16.476609Z",
     "iopub.status.idle": "2025-08-19T04:16:16.481341Z",
     "shell.execute_reply": "2025-08-19T04:16:16.480733Z"
    },
    "papermill": {
     "duration": 0.008269,
     "end_time": "2025-08-19T04:16:16.482366",
     "exception": false,
     "start_time": "2025-08-19T04:16:16.474097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 64   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36ff8907",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:16.487194Z",
     "iopub.status.busy": "2025-08-19T04:16:16.486972Z",
     "iopub.status.idle": "2025-08-19T04:16:16.490132Z",
     "shell.execute_reply": "2025-08-19T04:16:16.489600Z"
    },
    "papermill": {
     "duration": 0.006654,
     "end_time": "2025-08-19T04:16:16.491096",
     "exception": false,
     "start_time": "2025-08-19T04:16:16.484442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "912f1f01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:16:16.496173Z",
     "iopub.status.busy": "2025-08-19T04:16:16.495947Z",
     "iopub.status.idle": "2025-08-19T06:14:06.012284Z",
     "shell.execute_reply": "2025-08-19T06:14:06.011593Z"
    },
    "papermill": {
     "duration": 7069.520561,
     "end_time": "2025-08-19T06:14:06.013505",
     "exception": false,
     "start_time": "2025-08-19T04:16:16.492944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755576998.980833      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755577008.438048      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">20,800</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">15,872</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,472</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │        \u001b[38;5;34m20,800\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │        \u001b[38;5;34m15,872\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        \u001b[38;5;34m33,472\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m130\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">70,538</span> (275.54 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m70,538\u001b[0m (275.54 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">70,406</span> (275.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m70,406\u001b[0m (275.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> (528.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m132\u001b[0m (528.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755577019.481115      57 service.cc:148] XLA service 0x780e50017250 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755577019.481998      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755577022.768286      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 14.54867, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 76.5170 - mae: 5.7350 - val_loss: 14.5487 - val_mae: 2.9613 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 14.54867 to 10.05951, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 12.0071 - mae: 2.6679 - val_loss: 10.0595 - val_mae: 2.4927 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 10.05951 to 6.57698, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 9.2955 - mae: 2.3411 - val_loss: 6.5770 - val_mae: 1.9609 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 6.57698 to 4.69004, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 6.8713 - mae: 1.9996 - val_loss: 4.6900 - val_mae: 1.6485 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 4.69004\n",
      "4375/4375 - 20s - 5ms/step - loss: 5.8570 - mae: 1.8315 - val_loss: 6.1172 - val_mae: 1.9618 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 4.69004 to 3.38160, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 4.6722 - mae: 1.6295 - val_loss: 3.3816 - val_mae: 1.4306 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 3.38160\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.9338 - mae: 1.4912 - val_loss: 3.5149 - val_mae: 1.4410 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 3.38160 to 2.34571, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.6865 - mae: 1.4087 - val_loss: 2.3457 - val_mae: 1.1575 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 2.34571\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.2955 - mae: 1.3529 - val_loss: 2.5239 - val_mae: 1.2249 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 2.34571\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.1072 - mae: 1.2631 - val_loss: 2.8110 - val_mae: 1.2560 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 2.34571\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3292 - mae: 1.1040 - val_loss: 2.6909 - val_mae: 1.2458 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 2.34571\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.8069 - mae: 1.1593 - val_loss: 2.6952 - val_mae: 1.2548 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 2.34571 to 1.32087, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.7491 - mae: 0.9907 - val_loss: 1.3209 - val_mae: 0.8716 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 1.32087\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3908 - mae: 1.0716 - val_loss: 1.4171 - val_mae: 0.9323 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 1.32087 to 1.08083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.4933 - mae: 1.0860 - val_loss: 1.0808 - val_mae: 0.8021 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 1.08083\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.5403 - mae: 1.0407 - val_loss: 1.4163 - val_mae: 0.9112 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 1.08083\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.9654 - mae: 1.0080 - val_loss: 1.2017 - val_mae: 0.8563 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 1.08083\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3387 - mae: 1.0145 - val_loss: 1.1873 - val_mae: 0.8441 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 1.08083\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.0947 - mae: 0.7878 - val_loss: 2.2914 - val_mae: 0.9888 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 1.08083 to 1.02099, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.8905 - mae: 1.1413 - val_loss: 1.0210 - val_mae: 0.7450 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 1.02099\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3772 - mae: 0.9900 - val_loss: 1.2169 - val_mae: 0.8505 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss improved from 1.02099 to 0.81263, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.3407 - mae: 0.8435 - val_loss: 0.8126 - val_mae: 0.7118 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.81263\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.9026 - mae: 0.9261 - val_loss: 1.1555 - val_mae: 0.8220 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.81263\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.9055 - mae: 0.7213 - val_loss: 1.4516 - val_mae: 0.9342 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.81263 to 0.75025, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.5251 - mae: 0.8348 - val_loss: 0.7503 - val_mae: 0.6720 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.75025\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.8513 - mae: 0.8515 - val_loss: 0.8486 - val_mae: 0.7086 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.75025 to 0.55527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.6597 - mae: 0.6258 - val_loss: 0.5553 - val_mae: 0.5779 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.9154 - mae: 0.8692 - val_loss: 0.6943 - val_mae: 0.6464 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.0019 - mae: 0.9242 - val_loss: 0.6881 - val_mae: 0.6515 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.5186 - mae: 0.8507 - val_loss: 1.0915 - val_mae: 0.7643 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.0803 - mae: 0.9675 - val_loss: 1.0502 - val_mae: 0.7859 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.2998 - mae: 0.7965 - val_loss: 0.7374 - val_mae: 0.6694 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.8107 - mae: 0.8705 - val_loss: 0.7043 - val_mae: 0.6514 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.8142 - mae: 0.8991 - val_loss: 2.0900 - val_mae: 1.0877 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.55527\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.8699 - mae: 0.7103 - val_loss: 0.8777 - val_mae: 0.7137 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6888 - mae: 0.8385 - val_loss: 0.5558 - val_mae: 0.5811 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.55527\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3730 - mae: 0.9442 - val_loss: 0.6196 - val_mae: 0.6034 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss improved from 0.55527 to 0.50337, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.1899 - mae: 0.7315 - val_loss: 0.5034 - val_mae: 0.5558 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.50337\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6103 - mae: 0.8206 - val_loss: 1.9674 - val_mae: 1.0793 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.50337 to 0.46441, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.8347 - mae: 0.6717 - val_loss: 0.4644 - val_mae: 0.5300 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.46441\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.4083 - mae: 0.9552 - val_loss: 0.7018 - val_mae: 0.6453 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.46441\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.9718 - mae: 0.6892 - val_loss: 0.5020 - val_mae: 0.5438 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.46441\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.5189 - mae: 0.7622 - val_loss: 1.6958 - val_mae: 0.9843 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.46441 to 0.45969, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.8021 - mae: 0.6775 - val_loss: 0.4597 - val_mae: 0.5230 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.45969\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.2121 - mae: 0.7522 - val_loss: 0.5711 - val_mae: 0.5898 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.45969\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.7808 - mae: 0.8291 - val_loss: 3.3328 - val_mae: 1.2810 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.45969\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.7188 - mae: 0.6411 - val_loss: 0.5164 - val_mae: 0.5379 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.45969\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.5833 - mae: 0.7907 - val_loss: 1.1283 - val_mae: 0.8195 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.45969\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.7899 - mae: 0.6607 - val_loss: 0.8407 - val_mae: 0.7047 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.45969\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.3583 - mae: 0.7687 - val_loss: 0.5541 - val_mae: 0.5725 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.45969\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.8126 - mae: 0.6724 - val_loss: 0.7847 - val_mae: 0.6749 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.45969 to 0.44201, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.5350 - mae: 0.7758 - val_loss: 0.4420 - val_mae: 0.5108 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.3055 - mae: 0.7174 - val_loss: 0.6445 - val_mae: 0.6168 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.3402 - mae: 0.7402 - val_loss: 2.2043 - val_mae: 1.1349 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.7322 - mae: 0.6482 - val_loss: 0.6476 - val_mae: 0.6126 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.5753 - mae: 0.8747 - val_loss: 0.6488 - val_mae: 0.6275 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.9661 - mae: 0.7379 - val_loss: 1.2190 - val_mae: 0.8267 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.9364 - mae: 0.8968 - val_loss: 0.5901 - val_mae: 0.5929 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.5013 - mae: 0.8137 - val_loss: 0.7719 - val_mae: 0.6780 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.2650 - mae: 0.7064 - val_loss: 7.6431 - val_mae: 1.9203 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.1072 - mae: 0.7749 - val_loss: 0.6259 - val_mae: 0.6083 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.9029 - mae: 1.0696 - val_loss: 0.9015 - val_mae: 0.7386 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.8474 - mae: 0.7096 - val_loss: 0.9289 - val_mae: 0.7536 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.7918 - mae: 0.8908 - val_loss: 0.6945 - val_mae: 0.6498 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6884 - mae: 0.8532 - val_loss: 0.6027 - val_mae: 0.6056 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.9168 - mae: 0.6715 - val_loss: 1.1937 - val_mae: 0.8296 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.4762 - mae: 0.8270 - val_loss: 0.5713 - val_mae: 0.5918 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.0448 - mae: 0.6329 - val_loss: 2.8666 - val_mae: 1.2148 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.7806 - mae: 0.6737 - val_loss: 0.5291 - val_mae: 0.5658 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.4613 - mae: 0.8197 - val_loss: 0.6766 - val_mae: 0.6209 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.44201\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.6562 - mae: 0.6073 - val_loss: 0.9813 - val_mae: 0.7678 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.44201 to 0.44187, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6893 - mae: 0.8067 - val_loss: 0.4419 - val_mae: 0.5221 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.44187 to 0.35419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.7301 - mae: 0.6146 - val_loss: 0.3542 - val_mae: 0.4628 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.5951 - mae: 0.8934 - val_loss: 0.4787 - val_mae: 0.5386 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.8574 - mae: 0.8429 - val_loss: 0.5218 - val_mae: 0.5542 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.8312 - mae: 0.8828 - val_loss: 1.9036 - val_mae: 1.0635 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.0239 - mae: 0.7384 - val_loss: 0.5069 - val_mae: 0.5525 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6790 - mae: 0.8233 - val_loss: 0.9635 - val_mae: 0.7572 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.6521 - mae: 0.6182 - val_loss: 0.6017 - val_mae: 0.5932 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.8200 - mae: 0.8536 - val_loss: 0.5636 - val_mae: 0.5812 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.4450 - mae: 0.7546 - val_loss: 0.7067 - val_mae: 0.6491 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.3529 - mae: 0.7616 - val_loss: 0.5709 - val_mae: 0.5808 - learning_rate: 0.0100\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.8240 - mae: 0.8460 - val_loss: 1.6904 - val_mae: 0.9772 - learning_rate: 0.0100\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.1707 - mae: 0.8108 - val_loss: 1.3455 - val_mae: 0.8825 - learning_rate: 0.0100\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.7804 - mae: 0.8488 - val_loss: 0.5389 - val_mae: 0.5742 - learning_rate: 0.0100\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.8399 - mae: 0.6699 - val_loss: 0.6278 - val_mae: 0.5973 - learning_rate: 0.0100\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6442 - mae: 0.7854 - val_loss: 1.5384 - val_mae: 0.8300 - learning_rate: 0.0100\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.1756 - mae: 0.7286 - val_loss: 0.6402 - val_mae: 0.6028 - learning_rate: 0.0100\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.7541 - mae: 0.8342 - val_loss: 1.0764 - val_mae: 0.8085 - learning_rate: 0.0100\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.3222 - mae: 0.7497 - val_loss: 0.8624 - val_mae: 0.7205 - learning_rate: 0.0100\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.3921 - mae: 0.7508 - val_loss: 1.8074 - val_mae: 0.9821 - learning_rate: 0.0100\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.7839 - mae: 0.6553 - val_loss: 0.4890 - val_mae: 0.5430 - learning_rate: 0.0100\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.35419\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.3949 - mae: 0.7552 - val_loss: 0.4928 - val_mae: 0.5480 - learning_rate: 0.0100\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.35419 to 0.24894, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.2899 - mae: 0.4171 - val_loss: 0.2489 - val_mae: 0.3858 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.24894 to 0.18827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2130 - mae: 0.3590 - val_loss: 0.1883 - val_mae: 0.3354 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.18827 to 0.15960, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1732 - mae: 0.3220 - val_loss: 0.1596 - val_mae: 0.3092 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.15960 to 0.13756, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1473 - mae: 0.2988 - val_loss: 0.1376 - val_mae: 0.2874 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.13756 to 0.12884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1311 - mae: 0.2814 - val_loss: 0.1288 - val_mae: 0.2779 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.12884 to 0.11643, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1182 - mae: 0.2684 - val_loss: 0.1164 - val_mae: 0.2643 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.11643 to 0.10705, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1087 - mae: 0.2570 - val_loss: 0.1071 - val_mae: 0.2534 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.10705 to 0.10058, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1010 - mae: 0.2477 - val_loss: 0.1006 - val_mae: 0.2441 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.10058 to 0.09754, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0954 - mae: 0.2407 - val_loss: 0.0975 - val_mae: 0.2405 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.09754 to 0.08804, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0904 - mae: 0.2348 - val_loss: 0.0880 - val_mae: 0.2295 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.08804 to 0.08476, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0863 - mae: 0.2296 - val_loss: 0.0848 - val_mae: 0.2240 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.08476\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0823 - mae: 0.2237 - val_loss: 0.0876 - val_mae: 0.2286 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.08476\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0796 - mae: 0.2200 - val_loss: 0.0935 - val_mae: 0.2363 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.08476 to 0.08196, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0764 - mae: 0.2162 - val_loss: 0.0820 - val_mae: 0.2210 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.08196\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0740 - mae: 0.2128 - val_loss: 0.0907 - val_mae: 0.2330 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.08196 to 0.07664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0717 - mae: 0.2094 - val_loss: 0.0766 - val_mae: 0.2139 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.07664 to 0.07352, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0700 - mae: 0.2068 - val_loss: 0.0735 - val_mae: 0.2089 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.07352\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0678 - mae: 0.2034 - val_loss: 0.0743 - val_mae: 0.2108 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.07352\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0668 - mae: 0.2015 - val_loss: 0.0790 - val_mae: 0.2168 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.07352 to 0.07056, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0647 - mae: 0.1991 - val_loss: 0.0706 - val_mae: 0.2055 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.07056 to 0.06961, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0638 - mae: 0.1972 - val_loss: 0.0696 - val_mae: 0.2046 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.06961 to 0.06511, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0617 - mae: 0.1943 - val_loss: 0.0651 - val_mae: 0.1972 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.06511\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0610 - mae: 0.1931 - val_loss: 0.0678 - val_mae: 0.2035 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.06511\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0598 - mae: 0.1907 - val_loss: 0.0697 - val_mae: 0.2047 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.06511\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0595 - mae: 0.1906 - val_loss: 0.0653 - val_mae: 0.1967 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.06511\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0581 - mae: 0.1885 - val_loss: 0.0668 - val_mae: 0.2002 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.06511\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0579 - mae: 0.1883 - val_loss: 0.0668 - val_mae: 0.2014 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.06511 to 0.06394, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0577 - mae: 0.1877 - val_loss: 0.0639 - val_mae: 0.1953 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.06394 to 0.06352, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0569 - mae: 0.1864 - val_loss: 0.0635 - val_mae: 0.1939 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.06352 to 0.06270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0559 - mae: 0.1849 - val_loss: 0.0627 - val_mae: 0.1936 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.06270\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0553 - mae: 0.1839 - val_loss: 0.0643 - val_mae: 0.1960 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.06270 to 0.05978, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0551 - mae: 0.1833 - val_loss: 0.0598 - val_mae: 0.1891 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.05978\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0547 - mae: 0.1823 - val_loss: 0.0684 - val_mae: 0.2030 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.05978\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0535 - mae: 0.1811 - val_loss: 0.0600 - val_mae: 0.1889 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.05978 to 0.05912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0541 - mae: 0.1814 - val_loss: 0.0591 - val_mae: 0.1877 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.05912\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0530 - mae: 0.1801 - val_loss: 0.0632 - val_mae: 0.1921 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.05912 to 0.05763, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0524 - mae: 0.1791 - val_loss: 0.0576 - val_mae: 0.1856 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.05763 to 0.05729, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0525 - mae: 0.1792 - val_loss: 0.0573 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.05729\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0521 - mae: 0.1782 - val_loss: 0.0641 - val_mae: 0.1968 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.05729\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0523 - mae: 0.1787 - val_loss: 0.0610 - val_mae: 0.1915 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.05729\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0514 - mae: 0.1771 - val_loss: 0.0607 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.05729\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0522 - mae: 0.1784 - val_loss: 0.0595 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.05729 to 0.05429, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0516 - mae: 0.1769 - val_loss: 0.0543 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0501 - mae: 0.1751 - val_loss: 0.0621 - val_mae: 0.1906 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0503 - mae: 0.1755 - val_loss: 0.0568 - val_mae: 0.1845 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0500 - mae: 0.1748 - val_loss: 0.0626 - val_mae: 0.1939 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0498 - mae: 0.1744 - val_loss: 0.0555 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0496 - mae: 0.1739 - val_loss: 0.0619 - val_mae: 0.1925 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.05429\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0507 - mae: 0.1756 - val_loss: 0.0621 - val_mae: 0.1928 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0494 - mae: 0.1736 - val_loss: 0.0645 - val_mae: 0.1962 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0493 - mae: 0.1737 - val_loss: 0.0608 - val_mae: 0.1911 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0491 - mae: 0.1731 - val_loss: 0.0555 - val_mae: 0.1823 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0487 - mae: 0.1725 - val_loss: 0.0582 - val_mae: 0.1863 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.05429\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0494 - mae: 0.1735 - val_loss: 0.0630 - val_mae: 0.1951 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0482 - mae: 0.1720 - val_loss: 0.0558 - val_mae: 0.1822 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0482 - mae: 0.1720 - val_loss: 0.0578 - val_mae: 0.1861 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0490 - mae: 0.1730 - val_loss: 0.0584 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.05429\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0482 - mae: 0.1715 - val_loss: 0.0555 - val_mae: 0.1819 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0479 - mae: 0.1711 - val_loss: 0.0552 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.05429\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0477 - mae: 0.1710 - val_loss: 0.0573 - val_mae: 0.1855 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.05429 to 0.05271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0477 - mae: 0.1706 - val_loss: 0.0527 - val_mae: 0.1765 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.05271\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0475 - mae: 0.1706 - val_loss: 0.0571 - val_mae: 0.1833 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.05271\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0476 - mae: 0.1707 - val_loss: 0.0547 - val_mae: 0.1794 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.05271\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0481 - mae: 0.1712 - val_loss: 0.0527 - val_mae: 0.1771 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.05271\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0470 - mae: 0.1695 - val_loss: 0.0581 - val_mae: 0.1869 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.05271 to 0.05146, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0478 - mae: 0.1710 - val_loss: 0.0515 - val_mae: 0.1759 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0474 - mae: 0.1703 - val_loss: 0.0529 - val_mae: 0.1782 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0471 - mae: 0.1697 - val_loss: 0.0620 - val_mae: 0.1918 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0477 - mae: 0.1708 - val_loss: 0.0538 - val_mae: 0.1788 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0477 - mae: 0.1709 - val_loss: 0.0547 - val_mae: 0.1801 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0476 - mae: 0.1706 - val_loss: 0.0533 - val_mae: 0.1784 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0473 - mae: 0.1699 - val_loss: 0.0582 - val_mae: 0.1871 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0487 - mae: 0.1722 - val_loss: 0.0537 - val_mae: 0.1795 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0464 - mae: 0.1686 - val_loss: 0.0534 - val_mae: 0.1789 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0476 - mae: 0.1706 - val_loss: 0.0563 - val_mae: 0.1834 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0464 - mae: 0.1684 - val_loss: 0.0599 - val_mae: 0.1901 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0475 - mae: 0.1700 - val_loss: 0.0524 - val_mae: 0.1773 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0470 - mae: 0.1695 - val_loss: 0.0517 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0469 - mae: 0.1697 - val_loss: 0.0652 - val_mae: 0.1979 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.05146\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0470 - mae: 0.1697 - val_loss: 0.0556 - val_mae: 0.1802 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.05146\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0473 - mae: 0.1698 - val_loss: 0.0595 - val_mae: 0.1894 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.05146 to 0.05131, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0486 - mae: 0.1713 - val_loss: 0.0513 - val_mae: 0.1738 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.05131\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0452 - mae: 0.1663 - val_loss: 0.0686 - val_mae: 0.2038 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.05131\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0476 - mae: 0.1699 - val_loss: 0.0596 - val_mae: 0.1895 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0467 - mae: 0.1687 - val_loss: 0.0552 - val_mae: 0.1810 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0471 - mae: 0.1695 - val_loss: 0.0542 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0471 - mae: 0.1695 - val_loss: 0.0520 - val_mae: 0.1760 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0474 - mae: 0.1698 - val_loss: 0.0635 - val_mae: 0.1939 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0468 - mae: 0.1694 - val_loss: 0.0587 - val_mae: 0.1884 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0468 - mae: 0.1689 - val_loss: 0.0580 - val_mae: 0.1875 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0473 - mae: 0.1698 - val_loss: 0.0640 - val_mae: 0.1881 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0470 - mae: 0.1692 - val_loss: 0.0515 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0466 - mae: 0.1686 - val_loss: 0.0529 - val_mae: 0.1776 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0466 - mae: 0.1683 - val_loss: 0.0540 - val_mae: 0.1806 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0467 - mae: 0.1691 - val_loss: 0.0559 - val_mae: 0.1827 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0463 - mae: 0.1680 - val_loss: 0.0550 - val_mae: 0.1821 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0467 - mae: 0.1689 - val_loss: 0.0517 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.05131\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0466 - mae: 0.1682 - val_loss: 0.0521 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.05131 to 0.04617, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0481 - mae: 0.1701 - val_loss: 0.0462 - val_mae: 0.1653 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0462 - mae: 0.1682 - val_loss: 0.0513 - val_mae: 0.1757 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0466 - mae: 0.1687 - val_loss: 0.0631 - val_mae: 0.1954 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0459 - mae: 0.1673 - val_loss: 0.0533 - val_mae: 0.1782 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0468 - mae: 0.1689 - val_loss: 0.0516 - val_mae: 0.1753 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0458 - mae: 0.1675 - val_loss: 0.0549 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.04617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0465 - mae: 0.1684 - val_loss: 0.0509 - val_mae: 0.1752 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0464 - mae: 0.1679 - val_loss: 0.0631 - val_mae: 0.1896 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0465 - mae: 0.1682 - val_loss: 0.0594 - val_mae: 0.1876 - learning_rate: 1.0000e-03\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0462 - mae: 0.1683 - val_loss: 0.0572 - val_mae: 0.1853 - learning_rate: 1.0000e-03\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0461 - mae: 0.1680 - val_loss: 0.0536 - val_mae: 0.1799 - learning_rate: 1.0000e-03\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0588 - mae: 0.1679 - val_loss: 0.0495 - val_mae: 0.1732 - learning_rate: 1.0000e-03\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0444 - mae: 0.1649 - val_loss: 0.0535 - val_mae: 0.1795 - learning_rate: 1.0000e-03\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0464 - mae: 0.1682 - val_loss: 0.0511 - val_mae: 0.1749 - learning_rate: 1.0000e-03\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0476 - mae: 0.1694 - val_loss: 0.1024 - val_mae: 0.2485 - learning_rate: 1.0000e-03\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0459 - mae: 0.1670 - val_loss: 0.0584 - val_mae: 0.1864 - learning_rate: 1.0000e-03\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0461 - mae: 0.1679 - val_loss: 0.0540 - val_mae: 0.1809 - learning_rate: 1.0000e-03\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0466 - mae: 0.1682 - val_loss: 0.0529 - val_mae: 0.1788 - learning_rate: 1.0000e-03\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.04617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0459 - mae: 0.1674 - val_loss: 0.0509 - val_mae: 0.1736 - learning_rate: 1.0000e-03\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0453 - mae: 0.1663 - val_loss: 0.0557 - val_mae: 0.1832 - learning_rate: 1.0000e-03\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.04617\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0463 - mae: 0.1674 - val_loss: 0.0540 - val_mae: 0.1790 - learning_rate: 1.0000e-03\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss improved from 0.04617 to 0.02793, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0208 - mae: 0.1127 - val_loss: 0.0279 - val_mae: 0.1274 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.02793 to 0.02674, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0183 - mae: 0.1061 - val_loss: 0.0267 - val_mae: 0.1245 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss improved from 0.02674 to 0.02640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0175 - mae: 0.1037 - val_loss: 0.0264 - val_mae: 0.1237 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02640\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0169 - mae: 0.1022 - val_loss: 0.0264 - val_mae: 0.1237 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.02640 to 0.02613, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0166 - mae: 0.1011 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02613\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0163 - mae: 0.1003 - val_loss: 0.0263 - val_mae: 0.1232 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss improved from 0.02613 to 0.02596, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0161 - mae: 0.0996 - val_loss: 0.0260 - val_mae: 0.1227 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss improved from 0.02596 to 0.02575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0159 - mae: 0.0991 - val_loss: 0.0257 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.02575 to 0.02565, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0157 - mae: 0.0985 - val_loss: 0.0256 - val_mae: 0.1221 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss improved from 0.02565 to 0.02548, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0156 - mae: 0.0981 - val_loss: 0.0255 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02548\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0155 - mae: 0.0977 - val_loss: 0.0256 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.02548 to 0.02543, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0153 - mae: 0.0973 - val_loss: 0.0254 - val_mae: 0.1210 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss improved from 0.02543 to 0.02541, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0152 - mae: 0.0970 - val_loss: 0.0254 - val_mae: 0.1211 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss improved from 0.02541 to 0.02511, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0151 - mae: 0.0966 - val_loss: 0.0251 - val_mae: 0.1203 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02511\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0151 - mae: 0.0965 - val_loss: 0.0255 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.02511 to 0.02506, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0149 - mae: 0.0960 - val_loss: 0.0251 - val_mae: 0.1203 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.02506\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0148 - mae: 0.0957 - val_loss: 0.0256 - val_mae: 0.1217 - learning_rate: 1.0000e-04\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss improved from 0.02506 to 0.02502, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0148 - mae: 0.0955 - val_loss: 0.0250 - val_mae: 0.1200 - learning_rate: 1.0000e-04\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02502\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0147 - mae: 0.0953 - val_loss: 0.0256 - val_mae: 0.1218 - learning_rate: 1.0000e-04\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02502\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0147 - mae: 0.0952 - val_loss: 0.0251 - val_mae: 0.1205 - learning_rate: 1.0000e-04\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss improved from 0.02502 to 0.02468, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0146 - mae: 0.0950 - val_loss: 0.0247 - val_mae: 0.1195 - learning_rate: 1.0000e-04\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0145 - mae: 0.0948 - val_loss: 0.0247 - val_mae: 0.1194 - learning_rate: 1.0000e-04\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0145 - mae: 0.0946 - val_loss: 0.0248 - val_mae: 0.1196 - learning_rate: 1.0000e-04\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0144 - mae: 0.0943 - val_loss: 0.0254 - val_mae: 0.1215 - learning_rate: 1.0000e-04\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0143 - mae: 0.0942 - val_loss: 0.0250 - val_mae: 0.1201 - learning_rate: 1.0000e-04\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0143 - mae: 0.0941 - val_loss: 0.0249 - val_mae: 0.1199 - learning_rate: 1.0000e-04\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0142 - mae: 0.0939 - val_loss: 0.0248 - val_mae: 0.1195 - learning_rate: 1.0000e-04\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0142 - mae: 0.0937 - val_loss: 0.0248 - val_mae: 0.1197 - learning_rate: 1.0000e-04\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0142 - mae: 0.0936 - val_loss: 0.0248 - val_mae: 0.1195 - learning_rate: 1.0000e-04\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0141 - mae: 0.0933 - val_loss: 0.0250 - val_mae: 0.1202 - learning_rate: 1.0000e-04\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0140 - mae: 0.0932 - val_loss: 0.0250 - val_mae: 0.1202 - learning_rate: 1.0000e-04\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0140 - mae: 0.0932 - val_loss: 0.0248 - val_mae: 0.1192 - learning_rate: 1.0000e-04\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.02468\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0140 - mae: 0.0930 - val_loss: 0.0251 - val_mae: 0.1204 - learning_rate: 1.0000e-04\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss improved from 0.02468 to 0.02442, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0139 - mae: 0.0930 - val_loss: 0.0244 - val_mae: 0.1185 - learning_rate: 1.0000e-04\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.02442\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0139 - mae: 0.0927 - val_loss: 0.0247 - val_mae: 0.1192 - learning_rate: 1.0000e-04\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.02442\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0139 - mae: 0.0925 - val_loss: 0.0252 - val_mae: 0.1205 - learning_rate: 1.0000e-04\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss improved from 0.02442 to 0.02422, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0138 - mae: 0.0925 - val_loss: 0.0242 - val_mae: 0.1181 - learning_rate: 1.0000e-04\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0138 - mae: 0.0924 - val_loss: 0.0249 - val_mae: 0.1201 - learning_rate: 1.0000e-04\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0137 - mae: 0.0921 - val_loss: 0.0245 - val_mae: 0.1188 - learning_rate: 1.0000e-04\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.02422\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0137 - mae: 0.0921 - val_loss: 0.0250 - val_mae: 0.1197 - learning_rate: 1.0000e-04\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0137 - mae: 0.0919 - val_loss: 0.0249 - val_mae: 0.1196 - learning_rate: 1.0000e-04\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0136 - mae: 0.0919 - val_loss: 0.0247 - val_mae: 0.1188 - learning_rate: 1.0000e-04\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0136 - mae: 0.0917 - val_loss: 0.0253 - val_mae: 0.1209 - learning_rate: 1.0000e-04\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0136 - mae: 0.0918 - val_loss: 0.0245 - val_mae: 0.1185 - learning_rate: 1.0000e-04\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0135 - mae: 0.0914 - val_loss: 0.0248 - val_mae: 0.1192 - learning_rate: 1.0000e-04\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0135 - mae: 0.0915 - val_loss: 0.0250 - val_mae: 0.1201 - learning_rate: 1.0000e-04\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0135 - mae: 0.0913 - val_loss: 0.0248 - val_mae: 0.1191 - learning_rate: 1.0000e-04\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0135 - mae: 0.0913 - val_loss: 0.0245 - val_mae: 0.1189 - learning_rate: 1.0000e-04\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0134 - mae: 0.0912 - val_loss: 0.0246 - val_mae: 0.1184 - learning_rate: 1.0000e-04\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0134 - mae: 0.0911 - val_loss: 0.0246 - val_mae: 0.1185 - learning_rate: 1.0000e-04\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0134 - mae: 0.0910 - val_loss: 0.0245 - val_mae: 0.1185 - learning_rate: 1.0000e-04\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0133 - mae: 0.0909 - val_loss: 0.0246 - val_mae: 0.1189 - learning_rate: 1.0000e-04\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0133 - mae: 0.0906 - val_loss: 0.0245 - val_mae: 0.1184 - learning_rate: 1.0000e-04\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0133 - mae: 0.0908 - val_loss: 0.0244 - val_mae: 0.1187 - learning_rate: 1.0000e-04\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0132 - mae: 0.0905 - val_loss: 0.0247 - val_mae: 0.1192 - learning_rate: 1.0000e-04\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.02422\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0132 - mae: 0.0905 - val_loss: 0.0247 - val_mae: 0.1190 - learning_rate: 1.0000e-04\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.02422\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0132 - mae: 0.0904 - val_loss: 0.0245 - val_mae: 0.1186 - learning_rate: 1.0000e-04\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss improved from 0.02422 to 0.02332, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0115 - mae: 0.0842 - val_loss: 0.0233 - val_mae: 0.1151 - learning_rate: 1.0000e-05\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.02332 to 0.02325, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0113 - mae: 0.0836 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss improved from 0.02325 to 0.02323, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0113 - mae: 0.0835 - val_loss: 0.0232 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.02323\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0113 - mae: 0.0834 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.02323\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0113 - mae: 0.0833 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.02323\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0833 - val_loss: 0.0233 - val_mae: 0.1152 - learning_rate: 1.0000e-05\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.02323\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0833 - val_loss: 0.0233 - val_mae: 0.1151 - learning_rate: 1.0000e-05\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss improved from 0.02323 to 0.02321, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0833 - val_loss: 0.0232 - val_mae: 0.1149 - learning_rate: 1.0000e-05\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss improved from 0.02321 to 0.02321, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0832 - val_loss: 0.0232 - val_mae: 0.1149 - learning_rate: 1.0000e-05\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0832 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0832 - val_loss: 0.0232 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0832 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0832 - val_loss: 0.0232 - val_mae: 0.1149 - learning_rate: 1.0000e-05\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.02321\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0112 - mae: 0.0831 - val_loss: 0.0232 - val_mae: 0.1148 - learning_rate: 1.0000e-05\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0831 - val_loss: 0.0232 - val_mae: 0.1148 - learning_rate: 1.0000e-05\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0831 - val_loss: 0.0232 - val_mae: 0.1148 - learning_rate: 1.0000e-05\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0831 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0831 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.02321\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0830 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss improved from 0.02321 to 0.02317, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0830 - val_loss: 0.0232 - val_mae: 0.1148 - learning_rate: 1.0000e-05\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0830 - val_loss: 0.0232 - val_mae: 0.1149 - learning_rate: 1.0000e-05\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0830 - val_loss: 0.0232 - val_mae: 0.1149 - learning_rate: 1.0000e-05\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0830 - val_loss: 0.0232 - val_mae: 0.1147 - learning_rate: 1.0000e-05\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0112 - mae: 0.0830 - val_loss: 0.0232 - val_mae: 0.1148 - learning_rate: 1.0000e-05\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0111 - mae: 0.0829 - val_loss: 0.0232 - val_mae: 0.1149 - learning_rate: 1.0000e-05\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0111 - mae: 0.0829 - val_loss: 0.0232 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0111 - mae: 0.0829 - val_loss: 0.0233 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.02317\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0111 - mae: 0.0829 - val_loss: 0.0232 - val_mae: 0.1150 - learning_rate: 1.0000e-05\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss improved from 0.02317 to 0.02314, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0110 - mae: 0.0823 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss improved from 0.02314 to 0.02312, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0822 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0821 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-06\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1147 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0232 - val_mae: 0.1147 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0232 - val_mae: 0.1147 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.02312\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0109 - mae: 0.0820 - val_loss: 0.0231 - val_mae: 0.1146 - learning_rate: 1.0000e-07\n",
      "Epoch 349: early stopping\n",
      "Restoring model weights from the end of the best epoch: 299.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1806 m\n",
      "Median positioning error: 0.1583 m\n",
      "90th percentile error: 0.3223 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7093.865123,
   "end_time": "2025-08-19T06:14:09.225859",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-19T04:15:55.360736",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
