{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "76a4f548",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T14:22:16.992617Z",
     "iopub.status.busy": "2025-07-30T14:22:16.991866Z",
     "iopub.status.idle": "2025-07-30T14:22:18.458990Z",
     "shell.execute_reply": "2025-07-30T14:22:18.458154Z"
    },
    "papermill": {
     "duration": 1.472148,
     "end_time": "2025-07-30T14:22:18.460410",
     "exception": false,
     "start_time": "2025-07-30T14:22:16.988262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "accd74bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:22:18.466168Z",
     "iopub.status.busy": "2025-07-30T14:22:18.465835Z",
     "iopub.status.idle": "2025-07-30T14:22:32.796597Z",
     "shell.execute_reply": "2025-07-30T14:22:32.795977Z"
    },
    "papermill": {
     "duration": 14.335022,
     "end_time": "2025-07-30T14:22:32.798007",
     "exception": false,
     "start_time": "2025-07-30T14:22:18.462985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-30 14:22:19.912844: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753885340.084280      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753885340.130840      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3ae63ffe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:22:32.803258Z",
     "iopub.status.busy": "2025-07-30T14:22:32.802774Z",
     "iopub.status.idle": "2025-07-30T14:22:32.807172Z",
     "shell.execute_reply": "2025-07-30T14:22:32.806619Z"
    },
    "papermill": {
     "duration": 0.008002,
     "end_time": "2025-07-30T14:22:32.808194",
     "exception": false,
     "start_time": "2025-07-30T14:22:32.800192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 9   #0-200\n",
    "dropout_rate = 0.1  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7dd84239",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:22:32.812723Z",
     "iopub.status.busy": "2025-07-30T14:22:32.812476Z",
     "iopub.status.idle": "2025-07-30T14:22:32.815589Z",
     "shell.execute_reply": "2025-07-30T14:22:32.815111Z"
    },
    "papermill": {
     "duration": 0.006427,
     "end_time": "2025-07-30T14:22:32.816582",
     "exception": false,
     "start_time": "2025-07-30T14:22:32.810155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e17f1d2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:22:32.821516Z",
     "iopub.status.busy": "2025-07-30T14:22:32.821326Z",
     "iopub.status.idle": "2025-07-30T15:02:40.874566Z",
     "shell.execute_reply": "2025-07-30T15:02:40.873711Z"
    },
    "papermill": {
     "duration": 2408.057436,
     "end_time": "2025-07-30T15:02:40.875838",
     "exception": false,
     "start_time": "2025-07-30T14:22:32.818402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753885379.777491      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753885389.082505      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">83,200</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">63,488</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m83,200\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m63,488\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">675,338</span> (2.58 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m675,338\u001b[0m (2.58 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">674,822</span> (2.57 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m674,822\u001b[0m (2.57 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753885400.248710      59 service.cc:148] XLA service 0x7e7100009a40 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753885400.249551      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753885405.142744      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 54.30243, saving model to models/best_model_full.keras\n",
      "4375/4375 - 52s - 12ms/step - loss: 123.0228 - mae: 8.1545 - val_loss: 54.3024 - val_mae: 5.6015 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 54.30243 to 40.39975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 18.2315 - mae: 3.2073 - val_loss: 40.3997 - val_mae: 4.9155 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 40.39975 to 15.08807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 7.9598 - mae: 2.1195 - val_loss: 15.0881 - val_mae: 3.0234 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 15.08807\n",
      "4375/4375 - 37s - 8ms/step - loss: 12.0228 - mae: 2.4916 - val_loss: 18.6863 - val_mae: 3.3946 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 15.08807 to 5.74792, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 6.7555 - mae: 1.9144 - val_loss: 5.7479 - val_mae: 1.8318 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 5.74792 to 3.94395, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.4945 - mae: 1.2263 - val_loss: 3.9439 - val_mae: 1.5344 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 3.94395 to 3.37378, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.4390 - mae: 0.8691 - val_loss: 3.3738 - val_mae: 1.4688 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 3.37378\n",
      "4375/4375 - 37s - 8ms/step - loss: 5.9668 - mae: 1.4562 - val_loss: 3.7700 - val_mae: 1.5497 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 3.37378\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.5305 - mae: 0.8774 - val_loss: 4.4170 - val_mae: 1.5753 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 3.37378\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.5675 - mae: 0.8101 - val_loss: 4.8694 - val_mae: 1.6636 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 3.37378 to 3.33222, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.4760 - mae: 0.7734 - val_loss: 3.3322 - val_mae: 1.4065 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 3.33222\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.5509 - mae: 0.5759 - val_loss: 3.5597 - val_mae: 1.4998 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 3.33222 to 2.80197, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.0892 - mae: 0.8963 - val_loss: 2.8020 - val_mae: 1.3033 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.6909 - mae: 0.6329 - val_loss: 4.3440 - val_mae: 1.6070 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.4469 - mae: 0.7827 - val_loss: 3.8670 - val_mae: 1.5258 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.3934 - mae: 0.4892 - val_loss: 3.9514 - val_mae: 1.4745 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.4050 - mae: 0.7023 - val_loss: 3.5372 - val_mae: 1.4555 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.3637 - mae: 0.4709 - val_loss: 4.4264 - val_mae: 1.6568 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.3925 - mae: 0.7329 - val_loss: 4.6617 - val_mae: 1.6727 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.7474 - mae: 0.5874 - val_loss: 16.9768 - val_mae: 2.3171 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 3.2070 - mae: 1.0471 - val_loss: 4.7052 - val_mae: 1.7250 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.4741 - mae: 0.5341 - val_loss: 6.1535 - val_mae: 1.8586 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.6250 - mae: 0.8046 - val_loss: 5.9187 - val_mae: 1.8283 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.8357 - mae: 0.6738 - val_loss: 27.1163 - val_mae: 3.9677 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.6286 - mae: 0.8850 - val_loss: 4.7390 - val_mae: 1.6428 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.5411 - mae: 0.8496 - val_loss: 8.1938 - val_mae: 2.1069 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.4020 - mae: 0.7639 - val_loss: 8.4856 - val_mae: 2.0696 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.1934 - mae: 0.7623 - val_loss: 9.7247 - val_mae: 2.3844 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.8589 - mae: 0.6878 - val_loss: 6.8177 - val_mae: 1.9945 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.5097 - mae: 0.8521 - val_loss: 8.7629 - val_mae: 2.2663 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.9672 - mae: 0.7146 - val_loss: 6.5850 - val_mae: 1.8645 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 2.4304 - mae: 0.8284 - val_loss: 6.9109 - val_mae: 2.0068 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 33: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.3505 - mae: 0.7625 - val_loss: 15.6832 - val_mae: 2.9159 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.6973 - mae: 0.6149 - val_loss: 7.4230 - val_mae: 2.0269 - learning_rate: 1.0000e-03\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.2947 - mae: 0.4223 - val_loss: 6.8828 - val_mae: 1.9303 - learning_rate: 1.0000e-03\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1877 - mae: 0.3390 - val_loss: 7.1382 - val_mae: 1.9532 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1366 - mae: 0.2897 - val_loss: 7.2742 - val_mae: 1.9716 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.1067 - mae: 0.2565 - val_loss: 7.3408 - val_mae: 1.9675 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0896 - mae: 0.2353 - val_loss: 7.4477 - val_mae: 1.9597 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0788 - mae: 0.2207 - val_loss: 7.1175 - val_mae: 1.9170 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0698 - mae: 0.2079 - val_loss: 7.2694 - val_mae: 1.9464 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0639 - mae: 0.1990 - val_loss: 7.6451 - val_mae: 2.0007 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0590 - mae: 0.1909 - val_loss: 7.8085 - val_mae: 2.0403 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0548 - mae: 0.1840 - val_loss: 7.1913 - val_mae: 1.9331 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0509 - mae: 0.1778 - val_loss: 7.3119 - val_mae: 1.9404 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0480 - mae: 0.1726 - val_loss: 7.6117 - val_mae: 1.9841 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0466 - mae: 0.1696 - val_loss: 7.5677 - val_mae: 1.9886 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 2.80197\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0455 - mae: 0.1675 - val_loss: 7.8143 - val_mae: 2.0178 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 2.80197\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0423 - mae: 0.1620 - val_loss: 7.6771 - val_mae: 1.9904 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 2.80197\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0415 - mae: 0.1603 - val_loss: 7.7054 - val_mae: 2.0106 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 2.80197\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0408 - mae: 0.1588 - val_loss: 7.6014 - val_mae: 1.9779 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 2.80197\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0393 - mae: 0.1559 - val_loss: 7.6240 - val_mae: 1.9739 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 53: val_loss did not improve from 2.80197\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0380 - mae: 0.1534 - val_loss: 7.6492 - val_mae: 1.9860 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 2.80197\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0250 - mae: 0.1242 - val_loss: 7.6239 - val_mae: 1.9822 - learning_rate: 1.0000e-04\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 2.80197\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0238 - mae: 0.1214 - val_loss: 7.5865 - val_mae: 1.9815 - learning_rate: 1.0000e-04\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0234 - mae: 0.1205 - val_loss: 7.5070 - val_mae: 1.9655 - learning_rate: 1.0000e-04\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0231 - mae: 0.1194 - val_loss: 7.5870 - val_mae: 1.9834 - learning_rate: 1.0000e-04\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0228 - mae: 0.1190 - val_loss: 7.6714 - val_mae: 1.9919 - learning_rate: 1.0000e-04\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0226 - mae: 0.1183 - val_loss: 7.6939 - val_mae: 1.9916 - learning_rate: 1.0000e-04\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0222 - mae: 0.1172 - val_loss: 7.6531 - val_mae: 1.9824 - learning_rate: 1.0000e-04\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0221 - mae: 0.1170 - val_loss: 7.5650 - val_mae: 1.9709 - learning_rate: 1.0000e-04\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 2.80197\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0219 - mae: 0.1166 - val_loss: 7.5510 - val_mae: 1.9783 - learning_rate: 1.0000e-04\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 2.80197\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0218 - mae: 0.1163 - val_loss: 7.5358 - val_mae: 1.9726 - learning_rate: 1.0000e-04\n",
      "Epoch 63: early stopping\n",
      "Restoring model weights from the end of the best epoch: 13.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 2.0893 m\n",
      "Median positioning error: 1.9976 m\n",
      "90th percentile error: 3.6170 m\n"
     ]
    },
    {
     "data": {
      "image/png": "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wRg7dizeeeeduOObNm2KnpchEjdZ20OHDo25qR85ciS+9a1v4a9//Su2bt2Kqqoq3HLLLUnjp7P7/NixY+G6Lt57772Y4zt27EBzc7O0PthXPu+//37cjfvmzZuV5pGIaX1FRETm4E06ERF5xve//30MGTIEl156KXbs2BF3/v3338cvfvGLfuO0t7fja1/7GhobG3H99dcP6M+g9VVTU4N169bFvIGwe/du3HvvvRg3bhwmTpw46DYSGTlyJKZMmYKHHnoIzc3N0eMbN27Es88+i5qaGgBAOBxGIBCIeezw4cMxatSouD/51VtRUREAxMROJtLW0qVLY44vWbIEAHDGGWf0GyOTZs+ejW3btuFvf/tb9FhHRwd++9vfKs0jEdP6ioiIzMHfSSciIs8YP348Hn30UZx//vk47LDDMHfuXBxxxBHo6urCK6+8gj/96U+4+OKLYx6zbds2/P73vwfQ8+n5W2+9hT/96U+oq6vDNddcg8suuywjuV177bX43//9X5x++um46qqrUFlZiYceeghbt27FE088AZ9P3vvit99+O04//XTMmDED3/jGN6J/gq2srCz6N81bWlqw33774Utf+hImT56M4uJiPPfcc/jnP/+JO+64I2nswsJCTJw4EY899hgOPvhgVFZW4ogjjkj4+/WTJ0/GRRddhHvvvRfNzc048cQTsW7dOjz00EM4++yzcfLJJ8vqgoQuu+wy/OpXv8IFF1yA73znOxg5ciQeeeQRFBQUAEj9WwL/93//F/1GRG8zZ84c8O/zm9ZXRERkDt6kExGRp5x55pl48803cfvtt+PJJ5/Eb37zG+Tn52PSpEm444474nbufv311/G1r30tuunamDFj8IUvfAGXXnoppk2blrG8RowYgVdeeQU/+MEPcNddd6GjowOTJk3CU089Jf1T0VmzZqG2thYLFy7EjTfeCL/fjxNPPBE/+9nPohuOFRUV4Vvf+haeffZZ/PnPf4brupgwYQJ+/etf44orrthn/Pvuuw/f/va3cfXVV6OrqwsLFy5MugnefffdhwMPPBAPPvgg/vKXv6C6uhrXXXcdFi5cmPG6+1NcXIznn38e3/72t/GLX/wCxcXFmDt3LmbOnIkvfvGL0Zv1/tx4440Jjz/wwAOD2nTPpL4iIiJzOELnDitEREREii1duhRXX301PvnkE4wePVp3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iMaNG+Odd95x2GfFihX2XPR6PSIiItChQwfMnj0b6enppeZUvH2qVauGRx55BOfOnSv1eeW1d+9ejBkzxv67JElYt26dwz6TJ0/Gtm3bXJbhqm1KM2jQIJw6dcrt57mraNsX/QkIcD4QVyQXNTDGYDabuf5RpVb9StalRNm8+4YQUYh0Lmk5F96xaWE8uZGRh0eX7MHnf10GAMx7tDk616vikbKViJcQZ2iS7qOCgoIQExMDP79/PsXw0ksvYdCgQWjXrh02btyIo0ePYsGCBTh8+DBWrVqFoUOHIjs7G99++22J8r755hvk5+fj3//+t8P2Tp06ISkpyf4zcOBA9O7d22Fbp06dyox38uTJePLJJzFo0CAcOXIEf/31F7p06YL+/fvjvffec9h36NChmDhxIvr374/t27fj0KFDeOWVV/D999/j559/BgCEhIQgJiamzNuf9+/fj+joaHz22Wc4duwYXnrpJUybNq1EnSaTCUlJSbhy5Qp+//13jBkzBp9++ilatmyJa9eulZnfyZMnce3aNXz99dc4duwY+vXrB6vVWubzylK1atUyFzcMCQnx+DcUBAYGIjo62qNlumJr+6I/Fy9edLl/fn5+iW22ld/dVdHnEUIIIcTzrqfnofv8Hfj7ajp0EjDvkeYY0CqOd1iEKIom6QL766+/8MYbb2DBggV466230KlTJyQkJKBnz55Yu3Ythg8fjujoaPTr1w+ffPJJied/8sknGDBgACIjIx22G41GxMTE2H8CAwPh7+/vsM224rUrf/zxhz2uyZMno169emjcuDFef/11TJw4EZMmTcLly4Wvln711VdYvXo1Pv/8c/z3v/9Fu3btkJCQgP79++OXX35B9+7d3WqXJ554Au+88w66du2KOnXq4N///jdGjhxZ4oUKSZIQExOD2NhYNG7cGKNGjcLvv/+OrKwsTJ06tcx6oqOjERsbi7vvvhvTp0/H8ePHcebMGQDAkiVLULduXRiNRjRs2BCrVq2yP48xhpkzZ6JmzZrw9/dH9erVMX78ePvjRW93T0hIAAA89NBDkCTJ/nvx291lWcbs2bNRo0YNBAQEoG3btti0aZP98QsXLkCSJHz77bfo3r07goKC0KJFC+zZs8e+T/E7I2x1rFq1CgkJCQgLC8Pjjz+OzMxM+z6ZmZkYMmQIgoODERsbi7fffhvdunXD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BQUFeOedd7BgwQLMnz8fR44cQa9evfDggw/aJ47vvvsufvjhB6xZswYnTpzA6tWrkZCQ4LTcv/76CwCwdetWJCUl4dtvv3W639SpU7F27VqsXLkSBw4cQL169dCrVy+kpKQ47PfSSy9hwYIF2LdvH/z8/PDEE0+Umtf27dtx9uxZbN++HStXrsSKFSscbrMfNmwYrl27hh07dmDt2rX48MMP3b7t35UFCxagRYsWOHjwIF555RUAQE5ODt5880189NFHOHbsGKKjozFixAjs27cP69evx549e8AYQ58+fRxeTHD2vIo4e/Ys1q1bhx9//BE//vgjdu7ciblz59ofnzNnDj799FMsXboUx44dw8SJEzFixAjs3Lmzco1BCCGEkHJjjOGHw9fQe9GvmLvxBHItVtSpEoyvnuyIUV1q8w6PEK9Ht7uXU9qSL5C25CsAQLUlryCw8z9fBWe5eA1X+xVOOoP73IWqc59zeG7Sv1+E+UjhZ28TjjhOAjM+34CUOR8BAKq8MQEhD3StUHwdOnTAihUr0LBhQyQlJWHWrFm46667cPToUYSGhuL69eswGo0lFuqqVq0arl+/DgB48cUX8fTTT6Nu3bpISEjAxx9/jNOnT2PlypXYs2cPnnrqKfz8889o27Ytli1bVq5bwufMmYMhQ4Zg4sSJAID69evj3XffRdeuXbFkyRIEBASUWcbp06exdOlStG3bFqGhoZg/fz5eeOEFPP744wCAN998E9u3b8eiRYuwePFiXLp0CfXr10fnzp1hMBhcTtABoGrVqgCAqKgol7fBZ2dnY8mSJVixYoX9s+zLli3Dli1b8PHHH2PKlCn2fV9//XV07drV3p59+/ZFXl6eyzwjIiLw3nvvQa/Xo1GjRujbty+2bduG0aNH48SJE9i6dSv27t1rf4Hko48+Qv369ctss7///rvErfX//ve/sXTpUvvv99xzD55//nn777/99hssFgvef/99tGjRAkBh269fvx67d+9Gp06dAACrV69GfHw81q1bh8ceewwASjyvomRZxooVKxAaWrj669ChQ7Ft2za8/vrrMJvNeOONN7B161Z07NgRQOGdEL/99hs+/PBD+10QhBBCCFHO5ZQcjF1zAEeupAMAQgP88FTXuhjRKQHB/jS1IMQT6EwqJzkzB9akmwAAZs53fNAq2x+T0zOLPxXW22n2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ORX9w9n2B7635+SpfjKbzcjMzITFYoHJZPLqnAICApCenu5wralMP11OzcPCHRfx54V05FsL9wk26rBgQEO0rVk4oQv290N+fn6ZOcmyjNzcXJhMJuTl5al+7AEocY1Xqp9kWUZeXh5MJhOys7M9mpPt2h8cHGwft4qqSE55eXkObVOZ8yk3NxcAkJqaivDwcK8+n0S+7lUmJ3f47PekJycn278n3fZqR25ubonvO7a9OlKcJ7YrWTav7VqKpaCgwD5xq0w5WsrJU9tdtY2WYizvdlsuvGIxm804f/48atWqVeK6cfv2bURERNj/qFHz1WJZlpGamorIyEjo9XpFXy12J1d3cyqt7IrGXt62KaufLBYLNm3ahD59+thf9HG3n9Te7gvvVHg6pzZtZtm/J33//hlC5OSp7VarFampqYiIiHC4o8kbc6rItcZZTmdvZmHNn5fw2Z+XkF9Q+HhceCB63VEN4++pB1PgPwvClTcn2zUrKiqqxFikxrHnrG2U6iclci36QlvRa78njj2r1YqUlBR721SmP/Lz87Fp0yb07t0bRqPRq88nka97lckpPT0dkZGR9D3ppdHpdCUWnLI1qO2n6HZnPLFdybJ5bddCLMVPlMqWr4WcPLW9rLbRQozl3V78As0rFqDkNYWxwlvVnF1rXC1252x78euRO9td/d9T5du4m6unyla6bcrqp6KPK9m+ntyu1rGn5nalc3L2u7fn5KnttkmJ7V9vzqki15qi+x29mo73d5zBhr+v27c1ignF/Mda4I7qJqfPdydGnseeq7ZRKhZP5+oqZk8ee55om6Jji7efTxXZ7gs5uboOOKPNZZGJV5EkCevWrQMAXLhwAZIk4dChQ1xjAuDy8+gJCQlYtGhRqc+dOXMmWrZs6dF4VqxYYb9tjDcei60VPzZ27NgBSZIcbleqCC0vHBcSEuLWBdlb61eyLiXK5t03hIhCpHOporlYZYaFP5/EgMW77RP07g2rYum/22DD+LvQNC6s0u3Du51pPFG3TCIumqT7oMzMTEycOBG1atVCYGAgOnXqhL179zrswxjD9OnTERsbi8DAQPTo0QOnT5+2P242mzF06FCYTCY0aNAAW7dudXj+W2+9hWeffbZE3UlJSbj//vs9lott8mb7qVatGh555BGcO3eu3GUUf2W/qL1792LMmDEO+9peZLCZPHky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5En27t0LQH5+PsuXL+e1116jf//+JCQkkJyczK5du/j222/rjGsymZg9ezbR0dHo9Xratm3L8uXLgcoz4IqisGXLFrp27YrBYKB///7k5OTwxRdf0L59ewIDAxk1ahQlJSWX7ENYWBiRkZH07t2bZ555hp9++okjR44A8Pbbb9OmTRt0Oh1xcXF8+OGH9v1sNhtz584lJiYGvV5PixYtmD59un3V79jYWPtU59jYWADuuusu+2NQOd09Pj7eHtNqtfL888/TsmVL9Ho98fHxfPnll/bHf/31VxRFYd26dfTr1w9fX1+6dOnC7t277WVWrlxJUFCQ/X5VHR9++CGxsbEYjUZGjhxJYWGhvUxhYSGjR4/Gz8+PyMhIFi9eTN++feudql9l+fLlPPDAAzzwwAP256i6H3/8kcGDB2M0GgkODqZ3794cPXrU/viKFSvo2LEjer2eyMhIpk6d6tDX6pcC5OXloSgK27dvBy68Fr744gsSEhLQ6/V88803HD16lKFDhxIeHo6/vz/du3fnq6++cmhXXa8xm81G27ZtWbhwoUP5tLQ0FEXhyJEjDVrd/eLjFxsby4svvsjEiRMJCAggJiaG9957z2GfjIwMRowYQVBQECEhIQwdOpRff/21vsNfg0ajoVmzZqquxuuq+p1ZlzNiq/3ciKbFU1d3Ly23cCSniB9OnuNv357godXfc+OzW+jwzBb+tHgH9733LTPWprFq9wn2/5bPsdxi8krMeGsrV2F/4A8xLBjemU3TbmHPU0l8++StLBt1ExNvaUWX6KAml6C78+eC2m2T8cS1MYXnktXdBfn5+cCFs4h79+7FbDaTlJRkL3PDDTcQExPD7t27+cMf/lBrnLFjx7J7927eeOMNunTpwvHjxzlz5oxDmblz57J06VJ8fX0ZMWIEI0aMQK/Xs2bNGoqKirjrrrt48803mT17doPbX3UGury8nPXr1zN9+nSWLFlCUlISmzZtYsKECbRs2ZJ+/frx6aefsnjxYj7++GM6duxIVlYWaWlp9tU2q9uzZw9hYWEkJyczcODAOs/Sv/766yxatIh3332Xrl27smLFCu68805+/PFH2rVrZy/31FNPsXDhQtq1a8dTTz3F/fffz5EjR+o8g3z06FE2bNjApk2bOHfuHCNGjODll19m/vz5AMycOZPU1FQ2btxIeHg4zzzzDPv2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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2431.114956,
   "end_time": "2025-07-30T15:02:43.889988",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T14:22:12.775032",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
