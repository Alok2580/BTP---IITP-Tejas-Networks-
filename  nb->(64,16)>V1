{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aaf4a877",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-21T04:56:34.292538Z",
     "iopub.status.busy": "2025-08-21T04:56:34.292231Z",
     "iopub.status.idle": "2025-08-21T04:56:35.844904Z",
     "shell.execute_reply": "2025-08-21T04:56:35.843890Z"
    },
    "papermill": {
     "duration": 1.558229,
     "end_time": "2025-08-21T04:56:35.846824",
     "exception": false,
     "start_time": "2025-08-21T04:56:34.288595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7a5a0e7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:56:35.855345Z",
     "iopub.status.busy": "2025-08-21T04:56:35.854592Z",
     "iopub.status.idle": "2025-08-21T04:56:50.404153Z",
     "shell.execute_reply": "2025-08-21T04:56:50.403091Z"
    },
    "papermill": {
     "duration": 14.5546,
     "end_time": "2025-08-21T04:56:50.406075",
     "exception": false,
     "start_time": "2025-08-21T04:56:35.851475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-21 04:56:37.477435: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755752197.674517      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755752197.728996      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a2c2f202",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:56:50.414881Z",
     "iopub.status.busy": "2025-08-21T04:56:50.413896Z",
     "iopub.status.idle": "2025-08-21T04:56:50.421081Z",
     "shell.execute_reply": "2025-08-21T04:56:50.420043Z"
    },
    "papermill": {
     "duration": 0.01294,
     "end_time": "2025-08-21T04:56:50.422869",
     "exception": false,
     "start_time": "2025-08-21T04:56:50.409929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 8     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "77b7a1be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:56:50.428343Z",
     "iopub.status.busy": "2025-08-21T04:56:50.428053Z",
     "iopub.status.idle": "2025-08-21T04:56:50.432096Z",
     "shell.execute_reply": "2025-08-21T04:56:50.431362Z"
    },
    "papermill": {
     "duration": 0.008635,
     "end_time": "2025-08-21T04:56:50.433627",
     "exception": false,
     "start_time": "2025-08-21T04:56:50.424992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "174d8e01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:56:50.440186Z",
     "iopub.status.busy": "2025-08-21T04:56:50.439986Z",
     "iopub.status.idle": "2025-08-21T07:18:26.311632Z",
     "shell.execute_reply": "2025-08-21T07:18:26.310686Z"
    },
    "papermill": {
     "duration": 8495.876277,
     "end_time": "2025-08-21T07:18:26.313117",
     "exception": false,
     "start_time": "2025-08-21T04:56:50.436840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755752233.768921      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755752243.479446      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755752254.699210      59 service.cc:148] XLA service 0x7a8a54018100 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755752254.699962      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755752258.095038      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 8.29758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 56.8516 - mae: 4.7269 - val_loss: 8.2976 - val_mae: 2.2442 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 8.29758 to 5.13927, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 6.5177 - mae: 1.9680 - val_loss: 5.1393 - val_mae: 1.7909 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.13927 to 3.14733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 3.5206 - mae: 1.4455 - val_loss: 3.1473 - val_mae: 1.3665 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.14733 to 1.98225, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 2.8270 - mae: 1.2507 - val_loss: 1.9822 - val_mae: 1.0986 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.98225\n",
      "4375/4375 - 31s - 7ms/step - loss: 2.3187 - mae: 1.0787 - val_loss: 2.2993 - val_mae: 1.1748 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.98225 to 0.78468, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.9941 - mae: 0.7692 - val_loss: 0.7847 - val_mae: 0.7046 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.78468 to 0.56038, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.6618 - mae: 0.8581 - val_loss: 0.5604 - val_mae: 0.5756 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.56038\n",
      "4375/4375 - 31s - 7ms/step - loss: 2.1206 - mae: 0.9071 - val_loss: 0.7461 - val_mae: 0.6707 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.56038 to 0.47921, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.8468 - mae: 0.6810 - val_loss: 0.4792 - val_mae: 0.5280 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.47921\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.9592 - mae: 0.7141 - val_loss: 0.9986 - val_mae: 0.6378 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.47921\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.0157 - mae: 0.7269 - val_loss: 0.9980 - val_mae: 0.7822 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.47921 to 0.42125, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.7094 - mae: 0.6182 - val_loss: 0.4212 - val_mae: 0.5001 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.42125\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.6139 - mae: 0.6027 - val_loss: 0.5804 - val_mae: 0.5878 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.42125\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.5390 - mae: 0.5636 - val_loss: 0.5030 - val_mae: 0.5504 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.42125\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.0554 - mae: 0.7052 - val_loss: 2.0399 - val_mae: 1.1076 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.42125\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.1804 - mae: 0.7343 - val_loss: 0.4848 - val_mae: 0.5396 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.42125\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.5036 - mae: 0.5461 - val_loss: 0.9115 - val_mae: 0.7571 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.42125 to 0.37907, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.5934 - mae: 0.5736 - val_loss: 0.3791 - val_mae: 0.4761 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.37907\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3982 - mae: 0.4869 - val_loss: 5.2968 - val_mae: 1.0668 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.37907\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.4362 - mae: 0.4922 - val_loss: 0.4493 - val_mae: 0.5225 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.37907 to 0.32522, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.9107 - mae: 0.6077 - val_loss: 0.3252 - val_mae: 0.4452 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.32522\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3469 - mae: 0.4587 - val_loss: 0.4389 - val_mae: 0.5105 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.32522 to 0.30174, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3998 - mae: 0.4840 - val_loss: 0.3017 - val_mae: 0.4335 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.30174\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.6658 - mae: 0.5436 - val_loss: 0.3227 - val_mae: 0.4449 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.30174\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.4842 - mae: 0.5307 - val_loss: 0.3609 - val_mae: 0.4762 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.30174 to 0.24588, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3936 - mae: 0.4828 - val_loss: 0.2459 - val_mae: 0.3850 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.8426 - mae: 0.6052 - val_loss: 0.3164 - val_mae: 0.4415 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.24588\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.3446 - mae: 0.4543 - val_loss: 0.3356 - val_mae: 0.4521 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3989 - mae: 0.4716 - val_loss: 0.5224 - val_mae: 0.5728 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.0529 - mae: 0.6516 - val_loss: 0.4938 - val_mae: 0.5467 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.4738 - mae: 0.5268 - val_loss: 0.3630 - val_mae: 0.4745 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.8010 - mae: 0.5933 - val_loss: 0.7771 - val_mae: 0.6814 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.6333 - mae: 0.5637 - val_loss: 0.3086 - val_mae: 0.4344 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.7087 - mae: 0.5903 - val_loss: 0.4751 - val_mae: 0.5339 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.9181 - mae: 0.5790 - val_loss: 0.7959 - val_mae: 0.6898 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3750 - mae: 0.4740 - val_loss: 0.4680 - val_mae: 0.5482 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.6595 - mae: 0.5605 - val_loss: 0.2853 - val_mae: 0.4191 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.5917 - mae: 0.5325 - val_loss: 0.4103 - val_mae: 0.5078 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3522 - mae: 0.4605 - val_loss: 0.3723 - val_mae: 0.4790 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.5251 - mae: 0.5313 - val_loss: 0.2947 - val_mae: 0.4211 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3512 - mae: 0.4592 - val_loss: 0.5103 - val_mae: 0.5410 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.4034 - mae: 0.4825 - val_loss: 0.2882 - val_mae: 0.4198 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.6371 - mae: 0.5329 - val_loss: 0.4424 - val_mae: 0.5198 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3199 - mae: 0.4402 - val_loss: 0.2866 - val_mae: 0.4250 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.1664 - mae: 0.6342 - val_loss: 0.3848 - val_mae: 0.4865 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.24588\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3567 - mae: 0.4633 - val_loss: 0.5593 - val_mae: 0.5830 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.24588 to 0.09347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.1176 - mae: 0.2648 - val_loss: 0.0935 - val_mae: 0.2381 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.09347 to 0.08208, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0811 - mae: 0.2219 - val_loss: 0.0821 - val_mae: 0.2236 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.08208 to 0.06177, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0655 - mae: 0.2002 - val_loss: 0.0618 - val_mae: 0.1927 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.06177 to 0.05582, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0567 - mae: 0.1860 - val_loss: 0.0558 - val_mae: 0.1836 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.05582 to 0.04959, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0509 - mae: 0.1762 - val_loss: 0.0496 - val_mae: 0.1735 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.04959 to 0.04528, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0460 - mae: 0.1677 - val_loss: 0.0453 - val_mae: 0.1654 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.04528\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0423 - mae: 0.1609 - val_loss: 0.0488 - val_mae: 0.1742 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.04528 to 0.04242, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0395 - mae: 0.1557 - val_loss: 0.0424 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.04242 to 0.04186, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0369 - mae: 0.1505 - val_loss: 0.0419 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.04186 to 0.03608, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0353 - mae: 0.1472 - val_loss: 0.0361 - val_mae: 0.1476 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.03608\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0331 - mae: 0.1427 - val_loss: 0.0372 - val_mae: 0.1508 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.03608\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0319 - mae: 0.1399 - val_loss: 0.0388 - val_mae: 0.1550 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.03608 to 0.03037, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0310 - mae: 0.1381 - val_loss: 0.0304 - val_mae: 0.1351 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.03037 to 0.02975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0294 - mae: 0.1345 - val_loss: 0.0298 - val_mae: 0.1337 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.02975 to 0.02959, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0287 - mae: 0.1329 - val_loss: 0.0296 - val_mae: 0.1337 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.02959\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0278 - mae: 0.1309 - val_loss: 0.0373 - val_mae: 0.1529 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.02959\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0271 - mae: 0.1292 - val_loss: 0.0319 - val_mae: 0.1384 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.02959\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0263 - mae: 0.1272 - val_loss: 0.0346 - val_mae: 0.1452 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.02959 to 0.02913, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0261 - mae: 0.1268 - val_loss: 0.0291 - val_mae: 0.1329 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.02913 to 0.02712, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0251 - mae: 0.1245 - val_loss: 0.0271 - val_mae: 0.1276 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.02712\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0247 - mae: 0.1235 - val_loss: 0.0282 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.02712\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0238 - mae: 0.1211 - val_loss: 0.0276 - val_mae: 0.1285 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.02712 to 0.02698, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0238 - mae: 0.1211 - val_loss: 0.0270 - val_mae: 0.1271 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.02698\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0235 - mae: 0.1205 - val_loss: 0.0277 - val_mae: 0.1295 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.02698\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0230 - mae: 0.1190 - val_loss: 0.0368 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.02698 to 0.02468, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0229 - mae: 0.1189 - val_loss: 0.0247 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.02468\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0225 - mae: 0.1176 - val_loss: 0.0256 - val_mae: 0.1246 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.02468 to 0.02454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0223 - mae: 0.1174 - val_loss: 0.0245 - val_mae: 0.1224 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02454\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0226 - mae: 0.1179 - val_loss: 0.0248 - val_mae: 0.1226 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.02454\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0217 - mae: 0.1160 - val_loss: 0.0267 - val_mae: 0.1276 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02454\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0218 - mae: 0.1161 - val_loss: 0.0282 - val_mae: 0.1309 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02454\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0215 - mae: 0.1154 - val_loss: 0.0267 - val_mae: 0.1266 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.02454 to 0.02355, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0215 - mae: 0.1150 - val_loss: 0.0236 - val_mae: 0.1190 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0211 - mae: 0.1139 - val_loss: 0.0243 - val_mae: 0.1208 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0212 - mae: 0.1140 - val_loss: 0.0242 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0211 - mae: 0.1140 - val_loss: 0.0281 - val_mae: 0.1323 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0209 - mae: 0.1134 - val_loss: 0.0245 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0207 - mae: 0.1129 - val_loss: 0.0263 - val_mae: 0.1261 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0206 - mae: 0.1124 - val_loss: 0.0266 - val_mae: 0.1259 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0207 - mae: 0.1129 - val_loss: 0.0255 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0203 - mae: 0.1116 - val_loss: 0.0247 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0204 - mae: 0.1117 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1114 - val_loss: 0.0239 - val_mae: 0.1204 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1116 - val_loss: 0.0279 - val_mae: 0.1302 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0201 - mae: 0.1112 - val_loss: 0.0239 - val_mae: 0.1200 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0201 - mae: 0.1112 - val_loss: 0.0256 - val_mae: 0.1247 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0199 - mae: 0.1107 - val_loss: 0.0240 - val_mae: 0.1198 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1111 - val_loss: 0.0240 - val_mae: 0.1204 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0203 - mae: 0.1114 - val_loss: 0.0252 - val_mae: 0.1228 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0200 - mae: 0.1106 - val_loss: 0.0257 - val_mae: 0.1254 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0200 - mae: 0.1106 - val_loss: 0.0246 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02355\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0199 - mae: 0.1106 - val_loss: 0.0270 - val_mae: 0.1281 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.02355 to 0.02293, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0200 - mae: 0.1109 - val_loss: 0.0229 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02293\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0201 - mae: 0.1112 - val_loss: 0.0261 - val_mae: 0.1259 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02293\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0204 - mae: 0.1118 - val_loss: 0.0238 - val_mae: 0.1203 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.02293 to 0.02066, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0200 - mae: 0.1108 - val_loss: 0.0207 - val_mae: 0.1115 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0201 - mae: 0.1108 - val_loss: 0.0261 - val_mae: 0.1263 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0200 - mae: 0.1110 - val_loss: 0.0259 - val_mae: 0.1236 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1112 - val_loss: 0.0265 - val_mae: 0.1270 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1111 - val_loss: 0.0240 - val_mae: 0.1215 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0200 - mae: 0.1108 - val_loss: 0.0239 - val_mae: 0.1188 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0201 - mae: 0.1111 - val_loss: 0.0267 - val_mae: 0.1278 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0204 - mae: 0.1117 - val_loss: 0.0255 - val_mae: 0.1243 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1112 - val_loss: 0.0259 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0203 - mae: 0.1115 - val_loss: 0.0226 - val_mae: 0.1171 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1113 - val_loss: 0.0268 - val_mae: 0.1260 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0205 - mae: 0.1121 - val_loss: 0.0221 - val_mae: 0.1152 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0203 - mae: 0.1114 - val_loss: 0.0244 - val_mae: 0.1221 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0202 - mae: 0.1114 - val_loss: 0.0289 - val_mae: 0.1324 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0207 - mae: 0.1123 - val_loss: 0.0239 - val_mae: 0.1197 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0204 - mae: 0.1117 - val_loss: 0.0250 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02066\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0205 - mae: 0.1118 - val_loss: 0.0232 - val_mae: 0.1185 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0204 - mae: 0.1118 - val_loss: 0.0230 - val_mae: 0.1178 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02066\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0207 - mae: 0.1126 - val_loss: 0.0251 - val_mae: 0.1231 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02066\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0209 - mae: 0.1127 - val_loss: 0.0234 - val_mae: 0.1195 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02066\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0208 - mae: 0.1128 - val_loss: 0.0262 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.02066 to 0.01123, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0073 - mae: 0.0668 - val_loss: 0.0112 - val_mae: 0.0810 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.01123 to 0.01086, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0061 - mae: 0.0615 - val_loss: 0.0109 - val_mae: 0.0797 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.01086 to 0.01065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0057 - mae: 0.0598 - val_loss: 0.0106 - val_mae: 0.0789 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01065\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0055 - mae: 0.0585 - val_loss: 0.0107 - val_mae: 0.0791 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.01065 to 0.01041, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0104 - val_mae: 0.0779 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01041\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0106 - val_mae: 0.0786 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01041\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0051 - mae: 0.0564 - val_loss: 0.0105 - val_mae: 0.0779 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01041\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0050 - mae: 0.0560 - val_loss: 0.0106 - val_mae: 0.0782 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.01041 to 0.01028, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0049 - mae: 0.0556 - val_loss: 0.0103 - val_mae: 0.0775 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01028\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0048 - mae: 0.0551 - val_loss: 0.0103 - val_mae: 0.0774 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01028\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0048 - mae: 0.0547 - val_loss: 0.0104 - val_mae: 0.0779 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.01028 to 0.01028, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0103 - val_mae: 0.0772 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.01028 to 0.01020, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0047 - mae: 0.0541 - val_loss: 0.0102 - val_mae: 0.0770 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.01020 to 0.01005, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0046 - mae: 0.0538 - val_loss: 0.0101 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01005\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0046 - mae: 0.0534 - val_loss: 0.0103 - val_mae: 0.0773 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01005\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0101 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01005\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0045 - mae: 0.0529 - val_loss: 0.0101 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01005\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0044 - mae: 0.0528 - val_loss: 0.0102 - val_mae: 0.0772 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01005\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0102 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01005\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0044 - mae: 0.0523 - val_loss: 0.0102 - val_mae: 0.0770 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.01005 to 0.01003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0043 - mae: 0.0520 - val_loss: 0.0100 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01003\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0043 - mae: 0.0518 - val_loss: 0.0105 - val_mae: 0.0779 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01003\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0042 - mae: 0.0516 - val_loss: 0.0102 - val_mae: 0.0768 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01003\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0042 - mae: 0.0514 - val_loss: 0.0101 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01003\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0042 - mae: 0.0513 - val_loss: 0.0102 - val_mae: 0.0769 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01003\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0042 - mae: 0.0511 - val_loss: 0.0103 - val_mae: 0.0771 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01003\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0041 - mae: 0.0509 - val_loss: 0.0102 - val_mae: 0.0766 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01003\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0041 - mae: 0.0508 - val_loss: 0.0101 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01003\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0101 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01003\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0040 - mae: 0.0504 - val_loss: 0.0100 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01003\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0040 - mae: 0.0504 - val_loss: 0.0101 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.01003 to 0.00995, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0099 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.00995\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0040 - mae: 0.0500 - val_loss: 0.0101 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.00995 to 0.00994, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0040 - mae: 0.0499 - val_loss: 0.0099 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0040 - mae: 0.0499 - val_loss: 0.0101 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0039 - mae: 0.0496 - val_loss: 0.0101 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00994\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0102 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.00994\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0100 - val_mae: 0.0758 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0038 - mae: 0.0492 - val_loss: 0.0101 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0038 - mae: 0.0492 - val_loss: 0.0101 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0038 - mae: 0.0490 - val_loss: 0.0101 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.00994\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0038 - mae: 0.0488 - val_loss: 0.0101 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0100 - val_mae: 0.0756 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0038 - mae: 0.0487 - val_loss: 0.0101 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00994\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0038 - mae: 0.0486 - val_loss: 0.0100 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0037 - mae: 0.0484 - val_loss: 0.0100 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0037 - mae: 0.0484 - val_loss: 0.0101 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0037 - mae: 0.0483 - val_loss: 0.0100 - val_mae: 0.0758 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0037 - mae: 0.0481 - val_loss: 0.0102 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0103 - val_mae: 0.0769 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0101 - val_mae: 0.0760 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00994\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0036 - mae: 0.0478 - val_loss: 0.0100 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.00994 to 0.00951, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0095 - val_mae: 0.0734 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.00951 to 0.00949, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0095 - val_mae: 0.0734 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00949\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0029 - mae: 0.0423 - val_loss: 0.0095 - val_mae: 0.0734 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss improved from 0.00949 to 0.00948, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.00948 to 0.00947, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00947\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0095 - val_mae: 0.0734 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00947\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00947\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0420 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss improved from 0.00947 to 0.00944, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00944\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0420 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00944\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0420 - val_loss: 0.0095 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00944\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0095 - val_mae: 0.0734 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00944\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00944\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0095 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.00944 to 0.00944, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00944\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00944\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00944\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0095 - val_mae: 0.0734 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00944\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00944\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0094 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00944\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0095 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00944\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.00944 to 0.00940, saving model to models/best_model_full.keras\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.00940 to 0.00940, saving model to models/best_model_full.keras\n",
      "4375/4375 - 33s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00940\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00940\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.00940 to 0.00940, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.00940 to 0.00940, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 217: val_loss improved from 0.00940 to 0.00940, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00940\n",
      "4375/4375 - 33s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00940\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00940\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0094 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 267: early stopping\n",
      "Restoring model weights from the end of the best epoch: 217.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1150 m\n",
      "Median positioning error: 0.1018 m\n",
      "90th percentile error: 0.2052 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8520.355127,
   "end_time": "2025-08-21T07:18:30.356631",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-21T04:56:30.001504",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
