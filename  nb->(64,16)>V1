{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9eb649bc",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-14T19:48:47.993700Z",
     "iopub.status.busy": "2025-08-14T19:48:47.993448Z",
     "iopub.status.idle": "2025-08-14T19:48:49.465984Z",
     "shell.execute_reply": "2025-08-14T19:48:49.465171Z"
    },
    "papermill": {
     "duration": 1.477276,
     "end_time": "2025-08-14T19:48:49.467291",
     "exception": false,
     "start_time": "2025-08-14T19:48:47.990015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "32524b4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:48:49.473395Z",
     "iopub.status.busy": "2025-08-14T19:48:49.472609Z",
     "iopub.status.idle": "2025-08-14T19:49:03.145964Z",
     "shell.execute_reply": "2025-08-14T19:49:03.145339Z"
    },
    "papermill": {
     "duration": 13.677474,
     "end_time": "2025-08-14T19:49:03.147384",
     "exception": false,
     "start_time": "2025-08-14T19:48:49.469910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-14 19:48:50.864596: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755200931.045689      18 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755200931.097512      18 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "143e47df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:49:03.152864Z",
     "iopub.status.busy": "2025-08-14T19:49:03.152453Z",
     "iopub.status.idle": "2025-08-14T19:49:03.157208Z",
     "shell.execute_reply": "2025-08-14T19:49:03.156515Z"
    },
    "papermill": {
     "duration": 0.008503,
     "end_time": "2025-08-14T19:49:03.158327",
     "exception": false,
     "start_time": "2025-08-14T19:49:03.149824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e8309185",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:49:03.162613Z",
     "iopub.status.busy": "2025-08-14T19:49:03.162411Z",
     "iopub.status.idle": "2025-08-14T19:49:03.165626Z",
     "shell.execute_reply": "2025-08-14T19:49:03.165064Z"
    },
    "papermill": {
     "duration": 0.006412,
     "end_time": "2025-08-14T19:49:03.166581",
     "exception": false,
     "start_time": "2025-08-14T19:49:03.160169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "14a58eb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:49:03.171470Z",
     "iopub.status.busy": "2025-08-14T19:49:03.171249Z",
     "iopub.status.idle": "2025-08-14T22:17:18.685228Z",
     "shell.execute_reply": "2025-08-14T22:17:18.684504Z"
    },
    "papermill": {
     "duration": 8895.518136,
     "end_time": "2025-08-14T22:17:18.686497",
     "exception": false,
     "start_time": "2025-08-14T19:49:03.168361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755200963.387954      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755200972.692537      18 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">83,200</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">63,488</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m83,200\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m63,488\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">675,338</span> (2.58 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m675,338\u001b[0m (2.58 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">674,822</span> (2.57 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m674,822\u001b[0m (2.57 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755200983.228985      55 service.cc:148] XLA service 0x7ce5b4017320 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755200983.229786      55 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755200986.794521      55 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 24.05116, saving model to models/best_model_full.keras\n",
      "4375/4375 - 47s - 11ms/step - loss: 109.2865 - mae: 7.7540 - val_loss: 24.0512 - val_mae: 3.7755 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 24.05116 to 5.66602, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 13.8107 - mae: 2.8127 - val_loss: 5.6660 - val_mae: 1.8294 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.66602 to 2.94002, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 6.3308 - mae: 1.8844 - val_loss: 2.9400 - val_mae: 1.3106 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 2.94002 to 1.25891, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.9397 - mae: 1.4032 - val_loss: 1.2589 - val_mae: 0.8668 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.25891\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.2812 - mae: 1.0728 - val_loss: 2.0232 - val_mae: 1.0942 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.25891 to 0.66362, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.1668 - mae: 1.0249 - val_loss: 0.6636 - val_mae: 0.6352 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.66362\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.5026 - mae: 0.8134 - val_loss: 0.9432 - val_mae: 0.7591 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.66362 to 0.59044, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.2539 - mae: 1.0022 - val_loss: 0.5904 - val_mae: 0.6024 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.59044 to 0.44520, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6909 - mae: 0.6382 - val_loss: 0.4452 - val_mae: 0.5241 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.3586 - mae: 0.8767 - val_loss: 0.8359 - val_mae: 0.7088 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.0882 - mae: 0.6777 - val_loss: 6.9011 - val_mae: 1.8173 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.9401 - mae: 0.8674 - val_loss: 2.1691 - val_mae: 1.1340 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8477 - mae: 0.7095 - val_loss: 0.9633 - val_mae: 0.7656 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.7017 - mae: 0.8596 - val_loss: 1.3964 - val_mae: 0.9002 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 12.3783 - mae: 2.4252 - val_loss: 23.2696 - val_mae: 3.7401 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.2868 - mae: 1.3163 - val_loss: 1.5287 - val_mae: 0.9597 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.2404 - mae: 0.8538 - val_loss: 0.7633 - val_mae: 0.6739 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.8116 - mae: 1.1448 - val_loss: 1.6463 - val_mae: 0.9607 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.9298 - mae: 0.7217 - val_loss: 0.7746 - val_mae: 0.6789 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.0665 - mae: 1.0517 - val_loss: 0.8296 - val_mae: 0.6939 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6347 - mae: 0.6190 - val_loss: 0.4714 - val_mae: 0.5380 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.2470 - mae: 0.8778 - val_loss: 0.5439 - val_mae: 0.5825 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.6026 - mae: 0.7220 - val_loss: 2.6513 - val_mae: 1.1897 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.2054 - mae: 0.7764 - val_loss: 0.6554 - val_mae: 0.6268 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8648 - mae: 0.8783 - val_loss: 1.0139 - val_mae: 0.7814 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8347 - mae: 0.9399 - val_loss: 3.0893 - val_mae: 1.3751 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.1401 - mae: 1.0159 - val_loss: 5.0196 - val_mae: 1.7018 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.2662 - mae: 1.1559 - val_loss: 0.9296 - val_mae: 0.7498 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.0304 - mae: 1.0009 - val_loss: 3.0372 - val_mae: 0.8609 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7052 - mae: 0.6317 - val_loss: 2.9551 - val_mae: 0.6493 - learning_rate: 1.0000e-03\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4011 - mae: 0.4863 - val_loss: 1.8842 - val_mae: 0.5038 - learning_rate: 1.0000e-03\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.2431 - mae: 0.3847 - val_loss: 0.7444 - val_mae: 0.3906 - learning_rate: 1.0000e-03\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1662 - mae: 0.3191 - val_loss: 0.6921 - val_mae: 0.3359 - learning_rate: 1.0000e-03\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1280 - mae: 0.2806 - val_loss: 0.4554 - val_mae: 0.3052 - learning_rate: 1.0000e-03\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.44520\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1042 - mae: 0.2532 - val_loss: 0.5133 - val_mae: 0.2828 - learning_rate: 1.0000e-03\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.44520 to 0.22540, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0892 - mae: 0.2346 - val_loss: 0.2254 - val_mae: 0.2511 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss improved from 0.22540 to 0.09563, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0787 - mae: 0.2205 - val_loss: 0.0956 - val_mae: 0.2344 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.09563\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0706 - mae: 0.2088 - val_loss: 0.1779 - val_mae: 0.2243 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.09563 to 0.08891, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0641 - mae: 0.1994 - val_loss: 0.0889 - val_mae: 0.2218 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.08891 to 0.07737, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0596 - mae: 0.1919 - val_loss: 0.0774 - val_mae: 0.1983 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.07737 to 0.07174, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0552 - mae: 0.1849 - val_loss: 0.0717 - val_mae: 0.1908 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0512 - mae: 0.1779 - val_loss: 0.1990 - val_mae: 0.1954 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0492 - mae: 0.1747 - val_loss: 0.7606 - val_mae: 0.2084 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0461 - mae: 0.1691 - val_loss: 0.4013 - val_mae: 0.1888 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0436 - mae: 0.1645 - val_loss: 0.5532 - val_mae: 0.1938 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0422 - mae: 0.1620 - val_loss: 0.1622 - val_mae: 0.2002 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0407 - mae: 0.1591 - val_loss: 0.1295 - val_mae: 0.1730 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0406 - mae: 0.1586 - val_loss: 0.1307 - val_mae: 0.1771 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0401 - mae: 0.1579 - val_loss: 0.2944 - val_mae: 0.1781 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0393 - mae: 0.1562 - val_loss: 0.1422 - val_mae: 0.1790 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0368 - mae: 0.1513 - val_loss: 0.1917 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.07174\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0355 - mae: 0.1484 - val_loss: 0.1225 - val_mae: 0.1627 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.07174 to 0.05917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0341 - mae: 0.1457 - val_loss: 0.0592 - val_mae: 0.1740 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.05917 to 0.05065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0336 - mae: 0.1446 - val_loss: 0.0506 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.05065\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0330 - mae: 0.1431 - val_loss: 0.0517 - val_mae: 0.1685 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.05065 to 0.03720, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0320 - mae: 0.1410 - val_loss: 0.0372 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.03720\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0314 - mae: 0.1399 - val_loss: 0.0477 - val_mae: 0.1618 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.03720\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0308 - mae: 0.1385 - val_loss: 0.0481 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.03720\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0307 - mae: 0.1382 - val_loss: 0.0410 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.03720 to 0.03681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0298 - mae: 0.1360 - val_loss: 0.0368 - val_mae: 0.1485 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.03681 to 0.03581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0288 - mae: 0.1337 - val_loss: 0.0358 - val_mae: 0.1447 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.03581\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0281 - mae: 0.1323 - val_loss: 0.0508 - val_mae: 0.1713 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.03581\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0285 - mae: 0.1328 - val_loss: 0.0402 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.03581\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0271 - mae: 0.1299 - val_loss: 0.0372 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.03581\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0276 - mae: 0.1309 - val_loss: 0.0476 - val_mae: 0.1494 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.03581\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0268 - mae: 0.1290 - val_loss: 0.0487 - val_mae: 0.1504 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.03581 to 0.03509, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0265 - mae: 0.1283 - val_loss: 0.0351 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.03509\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0259 - mae: 0.1268 - val_loss: 0.0487 - val_mae: 0.1476 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.03509\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0257 - mae: 0.1266 - val_loss: 0.0515 - val_mae: 0.1462 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.03509\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0255 - mae: 0.1255 - val_loss: 0.0373 - val_mae: 0.1444 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.03509\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0377 - val_mae: 0.1447 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.03509 to 0.03218, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1244 - val_loss: 0.0322 - val_mae: 0.1401 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.03218\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1245 - val_loss: 0.0328 - val_mae: 0.1411 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.03218 to 0.03100, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0247 - mae: 0.1236 - val_loss: 0.0310 - val_mae: 0.1383 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.03100 to 0.03062, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1233 - val_loss: 0.0306 - val_mae: 0.1367 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03062\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0242 - mae: 0.1222 - val_loss: 0.0307 - val_mae: 0.1296 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03062\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1227 - val_loss: 0.0312 - val_mae: 0.1360 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03062\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0243 - mae: 0.1224 - val_loss: 0.0423 - val_mae: 0.1433 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.03062 to 0.03022, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0238 - mae: 0.1216 - val_loss: 0.0302 - val_mae: 0.1358 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0237 - mae: 0.1212 - val_loss: 0.0396 - val_mae: 0.1403 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0235 - mae: 0.1206 - val_loss: 0.0360 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0233 - mae: 0.1200 - val_loss: 0.3308 - val_mae: 0.1700 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0238 - mae: 0.1208 - val_loss: 0.0352 - val_mae: 0.1388 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0229 - mae: 0.1190 - val_loss: 0.0348 - val_mae: 0.1403 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0231 - mae: 0.1193 - val_loss: 0.0496 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0229 - mae: 0.1191 - val_loss: 0.0370 - val_mae: 0.1374 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.03022\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0229 - mae: 0.1190 - val_loss: 0.0353 - val_mae: 0.1400 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.03022 to 0.02793, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0227 - mae: 0.1184 - val_loss: 0.0279 - val_mae: 0.1292 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0226 - mae: 0.1180 - val_loss: 0.0284 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0226 - mae: 0.1180 - val_loss: 0.0336 - val_mae: 0.1353 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0226 - mae: 0.1180 - val_loss: 0.0350 - val_mae: 0.1324 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0225 - mae: 0.1175 - val_loss: 0.0356 - val_mae: 0.1385 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02793\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1178 - val_loss: 0.0307 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0223 - mae: 0.1174 - val_loss: 0.0311 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1163 - val_loss: 0.1004 - val_mae: 0.1531 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0237 - mae: 0.1209 - val_loss: 0.0675 - val_mae: 0.1399 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0231 - mae: 0.1193 - val_loss: 0.0530 - val_mae: 0.1423 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1170 - val_loss: 0.1905 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1169 - val_loss: 0.0789 - val_mae: 0.1373 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0225 - mae: 0.1175 - val_loss: 0.1077 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1165 - val_loss: 0.0642 - val_mae: 0.1392 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1168 - val_loss: 0.0299 - val_mae: 0.1358 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02793\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0219 - mae: 0.1160 - val_loss: 0.0440 - val_mae: 0.1330 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1147 - val_loss: 0.0555 - val_mae: 0.1418 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02793\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0213 - mae: 0.1143 - val_loss: 0.0378 - val_mae: 0.1363 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1167 - val_loss: 0.0475 - val_mae: 0.1350 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02793\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1152 - val_loss: 0.0334 - val_mae: 0.1313 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.02793 to 0.02753, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0234 - mae: 0.1176 - val_loss: 0.0275 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02753\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0207 - mae: 0.1130 - val_loss: 0.0304 - val_mae: 0.1356 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.02753 to 0.02745, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1151 - val_loss: 0.0275 - val_mae: 0.1286 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02745\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1153 - val_loss: 0.0333 - val_mae: 0.1415 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02745\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1158 - val_loss: 0.0321 - val_mae: 0.1381 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02745\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1158 - val_loss: 0.0292 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02745\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0221 - mae: 0.1165 - val_loss: 0.0297 - val_mae: 0.1340 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02745\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1153 - val_loss: 0.0280 - val_mae: 0.1317 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.02745 to 0.02732, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1156 - val_loss: 0.0273 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02732\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1166 - val_loss: 0.0336 - val_mae: 0.1403 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02732\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0221 - mae: 0.1164 - val_loss: 0.0282 - val_mae: 0.1314 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02732\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0227 - mae: 0.1177 - val_loss: 0.0283 - val_mae: 0.1319 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02732\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0223 - mae: 0.1172 - val_loss: 0.0286 - val_mae: 0.1315 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02732\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0224 - mae: 0.1172 - val_loss: 0.0303 - val_mae: 0.1343 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02732\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0225 - mae: 0.1173 - val_loss: 0.0301 - val_mae: 0.1365 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.02732 to 0.02722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0223 - mae: 0.1170 - val_loss: 0.0272 - val_mae: 0.1289 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1157 - val_loss: 0.0279 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1152 - val_loss: 0.0276 - val_mae: 0.1296 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1160 - val_loss: 0.0298 - val_mae: 0.1345 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1160 - val_loss: 0.0325 - val_mae: 0.1412 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1147 - val_loss: 0.0298 - val_mae: 0.1353 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1153 - val_loss: 0.0339 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1152 - val_loss: 0.0354 - val_mae: 0.1344 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0227 - mae: 0.1166 - val_loss: 0.0316 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1148 - val_loss: 0.0304 - val_mae: 0.1363 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1147 - val_loss: 0.0355 - val_mae: 0.1475 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1158 - val_loss: 0.0274 - val_mae: 0.1286 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1157 - val_loss: 0.0305 - val_mae: 0.1351 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1154 - val_loss: 0.0326 - val_mae: 0.1400 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02722\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1157 - val_loss: 0.0281 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.02722 to 0.02526, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1146 - val_loss: 0.0253 - val_mae: 0.1240 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1154 - val_loss: 0.0262 - val_mae: 0.1264 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1158 - val_loss: 0.0320 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1155 - val_loss: 0.0307 - val_mae: 0.1372 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1164 - val_loss: 0.0291 - val_mae: 0.1327 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1148 - val_loss: 0.0352 - val_mae: 0.1360 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0221 - mae: 0.1159 - val_loss: 0.0287 - val_mae: 0.1328 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1154 - val_loss: 0.0307 - val_mae: 0.1369 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0215 - mae: 0.1144 - val_loss: 0.0312 - val_mae: 0.1382 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1150 - val_loss: 0.0304 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1158 - val_loss: 0.0263 - val_mae: 0.1268 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1153 - val_loss: 0.0326 - val_mae: 0.1425 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1152 - val_loss: 0.0296 - val_mae: 0.1324 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1149 - val_loss: 0.0285 - val_mae: 0.1315 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1153 - val_loss: 0.0305 - val_mae: 0.1359 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0215 - mae: 0.1143 - val_loss: 0.0370 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1151 - val_loss: 0.0291 - val_mae: 0.1335 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1155 - val_loss: 0.0324 - val_mae: 0.1388 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1160 - val_loss: 0.0291 - val_mae: 0.1333 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02526\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0214 - mae: 0.1141 - val_loss: 0.0301 - val_mae: 0.1354 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.02526 to 0.02377, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1147 - val_loss: 0.0238 - val_mae: 0.1198 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0210 - mae: 0.1131 - val_loss: 0.0303 - val_mae: 0.1362 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0221 - mae: 0.1156 - val_loss: 0.0311 - val_mae: 0.1374 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1143 - val_loss: 0.0274 - val_mae: 0.1289 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1147 - val_loss: 0.0258 - val_mae: 0.1264 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0215 - mae: 0.1142 - val_loss: 0.0258 - val_mae: 0.1225 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0213 - mae: 0.1139 - val_loss: 0.0275 - val_mae: 0.1300 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0219 - mae: 0.1152 - val_loss: 0.0284 - val_mae: 0.1311 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1145 - val_loss: 0.0299 - val_mae: 0.1346 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1147 - val_loss: 0.0265 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0212 - mae: 0.1132 - val_loss: 0.0324 - val_mae: 0.1377 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1145 - val_loss: 0.0251 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0214 - mae: 0.1140 - val_loss: 0.0282 - val_mae: 0.1309 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0216 - mae: 0.1142 - val_loss: 0.0288 - val_mae: 0.1315 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0222 - mae: 0.1154 - val_loss: 0.0293 - val_mae: 0.1337 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1152 - val_loss: 0.0324 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0218 - mae: 0.1149 - val_loss: 0.0264 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1146 - val_loss: 0.0318 - val_mae: 0.1391 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0220 - mae: 0.1152 - val_loss: 0.0358 - val_mae: 0.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0214 - mae: 0.1141 - val_loss: 0.0277 - val_mae: 0.1301 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02377\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0217 - mae: 0.1148 - val_loss: 0.0279 - val_mae: 0.1314 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.02377 to 0.01227, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0061 - mae: 0.0614 - val_loss: 0.0123 - val_mae: 0.0856 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.01227 to 0.01207, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0121 - val_mae: 0.0852 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.01207 to 0.01191, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0522 - val_loss: 0.0119 - val_mae: 0.0847 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01191\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0506 - val_loss: 0.0121 - val_mae: 0.0852 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss improved from 0.01191 to 0.01190, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0119 - val_mae: 0.0844 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.01190 to 0.01169, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0485 - val_loss: 0.0117 - val_mae: 0.0837 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.01169 to 0.01150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0036 - mae: 0.0476 - val_loss: 0.0115 - val_mae: 0.0828 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.01150 to 0.01150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0115 - val_mae: 0.0826 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss improved from 0.01150 to 0.01139, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0464 - val_loss: 0.0114 - val_mae: 0.0825 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0458 - val_loss: 0.0115 - val_mae: 0.0825 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0032 - mae: 0.0452 - val_loss: 0.0115 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0115 - val_mae: 0.0825 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0443 - val_loss: 0.0115 - val_mae: 0.0825 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0116 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0435 - val_loss: 0.0116 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0114 - val_mae: 0.0823 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0428 - val_loss: 0.0116 - val_mae: 0.0831 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0117 - val_mae: 0.0830 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0115 - val_mae: 0.0825 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0117 - val_mae: 0.0830 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0116 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0117 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0117 - val_mae: 0.0827 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0408 - val_loss: 0.0118 - val_mae: 0.0836 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0405 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0116 - val_mae: 0.0826 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0117 - val_mae: 0.0829 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01139\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0118 - val_mae: 0.0831 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.01139 to 0.01132, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0019 - mae: 0.0342 - val_loss: 0.0113 - val_mae: 0.0811 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss improved from 0.01132 to 0.01124, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0337 - val_loss: 0.0112 - val_mae: 0.0811 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0336 - val_loss: 0.0113 - val_mae: 0.0811 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0334 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0333 - val_loss: 0.0114 - val_mae: 0.0811 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0332 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0332 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0018 - mae: 0.0331 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0329 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0329 - val_loss: 0.0114 - val_mae: 0.0814 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01124\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0113 - val_mae: 0.0811 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0114 - val_mae: 0.0814 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0114 - val_mae: 0.0814 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0327 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0327 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0113 - val_mae: 0.0813 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0113 - val_mae: 0.0811 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0113 - val_mae: 0.0811 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0113 - val_mae: 0.0811 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0113 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0813 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01124\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0114 - val_mae: 0.0812 - learning_rate: 1.0000e-07\n",
      "Epoch 259: early stopping\n",
      "Restoring model weights from the end of the best epoch: 209.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1280 m\n",
      "Median positioning error: 0.1141 m\n",
      "90th percentile error: 0.2279 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8918.29273,
   "end_time": "2025-08-14T22:17:22.286627",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-14T19:48:43.993897",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
