{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c3585e86",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-17T05:30:04.505508Z",
     "iopub.status.busy": "2025-08-17T05:30:04.505239Z",
     "iopub.status.idle": "2025-08-17T05:30:06.165369Z",
     "shell.execute_reply": "2025-08-17T05:30:06.164484Z"
    },
    "papermill": {
     "duration": 1.66506,
     "end_time": "2025-08-17T05:30:06.166751",
     "exception": false,
     "start_time": "2025-08-17T05:30:04.501691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5fc3b8b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:30:06.173537Z",
     "iopub.status.busy": "2025-08-17T05:30:06.172576Z",
     "iopub.status.idle": "2025-08-17T05:30:20.596822Z",
     "shell.execute_reply": "2025-08-17T05:30:20.596127Z"
    },
    "papermill": {
     "duration": 14.42881,
     "end_time": "2025-08-17T05:30:20.598324",
     "exception": false,
     "start_time": "2025-08-17T05:30:06.169514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-17 05:30:07.546569: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755408607.712219      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755408607.766412      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8757e85e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:30:20.607389Z",
     "iopub.status.busy": "2025-08-17T05:30:20.606529Z",
     "iopub.status.idle": "2025-08-17T05:30:20.611852Z",
     "shell.execute_reply": "2025-08-17T05:30:20.610936Z"
    },
    "papermill": {
     "duration": 0.009873,
     "end_time": "2025-08-17T05:30:20.613107",
     "exception": false,
     "start_time": "2025-08-17T05:30:20.603234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 13  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 1024  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "60f24129",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:30:20.618497Z",
     "iopub.status.busy": "2025-08-17T05:30:20.618152Z",
     "iopub.status.idle": "2025-08-17T05:30:20.621708Z",
     "shell.execute_reply": "2025-08-17T05:30:20.621158Z"
    },
    "papermill": {
     "duration": 0.007467,
     "end_time": "2025-08-17T05:30:20.622736",
     "exception": false,
     "start_time": "2025-08-17T05:30:20.615269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b765ebc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:30:20.628604Z",
     "iopub.status.busy": "2025-08-17T05:30:20.628066Z",
     "iopub.status.idle": "2025-08-17T09:58:58.220330Z",
     "shell.execute_reply": "2025-08-17T09:58:58.219475Z"
    },
    "papermill": {
     "duration": 16117.596861,
     "end_time": "2025-08-17T09:58:58.221637",
     "exception": false,
     "start_time": "2025-08-17T05:30:20.624776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755408647.728232      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755408657.060926      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">120,064</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,464</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">789,760</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m120,064\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,464\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m789,760\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">973,834</span> (3.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m973,834\u001b[0m (3.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">973,318</span> (3.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m973,318\u001b[0m (3.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755408668.124736      56 service.cc:148] XLA service 0x7aaccc007960 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755408668.125545      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755408672.109273      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 29.19751, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 102.9992 - mae: 7.6605 - val_loss: 29.1975 - val_mae: 4.1766 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss did not improve from 29.19751\n",
      "4375/4375 - 42s - 10ms/step - loss: 18.2566 - mae: 3.2734 - val_loss: 30.4058 - val_mae: 3.7824 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 29.19751 to 7.02824, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 10.8426 - mae: 2.4729 - val_loss: 7.0282 - val_mae: 2.0663 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.02824 to 3.38083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 6.0223 - mae: 1.7918 - val_loss: 3.3808 - val_mae: 1.4104 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 3.38083\n",
      "4375/4375 - 42s - 10ms/step - loss: 5.4065 - mae: 1.6481 - val_loss: 4.3366 - val_mae: 1.6000 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 3.38083 to 3.28343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 4.4810 - mae: 1.5425 - val_loss: 3.2834 - val_mae: 1.4045 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 3.28343 to 0.90244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.8156 - mae: 1.0293 - val_loss: 0.9024 - val_mae: 0.7378 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.90244 to 0.70758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.1126 - mae: 0.8007 - val_loss: 0.7076 - val_mae: 0.6636 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.70758 to 0.56637, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.5325 - mae: 0.7869 - val_loss: 0.5664 - val_mae: 0.5895 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.56637 to 0.55116, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9086 - mae: 0.6911 - val_loss: 0.5512 - val_mae: 0.5813 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.55116\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.1496 - mae: 0.7211 - val_loss: 0.5849 - val_mae: 0.5991 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.55116\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.9344 - mae: 0.7421 - val_loss: 1.9207 - val_mae: 1.0471 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.55116\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.7237 - mae: 0.6486 - val_loss: 0.6867 - val_mae: 0.6436 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.55116 to 0.48150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.2563 - mae: 0.7456 - val_loss: 0.4815 - val_mae: 0.5389 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.48150\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9989 - mae: 0.6584 - val_loss: 0.6192 - val_mae: 0.6048 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 0.48150 to 0.44887, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4954 - mae: 0.5365 - val_loss: 0.4489 - val_mae: 0.5240 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.44887 to 0.31737, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 9ms/step - loss: 1.1958 - mae: 0.6559 - val_loss: 0.3174 - val_mae: 0.4434 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.31737\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.4566 - mae: 0.6924 - val_loss: 0.5689 - val_mae: 0.5783 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.31737\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5800 - mae: 0.5673 - val_loss: 0.9374 - val_mae: 0.7463 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.31737 to 0.31508, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.8976 - mae: 0.6373 - val_loss: 0.3151 - val_mae: 0.4386 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.31508 to 0.29121, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4664 - mae: 0.5226 - val_loss: 0.2912 - val_mae: 0.4229 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.1520 - mae: 0.8430 - val_loss: 0.6355 - val_mae: 0.6266 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.1516 - mae: 0.6954 - val_loss: 0.7207 - val_mae: 0.6521 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.0972 - mae: 0.6476 - val_loss: 1.0614 - val_mae: 0.7888 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5766 - mae: 0.5768 - val_loss: 0.3296 - val_mae: 0.4469 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5416 - mae: 0.5382 - val_loss: 0.4564 - val_mae: 0.5427 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.4550 - mae: 1.0034 - val_loss: 0.6324 - val_mae: 0.6159 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.5743 - mae: 1.0338 - val_loss: 0.8342 - val_mae: 0.7019 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.4966 - mae: 0.8217 - val_loss: 1.5682 - val_mae: 0.9496 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.4769 - mae: 1.0250 - val_loss: 0.9106 - val_mae: 0.7270 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.7169 - mae: 0.9587 - val_loss: 6.3424 - val_mae: 1.9183 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.0643 - mae: 1.0143 - val_loss: 1.6020 - val_mae: 0.9789 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.2906 - mae: 0.8075 - val_loss: 1.3047 - val_mae: 0.8686 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.9730 - mae: 0.9810 - val_loss: 5.4707 - val_mae: 1.7338 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.0185 - mae: 0.7379 - val_loss: 0.8772 - val_mae: 0.7130 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.2977 - mae: 0.8690 - val_loss: 0.9089 - val_mae: 0.7402 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.29121\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5525 - mae: 0.5774 - val_loss: 0.3530 - val_mae: 0.4635 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 9ms/step - loss: 1.3366 - mae: 0.6877 - val_loss: 0.4129 - val_mae: 0.5005 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3397 - mae: 0.4547 - val_loss: 0.3576 - val_mae: 0.4703 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.7092 - mae: 0.8318 - val_loss: 1.0653 - val_mae: 0.7925 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.29121\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.5299 - mae: 0.5586 - val_loss: 0.7187 - val_mae: 0.5208 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1349 - mae: 0.2872 - val_loss: 0.3290 - val_mae: 0.2850 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.29121\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0981 - mae: 0.2454 - val_loss: 0.3806 - val_mae: 0.2539 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.29121 to 0.23893, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0767 - mae: 0.2177 - val_loss: 0.2389 - val_mae: 0.2214 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.23893 to 0.12169, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0631 - mae: 0.1977 - val_loss: 0.1217 - val_mae: 0.2082 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.12169 to 0.06660, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0557 - mae: 0.1857 - val_loss: 0.0666 - val_mae: 0.1946 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.06660 to 0.06222, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0495 - mae: 0.1751 - val_loss: 0.0622 - val_mae: 0.1826 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.06222\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0456 - mae: 0.1681 - val_loss: 0.1202 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.06222\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0421 - mae: 0.1618 - val_loss: 0.1279 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.06222\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0395 - mae: 0.1565 - val_loss: 0.1452 - val_mae: 0.1750 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.06222\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0372 - mae: 0.1516 - val_loss: 0.2568 - val_mae: 0.1822 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.06222\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0351 - mae: 0.1477 - val_loss: 0.3717 - val_mae: 0.1692 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.06222\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0342 - mae: 0.1456 - val_loss: 0.3635 - val_mae: 0.1722 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.06222\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0326 - mae: 0.1421 - val_loss: 0.6437 - val_mae: 0.1733 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.06222\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0309 - mae: 0.1386 - val_loss: 0.5869 - val_mae: 0.1749 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.06222\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0298 - mae: 0.1361 - val_loss: 0.6019 - val_mae: 0.1775 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.06222\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0290 - mae: 0.1343 - val_loss: 0.7797 - val_mae: 0.1660 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.06222\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0282 - mae: 0.1325 - val_loss: 0.3310 - val_mae: 0.1521 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.06222\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0271 - mae: 0.1300 - val_loss: 0.1584 - val_mae: 0.1445 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.06222\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0263 - mae: 0.1278 - val_loss: 0.4726 - val_mae: 0.1789 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.06222\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0259 - mae: 0.1269 - val_loss: 0.1107 - val_mae: 0.1479 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.06222 to 0.02966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0251 - mae: 0.1252 - val_loss: 0.0297 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.02966\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0248 - mae: 0.1243 - val_loss: 0.0337 - val_mae: 0.1432 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.02966 to 0.02788, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0240 - mae: 0.1221 - val_loss: 0.0279 - val_mae: 0.1306 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.02788\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0233 - mae: 0.1203 - val_loss: 0.0339 - val_mae: 0.1434 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.02788\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0231 - mae: 0.1199 - val_loss: 0.0282 - val_mae: 0.1302 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.02788 to 0.02748, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0228 - mae: 0.1190 - val_loss: 0.0275 - val_mae: 0.1291 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.02748\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0222 - mae: 0.1174 - val_loss: 0.0335 - val_mae: 0.1448 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.02748 to 0.02623, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0221 - mae: 0.1171 - val_loss: 0.0262 - val_mae: 0.1270 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.02623\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0217 - mae: 0.1161 - val_loss: 0.0279 - val_mae: 0.1288 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.02623\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0211 - mae: 0.1146 - val_loss: 0.0972 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.02623\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0214 - mae: 0.1152 - val_loss: 0.0307 - val_mae: 0.1284 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.02623\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0213 - mae: 0.1149 - val_loss: 0.0309 - val_mae: 0.1330 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.02623\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0210 - mae: 0.1142 - val_loss: 0.0267 - val_mae: 0.1283 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.02623 to 0.02590, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0210 - mae: 0.1140 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.02590 to 0.02540, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0205 - mae: 0.1126 - val_loss: 0.0254 - val_mae: 0.1238 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02540\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0203 - mae: 0.1124 - val_loss: 0.0376 - val_mae: 0.1363 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02540\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0199 - mae: 0.1112 - val_loss: 0.0277 - val_mae: 0.1262 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02540\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0199 - mae: 0.1107 - val_loss: 0.0318 - val_mae: 0.1215 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02540\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0196 - mae: 0.1102 - val_loss: 0.0293 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.02540 to 0.02322, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0196 - mae: 0.1103 - val_loss: 0.0232 - val_mae: 0.1188 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02322\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0191 - mae: 0.1091 - val_loss: 0.0286 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02322\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0189 - mae: 0.1084 - val_loss: 0.0274 - val_mae: 0.1278 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02322\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0195 - mae: 0.1096 - val_loss: 0.0294 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02322\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0188 - mae: 0.1080 - val_loss: 0.0260 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02322\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0190 - mae: 0.1082 - val_loss: 0.0251 - val_mae: 0.1246 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02322\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0186 - mae: 0.1073 - val_loss: 0.0273 - val_mae: 0.1286 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.02322 to 0.02318, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0190 - mae: 0.1084 - val_loss: 0.0232 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.02318 to 0.02310, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0186 - mae: 0.1074 - val_loss: 0.0231 - val_mae: 0.1178 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02310\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0187 - mae: 0.1073 - val_loss: 0.0318 - val_mae: 0.1409 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02310\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0190 - mae: 0.1078 - val_loss: 0.0248 - val_mae: 0.1225 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02310\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0182 - mae: 0.1059 - val_loss: 0.0239 - val_mae: 0.1210 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.02310 to 0.02249, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0186 - mae: 0.1072 - val_loss: 0.0225 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02249\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0184 - mae: 0.1066 - val_loss: 0.0255 - val_mae: 0.1201 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02249\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0184 - mae: 0.1066 - val_loss: 0.0261 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02249\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0181 - mae: 0.1057 - val_loss: 0.0249 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02249\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0184 - mae: 0.1066 - val_loss: 0.0252 - val_mae: 0.1219 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.02249 to 0.02238, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0185 - mae: 0.1067 - val_loss: 0.0224 - val_mae: 0.1162 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02238\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0181 - mae: 0.1055 - val_loss: 0.0229 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02238\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0183 - mae: 0.1064 - val_loss: 0.0278 - val_mae: 0.1288 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0181 - mae: 0.1057 - val_loss: 0.0253 - val_mae: 0.1240 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0184 - mae: 0.1063 - val_loss: 0.0277 - val_mae: 0.1277 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02238\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0185 - mae: 0.1066 - val_loss: 0.0253 - val_mae: 0.1239 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02238\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0183 - mae: 0.1062 - val_loss: 0.0282 - val_mae: 0.1295 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02238\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0179 - mae: 0.1051 - val_loss: 0.0270 - val_mae: 0.1271 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0185 - mae: 0.1065 - val_loss: 0.0284 - val_mae: 0.1327 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0181 - mae: 0.1054 - val_loss: 0.0234 - val_mae: 0.1192 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0183 - mae: 0.1061 - val_loss: 0.0266 - val_mae: 0.1255 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0183 - mae: 0.1060 - val_loss: 0.0232 - val_mae: 0.1176 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0184 - mae: 0.1063 - val_loss: 0.0260 - val_mae: 0.1259 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02238\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0183 - mae: 0.1056 - val_loss: 0.0282 - val_mae: 0.1306 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0183 - mae: 0.1061 - val_loss: 0.0231 - val_mae: 0.1174 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02238\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0187 - mae: 0.1070 - val_loss: 0.0453 - val_mae: 0.1328 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02238\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0186 - mae: 0.1068 - val_loss: 0.0253 - val_mae: 0.1169 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02238\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0183 - mae: 0.1059 - val_loss: 0.0284 - val_mae: 0.1289 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02238\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0191 - mae: 0.1081 - val_loss: 0.0270 - val_mae: 0.1284 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02238\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0183 - mae: 0.1060 - val_loss: 0.0229 - val_mae: 0.1181 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss improved from 0.02238 to 0.02221, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0186 - mae: 0.1069 - val_loss: 0.0222 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02221\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0185 - mae: 0.1064 - val_loss: 0.0235 - val_mae: 0.1210 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02221\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0188 - mae: 0.1071 - val_loss: 0.0269 - val_mae: 0.1254 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02221\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0185 - mae: 0.1064 - val_loss: 0.0316 - val_mae: 0.1352 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02221\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0189 - mae: 0.1072 - val_loss: 0.0272 - val_mae: 0.1276 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.02221\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0184 - mae: 0.1062 - val_loss: 0.0247 - val_mae: 0.1236 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02221\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0185 - mae: 0.1066 - val_loss: 0.0272 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.02221 to 0.02132, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0187 - mae: 0.1069 - val_loss: 0.0213 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.02132 to 0.02067, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0185 - mae: 0.1065 - val_loss: 0.0207 - val_mae: 0.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02067\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0184 - mae: 0.1060 - val_loss: 0.0309 - val_mae: 0.1395 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02067\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0185 - mae: 0.1064 - val_loss: 0.0225 - val_mae: 0.1172 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.02067\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0186 - mae: 0.1068 - val_loss: 0.0324 - val_mae: 0.1292 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.02067 to 0.02065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0184 - mae: 0.1057 - val_loss: 0.0206 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0186 - mae: 0.1063 - val_loss: 0.0219 - val_mae: 0.1153 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0184 - mae: 0.1058 - val_loss: 0.0242 - val_mae: 0.1218 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0187 - mae: 0.1068 - val_loss: 0.0245 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0188 - mae: 0.1072 - val_loss: 0.0249 - val_mae: 0.1223 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0186 - mae: 0.1064 - val_loss: 0.0271 - val_mae: 0.1299 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0188 - mae: 0.1067 - val_loss: 0.0281 - val_mae: 0.1326 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0184 - mae: 0.1056 - val_loss: 0.0254 - val_mae: 0.1229 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0184 - mae: 0.1060 - val_loss: 0.0228 - val_mae: 0.1178 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0185 - mae: 0.1062 - val_loss: 0.0294 - val_mae: 0.1352 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02065\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0186 - mae: 0.1066 - val_loss: 0.0262 - val_mae: 0.1263 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0184 - mae: 0.1064 - val_loss: 0.0248 - val_mae: 0.1245 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02065\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0185 - mae: 0.1060 - val_loss: 0.0245 - val_mae: 0.1226 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0187 - mae: 0.1063 - val_loss: 0.0282 - val_mae: 0.1312 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0188 - mae: 0.1070 - val_loss: 0.0251 - val_mae: 0.1231 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0186 - mae: 0.1063 - val_loss: 0.0256 - val_mae: 0.1243 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02065\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0184 - mae: 0.1058 - val_loss: 0.0303 - val_mae: 0.1373 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.02065 to 0.01053, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0056 - mae: 0.0586 - val_loss: 0.0105 - val_mae: 0.0796 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.01053 to 0.01004, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0044 - mae: 0.0523 - val_loss: 0.0100 - val_mae: 0.0774 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.01004 to 0.00981, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0040 - mae: 0.0503 - val_loss: 0.0098 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.00981\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0102 - val_mae: 0.0784 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.00981\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0036 - mae: 0.0479 - val_loss: 0.0100 - val_mae: 0.0773 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.00981 to 0.00975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0035 - mae: 0.0472 - val_loss: 0.0098 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.00975\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0034 - mae: 0.0465 - val_loss: 0.0098 - val_mae: 0.0766 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.00975 to 0.00967, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0033 - mae: 0.0458 - val_loss: 0.0097 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.00967 to 0.00967, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0097 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.00967\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0097 - val_mae: 0.0760 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.00967\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0097 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.00967\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0097 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.00967\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0098 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.00967 to 0.00966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0097 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.00966\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0029 - mae: 0.0429 - val_loss: 0.0098 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.00966\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0029 - mae: 0.0426 - val_loss: 0.0098 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.00966\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0028 - mae: 0.0423 - val_loss: 0.0099 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss improved from 0.00966 to 0.00959, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0096 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.00959 to 0.00952, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0095 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0096 - val_mae: 0.0758 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0097 - val_mae: 0.0758 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0096 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0097 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0099 - val_mae: 0.0769 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0098 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0025 - mae: 0.0400 - val_loss: 0.0097 - val_mae: 0.0760 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.00952\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0097 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0097 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0097 - val_mae: 0.0756 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0024 - mae: 0.0391 - val_loss: 0.0097 - val_mae: 0.0758 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.00952\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0098 - val_mae: 0.0760 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0097 - val_mae: 0.0759 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0098 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0098 - val_mae: 0.0762 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.00952\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0097 - val_mae: 0.0758 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00952\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0098 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00952\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0097 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00952\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0022 - mae: 0.0376 - val_loss: 0.0097 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00952\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0022 - mae: 0.0375 - val_loss: 0.0098 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.00952 to 0.00934, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss improved from 0.00934 to 0.00933, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss improved from 0.00933 to 0.00933, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00933\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0317 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00933\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0316 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.00933 to 0.00932, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0315 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00932\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0315 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.00932 to 0.00930, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0094 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0094 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0094 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0310 - val_loss: 0.0093 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0310 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0310 - val_loss: 0.0094 - val_mae: 0.0741 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0304 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0304 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0304 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0303 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss improved from 0.00930 to 0.00930, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss improved from 0.00930 to 0.00930, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss improved from 0.00930 to 0.00930, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0741 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.00930\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss improved from 0.00930 to 0.00930, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.00930\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.00930\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss improved from 0.00930 to 0.00929, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.00929\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.00929\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.00929\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0094 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 384/1000\n",
      "\n",
      "Epoch 384: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 385/1000\n",
      "\n",
      "Epoch 385: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 386/1000\n",
      "\n",
      "Epoch 386: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 387/1000\n",
      "\n",
      "Epoch 387: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 388/1000\n",
      "\n",
      "Epoch 388: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 389/1000\n",
      "\n",
      "Epoch 389: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 390/1000\n",
      "\n",
      "Epoch 390: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 391/1000\n",
      "\n",
      "Epoch 391: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 392/1000\n",
      "\n",
      "Epoch 392: val_loss did not improve from 0.00929\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 393/1000\n",
      "\n",
      "Epoch 393: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0740 - learning_rate: 1.0000e-07\n",
      "Epoch 394/1000\n",
      "\n",
      "Epoch 394: val_loss did not improve from 0.00929\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 395/1000\n",
      "\n",
      "Epoch 395: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 396/1000\n",
      "\n",
      "Epoch 396: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 397/1000\n",
      "\n",
      "Epoch 397: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 398/1000\n",
      "\n",
      "Epoch 398: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 399/1000\n",
      "\n",
      "Epoch 399: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 400/1000\n",
      "\n",
      "Epoch 400: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 401/1000\n",
      "\n",
      "Epoch 401: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 402/1000\n",
      "\n",
      "Epoch 402: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 403/1000\n",
      "\n",
      "Epoch 403: val_loss did not improve from 0.00929\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0015 - mae: 0.0302 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 404/1000\n",
      "\n",
      "Epoch 404: val_loss did not improve from 0.00929\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0015 - mae: 0.0301 - val_loss: 0.0093 - val_mae: 0.0739 - learning_rate: 1.0000e-07\n",
      "Epoch 404: early stopping\n",
      "Restoring model weights from the end of the best epoch: 354.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1168 m\n",
      "Median positioning error: 0.1051 m\n",
      "90th percentile error: 0.2083 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 16141.209832,
   "end_time": "2025-08-17T09:59:01.448767",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-17T05:30:00.238935",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
