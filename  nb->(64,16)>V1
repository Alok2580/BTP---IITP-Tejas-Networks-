{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f018d9f0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:38.678749Z",
     "iopub.status.busy": "2025-08-18T07:32:38.678407Z",
     "iopub.status.idle": "2025-08-18T07:32:40.363465Z",
     "shell.execute_reply": "2025-08-18T07:32:40.362536Z"
    },
    "papermill": {
     "duration": 1.690447,
     "end_time": "2025-08-18T07:32:40.364961",
     "exception": false,
     "start_time": "2025-08-18T07:32:38.674514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba7c50fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:40.371156Z",
     "iopub.status.busy": "2025-08-18T07:32:40.370775Z",
     "iopub.status.idle": "2025-08-18T07:32:56.345187Z",
     "shell.execute_reply": "2025-08-18T07:32:56.344242Z"
    },
    "papermill": {
     "duration": 15.978997,
     "end_time": "2025-08-18T07:32:56.346821",
     "exception": false,
     "start_time": "2025-08-18T07:32:40.367824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-18 07:32:42.014291: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755502362.213044      18 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755502362.266169      18 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "202c8510",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:56.352742Z",
     "iopub.status.busy": "2025-08-18T07:32:56.352156Z",
     "iopub.status.idle": "2025-08-18T07:32:56.357256Z",
     "shell.execute_reply": "2025-08-18T07:32:56.356617Z"
    },
    "papermill": {
     "duration": 0.009172,
     "end_time": "2025-08-18T07:32:56.358357",
     "exception": false,
     "start_time": "2025-08-18T07:32:56.349185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 512   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 15  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "46f47d58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:56.364231Z",
     "iopub.status.busy": "2025-08-18T07:32:56.363478Z",
     "iopub.status.idle": "2025-08-18T07:32:56.367108Z",
     "shell.execute_reply": "2025-08-18T07:32:56.366499Z"
    },
    "papermill": {
     "duration": 0.007607,
     "end_time": "2025-08-18T07:32:56.368299",
     "exception": false,
     "start_time": "2025-08-18T07:32:56.360692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03e5b4cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:32:56.374393Z",
     "iopub.status.busy": "2025-08-18T07:32:56.374152Z",
     "iopub.status.idle": "2025-08-18T12:14:48.263016Z",
     "shell.execute_reply": "2025-08-18T12:14:48.262272Z"
    },
    "papermill": {
     "duration": 16911.89344,
     "end_time": "2025-08-18T12:14:48.264279",
     "exception": false,
     "start_time": "2025-08-18T07:32:56.370839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755502401.390800      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755502411.640176      18 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">276,992</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)             │       <span style=\"color: #00af00; text-decoration-color: #00af00\">123,904</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,315,584</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,026</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │       \u001b[38;5;34m276,992\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │         \u001b[38;5;34m2,048\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m512\u001b[0m)             │       \u001b[38;5;34m123,904\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │     \u001b[38;5;34m1,315,584\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │         \u001b[38;5;34m1,026\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,719,562</span> (6.56 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,719,562\u001b[0m (6.56 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,718,534</span> (6.56 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,718,534\u001b[0m (6.56 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,028</span> (4.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,028\u001b[0m (4.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755502423.766665      57 service.cc:148] XLA service 0x7aede8002f20 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755502423.767756      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755502428.887001      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 29.25573, saving model to models/best_model_full.keras\n",
      "4375/4375 - 90s - 21ms/step - loss: 108.9390 - mae: 7.4899 - val_loss: 29.2557 - val_mae: 4.2034 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 29.25573 to 3.09454, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 10.6133 - mae: 2.3717 - val_loss: 3.0945 - val_mae: 1.3813 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 3.09454 to 2.62921, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 4.3582 - mae: 1.4498 - val_loss: 2.6292 - val_mae: 1.2742 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 2.62921 to 1.97355, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 3.2584 - mae: 1.1677 - val_loss: 1.9736 - val_mae: 1.0897 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.97355 to 0.87721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.5153 - mae: 0.9082 - val_loss: 0.8772 - val_mae: 0.7242 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 0.87721 to 0.74308, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 2.3411 - mae: 1.0206 - val_loss: 0.7431 - val_mae: 0.6749 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.74308 to 0.44746, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.7073 - mae: 0.6584 - val_loss: 0.4475 - val_mae: 0.5272 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.44746\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.7434 - mae: 0.6494 - val_loss: 0.5184 - val_mae: 0.5326 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.5382 - mae: 0.5670 - val_loss: 0.9906 - val_mae: 0.7921 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 2.6548 - mae: 1.0175 - val_loss: 2.4868 - val_mae: 0.6184 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.44746\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.1724 - mae: 0.6515 - val_loss: 2.1692 - val_mae: 1.1365 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.7115 - mae: 0.6311 - val_loss: 0.4587 - val_mae: 0.5303 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.4515 - mae: 0.8146 - val_loss: 1.3422 - val_mae: 0.9180 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.7472 - mae: 0.6688 - val_loss: 1.4453 - val_mae: 0.6489 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.3650 - mae: 0.8149 - val_loss: 2.6922 - val_mae: 0.9109 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 2.4403 - mae: 0.9638 - val_loss: 2.3436 - val_mae: 0.9355 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.7197 - mae: 0.9440 - val_loss: 1.2921 - val_mae: 0.8141 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.44746\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.7586 - mae: 0.7517 - val_loss: 1.8647 - val_mae: 1.0542 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.44746\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.6506 - mae: 0.6080 - val_loss: 0.5483 - val_mae: 0.5773 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.44746\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.9454 - mae: 0.8509 - val_loss: 0.6898 - val_mae: 0.6338 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.44746 to 0.40643, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.5045 - mae: 0.5418 - val_loss: 0.4064 - val_mae: 0.4997 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.2889 - mae: 0.7047 - val_loss: 0.4101 - val_mae: 0.4800 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.40643\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.9962 - mae: 0.7861 - val_loss: 2.4292 - val_mae: 0.6569 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.40643\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.4331 - mae: 0.5126 - val_loss: 0.5486 - val_mae: 0.5498 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.5668 - mae: 0.7409 - val_loss: 1.6298 - val_mae: 0.5653 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.4498 - mae: 0.5184 - val_loss: 0.8103 - val_mae: 0.6900 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 2.5595 - mae: 0.9632 - val_loss: 0.5509 - val_mae: 0.5874 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.40643\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.8714 - mae: 0.5803 - val_loss: 57.8951 - val_mae: 4.9498 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 2.0453 - mae: 0.9341 - val_loss: 1.4564 - val_mae: 0.8696 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.40643\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.6766 - mae: 0.6257 - val_loss: 0.4997 - val_mae: 0.4578 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.5467 - mae: 0.7413 - val_loss: 0.4935 - val_mae: 0.5508 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.4838 - mae: 0.5364 - val_loss: 0.4302 - val_mae: 0.5245 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.4674 - mae: 0.7105 - val_loss: 1.5037 - val_mae: 0.6249 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.8553 - mae: 0.7969 - val_loss: 1.5864 - val_mae: 0.9766 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 2.2047 - mae: 0.7364 - val_loss: 7.4855 - val_mae: 2.0017 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.8897 - mae: 0.9534 - val_loss: 0.6841 - val_mae: 0.6456 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.40643\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.9456 - mae: 0.8823 - val_loss: 2.2557 - val_mae: 0.6509 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.40643\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.4595 - mae: 0.7936 - val_loss: 0.9987 - val_mae: 0.6659 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.6312 - mae: 0.7871 - val_loss: 0.5328 - val_mae: 0.5709 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.4730 - mae: 0.5367 - val_loss: 0.7890 - val_mae: 0.6959 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.40643\n",
      "4375/4375 - 74s - 17ms/step - loss: 2.2056 - mae: 0.9150 - val_loss: 0.6888 - val_mae: 0.6420 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.40643 to 0.30771, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3307 - mae: 0.4503 - val_loss: 0.3077 - val_mae: 0.4235 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.30771 to 0.18660, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.2183 - mae: 0.3663 - val_loss: 0.1866 - val_mae: 0.3394 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.18660 to 0.13659, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.1592 - mae: 0.3133 - val_loss: 0.1366 - val_mae: 0.2896 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.13659 to 0.12703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.1207 - mae: 0.2732 - val_loss: 0.1270 - val_mae: 0.2788 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.12703 to 0.09417, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0953 - mae: 0.2434 - val_loss: 0.0942 - val_mae: 0.2400 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.09417 to 0.09115, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0806 - mae: 0.2237 - val_loss: 0.0911 - val_mae: 0.2369 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.09115 to 0.07632, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0719 - mae: 0.2114 - val_loss: 0.0763 - val_mae: 0.2168 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.07632\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0632 - mae: 0.1984 - val_loss: 0.0783 - val_mae: 0.2204 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.07632 to 0.06461, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0561 - mae: 0.1869 - val_loss: 0.0646 - val_mae: 0.2004 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.06461 to 0.05569, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0512 - mae: 0.1787 - val_loss: 0.0557 - val_mae: 0.1850 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.05569\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0470 - mae: 0.1713 - val_loss: 0.0578 - val_mae: 0.1888 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.05569 to 0.05290, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0437 - mae: 0.1651 - val_loss: 0.0529 - val_mae: 0.1804 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.05290 to 0.05088, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0417 - mae: 0.1612 - val_loss: 0.0509 - val_mae: 0.1771 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.05088 to 0.04922, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0383 - mae: 0.1546 - val_loss: 0.0492 - val_mae: 0.1745 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.04922 to 0.04405, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0363 - mae: 0.1505 - val_loss: 0.0440 - val_mae: 0.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.04405\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0343 - mae: 0.1463 - val_loss: 0.0450 - val_mae: 0.1661 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.04405 to 0.03856, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0336 - mae: 0.1446 - val_loss: 0.0386 - val_mae: 0.1537 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.03856\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0317 - mae: 0.1406 - val_loss: 0.0463 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.03856 to 0.03842, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0302 - mae: 0.1372 - val_loss: 0.0384 - val_mae: 0.1535 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.03842 to 0.03669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0293 - mae: 0.1351 - val_loss: 0.0367 - val_mae: 0.1504 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.03669\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0289 - mae: 0.1342 - val_loss: 0.0437 - val_mae: 0.1647 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.03669 to 0.03482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0275 - mae: 0.1310 - val_loss: 0.0348 - val_mae: 0.1462 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.03482\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0273 - mae: 0.1304 - val_loss: 0.0376 - val_mae: 0.1524 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.03482\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0269 - mae: 0.1295 - val_loss: 0.0405 - val_mae: 0.1561 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.03482 to 0.03399, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0260 - mae: 0.1273 - val_loss: 0.0340 - val_mae: 0.1443 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.03399 to 0.03363, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0251 - mae: 0.1249 - val_loss: 0.0336 - val_mae: 0.1444 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.03363 to 0.03166, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0248 - mae: 0.1243 - val_loss: 0.0317 - val_mae: 0.1396 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.03166 to 0.03007, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0244 - mae: 0.1233 - val_loss: 0.0301 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.03007\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0242 - mae: 0.1228 - val_loss: 0.0320 - val_mae: 0.1399 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.03007\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0238 - mae: 0.1217 - val_loss: 0.0352 - val_mae: 0.1477 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.03007\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0228 - mae: 0.1190 - val_loss: 0.0340 - val_mae: 0.1453 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.03007\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0227 - mae: 0.1188 - val_loss: 0.0306 - val_mae: 0.1381 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.03007 to 0.02854, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0224 - mae: 0.1180 - val_loss: 0.0285 - val_mae: 0.1318 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02854\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0220 - mae: 0.1169 - val_loss: 0.0296 - val_mae: 0.1350 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.02854 to 0.02635, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0220 - mae: 0.1172 - val_loss: 0.0264 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02635\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0218 - mae: 0.1165 - val_loss: 0.0305 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0217 - mae: 0.1162 - val_loss: 0.0276 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0213 - mae: 0.1149 - val_loss: 0.0305 - val_mae: 0.1381 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0210 - mae: 0.1141 - val_loss: 0.0266 - val_mae: 0.1283 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0210 - mae: 0.1143 - val_loss: 0.0278 - val_mae: 0.1294 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0207 - mae: 0.1131 - val_loss: 0.0292 - val_mae: 0.1348 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0207 - mae: 0.1133 - val_loss: 0.0280 - val_mae: 0.1321 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0208 - mae: 0.1133 - val_loss: 0.0306 - val_mae: 0.1375 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02635\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0202 - mae: 0.1120 - val_loss: 0.0287 - val_mae: 0.1326 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02635\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0198 - mae: 0.1110 - val_loss: 0.0293 - val_mae: 0.1349 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02635\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0202 - mae: 0.1118 - val_loss: 0.0280 - val_mae: 0.1298 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02635\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0199 - mae: 0.1111 - val_loss: 0.0316 - val_mae: 0.1408 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02635\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0201 - mae: 0.1116 - val_loss: 0.0274 - val_mae: 0.1294 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02635\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0200 - mae: 0.1115 - val_loss: 0.0420 - val_mae: 0.1625 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.02635 to 0.02428, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0200 - mae: 0.1113 - val_loss: 0.0243 - val_mae: 0.1221 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0197 - mae: 0.1106 - val_loss: 0.0263 - val_mae: 0.1267 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0197 - mae: 0.1106 - val_loss: 0.0261 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0199 - mae: 0.1109 - val_loss: 0.0315 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0196 - mae: 0.1100 - val_loss: 0.0251 - val_mae: 0.1246 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0199 - mae: 0.1108 - val_loss: 0.0284 - val_mae: 0.1317 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0198 - mae: 0.1108 - val_loss: 0.0269 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0199 - mae: 0.1108 - val_loss: 0.0303 - val_mae: 0.1348 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0194 - mae: 0.1092 - val_loss: 0.0257 - val_mae: 0.1252 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0196 - mae: 0.1102 - val_loss: 0.0286 - val_mae: 0.1328 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0194 - mae: 0.1096 - val_loss: 0.0285 - val_mae: 0.1312 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0197 - mae: 0.1106 - val_loss: 0.0264 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0195 - mae: 0.1099 - val_loss: 0.0282 - val_mae: 0.1324 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02428\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0197 - mae: 0.1102 - val_loss: 0.0275 - val_mae: 0.1307 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0194 - mae: 0.1095 - val_loss: 0.0369 - val_mae: 0.1502 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0197 - mae: 0.1102 - val_loss: 0.0294 - val_mae: 0.1341 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0195 - mae: 0.1097 - val_loss: 0.0258 - val_mae: 0.1255 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0198 - mae: 0.1105 - val_loss: 0.0298 - val_mae: 0.1348 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0193 - mae: 0.1092 - val_loss: 0.0267 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02428\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0197 - mae: 0.1100 - val_loss: 0.0357 - val_mae: 0.1492 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02428\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0196 - mae: 0.1099 - val_loss: 0.0292 - val_mae: 0.1343 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.02428 to 0.01336, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0134 - val_mae: 0.0901 - learning_rate: 1.0000e-04\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.01336 to 0.01288, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0063 - mae: 0.0631 - val_loss: 0.0129 - val_mae: 0.0886 - learning_rate: 1.0000e-04\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.01288 to 0.01281, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0059 - mae: 0.0610 - val_loss: 0.0128 - val_mae: 0.0884 - learning_rate: 1.0000e-04\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01281\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0056 - mae: 0.0595 - val_loss: 0.0128 - val_mae: 0.0884 - learning_rate: 1.0000e-04\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.01281 to 0.01240, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0055 - mae: 0.0586 - val_loss: 0.0124 - val_mae: 0.0868 - learning_rate: 1.0000e-04\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01240\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0125 - val_mae: 0.0871 - learning_rate: 1.0000e-04\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss improved from 0.01240 to 0.01238, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0124 - val_mae: 0.0867 - learning_rate: 1.0000e-04\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.01238 to 0.01235, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0051 - mae: 0.0565 - val_loss: 0.0124 - val_mae: 0.0867 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.01235 to 0.01217, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0050 - mae: 0.0559 - val_loss: 0.0122 - val_mae: 0.0860 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01217\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0049 - mae: 0.0554 - val_loss: 0.0122 - val_mae: 0.0861 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01217\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0048 - mae: 0.0551 - val_loss: 0.0123 - val_mae: 0.0866 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.01217 to 0.01207, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0047 - mae: 0.0546 - val_loss: 0.0121 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.01207\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0047 - mae: 0.0542 - val_loss: 0.0121 - val_mae: 0.0859 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01207\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0121 - val_mae: 0.0858 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.01207 to 0.01206, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0045 - mae: 0.0534 - val_loss: 0.0121 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01206\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0122 - val_mae: 0.0860 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.01206 to 0.01192, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0044 - mae: 0.0527 - val_loss: 0.0119 - val_mae: 0.0849 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01192\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0121 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.01192 to 0.01192, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0043 - mae: 0.0521 - val_loss: 0.0119 - val_mae: 0.0849 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01192\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0043 - mae: 0.0519 - val_loss: 0.0120 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01192\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0042 - mae: 0.0516 - val_loss: 0.0120 - val_mae: 0.0854 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01192\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0042 - mae: 0.0513 - val_loss: 0.0121 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01192\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0041 - mae: 0.0510 - val_loss: 0.0121 - val_mae: 0.0857 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01192\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0122 - val_mae: 0.0859 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.01192 to 0.01189, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0040 - mae: 0.0505 - val_loss: 0.0119 - val_mae: 0.0847 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01189\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0040 - mae: 0.0503 - val_loss: 0.0119 - val_mae: 0.0850 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01189\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0040 - mae: 0.0500 - val_loss: 0.0119 - val_mae: 0.0849 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01189\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0039 - mae: 0.0497 - val_loss: 0.0121 - val_mae: 0.0854 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01189\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0121 - val_mae: 0.0859 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01189\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0039 - mae: 0.0493 - val_loss: 0.0120 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01189\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0038 - mae: 0.0492 - val_loss: 0.0121 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01189\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0124 - val_mae: 0.0869 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.01189 to 0.01185, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0038 - mae: 0.0487 - val_loss: 0.0119 - val_mae: 0.0846 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01185\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0037 - mae: 0.0484 - val_loss: 0.0123 - val_mae: 0.0861 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01185\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0037 - mae: 0.0483 - val_loss: 0.0121 - val_mae: 0.0857 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01185\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0037 - mae: 0.0481 - val_loss: 0.0119 - val_mae: 0.0848 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01185\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0036 - mae: 0.0479 - val_loss: 0.0123 - val_mae: 0.0863 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.01185 to 0.01150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0029 - mae: 0.0430 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01150\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01150\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0028 - mae: 0.0423 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.01150 to 0.01148, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01148\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.01148 to 0.01148, saving model to models/best_model_full.keras\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01148\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01148\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0028 - mae: 0.0416 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01148\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0027 - mae: 0.0415 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01148\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0027 - mae: 0.0414 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01148\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0027 - mae: 0.0413 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01148\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01148\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01148\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01148\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01148\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.01148 to 0.01147, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0027 - mae: 0.0408 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0115 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.01147 to 0.01145, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0026 - mae: 0.0400 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.01145 to 0.01145, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0399 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.01145 to 0.01145, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01145\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01145\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01145\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01145\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01145\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01145\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01145\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01145\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01145\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-07\n",
      "Epoch 229: early stopping\n",
      "Restoring model weights from the end of the best epoch: 179.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 5s - 8ms/step\n",
      "Mean positioning error: 0.1307 m\n",
      "Median positioning error: 0.1179 m\n",
      "90th percentile error: 0.2301 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 16937.744652,
   "end_time": "2025-08-18T12:14:51.788065",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-18T07:32:34.043413",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
