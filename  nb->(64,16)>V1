{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e9898de",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-27T16:02:21.250154Z",
     "iopub.status.busy": "2025-08-27T16:02:21.249877Z",
     "iopub.status.idle": "2025-08-27T16:02:22.632861Z",
     "shell.execute_reply": "2025-08-27T16:02:22.632133Z"
    },
    "papermill": {
     "duration": 1.387467,
     "end_time": "2025-08-27T16:02:22.634086",
     "exception": false,
     "start_time": "2025-08-27T16:02:21.246619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a343040d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:02:22.639612Z",
     "iopub.status.busy": "2025-08-27T16:02:22.639297Z",
     "iopub.status.idle": "2025-08-27T16:02:36.570441Z",
     "shell.execute_reply": "2025-08-27T16:02:36.569588Z"
    },
    "papermill": {
     "duration": 13.935204,
     "end_time": "2025-08-27T16:02:36.571863",
     "exception": false,
     "start_time": "2025-08-27T16:02:22.636659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-27 16:02:24.084574: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756310544.264066      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756310544.317335      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3ef6be8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:02:36.577195Z",
     "iopub.status.busy": "2025-08-27T16:02:36.576709Z",
     "iopub.status.idle": "2025-08-27T16:02:36.581161Z",
     "shell.execute_reply": "2025-08-27T16:02:36.580582Z"
    },
    "papermill": {
     "duration": 0.008009,
     "end_time": "2025-08-27T16:02:36.582175",
     "exception": false,
     "start_time": "2025-08-27T16:02:36.574166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c02305f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:02:36.586551Z",
     "iopub.status.busy": "2025-08-27T16:02:36.586336Z",
     "iopub.status.idle": "2025-08-27T16:02:36.589373Z",
     "shell.execute_reply": "2025-08-27T16:02:36.588833Z"
    },
    "papermill": {
     "duration": 0.006355,
     "end_time": "2025-08-27T16:02:36.590409",
     "exception": false,
     "start_time": "2025-08-27T16:02:36.584054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "20bffe8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:02:36.595354Z",
     "iopub.status.busy": "2025-08-27T16:02:36.595146Z",
     "iopub.status.idle": "2025-08-27T18:25:43.253186Z",
     "shell.execute_reply": "2025-08-27T18:25:43.252384Z"
    },
    "papermill": {
     "duration": 8586.662255,
     "end_time": "2025-08-27T18:25:43.254517",
     "exception": false,
     "start_time": "2025-08-27T16:02:36.592262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1756310579.606580      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1756310588.791003      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">198,272</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m198,272\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">272,394</span> (1.04 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m272,394\u001b[0m (1.04 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">272,134</span> (1.04 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m272,134\u001b[0m (1.04 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1756310599.395835      56 service.cc:148] XLA service 0x7ae200016c90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1756310599.396558      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1756310602.635276      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 12.44111, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 54.4736 - mae: 4.8791 - val_loss: 12.4411 - val_mae: 2.7695 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 12.44111 to 9.47521, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 11.4972 - mae: 2.6178 - val_loss: 9.4752 - val_mae: 2.4239 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 9.47521\n",
      "4375/4375 - 26s - 6ms/step - loss: 7.9824 - mae: 2.1759 - val_loss: 10.0958 - val_mae: 2.4886 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 9.47521 to 5.38654, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 6.0241 - mae: 1.8890 - val_loss: 5.3865 - val_mae: 1.8225 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 5.38654 to 3.13542, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 5.7661 - mae: 1.8341 - val_loss: 3.1354 - val_mae: 1.3773 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 3.13542 to 1.99110, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.3687 - mae: 1.1819 - val_loss: 1.9911 - val_mae: 1.0845 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.99110 to 0.82275, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5109 - mae: 0.9136 - val_loss: 0.8228 - val_mae: 0.7044 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.82275\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4474 - mae: 0.8616 - val_loss: 1.2419 - val_mae: 0.8850 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.82275\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5994 - mae: 0.8562 - val_loss: 1.2480 - val_mae: 0.8553 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.82275 to 0.53992, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6418 - mae: 0.6156 - val_loss: 0.5399 - val_mae: 0.5785 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.53992 to 0.38682, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1272 - mae: 0.6710 - val_loss: 0.3868 - val_mae: 0.4857 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.38682 to 0.38566, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8960 - mae: 0.6300 - val_loss: 0.3857 - val_mae: 0.4795 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.38566\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1386 - mae: 0.6959 - val_loss: 0.5813 - val_mae: 0.5523 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.38566\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8599 - mae: 0.6465 - val_loss: 0.4549 - val_mae: 0.5195 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.38566 to 0.33953, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9044 - mae: 0.6177 - val_loss: 0.3395 - val_mae: 0.4553 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 0.33953 to 0.30434, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7425 - mae: 0.5796 - val_loss: 0.3043 - val_mae: 0.4279 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.30434\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8076 - mae: 0.6024 - val_loss: 0.3609 - val_mae: 0.4567 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.30434\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0038 - mae: 0.6336 - val_loss: 0.4033 - val_mae: 0.4908 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.30434\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2969 - mae: 0.6953 - val_loss: 0.5167 - val_mae: 0.5564 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.30434\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4119 - mae: 0.4960 - val_loss: 0.6582 - val_mae: 0.6219 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.30434\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2562 - mae: 0.6856 - val_loss: 2.3766 - val_mae: 1.1717 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.30434\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1868 - mae: 0.6533 - val_loss: 0.5306 - val_mae: 0.5675 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.30434\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7155 - mae: 0.5682 - val_loss: 0.7855 - val_mae: 0.6040 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.30434\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8263 - mae: 0.5722 - val_loss: 1.7219 - val_mae: 0.9645 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.30434\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6219 - mae: 0.5437 - val_loss: 5.9238 - val_mae: 1.5160 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.30434\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7990 - mae: 0.5739 - val_loss: 0.3503 - val_mae: 0.4688 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.30434 to 0.25445, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7124 - mae: 0.5477 - val_loss: 0.2544 - val_mae: 0.3946 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0164 - mae: 0.5908 - val_loss: 0.4683 - val_mae: 0.5337 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6269 - mae: 0.5383 - val_loss: 0.2722 - val_mae: 0.4123 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9992 - mae: 0.6077 - val_loss: 0.3238 - val_mae: 0.4419 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3202 - mae: 0.4385 - val_loss: 0.2903 - val_mae: 0.4233 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0043 - mae: 0.6065 - val_loss: 0.3328 - val_mae: 0.4511 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9732 - mae: 0.6510 - val_loss: 0.5898 - val_mae: 0.5884 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9000 - mae: 0.6165 - val_loss: 0.4356 - val_mae: 0.5136 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6145 - mae: 0.5797 - val_loss: 0.3494 - val_mae: 0.4669 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2448 - mae: 0.7120 - val_loss: 0.6212 - val_mae: 0.6113 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2235 - mae: 0.7035 - val_loss: 0.9834 - val_mae: 0.7583 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9047 - mae: 0.7022 - val_loss: 1.0022 - val_mae: 0.7181 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8742 - mae: 0.6738 - val_loss: 2.1153 - val_mae: 0.9658 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8744 - mae: 0.9179 - val_loss: 0.6610 - val_mae: 0.6283 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2659 - mae: 0.7541 - val_loss: 0.5842 - val_mae: 0.5957 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5655 - mae: 0.5706 - val_loss: 0.6231 - val_mae: 0.5977 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1172 - mae: 0.6902 - val_loss: 0.6582 - val_mae: 0.5589 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1404 - mae: 0.7097 - val_loss: 0.5967 - val_mae: 0.5996 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8598 - mae: 0.6334 - val_loss: 0.5394 - val_mae: 0.5779 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.25445\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5416 - mae: 0.7953 - val_loss: 0.6207 - val_mae: 0.6093 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.25445\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9930 - mae: 0.6697 - val_loss: 0.6130 - val_mae: 0.6163 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.25445 to 0.22912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2680 - mae: 0.3987 - val_loss: 0.2291 - val_mae: 0.3684 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.22912 to 0.18495, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.2024 - mae: 0.3464 - val_loss: 0.1849 - val_mae: 0.3278 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.18495 to 0.15833, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.1619 - mae: 0.3105 - val_loss: 0.1583 - val_mae: 0.3062 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.15833 to 0.11693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1353 - mae: 0.2839 - val_loss: 0.1169 - val_mae: 0.2626 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.11693 to 0.11023, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.1151 - mae: 0.2632 - val_loss: 0.1102 - val_mae: 0.2557 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.11023 to 0.09458, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1007 - mae: 0.2467 - val_loss: 0.0946 - val_mae: 0.2383 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.09458 to 0.08288, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0896 - mae: 0.2331 - val_loss: 0.0829 - val_mae: 0.2226 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.08288 to 0.07924, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0796 - mae: 0.2199 - val_loss: 0.0792 - val_mae: 0.2185 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.07924 to 0.07518, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0729 - mae: 0.2109 - val_loss: 0.0752 - val_mae: 0.2133 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.07518 to 0.06347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0670 - mae: 0.2024 - val_loss: 0.0635 - val_mae: 0.1960 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.06347 to 0.06216, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0617 - mae: 0.1945 - val_loss: 0.0622 - val_mae: 0.1934 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.06216 to 0.05211, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0574 - mae: 0.1876 - val_loss: 0.0521 - val_mae: 0.1782 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.05211\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0534 - mae: 0.1811 - val_loss: 0.0528 - val_mae: 0.1779 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.05211 to 0.04741, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0496 - mae: 0.1746 - val_loss: 0.0474 - val_mae: 0.1694 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.04741\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0461 - mae: 0.1684 - val_loss: 0.0493 - val_mae: 0.1743 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.04741 to 0.04523, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0436 - mae: 0.1638 - val_loss: 0.0452 - val_mae: 0.1664 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.04523 to 0.04426, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0413 - mae: 0.1594 - val_loss: 0.0443 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.04426 to 0.04113, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0388 - mae: 0.1548 - val_loss: 0.0411 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.04113 to 0.03932, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0383 - mae: 0.1536 - val_loss: 0.0393 - val_mae: 0.1538 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.03932\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0364 - mae: 0.1494 - val_loss: 0.0395 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.03932 to 0.03713, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0351 - mae: 0.1472 - val_loss: 0.0371 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.03713 to 0.03481, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0335 - mae: 0.1434 - val_loss: 0.0348 - val_mae: 0.1450 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.03481\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0323 - mae: 0.1411 - val_loss: 0.0357 - val_mae: 0.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.03481 to 0.03466, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0307 - mae: 0.1379 - val_loss: 0.0347 - val_mae: 0.1443 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.03466 to 0.03320, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0297 - mae: 0.1353 - val_loss: 0.0332 - val_mae: 0.1423 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.03320 to 0.02804, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0286 - mae: 0.1328 - val_loss: 0.0280 - val_mae: 0.1305 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0278 - mae: 0.1308 - val_loss: 0.0300 - val_mae: 0.1346 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0269 - mae: 0.1288 - val_loss: 0.0285 - val_mae: 0.1310 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0261 - mae: 0.1269 - val_loss: 0.0280 - val_mae: 0.1299 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0255 - mae: 0.1253 - val_loss: 0.0284 - val_mae: 0.1310 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0250 - mae: 0.1241 - val_loss: 0.0302 - val_mae: 0.1362 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.02804 to 0.02653, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0245 - mae: 0.1230 - val_loss: 0.0265 - val_mae: 0.1271 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.02653\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0243 - mae: 0.1224 - val_loss: 0.0288 - val_mae: 0.1319 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.02653 to 0.02642, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0235 - mae: 0.1203 - val_loss: 0.0264 - val_mae: 0.1266 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.02642 to 0.02587, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0234 - mae: 0.1201 - val_loss: 0.0259 - val_mae: 0.1250 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0233 - mae: 0.1198 - val_loss: 0.0283 - val_mae: 0.1309 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.02587 to 0.02426, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0224 - mae: 0.1174 - val_loss: 0.0243 - val_mae: 0.1225 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.02426 to 0.02383, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0224 - mae: 0.1174 - val_loss: 0.0238 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.02383\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0221 - mae: 0.1168 - val_loss: 0.0301 - val_mae: 0.1351 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.02383 to 0.02351, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0218 - mae: 0.1159 - val_loss: 0.0235 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.02351\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0225 - mae: 0.1157 - val_loss: 0.0240 - val_mae: 0.1214 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02351\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0205 - mae: 0.1126 - val_loss: 0.0264 - val_mae: 0.1281 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02351\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0214 - mae: 0.1147 - val_loss: 0.0247 - val_mae: 0.1224 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.02351\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0213 - mae: 0.1147 - val_loss: 0.0245 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.02351 to 0.02303, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0211 - mae: 0.1140 - val_loss: 0.0230 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02303\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0211 - mae: 0.1138 - val_loss: 0.0240 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.02303 to 0.02116, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1127 - val_loss: 0.0212 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0209 - mae: 0.1135 - val_loss: 0.0220 - val_mae: 0.1154 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0210 - mae: 0.1135 - val_loss: 0.0285 - val_mae: 0.1303 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1120 - val_loss: 0.0236 - val_mae: 0.1197 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0203 - mae: 0.1115 - val_loss: 0.0228 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1125 - val_loss: 0.0214 - val_mae: 0.1133 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1114 - val_loss: 0.0240 - val_mae: 0.1216 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1123 - val_loss: 0.0231 - val_mae: 0.1184 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1113 - val_loss: 0.0277 - val_mae: 0.1313 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0204 - mae: 0.1116 - val_loss: 0.0231 - val_mae: 0.1188 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0203 - mae: 0.1115 - val_loss: 0.0213 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0198 - mae: 0.1101 - val_loss: 0.0245 - val_mae: 0.1204 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0209 - mae: 0.1096 - val_loss: 0.0227 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02116\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0192 - mae: 0.1085 - val_loss: 0.0254 - val_mae: 0.1248 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.02116 to 0.02099, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0200 - mae: 0.1106 - val_loss: 0.0210 - val_mae: 0.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02099\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0198 - mae: 0.1101 - val_loss: 0.0228 - val_mae: 0.1187 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02099\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1112 - val_loss: 0.0235 - val_mae: 0.1182 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02099\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0199 - mae: 0.1104 - val_loss: 0.0261 - val_mae: 0.1265 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02099\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1107 - val_loss: 0.0215 - val_mae: 0.1135 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.02099 to 0.02013, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0197 - mae: 0.1097 - val_loss: 0.0201 - val_mae: 0.1106 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1110 - val_loss: 0.0226 - val_mae: 0.1184 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1107 - val_loss: 0.0225 - val_mae: 0.1177 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1110 - val_loss: 0.0217 - val_mae: 0.1136 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0199 - mae: 0.1103 - val_loss: 0.0224 - val_mae: 0.1170 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1107 - val_loss: 0.0220 - val_mae: 0.1153 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0197 - mae: 0.1098 - val_loss: 0.0222 - val_mae: 0.1165 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1110 - val_loss: 0.0256 - val_mae: 0.1256 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0198 - mae: 0.1100 - val_loss: 0.0290 - val_mae: 0.1310 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1105 - val_loss: 0.0216 - val_mae: 0.1154 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1107 - val_loss: 0.0221 - val_mae: 0.1151 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1107 - val_loss: 0.0249 - val_mae: 0.1224 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0199 - mae: 0.1100 - val_loss: 0.0202 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0203 - mae: 0.1111 - val_loss: 0.0237 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1103 - val_loss: 0.0231 - val_mae: 0.1186 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02013\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0200 - mae: 0.1100 - val_loss: 0.0241 - val_mae: 0.1200 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.02013 to 0.01985, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1105 - val_loss: 0.0198 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0200 - mae: 0.1104 - val_loss: 0.0247 - val_mae: 0.1240 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0200 - mae: 0.1103 - val_loss: 0.0232 - val_mae: 0.1182 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1106 - val_loss: 0.0227 - val_mae: 0.1178 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0200 - mae: 0.1104 - val_loss: 0.0211 - val_mae: 0.1132 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.01985 to 0.01985, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0199 - mae: 0.1099 - val_loss: 0.0198 - val_mae: 0.1097 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1102 - val_loss: 0.0443 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1101 - val_loss: 0.0239 - val_mae: 0.1207 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0203 - mae: 0.1109 - val_loss: 0.0251 - val_mae: 0.1230 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1113 - val_loss: 0.0283 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1103 - val_loss: 0.0236 - val_mae: 0.1196 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0206 - mae: 0.1112 - val_loss: 0.0336 - val_mae: 0.1413 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01985\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0199 - mae: 0.1099 - val_loss: 0.0240 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1104 - val_loss: 0.0299 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01985\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0204 - mae: 0.1112 - val_loss: 0.0261 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1117 - val_loss: 0.0241 - val_mae: 0.1206 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1103 - val_loss: 0.0220 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1108 - val_loss: 0.0235 - val_mae: 0.1210 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1107 - val_loss: 0.0257 - val_mae: 0.1236 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01985\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0225 - mae: 0.1121 - val_loss: 0.0209 - val_mae: 0.1131 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.01985 to 0.01965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0188 - mae: 0.1070 - val_loss: 0.0196 - val_mae: 0.1096 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01965\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0201 - mae: 0.1103 - val_loss: 0.0254 - val_mae: 0.1235 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01965\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1119 - val_loss: 0.0284 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01965\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1111 - val_loss: 0.0250 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01965\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1116 - val_loss: 0.0304 - val_mae: 0.1375 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.01965 to 0.01921, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0208 - mae: 0.1121 - val_loss: 0.0192 - val_mae: 0.1076 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01921\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1111 - val_loss: 0.0213 - val_mae: 0.1128 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01921\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0203 - mae: 0.1106 - val_loss: 0.0334 - val_mae: 0.1406 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.01921 to 0.01864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0209 - mae: 0.1116 - val_loss: 0.0186 - val_mae: 0.1060 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0202 - mae: 0.1105 - val_loss: 0.0228 - val_mae: 0.1163 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0209 - mae: 0.1122 - val_loss: 0.0353 - val_mae: 0.1454 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1117 - val_loss: 0.0238 - val_mae: 0.1202 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0208 - mae: 0.1120 - val_loss: 0.0271 - val_mae: 0.1284 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1118 - val_loss: 0.0238 - val_mae: 0.1194 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0209 - mae: 0.1123 - val_loss: 0.0264 - val_mae: 0.1269 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0206 - mae: 0.1119 - val_loss: 0.0225 - val_mae: 0.1172 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0208 - mae: 0.1121 - val_loss: 0.0255 - val_mae: 0.1217 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0206 - mae: 0.1115 - val_loss: 0.0232 - val_mae: 0.1189 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01864\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0204 - mae: 0.1107 - val_loss: 0.0218 - val_mae: 0.1148 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0203 - mae: 0.1109 - val_loss: 0.0193 - val_mae: 0.1070 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0204 - mae: 0.1109 - val_loss: 0.0280 - val_mae: 0.1318 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1119 - val_loss: 0.0213 - val_mae: 0.1139 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1114 - val_loss: 0.0223 - val_mae: 0.1166 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1114 - val_loss: 0.0218 - val_mae: 0.1134 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01864\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0205 - mae: 0.1114 - val_loss: 0.0226 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0207 - mae: 0.1114 - val_loss: 0.0236 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0206 - mae: 0.1118 - val_loss: 0.0263 - val_mae: 0.1263 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0204 - mae: 0.1112 - val_loss: 0.0229 - val_mae: 0.1159 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0205 - mae: 0.1113 - val_loss: 0.0241 - val_mae: 0.1190 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss improved from 0.01864 to 0.00841, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0059 - mae: 0.0600 - val_loss: 0.0084 - val_mae: 0.0704 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.00841 to 0.00815, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0081 - val_mae: 0.0694 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.00815 to 0.00796, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0045 - mae: 0.0531 - val_loss: 0.0080 - val_mae: 0.0684 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.00796 to 0.00779, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0044 - mae: 0.0521 - val_loss: 0.0078 - val_mae: 0.0679 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00779\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0042 - mae: 0.0513 - val_loss: 0.0079 - val_mae: 0.0683 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00779\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0078 - val_mae: 0.0681 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00779\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0079 - val_mae: 0.0685 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.00779 to 0.00772, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0040 - mae: 0.0496 - val_loss: 0.0077 - val_mae: 0.0673 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.00772 to 0.00768, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0039 - mae: 0.0493 - val_loss: 0.0077 - val_mae: 0.0673 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss improved from 0.00768 to 0.00762, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0076 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00762\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0038 - mae: 0.0485 - val_loss: 0.0079 - val_mae: 0.0681 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.00762 to 0.00753, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0037 - mae: 0.0483 - val_loss: 0.0075 - val_mae: 0.0665 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00753\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0078 - val_mae: 0.0675 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00753\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0076 - val_mae: 0.0669 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00753\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0036 - mae: 0.0474 - val_loss: 0.0078 - val_mae: 0.0677 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00753\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0036 - mae: 0.0471 - val_loss: 0.0076 - val_mae: 0.0664 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00753\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0077 - val_mae: 0.0673 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00753\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0076 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.00753 to 0.00749, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0075 - val_mae: 0.0658 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00749\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0075 - val_mae: 0.0660 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00749\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0034 - mae: 0.0461 - val_loss: 0.0079 - val_mae: 0.0676 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00749\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0034 - mae: 0.0460 - val_loss: 0.0077 - val_mae: 0.0668 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00749\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0078 - val_mae: 0.0672 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.00749\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0076 - val_mae: 0.0664 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.00749\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0076 - val_mae: 0.0664 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.00749\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0075 - val_mae: 0.0660 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00749\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0076 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.00749\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0032 - mae: 0.0450 - val_loss: 0.0076 - val_mae: 0.0660 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss improved from 0.00749 to 0.00747, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0032 - mae: 0.0450 - val_loss: 0.0075 - val_mae: 0.0655 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00747\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0032 - mae: 0.0447 - val_loss: 0.0077 - val_mae: 0.0666 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00747\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0076 - val_mae: 0.0663 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00747\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0032 - mae: 0.0445 - val_loss: 0.0076 - val_mae: 0.0658 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.00747 to 0.00705, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0070 - val_mae: 0.0632 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.00705 to 0.00703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0025 - mae: 0.0391 - val_loss: 0.0070 - val_mae: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.00703 to 0.00701, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0390 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00701\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0389 - val_loss: 0.0070 - val_mae: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00701\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0070 - val_mae: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00701\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0071 - val_mae: 0.0632 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00701\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0071 - val_mae: 0.0632 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00701\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0070 - val_mae: 0.0632 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00701\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0070 - val_mae: 0.0632 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss improved from 0.00701 to 0.00700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00700\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0070 - val_mae: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.00700 to 0.00700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0070 - val_mae: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00700\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00700\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0071 - val_mae: 0.0635 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.00700 to 0.00700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0386 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00700\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0070 - val_mae: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00700\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00700\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0070 - val_mae: 0.0631 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00700\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0024 - mae: 0.0385 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00700\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0384 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00700\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0024 - mae: 0.0384 - val_loss: 0.0070 - val_mae: 0.0630 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss improved from 0.00700 to 0.00696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss improved from 0.00696 to 0.00696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00696\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss improved from 0.00696 to 0.00696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00696\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00696\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00696\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.00696 to 0.00695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00695\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00695\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss improved from 0.00695 to 0.00695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.00695\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.00695\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.00695\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss improved from 0.00695 to 0.00695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0069 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.00695\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.00695\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0069 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.00695 to 0.00695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0069 - val_mae: 0.0627 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss improved from 0.00695 to 0.00694, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0069 - val_mae: 0.0627 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0069 - val_mae: 0.0627 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0629 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0069 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0069 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.00694\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.00694\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0023 - mae: 0.0377 - val_loss: 0.0070 - val_mae: 0.0628 - learning_rate: 1.0000e-07\n",
      "Epoch 322: early stopping\n",
      "Restoring model weights from the end of the best epoch: 272.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.0988 m\n",
      "Median positioning error: 0.0875 m\n",
      "90th percentile error: 0.1759 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8609.2301,
   "end_time": "2025-08-27T18:25:46.364448",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T16:02:17.134348",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
