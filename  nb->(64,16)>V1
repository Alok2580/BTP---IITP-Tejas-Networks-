{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0bb4186d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-08T13:42:41.990199Z",
     "iopub.status.busy": "2025-08-08T13:42:41.989923Z",
     "iopub.status.idle": "2025-08-08T13:42:43.502963Z",
     "shell.execute_reply": "2025-08-08T13:42:43.502192Z"
    },
    "papermill": {
     "duration": 1.518211,
     "end_time": "2025-08-08T13:42:43.504537",
     "exception": false,
     "start_time": "2025-08-08T13:42:41.986326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "304a8b31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:42:43.511708Z",
     "iopub.status.busy": "2025-08-08T13:42:43.511359Z",
     "iopub.status.idle": "2025-08-08T13:42:58.656072Z",
     "shell.execute_reply": "2025-08-08T13:42:58.655414Z"
    },
    "papermill": {
     "duration": 15.14898,
     "end_time": "2025-08-08T13:42:58.657410",
     "exception": false,
     "start_time": "2025-08-08T13:42:43.508430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-08 13:42:45.215925: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754660565.414471      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754660565.471537      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d1afd1df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:42:58.662789Z",
     "iopub.status.busy": "2025-08-08T13:42:58.662359Z",
     "iopub.status.idle": "2025-08-08T13:42:58.666653Z",
     "shell.execute_reply": "2025-08-08T13:42:58.666106Z"
    },
    "papermill": {
     "duration": 0.008028,
     "end_time": "2025-08-08T13:42:58.667741",
     "exception": false,
     "start_time": "2025-08-08T13:42:58.659713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size = 13  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "338bee2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:42:58.672377Z",
     "iopub.status.busy": "2025-08-08T13:42:58.672164Z",
     "iopub.status.idle": "2025-08-08T13:42:58.675447Z",
     "shell.execute_reply": "2025-08-08T13:42:58.674924Z"
    },
    "papermill": {
     "duration": 0.006772,
     "end_time": "2025-08-08T13:42:58.676534",
     "exception": false,
     "start_time": "2025-08-08T13:42:58.669762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c544a778",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:42:58.681608Z",
     "iopub.status.busy": "2025-08-08T13:42:58.681334Z",
     "iopub.status.idle": "2025-08-08T17:16:48.805311Z",
     "shell.execute_reply": "2025-08-08T17:16:48.804231Z"
    },
    "papermill": {
     "duration": 12830.128663,
     "end_time": "2025-08-08T17:16:48.807020",
     "exception": false,
     "start_time": "2025-08-08T13:42:58.678357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754660600.964191      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754660610.269149      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">120,064</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,464</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m120,064\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,464\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">711,178</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m711,178\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">710,662</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m710,662\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754660621.226302      58 service.cc:148] XLA service 0x7ceae0016d50 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754660621.226838      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754660625.390803      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 6.54748, saving model to models/best_model_full.keras\n",
      "4375/4375 - 88s - 20ms/step - loss: 59.4194 - mae: 4.9262 - val_loss: 6.5475 - val_mae: 1.9844 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 6.54748 to 5.37488, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 5.4274 - mae: 1.7993 - val_loss: 5.3749 - val_mae: 1.7948 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.37488 to 3.64795, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 3.2456 - mae: 1.3556 - val_loss: 3.6479 - val_mae: 1.5132 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 3.64795\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.9550 - mae: 1.0733 - val_loss: 5.3803 - val_mae: 1.6387 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 3.64795 to 0.83912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.2767 - mae: 0.8537 - val_loss: 0.8391 - val_mae: 0.7217 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 0.83912\n",
      "4375/4375 - 73s - 17ms/step - loss: 1.7123 - mae: 0.8597 - val_loss: 0.9372 - val_mae: 0.7693 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.83912 to 0.64124, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.6089 - mae: 0.6094 - val_loss: 0.6412 - val_mae: 0.6332 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.64124 to 0.52336, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.2902 - mae: 0.7103 - val_loss: 0.5234 - val_mae: 0.5703 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.52336 to 0.48601, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.4094 - mae: 0.5010 - val_loss: 0.4860 - val_mae: 0.5404 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.48601 to 0.44706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.5028 - mae: 0.5348 - val_loss: 0.4471 - val_mae: 0.5281 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.44706 to 0.28884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3832 - mae: 0.4809 - val_loss: 0.2888 - val_mae: 0.4216 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.28884\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3498 - mae: 0.4593 - val_loss: 0.6188 - val_mae: 0.6248 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.28884\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.8743 - mae: 0.5517 - val_loss: 0.5618 - val_mae: 0.5778 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.28884\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3353 - mae: 0.4520 - val_loss: 0.3278 - val_mae: 0.4555 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.28884\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3569 - mae: 0.4577 - val_loss: 0.3283 - val_mae: 0.4539 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.28884\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.7172 - mae: 0.5474 - val_loss: 0.5174 - val_mae: 0.5793 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.28884\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3065 - mae: 0.4343 - val_loss: 0.4142 - val_mae: 0.5055 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.28884 to 0.23690, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3194 - mae: 0.4389 - val_loss: 0.2369 - val_mae: 0.3771 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.23690\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3263 - mae: 0.4354 - val_loss: 0.2742 - val_mae: 0.4122 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.23690\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.2920 - mae: 0.4184 - val_loss: 0.4759 - val_mae: 0.5402 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.23690 to 0.18327, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.5089 - mae: 0.4693 - val_loss: 0.1833 - val_mae: 0.3358 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.6609 - mae: 0.5025 - val_loss: 0.4295 - val_mae: 0.5133 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.2931 - mae: 0.4244 - val_loss: 0.8909 - val_mae: 0.7314 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.0344 - mae: 0.6108 - val_loss: 2.4223 - val_mae: 0.6444 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3021 - mae: 0.4300 - val_loss: 0.4003 - val_mae: 0.5133 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 1.3484 - mae: 0.6936 - val_loss: 0.6524 - val_mae: 0.5363 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3454 - mae: 0.4585 - val_loss: 0.3596 - val_mae: 0.4375 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.3030 - mae: 0.4277 - val_loss: 0.3164 - val_mae: 0.3288 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2934 - mae: 0.4198 - val_loss: 0.1845 - val_mae: 0.3392 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.18327\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.2607 - mae: 0.3970 - val_loss: 0.2670 - val_mae: 0.3982 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2660 - mae: 0.3983 - val_loss: 0.3327 - val_mae: 0.4541 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2877 - mae: 0.4158 - val_loss: 0.4128 - val_mae: 0.4914 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3178 - mae: 0.4344 - val_loss: 1.8125 - val_mae: 0.4042 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2751 - mae: 0.4073 - val_loss: 0.2194 - val_mae: 0.3588 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.7373 - mae: 0.5469 - val_loss: 0.2356 - val_mae: 0.3827 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2967 - mae: 0.4194 - val_loss: 0.7475 - val_mae: 0.6766 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.7908 - mae: 0.5413 - val_loss: 1.1797 - val_mae: 0.8402 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.3515 - mae: 0.4605 - val_loss: 0.4223 - val_mae: 0.4257 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.18327\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.2975 - mae: 0.4245 - val_loss: 1.0207 - val_mae: 0.7401 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.9063 - mae: 0.5917 - val_loss: 0.3833 - val_mae: 0.4670 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.18327\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.2928 - mae: 0.4209 - val_loss: 0.2678 - val_mae: 0.3953 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.18327 to 0.05480, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0551 - mae: 0.1834 - val_loss: 0.0548 - val_mae: 0.1833 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.05480 to 0.04689, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0411 - mae: 0.1593 - val_loss: 0.0469 - val_mae: 0.1539 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.04689 to 0.04138, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0347 - mae: 0.1466 - val_loss: 0.0414 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.04138 to 0.04049, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0312 - mae: 0.1391 - val_loss: 0.0405 - val_mae: 0.1453 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.04049 to 0.03262, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0288 - mae: 0.1337 - val_loss: 0.0326 - val_mae: 0.1395 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.03262 to 0.03105, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0266 - mae: 0.1285 - val_loss: 0.0310 - val_mae: 0.1374 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.03105 to 0.02827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0255 - mae: 0.1260 - val_loss: 0.0283 - val_mae: 0.1283 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.02827\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0241 - mae: 0.1228 - val_loss: 0.0349 - val_mae: 0.1386 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.02827\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0228 - mae: 0.1192 - val_loss: 0.0285 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.02827 to 0.02500, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0224 - mae: 0.1180 - val_loss: 0.0250 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.02500\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0215 - mae: 0.1156 - val_loss: 0.0284 - val_mae: 0.1328 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.02500\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0208 - mae: 0.1138 - val_loss: 0.0281 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.02500 to 0.02435, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0204 - mae: 0.1126 - val_loss: 0.0244 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.02435\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0198 - mae: 0.1110 - val_loss: 0.0261 - val_mae: 0.1220 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.02435\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0193 - mae: 0.1097 - val_loss: 0.0512 - val_mae: 0.1294 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.02435\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0186 - mae: 0.1074 - val_loss: 0.0277 - val_mae: 0.1258 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.02435 to 0.02423, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0185 - mae: 0.1071 - val_loss: 0.0242 - val_mae: 0.1198 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.02423\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0181 - mae: 0.1063 - val_loss: 0.0270 - val_mae: 0.1274 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.02423\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0176 - mae: 0.1048 - val_loss: 0.0273 - val_mae: 0.1299 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.02423 to 0.02297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0175 - mae: 0.1046 - val_loss: 0.0230 - val_mae: 0.1177 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.02297\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0170 - mae: 0.1030 - val_loss: 0.0248 - val_mae: 0.1228 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.02297\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0167 - mae: 0.1019 - val_loss: 0.0254 - val_mae: 0.1169 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.02297 to 0.02083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0166 - mae: 0.1016 - val_loss: 0.0208 - val_mae: 0.1125 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.02083\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0164 - mae: 0.1008 - val_loss: 0.0293 - val_mae: 0.1312 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.02083\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0162 - mae: 0.1005 - val_loss: 0.0233 - val_mae: 0.1191 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.02083\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0160 - mae: 0.0998 - val_loss: 0.0281 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.02083\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0158 - mae: 0.0992 - val_loss: 0.0237 - val_mae: 0.1179 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.02083 to 0.01934, saving model to models/best_model_full.keras\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0159 - mae: 0.0995 - val_loss: 0.0193 - val_mae: 0.1092 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0156 - mae: 0.0984 - val_loss: 0.0211 - val_mae: 0.1117 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.01934\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0155 - mae: 0.0984 - val_loss: 0.0248 - val_mae: 0.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0152 - mae: 0.0976 - val_loss: 0.0258 - val_mae: 0.1260 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.01934\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0152 - mae: 0.0971 - val_loss: 0.0210 - val_mae: 0.1134 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.01934\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0152 - mae: 0.0970 - val_loss: 0.0199 - val_mae: 0.1105 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0148 - mae: 0.0960 - val_loss: 0.0202 - val_mae: 0.1115 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.01934\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0147 - mae: 0.0955 - val_loss: 0.0235 - val_mae: 0.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0151 - mae: 0.0966 - val_loss: 0.0259 - val_mae: 0.1256 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0146 - mae: 0.0953 - val_loss: 0.0314 - val_mae: 0.1141 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0146 - mae: 0.0951 - val_loss: 0.0321 - val_mae: 0.1161 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0146 - mae: 0.0952 - val_loss: 0.0464 - val_mae: 0.1081 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.01934\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0143 - mae: 0.0942 - val_loss: 0.0197 - val_mae: 0.1076 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0146 - mae: 0.0951 - val_loss: 0.0216 - val_mae: 0.1155 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.01934\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0144 - mae: 0.0943 - val_loss: 0.0248 - val_mae: 0.1115 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0144 - mae: 0.0944 - val_loss: 0.0267 - val_mae: 0.1226 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0146 - mae: 0.0950 - val_loss: 0.0216 - val_mae: 0.1105 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0145 - mae: 0.0944 - val_loss: 0.0196 - val_mae: 0.1082 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.01934\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0144 - mae: 0.0945 - val_loss: 0.0197 - val_mae: 0.1080 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.01934\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0146 - mae: 0.0949 - val_loss: 0.0219 - val_mae: 0.1130 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.01934\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0144 - mae: 0.0941 - val_loss: 0.0266 - val_mae: 0.1279 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.01934 to 0.01209, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0121 - val_mae: 0.0835 - learning_rate: 1.0000e-04\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.01209\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0047 - mae: 0.0543 - val_loss: 0.0123 - val_mae: 0.0835 - learning_rate: 1.0000e-04\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.01209 to 0.01189, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0044 - mae: 0.0527 - val_loss: 0.0119 - val_mae: 0.0828 - learning_rate: 1.0000e-04\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.01189 to 0.01177, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0042 - mae: 0.0516 - val_loss: 0.0118 - val_mae: 0.0820 - learning_rate: 1.0000e-04\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.01177 to 0.01161, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0116 - val_mae: 0.0817 - learning_rate: 1.0000e-04\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.01161\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0040 - mae: 0.0499 - val_loss: 0.0120 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.01161\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0039 - mae: 0.0493 - val_loss: 0.0118 - val_mae: 0.0823 - learning_rate: 1.0000e-04\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.01161\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0038 - mae: 0.0487 - val_loss: 0.0116 - val_mae: 0.0820 - learning_rate: 1.0000e-04\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.01161 to 0.01155, saving model to models/best_model_full.keras\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0037 - mae: 0.0482 - val_loss: 0.0115 - val_mae: 0.0814 - learning_rate: 1.0000e-04\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.01155\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0036 - mae: 0.0476 - val_loss: 0.0117 - val_mae: 0.0823 - learning_rate: 1.0000e-04\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0035 - mae: 0.0472 - val_loss: 0.0122 - val_mae: 0.0824 - learning_rate: 1.0000e-04\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0035 - mae: 0.0467 - val_loss: 0.0118 - val_mae: 0.0815 - learning_rate: 1.0000e-04\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0120 - val_mae: 0.0818 - learning_rate: 1.0000e-04\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0033 - mae: 0.0458 - val_loss: 0.0122 - val_mae: 0.0821 - learning_rate: 1.0000e-04\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.01155\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0121 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0032 - mae: 0.0451 - val_loss: 0.0123 - val_mae: 0.0821 - learning_rate: 1.0000e-04\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0032 - mae: 0.0447 - val_loss: 0.0124 - val_mae: 0.0826 - learning_rate: 1.0000e-04\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0120 - val_mae: 0.0819 - learning_rate: 1.0000e-04\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0123 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.01155\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0122 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.01155\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0125 - val_mae: 0.0822 - learning_rate: 1.0000e-04\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.01155\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0029 - mae: 0.0431 - val_loss: 0.0125 - val_mae: 0.0824 - learning_rate: 1.0000e-04\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.01155\n",
      "4375/4375 - 72s - 16ms/step - loss: 0.0029 - mae: 0.0428 - val_loss: 0.0124 - val_mae: 0.0819 - learning_rate: 1.0000e-04\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.01155\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0125 - val_mae: 0.0821 - learning_rate: 1.0000e-04\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0028 - mae: 0.0422 - val_loss: 0.0125 - val_mae: 0.0820 - learning_rate: 1.0000e-04\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.01155\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0023 - mae: 0.0380 - val_loss: 0.0121 - val_mae: 0.0808 - learning_rate: 1.0000e-05\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0376 - val_loss: 0.0123 - val_mae: 0.0809 - learning_rate: 1.0000e-05\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0374 - val_loss: 0.0124 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0372 - val_loss: 0.0120 - val_mae: 0.0808 - learning_rate: 1.0000e-05\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0371 - val_loss: 0.0123 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0370 - val_loss: 0.0120 - val_mae: 0.0807 - learning_rate: 1.0000e-05\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0121 - val_mae: 0.0808 - learning_rate: 1.0000e-05\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0369 - val_loss: 0.0121 - val_mae: 0.0808 - learning_rate: 1.0000e-05\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.01155\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0022 - mae: 0.0368 - val_loss: 0.0124 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.01155 to 0.01147, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0021 - mae: 0.0367 - val_loss: 0.0115 - val_mae: 0.0805 - learning_rate: 1.0000e-05\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0121 - val_mae: 0.0809 - learning_rate: 1.0000e-05\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0123 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.01147\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0021 - mae: 0.0365 - val_loss: 0.0122 - val_mae: 0.0809 - learning_rate: 1.0000e-05\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0121 - val_mae: 0.0807 - learning_rate: 1.0000e-05\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0364 - val_loss: 0.0123 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0363 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-05\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0363 - val_loss: 0.0123 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0362 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-05\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01147\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0021 - mae: 0.0362 - val_loss: 0.0124 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0119 - val_mae: 0.0807 - learning_rate: 1.0000e-05\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01147\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0021 - mae: 0.0361 - val_loss: 0.0119 - val_mae: 0.0808 - learning_rate: 1.0000e-05\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01147\n",
      "4375/4375 - 71s - 16ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0125 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0122 - val_mae: 0.0809 - learning_rate: 1.0000e-05\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01147\n",
      "4375/4375 - 72s - 17ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0124 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0359 - val_loss: 0.0116 - val_mae: 0.0807 - learning_rate: 1.0000e-05\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0021 - mae: 0.0359 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-05\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0021 - mae: 0.0358 - val_loss: 0.0126 - val_mae: 0.0811 - learning_rate: 1.0000e-05\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01147\n",
      "4375/4375 - 73s - 17ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0122 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0124 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0357 - val_loss: 0.0125 - val_mae: 0.0810 - learning_rate: 1.0000e-05\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0352 - val_loss: 0.0121 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0352 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0352 - val_loss: 0.0126 - val_mae: 0.0810 - learning_rate: 1.0000e-06\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0123 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0125 - val_mae: 0.0810 - learning_rate: 1.0000e-06\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0123 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0122 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01147\n",
      "4375/4375 - 74s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0125 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0125 - val_mae: 0.0810 - learning_rate: 1.0000e-06\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0122 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0122 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0125 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0122 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0123 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0121 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0123 - val_mae: 0.0809 - learning_rate: 1.0000e-06\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0122 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01147\n",
      "4375/4375 - 77s - 17ms/step - loss: 0.0020 - mae: 0.0351 - val_loss: 0.0121 - val_mae: 0.0808 - learning_rate: 1.0000e-06\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-07\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0124 - val_mae: 0.0809 - learning_rate: 1.0000e-07\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0126 - val_mae: 0.0810 - learning_rate: 1.0000e-07\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0126 - val_mae: 0.0810 - learning_rate: 1.0000e-07\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0126 - val_mae: 0.0810 - learning_rate: 1.0000e-07\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0121 - val_mae: 0.0808 - learning_rate: 1.0000e-07\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0123 - val_mae: 0.0809 - learning_rate: 1.0000e-07\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0123 - val_mae: 0.0808 - learning_rate: 1.0000e-07\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01147\n",
      "4375/4375 - 75s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0125 - val_mae: 0.0809 - learning_rate: 1.0000e-07\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01147\n",
      "4375/4375 - 76s - 17ms/step - loss: 0.0020 - mae: 0.0350 - val_loss: 0.0122 - val_mae: 0.0809 - learning_rate: 1.0000e-07\n",
      "Epoch 174: early stopping\n",
      "Restoring model weights from the end of the best epoch: 124.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 5s - 8ms/step\n",
      "Mean positioning error: 0.1270 m\n",
      "Median positioning error: 0.1140 m\n",
      "90th percentile error: 0.2228 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACDA0lEQVR4nOzdd3hUZdrH8d+ZmfRKTZHQe5VuxIKCAioioCiioKCuCLiIheV1VdRVUHftiGURdAVRVBALIiCg0gVRkCIgnYSeTtrMef+YZMiQSYBkkgnJ93PtXMmc88yZe86OcHOf+zyPYZqmKQAAAAAAAKAcWXwdAAAAAAAAAKoeilIAAAAAAAAodxSlAAAAAAAAUO4oSgEAAAAAAKDcUZQCAAAAAABAuaMoBQAAAAAAgHJHUQoAAAAAAADljqIUAAAAAAAAyh1FKQAAAAAAAJQ7ilIAKiXDMDRx4sTzft2ePXtkGIZmzJjh9ZgAAAAqEvIlAL5GUQpAmZkxY4YMw5BhGPr5558L7TdNU3FxcTIMQzfccIMPIiy5ZcuWyTAMffbZZ74OBQAAXMCqQr5kGIY++ugjj2O6desmwzDUunVrj/vtdrtiY2NlGIYWLFjgcczEiRNd7+PpkZiY6LXPBMC7bL4OAEDlFxgYqFmzZumyyy5z2758+XIdOHBAAQEBPooMAACgYqjM+VL+Z7vjjjvctu/Zs0crV65UYGBgka/94YcflJCQoPr162vmzJnq06dPkWOnTp2q0NDQQtsjIyNLHDuAskVRCkCZu+666zRnzhy9/vrrstlO/7Eza9YsdezYUceOHfNhdAAAAL5XmfOl6667TvPnz9exY8dUs2ZN1/ZZs2YpKipKTZo00cmTJz2+9qOPPlKHDh00bNgw/d///Z/S09MVEhLicezNN9/sdnwAFR+37wEoc4MHD9bx48e1aNEi17bs7Gx99tlnuv322z2+Jj09XQ8//LDi4uIUEBCgZs2a6d///rdM03Qbl5WVpYceeki1atVSWFiYbrzxRh04cMDjMQ8ePKjhw4crKipKAQEBatWqld5//33vfVAP/vrrL91yyy2qXr26goODdckll+ibb74pNO6NN95Qq1atFBwcrGrVqqlTp06aNWuWa39qaqrGjh2r+vXrKyAgQLVr19Y111yjDRs2lGn8AACgfFTmfKlfv34KCAjQnDlz3LbPmjVLgwYNktVq9fi6U6dOae7cubrttts0aNAgnTp1Sl9++WWpYgFQsVCUAlDm6tevr/j4eH388ceubQsWLFBycrJuu+22QuNN09SNN96oV155Rb1799bLL7+sZs2a6dFHH9W4cePcxt5zzz169dVXde2112ry5Mny8/PT9ddfX+iYhw8f1iWXXKLFixdr9OjReu2119S4cWONGDFCr776qtc/c/57XnrppVq4cKEeeOABPffcc8rMzNSNN96ouXPnusa99957evDBB9WyZUu9+uqrevrpp3XxxRdrzZo1rjH333+/pk6dqoEDB+qtt97SI488oqCgIG3durVMYgcAAOWrMudLwcHB6tevn9tn++233/THH38UWXCTpPnz5ystLU233XaboqOj1b17d82cObPI8SdOnNCxY8fcHklJSSWOG0A5MAGgjEyfPt2UZK5bt8588803zbCwMDMjI8M0TdO85ZZbzKuuuso0TdOsV6+eef3117teN2/ePFOS+a9//cvteDfffLNpGIa5c+dO0zRNc+PGjaYk84EHHnAbd/vtt5uSzKeeesq1bcSIEWZMTIx57Ngxt7G33XabGRER4Ypr9+7dpiRz+vTpxX62pUuXmpLMOXPmFDlm7NixpiTzp59+cm1LTU01GzRoYNavX9+02+2maZpmv379zFatWhX7fhEREeaoUaOKHQMAAC48VSVf+vrrr03DMMx9+/aZpmmajz76qNmwYUPTNE3zyiuv9JgL3XDDDWa3bt1cz999913TZrOZR44ccRv31FNPmZI8Ppo1a1ZsjAB8i04pAOUiv+X666+/Vmpqqr7++usir4x9++23slqtevDBB922P/zwwzJN07XyyrfffitJhcaNHTvW7blpmvr888/Vt29fmabpdvWsV69eSk5OLpPb4L799lt16dLFbcLS0NBQ3XfffdqzZ4+2bNkiyTn55oEDB7Ru3boijxUZGak1a9bo0KFDXo8TAABUDJU5X7r22mtVvXp1zZ49W6Zpavbs2Ro8eHCR448fP66FCxe6jRk4cKAMw9Cnn37q8TWff/65Fi1a5PaYPn16iWMGUPaY6BxAuahVq5Z69uypWbNmKSMjQ3a7XTfffLPHsXv37lVsbKzCwsLctrdo0cK1P/+nxWJRo0aN3MY1a9bM7fnRo0eVlJSkd999V++++67H9zxy5EiJPldx9u7dq65duxbaXvBztG7dWuPHj9fixYvVpUsXNW7cWNdee61uv/12devWzfWaF198UcOGDVNcXJw6duyo6667TkOHDlXDhg29HjcAAPCNypwv+fn56ZZbbtGsWbPUpUsX7d+/v9hb9z755BPl5OSoffv22rlzp2t7165dNXPmTI0aNarQa6644gomOgcuMBSlAJSb22+/Xffee68SExPVp0+fclue1+FwSJLuuOMODRs2zOOYtm3blkssnrRo0ULbt2/X119/re+++06ff/653nrrLT355JN6+umnJTmvnF5++eWaO3euvv/+e7300kt64YUX9MUXXxS7NDIAALiwVOZ86fbbb9fbb7+tiRMnql27dmrZsmWRY/Pnjip4ka6gv/76i4tzQCVAUQpAuenfv7/+9re/afXq1frkk0+KHFevXj0tXrxYqampblf/tm3b5tqf/9PhcGjXrl1uV/u2b9/udrz8lWbsdrt69uzpzY9UrHr16hWKRSr8OSQpJCREt956q2699VZlZ2drwIABeu655zRhwgQFBgZKkmJiYvTAAw/ogQce0JEjR9ShQwc999xzFKUAAKhEKnO+dNlll6lu3bpatmyZXnjhhSLH7d69WytXrtTo0aN15ZVXuu1zOBy68847NWvWLP3zn/8skzgBlB/mlAJQbkJDQzV16lRNnDhRffv2LXLcddddJ7vdrjfffNNt+yuvvCLDMFxFmPyfr7/+utu4M1eHsVqtGjhwoD7//HNt3ry50PsdPXq0JB/nrK677jqtXbtWq1atcm1LT0/Xu+++q/r167uuDh4/ftztdf7+/mrZsqVM01ROTo7sdruSk5PdxtSuXVuxsbHKysoqk9gBAIBvVOZ8yTAMvf7663rqqad05513Fjkuv0vqscce08033+z2GDRokK688spiV+EDcOGgUwpAuSqqHbygvn376qqrrtLjjz+uPXv2qF27dvr+++/15ZdfauzYsa45ES6++GINHjxYb731lpKTk3XppZdqyZIlbvMO5Js8ebKWLl2qrl276t5771XLli114sQJbdiwQYsXL9aJEydK9Hk+//xz1xXJMz/nP/7xD3388cfq06ePHnzwQVWvXl0ffPCBdu/erc8//1wWi/O6wLXXXqvo6Gh169ZNUVFR2rp1q958801df/31CgsLU1JSkurUqaObb75Z7dq1U2hoqBYvXqx169bpP//5T4niBgAAFVdly5cK6tevn/r161fsmJkzZ+riiy9WXFycx/033nijxowZow0bNqhDhw6u7Z999plCQ0MLjb/mmmsUFRVVusABlAmKUgAqHIvFovnz5+vJJ5/UJ598ounTp6t+/fp66aWX9PDDD7uNff/991WrVi3NnDlT8+bN09VXX61vvvmmUBITFRWltWvX6plnntEXX3yht956SzVq1FCrVq2KbR8/m9mzZ3vc3r17d1122WVauXKlxo8frzfeeEOZmZlq27atvvrqK11//fWusX/72980c+ZMvfzyy0pLS1OdOnX04IMPulrSg4OD9cADD+j777/XF198IYfDocaNG+utt97SyJEjSxw7AAC4cF1I+dL52LBhg7Zt26YnnniiyDF9+/bVmDFj9NFHH7kVpYrKi5YuXUpRCqigDNM0TV8HAQAAAAAAgKqFOaUAAAAAAABQ7ihKAQAAAAAAoNxRlAIAAAAAAEC5oygFAAAAAACAckdRCgAAAAAAAOWOohQAAAAAAADKnc3XAZQ1h8OhQ4cOKSwsTIZh+DocAABwgTNNU6mpqYqNjZXFUjmu75EvAQAAbzrXfKnSF6UOHTqkuLg4X4cBAAAqmf3796tOnTq+DsMryJcAAEBZOFu+VOmLUmFhYZKcJyI8PNzH0QAAgAtdSkqK4uLiXDlGZUC+BAAAvOlc86VKX5TKb0EPDw8nyQIAAF5TmW5zI18CAABl4Wz5UuWYCAEAAAAAAAAXFIpSAAAAAAAAKHcUpQAAAC5wEydOlGEYbo/mzZv7OiwAAIBiVfo5pQAAlZfdbldOTo6vw0Al4+fnJ6vV6uswzlurVq20ePFi13ObjTQPACA5HA5lZ2f7OgxUMt7Kl3yerRw8eFDjx4/XggULlJGRocaNG2v69Onq1KmTJMk0TT311FN67733lJSUpG7dumnq1Klq0qSJjyMHAPiKaZpKTExUUlKSr0NBJRUZGano6OgLajJzm82m6OhoX4cBAKhAsrOztXv3bjkcDl+HgkrIG/mST4tSJ0+eVLdu3XTVVVdpwYIFqlWrlnbs2KFq1aq5xrz44ot6/fXX9cEHH6hBgwZ64okn1KtXL23ZskWBgYE+jB4A4Cv5BanatWsrODj4giocoGIzTVMZGRk6cuSIJCkmJsbHEZ27HTt2KDY2VoGBgYqPj9ekSZNUt25dX4cFAPAR0zSVkJAgq9WquLg4WSzM3gPv8Ga+5NOi1AsvvKC4uDhNnz7dta1Bgwau303T1Kuvvqp//vOf6tevnyTpww8/VFRUlObNm6fbbrut3GMGAPiW3W53FaRq1Kjh63BQCQUFBUmSjhw5otq1a18Qt/J17dpVM2bMULNmzZSQkKCnn35al19+uTZv3qywsLBC47OyspSVleV6npKSUp7hAgDKQW5urjIyMhQbG6vg4GBfh4NKxlv5kk9LpfPnz1enTp10yy23qHbt2mrfvr3ee+891/7du3crMTFRPXv2dG2LiIhQ165dtWrVKo/HzMrKUkpKitsDAFB55M8hRXKFspT//bpQ5izr06ePbrnlFrVt21a9evXSt99+q6SkJH366acex0+aNEkRERGuR1xcXDlHDAAoa3a7XZLk7+/v40hQWXkjX/JpUeqvv/5yzQ+1cOFCjRw5Ug8++KA++OADSc7bMyQpKirK7XVRUVGufWciyQKAqoFb9lCWLvTvV2RkpJo2baqdO3d63D9hwgQlJye7Hvv37y/nCAEA5eVC/zsNFZc3vls+LUo5HA516NBBzz//vNq3b6/77rtP9957r95+++0SH5MkCwAAVHVpaWnatWtXkXM8BAQEKDw83O0BAABQ3nxalIqJiVHLli3dtrVo0UL79u2TJNcKMocPH3Ybc/jw4SJXlynvJGvo+2vVbfIPWr/3RJm+DwAAntSvX1+vvvrqOY9ftmyZDMNg5cJK5pFHHtHy5cu1Z88erVy5Uv3795fVatXgwYN9HZok6bHPflO3yT/o698P+ToUAEAVRL5Ucfm0KNWtWzdt377dbduff/6pevXqSXJOeh4dHa0lS5a49qekpGjNmjWKj48v11iLciQlUweTTulUNktsAgCKZhhGsY+JEyeW6Ljr1q3Tfffdd87jL730UiUkJCgiIqJE73euSObK14EDBzR48GA1a9ZMgwYNUo0aNbR69WrVqlXL16FJkk6kZ+tg0imlZeb6OhQAQAVWVfOlatWqKTMz023funXrXJ/bk+bNmysgIMDj1Ebdu3f3eP7uv//+MvkcpeHT1fceeughXXrppXr++ec1aNAgrV27Vu+++67effddSc4v5NixY/Wvf/1LTZo0UYMGDfTEE08oNjZWN910ky9Dd7HkfUHspunjSAAAFVlCQoLr908++URPPvmk24WZ0NBQ1++macput8tmO/tf0+dbdPD39y+y2xgXrtmzZ/s6hGJZLc58KddBvgQAKFpVzZfCwsI0d+5ctw7nadOmqW7duq47yQr6+eefderUKd1888364IMPNH78+EJj7r33Xj3zzDNu2yriQkE+7ZTq3Lmz5s6dq48//litW7fWs88+q1dffVVDhgxxjXnsscc0ZswY3XfffercubPS0tL03XffKTAw0IeRn5afZDlIsgAAxYiOjnY9IiIiZBiG6/m2bdsUFhamBQsWqGPHjgoICNDPP/+sXbt2qV+/foqKilJoaKg6d+6sxYsXux33zHZ0wzD03//+V/3791dwcLCaNGmi+fPnu/af2cE0Y8YMRUZGauHChWrRooVCQ0PVu3dvt6QwNzdXDz74oCIjI1WjRg2NHz9ew4YNK9UFopMnT2ro0KGqVq2agoOD1adPH+3YscO1f+/everbt6+qVaumkJAQtWrVSt9++63rtUOGDFGtWrUUFBSkJk2aaPr06SWOBWXPZnGmnHbyJQBAMapqvjRs2DC9//77ruenTp3S7NmzNWzYMI/jp02bpttvv1133nmn2+sKCg4Odjuf0dHRFXIOSZ8WpSTphhtu0KZNm5SZmamtW7fq3nvvddtvGIaeeeYZJSYmKjMzU4sXL1bTpk19FG1hlvyiFJ1SAOAzpmkqIzvXJw/Ti3/+/+Mf/9DkyZO1detWtW3bVmlpabruuuu0ZMkS/frrr+rdu7f69u3r8YpZQU8//bQGDRqk33//Xdddd52GDBmiEyeKnvswIyND//73v/W///1PP/74o/bt26dHHnnEtf+FF17QzJkzNX36dK1YsUIpKSmaN29eqT7rXXfdpV9++UXz58/XqlWrZJqmrrvuOteSwqNGjVJWVpZ+/PFHbdq0SS+88ILr6ugTTzyhLVu2aMGCBdq6daumTp2qmjVrlioelC06pQDA98iX3FWkfOnOO+/UTz/95Ir5888/V/369dWhQ4dCY1NTUzVnzhzdcccduuaaa5ScnKyffvrpnN6nIvLp7XuVQV6OxZU/APChUzl2tXxyoU/ee8szvRTs752/Tp955hldc801rufVq1dXu3btXM+fffZZzZ07V/Pnz9fo0aOLPM5dd93lav9+/vnn9frrr2vt2rXq3bu3x/E5OTl6++231ahRI0nS6NGj3dq933jjDU2YMEH9+/eXJL355puurqWS2LFjh+bPn68VK1bo0ksvlSTNnDlTcXFxmjdvnm655Rbt27dPAwcOVJs2bSRJDRs2dL1+3759at++vTp16iTJefUTFZstL2GyO5iDEwB8hXzJXUXKl2rXrq0+ffpoxowZevLJJ/X+++9r+PDhHsfOnj1bTZo0UatWrSRJt912m6ZNm6bLL7/cbdxbb72l//73v27b3nnnHbc70yoCn3dKXeisBp1SAADvyC+y5EtLS9MjjzyiFi1aKDIyUqGhodq6detZr/y1bdvW9XtISIjCw8N15MiRIscHBwe7EizJuTpu/vjk5GQdPnxYXbp0ce23Wq3q2LHjeX22grZu3SqbzaauXbu6ttWoUUPNmjXT1q1bJUkPPvig/vWvf6lbt2566qmn9Pvvv7vGjhw5UrNnz9bFF1+sxx57TCtXrixxLCgf+Z1SOXbyJQBA6VTWfGn48OGaMWOG/vrrL61atarI4tH777+vO+64w/X8jjvu0Jw5c5Samuo2bsiQIdq4caPb48YbbzzneMoLnVKlZHFd+fNxIABQhQX5WbXlmV4+e29vCQkJcXv+yCOPaNGiRfr3v/+txo0bKygoSDfffLOys7OLPY6fn5/bc8Mw5CimQ8XTeG+22ZfEPffco169eumbb77R999/r0mTJuk///mPxowZoz59+mjv3r369ttvtWjRIvXo0UOjRo3Sv//9b5/GjKLZrPn5EkUpAPAV8iV3FS1f6tOnj+677z6NGDFCffv2VY0aNQqN2bJli1avXq21a9e6TW5ut9s1e/Zst+mQIiIi1LhxY6/FV1bolColK6vvAYDPGYahYH+bTx5FLdPrDStWrNBdd92l/v37q02bNoqOjtaePXvK7P08iYiIUFRUlNatW+faZrfbtWHDhhIfs0WLFsrNzdWaNWtc244fP67t27erZcuWrm1xcXG6//779cUXX+jhhx/We++959pXq1YtDRs2TB999JFeffVV18q9qJiYUwoAfI98qex4I1+y2WwaOnSoli1bVuSte9OmTdMVV1yh3377za0Daty4cZo2bVqpP4cv0ClVSqy+BwAoK02aNNEXX3yhvn37yjAMPfHEE8VewSsrY8aM0aRJk9S4cWM1b95cb7zxhk6ePHlOCeamTZsUFhbmem4Yhtq1a6d+/frp3nvv1TvvvKOw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4UJ9+umn55RkLV68WNu2bdPChQsVG+s8H88//3yheQ3++c9/un6vX7++HnnkEc2ePVuPPfaYgoKCFBoaKpvNpujo6CLfa9asWcrMzNSHH37ounr25ptvqm/fvnrhhRdcyVC1atX05ptvymq1qnnz5rr++uu1ZMmSEhWllixZok2bNmn37t2Ki4uTJH344Ydq1aqV1q1bp86dO2vfvn169NFH1bx5c0lSkyZNXK/ft2+fBg4cqDZt2kiSGjZseN4xoGRsdJYDgO+RL0mqXPlS+/bt1bBhQ3322We68847NWPGDL388sv666+/Co19//331adPH1WrVk2S1KtXL02fPl0TJ050Gzd+/Hi3zy5JCxYs0OWXX15sLCXF7XulZDFIsgAA56Z58+a69NJLXW3WO3fu1E8//aQRI0ZIkux2u5599lm1adNG1atXV2hoqBYuXKh9+/ad0/G3bt2quLg4V4IlSfHx8YXGffLJJ+rWrZuio6MVGhqqf/7zn+f8HgXfq127dm7t3N26dZPD4dD27dtd21q1aiWr1ep6HhMToyNHjpzXexV8z7i4OFdBSpJatmypyMhIbd26VZI0btw43XPPPerZs6cmT56sXbt2ucY++OCD+te//qVu3brpqaeeKtFEqSgZKxOdAwDOEfnS+eVLw4cP1/Tp07V8+XKlp6fruuuuKzTGbrfrgw8+0B133OHadscdd2jGjBlynNHF/Oijj2rjxo1uj06dOp3zZz5fdEqVEqvvAUAF4BfsvALnq/c+DyNGjNCYMWM0ZcoUTZ8+XY0aNdKVV14pSXrppZf02muv6dVXX1WbNm0UEhKisWPHKjs722vhrlq1SkOGDNHTTz+tXr16KSIiQrNnz9Z//vMfr71HQfm3zuUzDKNQ8uNNEydO1O23365vvvlGCxYs0FNPPaXZs2erf//+uueee9SrVy998803+v777zVp0iT95z//KdPJO+FkszCnFAD4HPnSObuQ8qUhQ4boscce08SJE3XnnXfKZitc5lm4cKEOHjyoW2+91W273W7XkiVLdM0117i21axZU40bNy7BpygZOqVKidX3AKACMAxnS7gvHucwP0JBgwYNksVi0axZs/Thhx9q+PDhrvkSVqxYoX79+umOO+5Qu3bt1LBhQ/3555/nfOwWLVpo//79SkhIcG1bvXq125iVK1eqXr16evzxx9WpUyc1adJEe/fudRvj7+8vu91+1vf67bfflJ6e7tq2YsUKWSwWNWvW7JxjPh/5n2///v2ubVu2bFFSUpJatmzp2ta0aVM99NBD+v777zVgwABNnz7dtS8uLk7333+/vvjiCz388MN67733yiRWuKNTCgAqAPIlSZUvX6pevbpuvPFGLV++XMOHD/c4Ztq0abrtttsKdUDddtttRU54Xl4oSpUSq+8BAM5HaGiobr31Vk2YMEEJCQm66667XPuaNGmiRYsWaeXKldq6dav+9re/ua0sdzY9e/ZU06ZNNWzYMP3222/66aef9Pjjj7uNadKkifbt26fZs2dr165dev311zV37ly3MfXr19fu3bu1ceNGHTt2TFlZWYXea8iQIQoMDNSwYcO0efNmLV26VGPGjNGdd97pcXLN82G32wslTVu3blXPnj3Vpk0bDRkyRBs2bNDatWs1dOhQXXnllerUqZNOnTql0aNHa9myZdq7d69WrFihdevWqUWLFpKksWPHauHChdq9e7c2bNigpUuXuvahbNms5EsAgHNHvnR+ZsyYoWPHjrnm1Czo6NGj+uqrrzRs2DC1bt3a7TF06FDNmzdPJ06ccI1PTU1VYmKi2yMlJcVrsZ6JolQp0SkFADhfI0aM0MmTJ9WrVy+3+Qz++c9/qkOHDurVq5e6d++u6Oho3XTTTed8XIvForlz5+rUqVPq0qWL7rnnHj333HNuY2688UY99NBDGj16tC6++GKtXLlSTzzxhNuYgQMHqnfv3rrqqqtUq1Ytj8ssBwcHa+HChTpx4oQ6d+6sm2++WT169NCbb755fifDg7S0NLVv397t0bdvXxmGoS+//FLVqlXTFVdcoZ49e6phw4b65JNPJElWq1XHjx/X0KFD1bRpUw0aNEh9+vTR008/LclZ7Bo1apRatGih3r17q2nTpnrrrbdKHS/OjtX3AADni3zp3AUFBalGjRoe9+VPst6jR49C+3r06KGgoCB99NFHrm1PPvmkYmJi3B6PPfaYV+MtyDDNyl1NSUlJUUREhJKTkxUeHu71409ZulMvLdyuQZ3q6MWb23n9+AAAd5mZmdq9e7caNGigwMBAX4eDSqq471lZ5xa+UNaf6fcDSbrxzRWKjQjUygmFk2IAgPeRM6GseSNfolOqlCyuTikfBwIAAFBBMacUAADwhKJUKeWvvucg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BQAAUIz8ic5zuZIHAABEUcorXLfvMacUAABAkazMKQUAAAooUVFq//79OnDggOv52rVrNXbsWL377rteC+xCwup7AADgfKxdu1Z2u73I/VlZWfr000/LMaLyYWNOKQAAUECJilK33367li5dKklKTEzUNddco7Vr1+rxxx/XM88849UALwT5q+/RKQUAAM5FfHy8jh8/7noeHh6uv/76y/U8KSlJgwcP9kVoZcpq5UIeAAA4rURFqc2bN6tLly6SpE8//VStW7fWypUrNXPmTM2YMcOb8V0Q6JQCAADnwzzjQtaZz4vadqGjUwoAABRUoqJUTk6OAgICJEmLFy/WjTfeKElq3ry5EhISvBfdBcLK6nsAAMDLjLz8ojKxuiY6Z/U9AABQwqJUq1at9Pbbb+unn37SokWL1Lt3b0nSoUOHVKNGDa8GeCFwTXTOVT8AAIAi0SkFAAAKspXkRS+88IL69++vl156ScOGDVO7du0kSfPnz3fd1leV5F/I5PY9AABwrrZs2aLExERJzlv1tm3bprS0NEnSsWPHfBlamWH1PQAAUFCJilLdu3fXsWPHlJKSomrVqrm233fffQoODj7n40ydOlVTp07Vnj17JDk7sJ588kn16dNHkpSZmamHH35Ys2fPVlZWlnr16qW33npLUVFRJQm7zLg6pSrh3A8AAKBs9OjRw23eqBtuuEGS87Y90zQr5e17dEoBAICCSlSUOnXqlEzTdBWk9u7dq7lz56pFixbq1avXOR+nTp06mjx5spo0aSLTNPXBBx+oX79++vXXX9WqVSs99NBD+uabbzRnzhxFRERo9OjRGjBggFasWFGSsMsMq+8BAIDzsXv3bl+H4BNW1+IwzCkFAABKWJTq16+fBgwYoPvvv19JSUnq2rWr/Pz8dOzYMb388ssaOXLkOR2nb9++bs+fe+45TZ06VatXr1adOnU0bdo0zZo1S1dffbUkafr06WrRooVWr16tSy65pCShlwlW3wMAAOejXr16Zx2zefPmcoikfNEpBQAACirRROcbNmzQ5ZdfLkn67LPPFBUVpb179+rDDz/U66+/XqJA7Ha7Zs+erfT0dMXHx2v9+vXKyclRz549XWOaN2+uunXratWqVUUeJysrSykpKW6PssbqewAAwBtSU1P17rvvqkuXLq45OysTqzUvZyJpAgAAKmFRKiMjQ2Fh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c5njJ554woyKijIDAgLMHj16FDpnx48fNwcPHmyGhoaa4eHh5t13322mpqb64NN4T3HnZffu3UX+mbN06VLTNE1z/fr1ZteuXc2IiAgzMDDQbNGihfn888+7JRsXouLOS0ZGhnnttdeatWrVMv38/Mx69eqZ9957b6F/8FfG74tpnv2/JdM0zXfeeccMCgoyk5KSCr2+sn5nKhryJfIlT8iXikfORL5UFPIlz8iXilaR8yXDNE2zpF1WAAAAAAAAQEkwpxQAAAAAAADKHUUpAAAAAAAAlDuKUgAAAAAAACh3FKUAAAAAAABQ7ihKAQAAAAAAoNxRlAIAAAAAAEC5oygFAAAAAACAckdRCgAAAAAAAOWOohQAlJJhGJo3b56vwwAAAKiwyJcAeEJRCsAF7a677pJhGIUevXv39nVoAAAAFQL5EoCKyubrAACgtHr37q3p06e7bQsICPBRNAAAABUP+RKAiohOKQAXvICAAEVHR7s9qlWrJsnZKj516lT16dNHQUFBatiwoT777DO312/atElXX321goKCVKNGDd13331KS0tzG/P++++rVatWCggIUExMjEaPHu22/9ixY+rfv7+Cg4PVpEkTzZ8/v2w/NAAAwHkgXwJQEVGUAlDpPfHEExo4cKB+++03DRkyRLfddpu2bt0qSUpPT1evXr1UrVo1rVu3TnPmzNHixYvdkqipU6dq1KhRuu+++7Rp0ybNnz9fjRs3dnuPp59+WoMGDdLvv/+u6667TkOGDNGJEyfK9XMCAACUFPkSAJ8wAeACNmzYMNNqtZohISFuj+eee840TdOUZN5///1ur+natas5cuRI0zRN89133zWrVatmpqWlufZ/8803psViMRMTE03TNM3Y2Fjz8ccfLzIGSeY///lP1/O0tDRTkrlgwQKvfU4AAICSIl8CUFExpxSAC95VV12lqVOnum2rXr266/f4+Hi3ffHx8dq4caMkaevWrWrXrp1CQkJc+7t16yaHw6Ht27fLMAwdOnRIPXr0KDaGtm3bun4PCQlReHi4jhw5UtKPBAAA4FXkSwAqIopSAC54ISEhhdrDvSUoKOicxvn5+bk9NwxDDoejLEICAAA4b+RLACoi5pQCUOmtXr260PMWLVpIklq0aKHffvtN6enprv0rVqyQxWJRs2bNFBYWpvr162vJkiXlGjMAAEB5Il8C4At0SgG44GVlZSkxMdFtm81mU82aNSVJc+bMUadOnXTZZZdp5syZWrt2raZNmyZJGjJkiJ566ikNGzZMEydO1NGjRzVmzBjdeeedioqKkiRNnDhR999/v2rXrq0+ffooNTVVK1as0JgxY8r3gwIAAJQQ+RKAioiiFIAL3nfffaeYmBi3bc2aNdO2bdskOVd6mT17th544AHFxMTo448/VsuWLSVJwcHBWrhwof7+97+rc+fOCg4O/v927uAGQhCKouinBwsz0b1NWIeUQnvumN00MJmni3MKILD7uQFq27a6ruu71nEcdd939d7rPM9alqX2fc8dEADgR+Yl4I3anHM+vQmAf2mt1Rij1nV9eisAAK9kXgKe4k8pAAAAAOJEKQAAAADiPN8DAAAAIM5NKQAAAADiRCkAAAAA4kQpAAAAAOJEKQAAAADiRCkAAAAA4kQpAAAAAOJEKQAAAADiRCkAAAAA4kQpAAAAAOI+BqaLN/ABEIQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12854.151124,
   "end_time": "2025-08-08T17:16:52.002125",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-08T13:42:37.851001",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
