{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "25fcd8d5",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-08T07:07:57.559172Z",
     "iopub.status.busy": "2025-08-08T07:07:57.558919Z",
     "iopub.status.idle": "2025-08-08T07:07:59.068370Z",
     "shell.execute_reply": "2025-08-08T07:07:59.067581Z"
    },
    "papermill": {
     "duration": 1.514559,
     "end_time": "2025-08-08T07:07:59.069872",
     "exception": false,
     "start_time": "2025-08-08T07:07:57.555313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23ecfa12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T07:07:59.077576Z",
     "iopub.status.busy": "2025-08-08T07:07:59.077279Z",
     "iopub.status.idle": "2025-08-08T07:08:13.442574Z",
     "shell.execute_reply": "2025-08-08T07:08:13.441937Z"
    },
    "papermill": {
     "duration": 14.370387,
     "end_time": "2025-08-08T07:08:13.443995",
     "exception": false,
     "start_time": "2025-08-08T07:07:59.073608",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-08 07:08:00.659739: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754636880.846361      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754636880.898346      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1cb6ed2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T07:08:13.449699Z",
     "iopub.status.busy": "2025-08-08T07:08:13.448755Z",
     "iopub.status.idle": "2025-08-08T07:08:13.453135Z",
     "shell.execute_reply": "2025-08-08T07:08:13.452612Z"
    },
    "papermill": {
     "duration": 0.008222,
     "end_time": "2025-08-08T07:08:13.454486",
     "exception": false,
     "start_time": "2025-08-08T07:08:13.446264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 13  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cf4b33ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T07:08:13.459457Z",
     "iopub.status.busy": "2025-08-08T07:08:13.458994Z",
     "iopub.status.idle": "2025-08-08T07:08:13.462058Z",
     "shell.execute_reply": "2025-08-08T07:08:13.461453Z"
    },
    "papermill": {
     "duration": 0.006519,
     "end_time": "2025-08-08T07:08:13.463097",
     "exception": false,
     "start_time": "2025-08-08T07:08:13.456578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bf9c5ce9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T07:08:13.468073Z",
     "iopub.status.busy": "2025-08-08T07:08:13.467857Z",
     "iopub.status.idle": "2025-08-08T09:22:01.650153Z",
     "shell.execute_reply": "2025-08-08T09:22:01.649506Z"
    },
    "papermill": {
     "duration": 8028.186555,
     "end_time": "2025-08-08T09:22:01.651465",
     "exception": false,
     "start_time": "2025-08-08T07:08:13.464910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754636917.807009      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754636927.115127      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">120,064</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,464</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m120,064\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,464\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">711,178</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m711,178\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">710,662</span> (2.71 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m710,662\u001b[0m (2.71 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754636937.809451      56 service.cc:148] XLA service 0x7ae360005b20 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754636937.810326      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754636941.609551      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 58.33360, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 222.9820 - mae: 11.3219 - val_loss: 58.3336 - val_mae: 5.9230 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 58.33360 to 10.63509, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 29.2712 - mae: 4.0327 - val_loss: 10.6351 - val_mae: 2.4886 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 10.63509 to 4.86056, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 7.6127 - mae: 2.0884 - val_loss: 4.8606 - val_mae: 1.7034 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 4.86056\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.8572 - mae: 1.5734 - val_loss: 5.7540 - val_mae: 1.8274 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 4.86056 to 1.04114, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2490 - mae: 1.1075 - val_loss: 1.0411 - val_mae: 0.7904 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.04114\n",
      "4375/4375 - 36s - 8ms/step - loss: 3.1697 - mae: 1.2137 - val_loss: 3.2544 - val_mae: 1.4526 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 1.04114\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.8498 - mae: 1.3895 - val_loss: 6.7998 - val_mae: 1.9308 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.04114\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1491 - mae: 1.3117 - val_loss: 2.3687 - val_mae: 1.1747 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 1.04114\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8217 - mae: 1.2323 - val_loss: 1.1478 - val_mae: 0.8329 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 1.04114 to 0.88071, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2062 - mae: 1.0251 - val_loss: 0.8807 - val_mae: 0.7282 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.88071 to 0.61807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9522 - mae: 0.6997 - val_loss: 0.6181 - val_mae: 0.6046 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.61807\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.4844 - mae: 0.7615 - val_loss: 3.7466 - val_mae: 1.4018 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.61807\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5720 - mae: 0.7770 - val_loss: 16.3435 - val_mae: 2.8314 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.61807 to 0.51129, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0192 - mae: 0.7092 - val_loss: 0.5113 - val_mae: 0.5698 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.51129 to 0.30041, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6633 - mae: 0.5645 - val_loss: 0.3004 - val_mae: 0.4307 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4976 - mae: 0.7911 - val_loss: 0.6006 - val_mae: 0.5951 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6471 - mae: 0.6017 - val_loss: 5.4907 - val_mae: 1.5248 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2087 - mae: 1.0294 - val_loss: 1.0349 - val_mae: 0.7914 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6906 - mae: 0.9219 - val_loss: 1.0198 - val_mae: 0.7615 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7754 - mae: 0.8758 - val_loss: 0.7251 - val_mae: 0.6721 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3513 - mae: 0.9915 - val_loss: 1.3318 - val_mae: 0.8197 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9080 - mae: 0.6511 - val_loss: 1.1101 - val_mae: 0.8109 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.30041\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.9620 - mae: 0.6629 - val_loss: 0.7774 - val_mae: 0.6879 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.30041\n",
      "4375/4375 - 36s - 8ms/step - loss: 1.0931 - mae: 0.6652 - val_loss: 23.5406 - val_mae: 3.1386 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5627 - mae: 0.8618 - val_loss: 1.0396 - val_mae: 0.7763 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5779 - mae: 0.8111 - val_loss: 1.2397 - val_mae: 0.8467 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5536 - mae: 0.8534 - val_loss: 1.1676 - val_mae: 0.7828 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8056 - mae: 0.6581 - val_loss: 0.6720 - val_mae: 0.6350 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.5787 - mae: 1.0039 - val_loss: 0.9255 - val_mae: 0.7342 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8513 - mae: 0.6633 - val_loss: 0.4935 - val_mae: 0.5504 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.30041\n",
      "4375/4375 - 36s - 8ms/step - loss: 2.6133 - mae: 0.9458 - val_loss: 29.4480 - val_mae: 4.1308 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6780 - mae: 0.9881 - val_loss: 4.6119 - val_mae: 1.5979 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5334 - mae: 0.8747 - val_loss: 1.8673 - val_mae: 1.0245 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4945 - mae: 1.0211 - val_loss: 0.7272 - val_mae: 0.6556 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0643 - mae: 0.7702 - val_loss: 0.8769 - val_mae: 0.7139 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.30041\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3997 - mae: 0.4821 - val_loss: 0.4056 - val_mae: 0.4854 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss improved from 0.30041 to 0.27602, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3022 - mae: 0.4191 - val_loss: 0.2760 - val_mae: 0.3998 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss improved from 0.27602 to 0.22146, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2330 - mae: 0.3694 - val_loss: 0.2215 - val_mae: 0.3611 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.22146 to 0.20725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2005 - mae: 0.3436 - val_loss: 0.2072 - val_mae: 0.3491 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.20725 to 0.15729, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1707 - mae: 0.3173 - val_loss: 0.1573 - val_mae: 0.3077 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.15729 to 0.13142, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1327 - mae: 0.2829 - val_loss: 0.1314 - val_mae: 0.2821 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.13142 to 0.11635, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1111 - mae: 0.2598 - val_loss: 0.1163 - val_mae: 0.2648 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.11635 to 0.10537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0991 - mae: 0.2456 - val_loss: 0.1054 - val_mae: 0.2535 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.10537 to 0.09982, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0894 - mae: 0.2335 - val_loss: 0.0998 - val_mae: 0.2470 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.09982 to 0.08919, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0789 - mae: 0.2199 - val_loss: 0.0892 - val_mae: 0.2345 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.08919 to 0.08162, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0705 - mae: 0.2082 - val_loss: 0.0816 - val_mae: 0.2238 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.08162 to 0.07538, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0649 - mae: 0.1997 - val_loss: 0.0754 - val_mae: 0.2130 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.07538 to 0.07172, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0614 - mae: 0.1945 - val_loss: 0.0717 - val_mae: 0.2079 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.07172 to 0.06746, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0572 - mae: 0.1881 - val_loss: 0.0675 - val_mae: 0.1980 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.06746\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0533 - mae: 0.1813 - val_loss: 0.0683 - val_mae: 0.2041 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.06746 to 0.06335, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0511 - mae: 0.1778 - val_loss: 0.0633 - val_mae: 0.1973 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.06335 to 0.05893, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0477 - mae: 0.1720 - val_loss: 0.0589 - val_mae: 0.1911 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.05893 to 0.05152, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0454 - mae: 0.1676 - val_loss: 0.0515 - val_mae: 0.1775 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.05152 to 0.04945, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0420 - mae: 0.1615 - val_loss: 0.0494 - val_mae: 0.1739 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.04945 to 0.04577, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0400 - mae: 0.1577 - val_loss: 0.0458 - val_mae: 0.1673 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.04577 to 0.04158, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0380 - mae: 0.1537 - val_loss: 0.0416 - val_mae: 0.1594 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.04158\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0364 - mae: 0.1503 - val_loss: 0.0459 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.04158\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0359 - mae: 0.1492 - val_loss: 0.0449 - val_mae: 0.1656 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.04158\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0346 - mae: 0.1467 - val_loss: 0.0521 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.04158\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0350 - mae: 0.1475 - val_loss: 0.0443 - val_mae: 0.1657 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.04158 to 0.03904, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0331 - mae: 0.1434 - val_loss: 0.0390 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.03904\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0321 - mae: 0.1413 - val_loss: 0.0401 - val_mae: 0.1563 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.03904\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0314 - mae: 0.1394 - val_loss: 0.0401 - val_mae: 0.1569 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.03904\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0306 - mae: 0.1380 - val_loss: 0.0473 - val_mae: 0.1707 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.03904\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0298 - mae: 0.1361 - val_loss: 0.0414 - val_mae: 0.1585 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.03904 to 0.03539, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0295 - mae: 0.1355 - val_loss: 0.0354 - val_mae: 0.1472 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.03539 to 0.03409, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0283 - mae: 0.1327 - val_loss: 0.0341 - val_mae: 0.1445 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.03409\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0276 - mae: 0.1309 - val_loss: 0.0393 - val_mae: 0.1491 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.03409\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0268 - mae: 0.1291 - val_loss: 0.0373 - val_mae: 0.1439 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.03409\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0262 - mae: 0.1276 - val_loss: 0.0352 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.03409\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0368 - val_mae: 0.1506 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.03409\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0251 - mae: 0.1249 - val_loss: 0.0504 - val_mae: 0.1749 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.03409 to 0.03352, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0249 - mae: 0.1242 - val_loss: 0.0335 - val_mae: 0.1424 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.03352 to 0.03326, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0243 - mae: 0.1229 - val_loss: 0.0333 - val_mae: 0.1431 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.03326 to 0.03067, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0243 - mae: 0.1230 - val_loss: 0.0307 - val_mae: 0.1372 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03067\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1220 - val_loss: 0.0330 - val_mae: 0.1425 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03067\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0238 - mae: 0.1215 - val_loss: 0.0356 - val_mae: 0.1480 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03067\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0238 - mae: 0.1215 - val_loss: 0.0373 - val_mae: 0.1522 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.03067\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0234 - mae: 0.1204 - val_loss: 0.0324 - val_mae: 0.1399 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.03067 to 0.02858, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0233 - mae: 0.1201 - val_loss: 0.0286 - val_mae: 0.1326 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.02858\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0228 - mae: 0.1190 - val_loss: 0.0379 - val_mae: 0.1535 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.02858\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0229 - mae: 0.1194 - val_loss: 0.0316 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.02858\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0232 - mae: 0.1198 - val_loss: 0.0324 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.02858\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0225 - mae: 0.1181 - val_loss: 0.0318 - val_mae: 0.1397 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.02858\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0225 - mae: 0.1180 - val_loss: 0.0305 - val_mae: 0.1356 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.02858 to 0.02845, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0223 - mae: 0.1177 - val_loss: 0.0284 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.02845\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0222 - mae: 0.1173 - val_loss: 0.0321 - val_mae: 0.1391 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.02845 to 0.02757, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0220 - mae: 0.1167 - val_loss: 0.0276 - val_mae: 0.1294 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.02757\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0218 - mae: 0.1162 - val_loss: 0.0308 - val_mae: 0.1369 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.02757\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0217 - mae: 0.1155 - val_loss: 0.0303 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.02757 to 0.02664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0222 - mae: 0.1168 - val_loss: 0.0266 - val_mae: 0.1278 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0214 - mae: 0.1149 - val_loss: 0.0279 - val_mae: 0.1298 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.02664\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0218 - mae: 0.1162 - val_loss: 0.0318 - val_mae: 0.1394 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.02664\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0217 - mae: 0.1158 - val_loss: 0.0293 - val_mae: 0.1342 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0218 - mae: 0.1161 - val_loss: 0.0292 - val_mae: 0.1340 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0215 - mae: 0.1151 - val_loss: 0.0292 - val_mae: 0.1333 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0215 - mae: 0.1152 - val_loss: 0.0309 - val_mae: 0.1378 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0207 - mae: 0.1130 - val_loss: 0.0291 - val_mae: 0.1328 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0209 - mae: 0.1137 - val_loss: 0.0277 - val_mae: 0.1307 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0204 - mae: 0.1124 - val_loss: 0.0312 - val_mae: 0.1374 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0208 - mae: 0.1130 - val_loss: 0.0273 - val_mae: 0.1291 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0203 - mae: 0.1118 - val_loss: 0.0275 - val_mae: 0.1304 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0208 - mae: 0.1133 - val_loss: 0.0315 - val_mae: 0.1403 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0208 - mae: 0.1133 - val_loss: 0.0360 - val_mae: 0.1482 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0206 - mae: 0.1128 - val_loss: 0.0273 - val_mae: 0.1276 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0205 - mae: 0.1124 - val_loss: 0.0272 - val_mae: 0.1292 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0207 - mae: 0.1126 - val_loss: 0.0281 - val_mae: 0.1314 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0207 - mae: 0.1124 - val_loss: 0.0286 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.02664 to 0.02657, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0203 - mae: 0.1117 - val_loss: 0.0266 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.02657 to 0.02603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0202 - mae: 0.1116 - val_loss: 0.0260 - val_mae: 0.1262 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02603\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0203 - mae: 0.1117 - val_loss: 0.0270 - val_mae: 0.1281 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02603\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0202 - mae: 0.1113 - val_loss: 0.0272 - val_mae: 0.1280 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02603\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0203 - mae: 0.1115 - val_loss: 0.0329 - val_mae: 0.1425 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.02603 to 0.02446, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0200 - mae: 0.1107 - val_loss: 0.0245 - val_mae: 0.1220 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02446\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0204 - mae: 0.1116 - val_loss: 0.0256 - val_mae: 0.1256 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0200 - mae: 0.1108 - val_loss: 0.0253 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0203 - mae: 0.1114 - val_loss: 0.0253 - val_mae: 0.1234 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0199 - mae: 0.1106 - val_loss: 0.0277 - val_mae: 0.1292 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0200 - mae: 0.1107 - val_loss: 0.0293 - val_mae: 0.1343 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0198 - mae: 0.1102 - val_loss: 0.0299 - val_mae: 0.1345 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0201 - mae: 0.1110 - val_loss: 0.0250 - val_mae: 0.1240 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0200 - mae: 0.1106 - val_loss: 0.0272 - val_mae: 0.1289 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0199 - mae: 0.1106 - val_loss: 0.0284 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0199 - mae: 0.1101 - val_loss: 0.0292 - val_mae: 0.1320 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02446\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0197 - mae: 0.1096 - val_loss: 0.0249 - val_mae: 0.1232 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02446\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0199 - mae: 0.1103 - val_loss: 0.0262 - val_mae: 0.1268 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02446\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0198 - mae: 0.1099 - val_loss: 0.0369 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02446\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0200 - mae: 0.1107 - val_loss: 0.0263 - val_mae: 0.1248 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.02446\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0200 - mae: 0.1105 - val_loss: 0.0280 - val_mae: 0.1310 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.02446\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0200 - mae: 0.1103 - val_loss: 0.0249 - val_mae: 0.1230 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02446\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0199 - mae: 0.1104 - val_loss: 0.0290 - val_mae: 0.1330 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.02446\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0202 - mae: 0.1109 - val_loss: 0.0280 - val_mae: 0.1300 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02446\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0197 - mae: 0.1098 - val_loss: 0.0280 - val_mae: 0.1310 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02446\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0203 - mae: 0.1112 - val_loss: 0.0258 - val_mae: 0.1257 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.02446 to 0.01304, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0065 - mae: 0.0632 - val_loss: 0.0130 - val_mae: 0.0889 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.01304 to 0.01265, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0051 - mae: 0.0567 - val_loss: 0.0126 - val_mae: 0.0873 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.01265 to 0.01243, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0047 - mae: 0.0541 - val_loss: 0.0124 - val_mae: 0.0867 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01243\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0126 - val_mae: 0.0874 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.01243 to 0.01233, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0042 - mae: 0.0513 - val_loss: 0.0123 - val_mae: 0.0859 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01233\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0040 - mae: 0.0504 - val_loss: 0.0123 - val_mae: 0.0861 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.01233 to 0.01226, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0123 - val_mae: 0.0858 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01226\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0038 - mae: 0.0488 - val_loss: 0.0124 - val_mae: 0.0864 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.01226 to 0.01220, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0037 - mae: 0.0481 - val_loss: 0.0122 - val_mae: 0.0856 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01220\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0036 - mae: 0.0475 - val_loss: 0.0122 - val_mae: 0.0857 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01220\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0123 - val_mae: 0.0859 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.01220 to 0.01219, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0034 - mae: 0.0464 - val_loss: 0.0122 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.01219 to 0.01213, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0034 - mae: 0.0460 - val_loss: 0.0121 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.01213 to 0.01203, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0033 - mae: 0.0453 - val_loss: 0.0120 - val_mae: 0.0849 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.01203 to 0.01201, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0120 - val_mae: 0.0847 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0122 - val_mae: 0.0852 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0121 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0030 - mae: 0.0438 - val_loss: 0.0121 - val_mae: 0.0849 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0121 - val_mae: 0.0849 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0029 - mae: 0.0431 - val_loss: 0.0121 - val_mae: 0.0850 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0029 - mae: 0.0427 - val_loss: 0.0123 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0028 - mae: 0.0423 - val_loss: 0.0123 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0028 - mae: 0.0420 - val_loss: 0.0123 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0121 - val_mae: 0.0850 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01201\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0027 - mae: 0.0414 - val_loss: 0.0121 - val_mae: 0.0848 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.01201 to 0.01200, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0120 - val_mae: 0.0846 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01200\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0121 - val_mae: 0.0850 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01200\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0026 - mae: 0.0406 - val_loss: 0.0121 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01200\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0121 - val_mae: 0.0852 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01200\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0122 - val_mae: 0.0850 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01200\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0123 - val_mae: 0.0853 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01200\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0121 - val_mae: 0.0847 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01200\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0393 - val_loss: 0.0122 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01200\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0391 - val_loss: 0.0122 - val_mae: 0.0850 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.01200 to 0.01175, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0340 - val_loss: 0.0117 - val_mae: 0.0833 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.01175 to 0.01173, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0117 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01173\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0333 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01173\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0331 - val_loss: 0.0117 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.01173 to 0.01171, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0330 - val_loss: 0.0117 - val_mae: 0.0831 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0328 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01171\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0327 - val_loss: 0.0117 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0327 - val_loss: 0.0117 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01171\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0117 - val_mae: 0.0832 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01171\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0321 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0321 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01171\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0017 - mae: 0.0320 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0320 - val_loss: 0.0118 - val_mae: 0.0834 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0314 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0117 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0313 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0117 - val_mae: 0.0831 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01171\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0312 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0117 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0832 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01171\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0311 - val_loss: 0.0118 - val_mae: 0.0833 - learning_rate: 1.0000e-07\n",
      "Epoch 223: early stopping\n",
      "Restoring model weights from the end of the best epoch: 173.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1312 m\n",
      "Median positioning error: 0.1185 m\n",
      "90th percentile error: 0.2328 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8052.043135,
   "end_time": "2025-08-08T09:22:05.560938",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-08T07:07:53.517803",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
