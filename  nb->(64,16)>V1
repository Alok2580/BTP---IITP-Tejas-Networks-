{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fee69056",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-03T16:36:21.163331Z",
     "iopub.status.busy": "2025-08-03T16:36:21.163051Z",
     "iopub.status.idle": "2025-08-03T16:36:22.582285Z",
     "shell.execute_reply": "2025-08-03T16:36:22.581495Z"
    },
    "papermill": {
     "duration": 1.424306,
     "end_time": "2025-08-03T16:36:22.583789",
     "exception": false,
     "start_time": "2025-08-03T16:36:21.159483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4513e5a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:36:22.589203Z",
     "iopub.status.busy": "2025-08-03T16:36:22.588895Z",
     "iopub.status.idle": "2025-08-03T16:36:36.887161Z",
     "shell.execute_reply": "2025-08-03T16:36:36.886496Z"
    },
    "papermill": {
     "duration": 14.302223,
     "end_time": "2025-08-03T16:36:36.888548",
     "exception": false,
     "start_time": "2025-08-03T16:36:22.586325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-03 16:36:24.056197: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754238984.235269      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754238984.286880      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1e0350f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:36:36.893997Z",
     "iopub.status.busy": "2025-08-03T16:36:36.893445Z",
     "iopub.status.idle": "2025-08-03T16:36:36.898082Z",
     "shell.execute_reply": "2025-08-03T16:36:36.897480Z"
    },
    "papermill": {
     "duration": 0.008378,
     "end_time": "2025-08-03T16:36:36.899150",
     "exception": false,
     "start_time": "2025-08-03T16:36:36.890772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "06765a4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:36:36.904016Z",
     "iopub.status.busy": "2025-08-03T16:36:36.903788Z",
     "iopub.status.idle": "2025-08-03T16:36:36.907231Z",
     "shell.execute_reply": "2025-08-03T16:36:36.906703Z"
    },
    "papermill": {
     "duration": 0.00701,
     "end_time": "2025-08-03T16:36:36.908181",
     "exception": false,
     "start_time": "2025-08-03T16:36:36.901171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4c15264b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:36:36.913181Z",
     "iopub.status.busy": "2025-08-03T16:36:36.912981Z",
     "iopub.status.idle": "2025-08-03T20:45:56.111801Z",
     "shell.execute_reply": "2025-08-03T20:45:56.111097Z"
    },
    "papermill": {
     "duration": 14959.202925,
     "end_time": "2025-08-03T20:45:56.112971",
     "exception": false,
     "start_time": "2025-08-03T16:36:36.910046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754239021.429306      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754239031.097969      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">198,272</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">198,272</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m198,272\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m198,272\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">470,666</span> (1.80 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m470,666\u001b[0m (1.80 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">470,406</span> (1.79 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m470,406\u001b[0m (1.79 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754239045.824632      58 service.cc:148] XLA service 0x7e2620002680 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754239045.825342      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754239050.092926      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 478.16226, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 489.2950 - mae: 17.5531 - val_loss: 478.1623 - val_mae: 17.3800 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss did not improve from 478.16226\n",
      "4375/4375 - 42s - 9ms/step - loss: 485.6571 - mae: 17.5092 - val_loss: 478.7736 - val_mae: 17.3856 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 478.16226\n",
      "4375/4375 - 44s - 10ms/step - loss: 484.9319 - mae: 17.4960 - val_loss: 481.9543 - val_mae: 17.4192 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 478.16226\n",
      "4375/4375 - 43s - 10ms/step - loss: 484.8007 - mae: 17.4903 - val_loss: 478.8421 - val_mae: 17.3828 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 478.16226\n",
      "4375/4375 - 42s - 10ms/step - loss: 484.5005 - mae: 17.4908 - val_loss: 480.9406 - val_mae: 17.4088 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 478.16226\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.8716 - mae: 17.4800 - val_loss: 478.5710 - val_mae: 17.3817 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 478.16226\n",
      "4375/4375 - 42s - 9ms/step - loss: 483.9249 - mae: 17.4830 - val_loss: 478.5391 - val_mae: 17.3903 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 478.16226\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.6413 - mae: 17.4794 - val_loss: 480.3976 - val_mae: 17.4207 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 478.16226\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.5095 - mae: 17.4737 - val_loss: 479.0028 - val_mae: 17.3900 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 478.16226\n",
      "4375/4375 - 42s - 10ms/step - loss: 483.6533 - mae: 17.4778 - val_loss: 478.8255 - val_mae: 17.3866 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 478.16226 to 478.00101, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 483.5155 - mae: 17.4795 - val_loss: 478.0010 - val_mae: 17.3749 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 478.00101\n",
      "4375/4375 - 43s - 10ms/step - loss: 483.4790 - mae: 17.4753 - val_loss: 478.0929 - val_mae: 17.3760 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 478.00101\n",
      "4375/4375 - 42s - 10ms/step - loss: 483.3166 - mae: 17.4740 - val_loss: 479.5304 - val_mae: 17.3946 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.3387 - mae: 17.4733 - val_loss: 478.4074 - val_mae: 17.3793 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.3729 - mae: 17.4770 - val_loss: 478.2285 - val_mae: 17.3831 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.4306 - mae: 17.4774 - val_loss: 478.0013 - val_mae: 17.3744 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.5640 - mae: 17.4818 - val_loss: 478.2754 - val_mae: 17.3774 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 478.00101\n",
      "4375/4375 - 42s - 10ms/step - loss: 483.1747 - mae: 17.4698 - val_loss: 478.7750 - val_mae: 17.3912 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.4608 - mae: 17.4796 - val_loss: 479.8204 - val_mae: 17.4199 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.3627 - mae: 17.4739 - val_loss: 478.3635 - val_mae: 17.3787 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.5032 - mae: 17.4797 - val_loss: 478.4158 - val_mae: 17.3808 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.2950 - mae: 17.4795 - val_loss: 480.1321 - val_mae: 17.4081 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 478.00101\n",
      "4375/4375 - 42s - 10ms/step - loss: 483.1563 - mae: 17.4702 - val_loss: 478.7054 - val_mae: 17.3838 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.1479 - mae: 17.4711 - val_loss: 487.3183 - val_mae: 17.4836 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.4336 - mae: 17.4755 - val_loss: 482.7552 - val_mae: 17.4242 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.5314 - mae: 17.4752 - val_loss: 478.1890 - val_mae: 17.3784 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.1183 - mae: 17.4723 - val_loss: 478.3244 - val_mae: 17.3800 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 478.00101\n",
      "4375/4375 - 42s - 10ms/step - loss: 483.3320 - mae: 17.4741 - val_loss: 480.3788 - val_mae: 17.4024 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 478.00101\n",
      "4375/4375 - 42s - 10ms/step - loss: 483.3309 - mae: 17.4783 - val_loss: 478.6415 - val_mae: 17.3821 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.4762 - mae: 17.4822 - val_loss: 479.9900 - val_mae: 17.4145 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 31: val_loss did not improve from 478.00101\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.4012 - mae: 17.4757 - val_loss: 479.6843 - val_mae: 17.3941 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss improved from 478.00101 to 477.89221, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.7507 - mae: 17.4549 - val_loss: 477.8922 - val_mae: 17.3725 - learning_rate: 1.0000e-03\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss improved from 477.89221 to 477.80453, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.6529 - mae: 17.4525 - val_loss: 477.8045 - val_mae: 17.3715 - learning_rate: 1.0000e-03\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.6905 - mae: 17.4537 - val_loss: 478.0647 - val_mae: 17.3744 - learning_rate: 1.0000e-03\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.7622 - mae: 17.4535 - val_loss: 478.0446 - val_mae: 17.3759 - learning_rate: 1.0000e-03\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 477.80453\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.6889 - mae: 17.4538 - val_loss: 478.2547 - val_mae: 17.3777 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.6982 - mae: 17.4531 - val_loss: 478.3995 - val_mae: 17.3793 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 477.80453\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.7197 - mae: 17.4545 - val_loss: 478.0715 - val_mae: 17.3757 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.7167 - mae: 17.4533 - val_loss: 478.1596 - val_mae: 17.3780 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.7238 - mae: 17.4535 - val_loss: 477.8857 - val_mae: 17.3743 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.7394 - mae: 17.4551 - val_loss: 477.9838 - val_mae: 17.3742 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.6931 - mae: 17.4529 - val_loss: 477.8492 - val_mae: 17.3724 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.6996 - mae: 17.4537 - val_loss: 477.8730 - val_mae: 17.3739 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 477.80453\n",
      "4375/4375 - 41s - 9ms/step - loss: 481.7440 - mae: 17.4534 - val_loss: 478.0432 - val_mae: 17.3745 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 477.80453\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.7120 - mae: 17.4532 - val_loss: 477.8498 - val_mae: 17.3719 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 477.80453 to 477.79056, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.7019 - mae: 17.4551 - val_loss: 477.7906 - val_mae: 17.3715 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 477.79056\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.7332 - mae: 17.4547 - val_loss: 477.8564 - val_mae: 17.3720 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 477.79056\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.7570 - mae: 17.4541 - val_loss: 477.8391 - val_mae: 17.3719 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 477.79056\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.7104 - mae: 17.4539 - val_loss: 478.1179 - val_mae: 17.3757 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 477.79056\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.6584 - mae: 17.4536 - val_loss: 477.7956 - val_mae: 17.3715 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 477.79056\n",
      "4375/4375 - 42s - 10ms/step - loss: 481.7171 - mae: 17.4545 - val_loss: 477.8744 - val_mae: 17.3722 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 477.79056 to 151.99435, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 322.3621 - mae: 13.9805 - val_loss: 151.9944 - val_mae: 10.1811 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 151.99435 to 90.68578, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 112.9465 - mae: 8.7326 - val_loss: 90.6858 - val_mae: 7.7285 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 90.68578 to 78.40421, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 84.4121 - mae: 7.3093 - val_loss: 78.4042 - val_mae: 6.9145 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 78.40421 to 71.77688, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 71.5173 - mae: 6.4979 - val_loss: 71.7769 - val_mae: 6.5405 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 71.77688 to 26.70485, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 43.3089 - mae: 4.9578 - val_loss: 26.7048 - val_mae: 3.9056 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 26.70485 to 17.51701, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 20.2037 - mae: 3.4100 - val_loss: 17.5170 - val_mae: 3.1443 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 17.51701 to 8.64230, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 11.8325 - mae: 2.6073 - val_loss: 8.6423 - val_mae: 2.2064 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 8.64230 to 6.82998, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 7.9119 - mae: 2.1180 - val_loss: 6.8300 - val_mae: 1.9794 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 6.82998\n",
      "4375/4375 - 42s - 10ms/step - loss: 5.8728 - mae: 1.8255 - val_loss: 7.8359 - val_mae: 2.1114 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 6.82998 to 3.71462, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 4.3811 - mae: 1.5784 - val_loss: 3.7146 - val_mae: 1.4286 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 3.71462 to 3.02007, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 3.5839 - mae: 1.4161 - val_loss: 3.0201 - val_mae: 1.3054 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 3.02007 to 1.92074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 2.9621 - mae: 1.2779 - val_loss: 1.9207 - val_mae: 1.0595 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 1.92074 to 1.66484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.9622 - mae: 1.0624 - val_loss: 1.6648 - val_mae: 0.9802 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 1.66484 to 1.44270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.9765 - mae: 1.0338 - val_loss: 1.4427 - val_mae: 0.9221 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 1.44270 to 1.44136, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.6986 - mae: 0.9645 - val_loss: 1.4414 - val_mae: 0.9144 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 1.44136 to 1.15377, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 1.2320 - mae: 0.8240 - val_loss: 1.1538 - val_mae: 0.7918 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 1.15377\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.3756 - mae: 0.8364 - val_loss: 1.4695 - val_mae: 0.9454 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 1.15377\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9513 - mae: 0.7168 - val_loss: 1.3464 - val_mae: 0.8470 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 1.15377 to 0.71201, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9565 - mae: 0.7070 - val_loss: 0.7120 - val_mae: 0.6536 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.71201 to 0.65132, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6956 - mae: 0.6295 - val_loss: 0.6513 - val_mae: 0.6163 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.65132 to 0.59909, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.8636 - mae: 0.6519 - val_loss: 0.5991 - val_mae: 0.5809 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.59909 to 0.38873, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5661 - mae: 0.5653 - val_loss: 0.3887 - val_mae: 0.4827 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.38873\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4715 - mae: 0.5280 - val_loss: 0.4905 - val_mae: 0.5300 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.38873\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3683 - mae: 0.4712 - val_loss: 0.4671 - val_mae: 0.5147 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.38873 to 0.35099, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4237 - mae: 0.4885 - val_loss: 0.3510 - val_mae: 0.4346 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.35099\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4132 - mae: 0.4624 - val_loss: 0.3515 - val_mae: 0.4571 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.35099 to 0.26569, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.2842 - mae: 0.4136 - val_loss: 0.2657 - val_mae: 0.4003 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.26569 to 0.26101, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4475 - mae: 0.4589 - val_loss: 0.2610 - val_mae: 0.3979 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.26101\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3785 - mae: 0.4214 - val_loss: 0.5030 - val_mae: 0.5311 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.26101 to 0.25870, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.2523 - mae: 0.3883 - val_loss: 0.2587 - val_mae: 0.4003 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.25870 to 0.24305, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3930 - mae: 0.4443 - val_loss: 0.2430 - val_mae: 0.3848 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.24305 to 0.20428, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.2231 - mae: 0.3693 - val_loss: 0.2043 - val_mae: 0.3505 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.20428\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.2352 - mae: 0.3727 - val_loss: 0.2499 - val_mae: 0.3829 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.20428\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.2125 - mae: 0.3540 - val_loss: 0.2262 - val_mae: 0.3686 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.20428 to 0.16450, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.2523 - mae: 0.3485 - val_loss: 0.1645 - val_mae: 0.3204 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.16450\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1755 - mae: 0.3284 - val_loss: 0.1823 - val_mae: 0.3334 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.16450\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.2017 - mae: 0.3339 - val_loss: 1.0548 - val_mae: 0.7576 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.16450\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.2016 - mae: 0.3363 - val_loss: 0.1965 - val_mae: 0.3482 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.16450 to 0.13210, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.1787 - mae: 0.3192 - val_loss: 0.1321 - val_mae: 0.2863 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.13210\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1947 - mae: 0.3137 - val_loss: 2.1185 - val_mae: 1.0406 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.13210\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.2154 - mae: 0.3391 - val_loss: 0.1682 - val_mae: 0.3215 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.13210 to 0.11677, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1368 - mae: 0.2897 - val_loss: 0.1168 - val_mae: 0.2694 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.11677\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1479 - mae: 0.3001 - val_loss: 0.1282 - val_mae: 0.2803 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.11677 to 0.10802, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1309 - mae: 0.2807 - val_loss: 0.1080 - val_mae: 0.2573 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.10802\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1258 - mae: 0.2783 - val_loss: 0.1208 - val_mae: 0.2714 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.10802\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1212 - mae: 0.2724 - val_loss: 0.1437 - val_mae: 0.3041 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.10802\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1692 - mae: 0.2896 - val_loss: 0.1172 - val_mae: 0.2692 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.10802\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1088 - mae: 0.2586 - val_loss: 0.1702 - val_mae: 0.3278 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.10802\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1672 - mae: 0.2999 - val_loss: 0.1456 - val_mae: 0.2968 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.10802\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1051 - mae: 0.2548 - val_loss: 0.1238 - val_mae: 0.2784 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.10802 to 0.09896, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1184 - mae: 0.2620 - val_loss: 0.0990 - val_mae: 0.2466 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.09896 to 0.09435, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1058 - mae: 0.2552 - val_loss: 0.0943 - val_mae: 0.2404 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.09435\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1038 - mae: 0.2524 - val_loss: 0.1160 - val_mae: 0.2673 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.09435 to 0.08888, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1702 - mae: 0.2731 - val_loss: 0.0889 - val_mae: 0.2335 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.08888\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0944 - mae: 0.2413 - val_loss: 0.1203 - val_mae: 0.2727 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.08888 to 0.07648, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0977 - mae: 0.2455 - val_loss: 0.0765 - val_mae: 0.2160 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0947 - mae: 0.2409 - val_loss: 0.1229 - val_mae: 0.2790 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0921 - mae: 0.2383 - val_loss: 0.0855 - val_mae: 0.2295 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0891 - mae: 0.2336 - val_loss: 0.0958 - val_mae: 0.2451 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0937 - mae: 0.2338 - val_loss: 0.0789 - val_mae: 0.2210 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1220 - mae: 0.2470 - val_loss: 0.0913 - val_mae: 0.2367 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0809 - mae: 0.2234 - val_loss: 0.0868 - val_mae: 0.2312 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0848 - mae: 0.2285 - val_loss: 0.0772 - val_mae: 0.2177 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.07648\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0931 - mae: 0.2285 - val_loss: 0.0927 - val_mae: 0.2381 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.07648 to 0.07405, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0803 - mae: 0.2223 - val_loss: 0.0741 - val_mae: 0.2145 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.07405\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0782 - mae: 0.2195 - val_loss: 0.0933 - val_mae: 0.2357 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.07405\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0782 - mae: 0.2194 - val_loss: 0.0897 - val_mae: 0.2369 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.07405\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0772 - mae: 0.2179 - val_loss: 0.0790 - val_mae: 0.2217 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.07405\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0828 - mae: 0.2193 - val_loss: 0.1223 - val_mae: 0.2652 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.07405\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0742 - mae: 0.2137 - val_loss: 0.0811 - val_mae: 0.2232 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.07405 to 0.07290, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0741 - mae: 0.2133 - val_loss: 0.0729 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0726 - mae: 0.2110 - val_loss: 0.0810 - val_mae: 0.2252 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0718 - mae: 0.2098 - val_loss: 0.0795 - val_mae: 0.2245 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0706 - mae: 0.2083 - val_loss: 0.0786 - val_mae: 0.2200 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0682 - mae: 0.2049 - val_loss: 0.0751 - val_mae: 0.2185 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0681 - mae: 0.2043 - val_loss: 0.0834 - val_mae: 0.2253 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1051 - mae: 0.2325 - val_loss: 0.0908 - val_mae: 0.2344 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0682 - mae: 0.2053 - val_loss: 0.0763 - val_mae: 0.2179 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.07290\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0762 - mae: 0.2089 - val_loss: 0.1005 - val_mae: 0.2289 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.07290 to 0.06830, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0620 - mae: 0.1956 - val_loss: 0.0683 - val_mae: 0.2030 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.06830\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0667 - mae: 0.2023 - val_loss: 0.0968 - val_mae: 0.2472 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.06830\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0659 - mae: 0.2013 - val_loss: 0.0803 - val_mae: 0.2202 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.06830\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0652 - mae: 0.2001 - val_loss: 0.0776 - val_mae: 0.2169 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.06830 to 0.06382, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0639 - mae: 0.1981 - val_loss: 0.0638 - val_mae: 0.2010 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.06382\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0632 - mae: 0.1972 - val_loss: 0.0680 - val_mae: 0.2076 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.06382\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0618 - mae: 0.1942 - val_loss: 0.0651 - val_mae: 0.1987 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.06382 to 0.06372, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0775 - mae: 0.2060 - val_loss: 0.0637 - val_mae: 0.1978 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.06372 to 0.05249, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0522 - mae: 0.1797 - val_loss: 0.0525 - val_mae: 0.1799 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.05249\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0756 - mae: 0.1983 - val_loss: 0.0658 - val_mae: 0.2048 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.05249\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0612 - mae: 0.1939 - val_loss: 0.0650 - val_mae: 0.2031 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.05249\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0594 - mae: 0.1909 - val_loss: 0.0585 - val_mae: 0.1897 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.05249\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0607 - mae: 0.1912 - val_loss: 0.0555 - val_mae: 0.1847 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.05249 to 0.04989, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0589 - mae: 0.1906 - val_loss: 0.0499 - val_mae: 0.1757 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.04989\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0586 - mae: 0.1900 - val_loss: 0.0626 - val_mae: 0.1928 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.04989\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0585 - mae: 0.1897 - val_loss: 0.0587 - val_mae: 0.1880 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.04989\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0586 - mae: 0.1885 - val_loss: 0.5153 - val_mae: 0.4571 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.04989\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0576 - mae: 0.1845 - val_loss: 0.0618 - val_mae: 0.1932 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.04989\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0560 - mae: 0.1857 - val_loss: 0.0623 - val_mae: 0.1985 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.04989\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0572 - mae: 0.1876 - val_loss: 0.0570 - val_mae: 0.1857 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.04989\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0587 - mae: 0.1886 - val_loss: 0.0514 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.04989\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0543 - mae: 0.1828 - val_loss: 0.0510 - val_mae: 0.1769 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.04989\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0562 - mae: 0.1858 - val_loss: 0.0515 - val_mae: 0.1803 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.04989 to 0.04979, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0812 - mae: 0.1921 - val_loss: 0.0498 - val_mae: 0.1767 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0494 - mae: 0.1744 - val_loss: 0.0522 - val_mae: 0.1810 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0565 - mae: 0.1865 - val_loss: 0.0638 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0552 - mae: 0.1843 - val_loss: 0.0526 - val_mae: 0.1824 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0564 - mae: 0.1853 - val_loss: 0.0553 - val_mae: 0.1834 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0532 - mae: 0.1806 - val_loss: 0.0609 - val_mae: 0.1953 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.04979\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0533 - mae: 0.1811 - val_loss: 0.0603 - val_mae: 0.1950 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0554 - mae: 0.1840 - val_loss: 0.0893 - val_mae: 0.2368 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0684 - mae: 0.1921 - val_loss: 0.1187 - val_mae: 0.2657 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0521 - mae: 0.1784 - val_loss: 0.0636 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0519 - mae: 0.1786 - val_loss: 0.0895 - val_mae: 0.2394 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.04979\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0533 - mae: 0.1809 - val_loss: 0.0594 - val_mae: 0.1925 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss improved from 0.04979 to 0.04509, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0625 - mae: 0.1833 - val_loss: 0.0451 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.04509\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0444 - mae: 0.1654 - val_loss: 0.0836 - val_mae: 0.2214 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.04509\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0540 - mae: 0.1818 - val_loss: 0.0514 - val_mae: 0.1752 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.04509\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0523 - mae: 0.1791 - val_loss: 0.0619 - val_mae: 0.1961 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.04509\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0521 - mae: 0.1790 - val_loss: 0.0588 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.04509\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0505 - mae: 0.1765 - val_loss: 0.0583 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.04509 to 0.04141, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0508 - mae: 0.1764 - val_loss: 0.0414 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.04141\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0501 - mae: 0.1755 - val_loss: 0.0648 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.04141\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0501 - mae: 0.1756 - val_loss: 0.0594 - val_mae: 0.1925 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.04141\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0503 - mae: 0.1756 - val_loss: 0.0647 - val_mae: 0.2019 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.04141\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0490 - mae: 0.1736 - val_loss: 0.0688 - val_mae: 0.2054 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.04141\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0493 - mae: 0.1743 - val_loss: 0.0614 - val_mae: 0.1894 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.04141\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0483 - mae: 0.1719 - val_loss: 0.0503 - val_mae: 0.1782 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.04141 to 0.03983, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0488 - mae: 0.1730 - val_loss: 0.0398 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0477 - mae: 0.1709 - val_loss: 0.0737 - val_mae: 0.2177 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0483 - mae: 0.1719 - val_loss: 0.0536 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0469 - mae: 0.1695 - val_loss: 0.0488 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0474 - mae: 0.1705 - val_loss: 0.0489 - val_mae: 0.1724 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0467 - mae: 0.1689 - val_loss: 0.0538 - val_mae: 0.1836 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0458 - mae: 0.1674 - val_loss: 0.0514 - val_mae: 0.1784 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.03983\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0466 - mae: 0.1691 - val_loss: 0.0502 - val_mae: 0.1722 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0449 - mae: 0.1658 - val_loss: 0.0596 - val_mae: 0.1957 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0459 - mae: 0.1675 - val_loss: 0.0584 - val_mae: 0.1905 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0696 - mae: 0.1823 - val_loss: 0.0443 - val_mae: 0.1656 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0400 - mae: 0.1572 - val_loss: 0.0425 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0456 - mae: 0.1673 - val_loss: 0.0480 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.03983\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0467 - mae: 0.1693 - val_loss: 0.0412 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.03983\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0464 - mae: 0.1687 - val_loss: 0.0477 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.03983\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0447 - mae: 0.1657 - val_loss: 0.0507 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.03983\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0452 - mae: 0.1667 - val_loss: 0.0519 - val_mae: 0.1787 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.03983\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0449 - mae: 0.1661 - val_loss: 0.0578 - val_mae: 0.1849 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.03983\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0440 - mae: 0.1644 - val_loss: 0.0650 - val_mae: 0.1995 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.03983\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0450 - mae: 0.1660 - val_loss: 0.0748 - val_mae: 0.2080 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.03983\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0456 - mae: 0.1660 - val_loss: 0.0486 - val_mae: 0.1733 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.03983 to 0.01492, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0125 - mae: 0.0878 - val_loss: 0.0149 - val_mae: 0.0959 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.01492 to 0.01422, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0103 - mae: 0.0803 - val_loss: 0.0142 - val_mae: 0.0935 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss improved from 0.01422 to 0.01389, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0095 - mae: 0.0774 - val_loss: 0.0139 - val_mae: 0.0925 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.01389 to 0.01367, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0091 - mae: 0.0755 - val_loss: 0.0137 - val_mae: 0.0918 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss improved from 0.01367 to 0.01344, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0088 - mae: 0.0743 - val_loss: 0.0134 - val_mae: 0.0909 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.01344 to 0.01297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0085 - mae: 0.0731 - val_loss: 0.0130 - val_mae: 0.0891 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss improved from 0.01297 to 0.01294, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0082 - mae: 0.0720 - val_loss: 0.0129 - val_mae: 0.0889 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss improved from 0.01294 to 0.01270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0081 - mae: 0.0712 - val_loss: 0.0127 - val_mae: 0.0880 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01270\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0079 - mae: 0.0704 - val_loss: 0.0130 - val_mae: 0.0896 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01270\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0077 - mae: 0.0697 - val_loss: 0.0128 - val_mae: 0.0886 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.01270 to 0.01245, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0076 - mae: 0.0693 - val_loss: 0.0125 - val_mae: 0.0872 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01245\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0133 - val_mae: 0.0904 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.01245 to 0.01229, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0073 - mae: 0.0680 - val_loss: 0.0123 - val_mae: 0.0865 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01229\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0127 - val_mae: 0.0881 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01229\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0071 - mae: 0.0670 - val_loss: 0.0127 - val_mae: 0.0880 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01229\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0070 - mae: 0.0667 - val_loss: 0.0128 - val_mae: 0.0885 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.01229 to 0.01190, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0070 - mae: 0.0663 - val_loss: 0.0119 - val_mae: 0.0850 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01190\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0120 - val_mae: 0.0855 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss improved from 0.01190 to 0.01187, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0068 - mae: 0.0653 - val_loss: 0.0119 - val_mae: 0.0849 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0067 - mae: 0.0651 - val_loss: 0.0122 - val_mae: 0.0862 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0067 - mae: 0.0647 - val_loss: 0.0124 - val_mae: 0.0871 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0066 - mae: 0.0644 - val_loss: 0.0120 - val_mae: 0.0856 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01187\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0065 - mae: 0.0641 - val_loss: 0.0119 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0065 - mae: 0.0638 - val_loss: 0.0120 - val_mae: 0.0856 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0064 - mae: 0.0635 - val_loss: 0.0120 - val_mae: 0.0854 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01187\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0063 - mae: 0.0630 - val_loss: 0.0122 - val_mae: 0.0863 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01187\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0063 - mae: 0.0628 - val_loss: 0.0119 - val_mae: 0.0852 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss improved from 0.01187 to 0.01166, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0062 - mae: 0.0625 - val_loss: 0.0117 - val_mae: 0.0842 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01166\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0061 - mae: 0.0622 - val_loss: 0.0119 - val_mae: 0.0852 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01166\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0620 - val_loss: 0.0117 - val_mae: 0.0845 - learning_rate: 1.0000e-04\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01166\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0060 - mae: 0.0617 - val_loss: 0.0124 - val_mae: 0.0868 - learning_rate: 1.0000e-04\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01166\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0060 - mae: 0.0615 - val_loss: 0.0122 - val_mae: 0.0859 - learning_rate: 1.0000e-04\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01166\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0060 - mae: 0.0612 - val_loss: 0.0119 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01166\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0059 - mae: 0.0608 - val_loss: 0.0117 - val_mae: 0.0841 - learning_rate: 1.0000e-04\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01166\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0607 - val_loss: 0.0121 - val_mae: 0.0858 - learning_rate: 1.0000e-04\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01166\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0604 - val_loss: 0.0117 - val_mae: 0.0847 - learning_rate: 1.0000e-04\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01166\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0604 - val_loss: 0.0117 - val_mae: 0.0843 - learning_rate: 1.0000e-04\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01166\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0057 - mae: 0.0602 - val_loss: 0.0118 - val_mae: 0.0847 - learning_rate: 1.0000e-04\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01166\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0057 - mae: 0.0598 - val_loss: 0.0117 - val_mae: 0.0842 - learning_rate: 1.0000e-04\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss improved from 0.01166 to 0.01140, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0056 - mae: 0.0596 - val_loss: 0.0114 - val_mae: 0.0833 - learning_rate: 1.0000e-04\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01140\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0056 - mae: 0.0595 - val_loss: 0.0116 - val_mae: 0.0840 - learning_rate: 1.0000e-04\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01140\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0056 - mae: 0.0594 - val_loss: 0.0117 - val_mae: 0.0841 - learning_rate: 1.0000e-04\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01140\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0055 - mae: 0.0589 - val_loss: 0.0120 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0055 - mae: 0.0590 - val_loss: 0.0120 - val_mae: 0.0854 - learning_rate: 1.0000e-04\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0054 - mae: 0.0584 - val_loss: 0.0118 - val_mae: 0.0845 - learning_rate: 1.0000e-04\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0054 - mae: 0.0584 - val_loss: 0.0118 - val_mae: 0.0847 - learning_rate: 1.0000e-04\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01140\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-04\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0053 - mae: 0.0579 - val_loss: 0.0120 - val_mae: 0.0853 - learning_rate: 1.0000e-04\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0120 - val_mae: 0.0854 - learning_rate: 1.0000e-04\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0115 - val_mae: 0.0830 - learning_rate: 1.0000e-04\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0052 - mae: 0.0575 - val_loss: 0.0120 - val_mae: 0.0851 - learning_rate: 1.0000e-04\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0052 - mae: 0.0573 - val_loss: 0.0115 - val_mae: 0.0833 - learning_rate: 1.0000e-04\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01140\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0052 - mae: 0.0573 - val_loss: 0.0120 - val_mae: 0.0853 - learning_rate: 1.0000e-04\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0051 - mae: 0.0569 - val_loss: 0.0116 - val_mae: 0.0840 - learning_rate: 1.0000e-04\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0051 - mae: 0.0568 - val_loss: 0.0117 - val_mae: 0.0840 - learning_rate: 1.0000e-04\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01140\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0051 - mae: 0.0566 - val_loss: 0.0117 - val_mae: 0.0839 - learning_rate: 1.0000e-04\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss improved from 0.01140 to 0.01134, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0051 - mae: 0.0565 - val_loss: 0.0113 - val_mae: 0.0826 - learning_rate: 1.0000e-04\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01134\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0050 - mae: 0.0564 - val_loss: 0.0117 - val_mae: 0.0840 - learning_rate: 1.0000e-04\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01134\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0050 - mae: 0.0562 - val_loss: 0.0115 - val_mae: 0.0831 - learning_rate: 1.0000e-04\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01134\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0050 - mae: 0.0560 - val_loss: 0.0114 - val_mae: 0.0826 - learning_rate: 1.0000e-04\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss improved from 0.01134 to 0.01046, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0036 - mae: 0.0478 - val_loss: 0.0105 - val_mae: 0.0790 - learning_rate: 1.0000e-05\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss improved from 0.01046 to 0.01036, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0104 - val_mae: 0.0786 - learning_rate: 1.0000e-05\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01036\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0104 - val_mae: 0.0787 - learning_rate: 1.0000e-05\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss improved from 0.01036 to 0.01035, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0103 - val_mae: 0.0786 - learning_rate: 1.0000e-05\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01035\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0104 - val_mae: 0.0786 - learning_rate: 1.0000e-05\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss improved from 0.01035 to 0.01034, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0034 - mae: 0.0464 - val_loss: 0.0103 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01034\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0034 - mae: 0.0463 - val_loss: 0.0104 - val_mae: 0.0786 - learning_rate: 1.0000e-05\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01034\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0103 - val_mae: 0.0786 - learning_rate: 1.0000e-05\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss improved from 0.01034 to 0.01033, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0103 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.01033\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0034 - mae: 0.0461 - val_loss: 0.0104 - val_mae: 0.0787 - learning_rate: 1.0000e-05\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01033\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0034 - mae: 0.0460 - val_loss: 0.0104 - val_mae: 0.0788 - learning_rate: 1.0000e-05\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01033\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0034 - mae: 0.0460 - val_loss: 0.0104 - val_mae: 0.0788 - learning_rate: 1.0000e-05\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01033\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0034 - mae: 0.0459 - val_loss: 0.0103 - val_mae: 0.0786 - learning_rate: 1.0000e-05\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01033\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0034 - mae: 0.0459 - val_loss: 0.0103 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss improved from 0.01033 to 0.01033, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0103 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss improved from 0.01033 to 0.01032, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0103 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01032\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0033 - mae: 0.0458 - val_loss: 0.0103 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01032\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0104 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01032\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0104 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01032\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0104 - val_mae: 0.0787 - learning_rate: 1.0000e-05\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01032\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0104 - val_mae: 0.0787 - learning_rate: 1.0000e-05\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01032\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0103 - val_mae: 0.0784 - learning_rate: 1.0000e-05\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01032\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0104 - val_mae: 0.0785 - learning_rate: 1.0000e-05\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01032\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0104 - val_mae: 0.0787 - learning_rate: 1.0000e-05\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss improved from 0.01032 to 0.01027, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01027\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0445 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss improved from 0.01027 to 0.01026, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01026\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-06\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01026\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss improved from 0.01026 to 0.01026, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-06\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss improved from 0.01026 to 0.01026, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-06\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-06\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss improved from 0.01026 to 0.01026, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-06\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01026\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss improved from 0.01026 to 0.01025, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0443 - val_loss: 0.0102 - val_mae: 0.0781 - learning_rate: 1.0000e-06\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0443 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-06\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0032 - mae: 0.0443 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-06\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.01025\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.01025\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.01025\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.01025\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.01025\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.01025\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.01025\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.01025\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.01025\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0781 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.01025\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0103 - val_mae: 0.0782 - learning_rate: 1.0000e-07\n",
      "Epoch 351: early stopping\n",
      "Restoring model weights from the end of the best epoch: 301.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 6ms/step\n",
      "Mean positioning error: 0.1233 m\n",
      "Median positioning error: 0.1111 m\n",
      "90th percentile error: 0.2164 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 14982.54479,
   "end_time": "2025-08-03T20:45:59.607626",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-03T16:36:17.062836",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
