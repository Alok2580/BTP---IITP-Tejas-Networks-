{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f44a6a91",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-09T11:52:06.958651Z",
     "iopub.status.busy": "2025-08-09T11:52:06.958000Z",
     "iopub.status.idle": "2025-08-09T11:52:08.456291Z",
     "shell.execute_reply": "2025-08-09T11:52:08.455268Z"
    },
    "papermill": {
     "duration": 1.503471,
     "end_time": "2025-08-09T11:52:08.457596",
     "exception": false,
     "start_time": "2025-08-09T11:52:06.954125",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "70193ef2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:52:08.464443Z",
     "iopub.status.busy": "2025-08-09T11:52:08.463500Z",
     "iopub.status.idle": "2025-08-09T11:52:23.594203Z",
     "shell.execute_reply": "2025-08-09T11:52:23.593364Z"
    },
    "papermill": {
     "duration": 15.135402,
     "end_time": "2025-08-09T11:52:23.595663",
     "exception": false,
     "start_time": "2025-08-09T11:52:08.460261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-09 11:52:10.372769: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754740330.567319      18 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754740330.633475      18 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bd269eef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:52:23.601515Z",
     "iopub.status.busy": "2025-08-09T11:52:23.600675Z",
     "iopub.status.idle": "2025-08-09T11:52:23.606534Z",
     "shell.execute_reply": "2025-08-09T11:52:23.605844Z"
    },
    "papermill": {
     "duration": 0.009667,
     "end_time": "2025-08-09T11:52:23.607607",
     "exception": false,
     "start_time": "2025-08-09T11:52:23.597940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 13  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "60fe6dbf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:52:23.612434Z",
     "iopub.status.busy": "2025-08-09T11:52:23.612197Z",
     "iopub.status.idle": "2025-08-09T11:52:23.615567Z",
     "shell.execute_reply": "2025-08-09T11:52:23.614875Z"
    },
    "papermill": {
     "duration": 0.007013,
     "end_time": "2025-08-09T11:52:23.616637",
     "exception": false,
     "start_time": "2025-08-09T11:52:23.609624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4795d433",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:52:23.622081Z",
     "iopub.status.busy": "2025-08-09T11:52:23.621767Z",
     "iopub.status.idle": "2025-08-09T13:57:28.357372Z",
     "shell.execute_reply": "2025-08-09T13:57:28.356667Z"
    },
    "papermill": {
     "duration": 7504.74007,
     "end_time": "2025-08-09T13:57:28.358615",
     "exception": false,
     "start_time": "2025-08-09T11:52:23.618545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754740364.150817      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754740373.448218      18 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">60,032</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">244</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,232</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m60,032\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m244\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,232\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">224,522</span> (877.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m224,522\u001b[0m (877.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">224,262</span> (876.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m224,262\u001b[0m (876.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754740384.509175      55 service.cc:148] XLA service 0x79227c0021c0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754740384.509897      55 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754740387.959522      55 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 13.01515, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 71.5878 - mae: 5.4194 - val_loss: 13.0151 - val_mae: 2.7959 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 13.01515 to 10.97625, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 11.2091 - mae: 2.5890 - val_loss: 10.9762 - val_mae: 2.5179 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 10.97625 to 7.22917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 8.1771 - mae: 2.1733 - val_loss: 7.2292 - val_mae: 2.0930 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.22917 to 2.40841, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 4.1234 - mae: 1.5497 - val_loss: 2.4084 - val_mae: 1.2049 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.40841 to 1.14750, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.6856 - mae: 1.2491 - val_loss: 1.1475 - val_mae: 0.8256 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.14750 to 0.72309, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5077 - mae: 0.9207 - val_loss: 0.7231 - val_mae: 0.6674 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.72309\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.8467 - mae: 1.0484 - val_loss: 2.7811 - val_mae: 1.2979 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.72309\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.7050 - mae: 1.2102 - val_loss: 1.6188 - val_mae: 0.9789 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.72309 to 0.63819, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1805 - mae: 0.8315 - val_loss: 0.6382 - val_mae: 0.6222 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.63819\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6968 - mae: 0.8526 - val_loss: 2.0196 - val_mae: 1.0703 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.63819\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.7613 - mae: 0.8311 - val_loss: 6.9603 - val_mae: 1.9383 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.63819\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.9845 - mae: 1.0298 - val_loss: 1.9001 - val_mae: 1.0538 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.63819\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.2703 - mae: 1.0123 - val_loss: 3.8533 - val_mae: 1.4878 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.63819 to 0.63606, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.7779 - mae: 0.9726 - val_loss: 0.6361 - val_mae: 0.6206 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.63606 to 0.47699, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6175 - mae: 0.6116 - val_loss: 0.4770 - val_mae: 0.5415 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.47699\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6897 - mae: 0.7635 - val_loss: 1.5343 - val_mae: 0.9448 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.47699 to 0.35989, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5509 - mae: 0.5672 - val_loss: 0.3599 - val_mae: 0.4695 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.35989\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7222 - mae: 0.8498 - val_loss: 3.3584 - val_mae: 1.3248 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.35989\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1743 - mae: 0.7696 - val_loss: 0.5584 - val_mae: 0.5777 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.35989\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2160 - mae: 0.7493 - val_loss: 1.2542 - val_mae: 0.8606 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.35989\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1638 - mae: 0.7564 - val_loss: 0.6059 - val_mae: 0.6181 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.35989\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3143 - mae: 0.7035 - val_loss: 0.6130 - val_mae: 0.5747 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.35989 to 0.34513, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4548 - mae: 0.5245 - val_loss: 0.3451 - val_mae: 0.4638 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.34513\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.2791 - mae: 0.8590 - val_loss: 0.9271 - val_mae: 0.7487 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.34513\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7054 - mae: 0.6414 - val_loss: 0.7633 - val_mae: 0.6921 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.34513\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5641 - mae: 0.7459 - val_loss: 0.4292 - val_mae: 0.5145 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.34513\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.0845 - mae: 0.8461 - val_loss: 0.6537 - val_mae: 0.6387 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.34513\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5390 - mae: 0.5711 - val_loss: 0.3498 - val_mae: 0.4637 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.34513 to 0.31823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5033 - mae: 0.5337 - val_loss: 0.3182 - val_mae: 0.4396 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.31823\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6002 - mae: 0.7643 - val_loss: 0.4391 - val_mae: 0.5166 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss improved from 0.31823 to 0.27242, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3831 - mae: 0.4833 - val_loss: 0.2724 - val_mae: 0.4132 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3193 - mae: 0.7202 - val_loss: 0.3851 - val_mae: 0.4801 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8526 - mae: 0.6070 - val_loss: 0.5353 - val_mae: 0.5719 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4222 - mae: 0.6802 - val_loss: 1.0240 - val_mae: 0.7625 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.27242\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5696 - mae: 0.5731 - val_loss: 0.5532 - val_mae: 0.5929 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2953 - mae: 0.6856 - val_loss: 0.4749 - val_mae: 0.5413 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1841 - mae: 0.7069 - val_loss: 0.4191 - val_mae: 0.5065 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4596 - mae: 0.7843 - val_loss: 1.7133 - val_mae: 0.6873 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6077 - mae: 0.5995 - val_loss: 0.5686 - val_mae: 0.5575 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1293 - mae: 0.7194 - val_loss: 0.4990 - val_mae: 0.5560 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9176 - mae: 0.5819 - val_loss: 3.9760 - val_mae: 1.4225 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.27242\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6704 - mae: 0.5793 - val_loss: 0.2950 - val_mae: 0.4215 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.27242\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.6485 - mae: 0.7101 - val_loss: 0.6616 - val_mae: 0.6320 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.27242\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4104 - mae: 0.4983 - val_loss: 0.3927 - val_mae: 0.4773 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3778 - mae: 0.4787 - val_loss: 0.4301 - val_mae: 0.5142 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.27242\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1911 - mae: 0.6367 - val_loss: 0.4035 - val_mae: 0.4928 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.27242 to 0.23602, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3351 - mae: 0.4511 - val_loss: 0.2360 - val_mae: 0.3841 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1816 - mae: 0.6633 - val_loss: 0.2904 - val_mae: 0.4230 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3465 - mae: 0.4569 - val_loss: 0.5010 - val_mae: 0.5537 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3498 - mae: 0.4564 - val_loss: 0.3207 - val_mae: 0.4362 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4379 - mae: 0.7549 - val_loss: 0.3633 - val_mae: 0.4701 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1855 - mae: 0.6645 - val_loss: 0.5621 - val_mae: 0.5836 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4122 - mae: 0.5003 - val_loss: 0.3931 - val_mae: 0.4924 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4077 - mae: 0.7099 - val_loss: 0.5073 - val_mae: 0.5560 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3536 - mae: 0.4611 - val_loss: 0.2430 - val_mae: 0.3837 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7844 - mae: 0.7937 - val_loss: 0.3481 - val_mae: 0.4618 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5716 - mae: 0.7238 - val_loss: 0.9944 - val_mae: 0.7675 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5712 - mae: 0.5808 - val_loss: 0.4844 - val_mae: 0.5417 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2456 - mae: 0.7086 - val_loss: 0.3649 - val_mae: 0.4733 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0082 - mae: 0.6542 - val_loss: 0.4526 - val_mae: 0.5255 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4111 - mae: 0.4962 - val_loss: 0.3214 - val_mae: 0.4458 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2377 - mae: 0.6925 - val_loss: 0.5303 - val_mae: 0.5620 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4480 - mae: 0.7131 - val_loss: 0.7340 - val_mae: 0.6801 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4321 - mae: 0.5103 - val_loss: 0.3898 - val_mae: 0.4871 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.23602\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4578 - mae: 0.7375 - val_loss: 0.3857 - val_mae: 0.4819 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7343 - mae: 0.5746 - val_loss: 0.6959 - val_mae: 0.6213 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.23602\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3617 - mae: 0.4685 - val_loss: 0.3061 - val_mae: 0.4426 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.23602 to 0.09934, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1099 - mae: 0.2587 - val_loss: 0.0993 - val_mae: 0.2466 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.09934 to 0.08427, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0837 - mae: 0.2269 - val_loss: 0.0843 - val_mae: 0.2283 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.08427 to 0.07117, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0711 - mae: 0.2095 - val_loss: 0.0712 - val_mae: 0.2093 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.07117 to 0.06701, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0628 - mae: 0.1971 - val_loss: 0.0670 - val_mae: 0.2028 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.06701 to 0.06612, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0573 - mae: 0.1885 - val_loss: 0.0661 - val_mae: 0.2018 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.06612 to 0.06592, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0531 - mae: 0.1814 - val_loss: 0.0659 - val_mae: 0.2021 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.06592 to 0.05455, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0503 - mae: 0.1766 - val_loss: 0.0546 - val_mae: 0.1828 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.05455\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0476 - mae: 0.1716 - val_loss: 0.0564 - val_mae: 0.1864 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.05455 to 0.05237, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0455 - mae: 0.1681 - val_loss: 0.0524 - val_mae: 0.1790 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.05237\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0435 - mae: 0.1645 - val_loss: 0.0563 - val_mae: 0.1874 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.05237\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0413 - mae: 0.1600 - val_loss: 0.0532 - val_mae: 0.1809 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.05237 to 0.04604, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0398 - mae: 0.1571 - val_loss: 0.0460 - val_mae: 0.1675 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.04604 to 0.04557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0391 - mae: 0.1556 - val_loss: 0.0456 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.04557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0378 - mae: 0.1530 - val_loss: 0.0508 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0365 - mae: 0.1505 - val_loss: 0.0485 - val_mae: 0.1723 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.04557 to 0.04286, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0356 - mae: 0.1488 - val_loss: 0.0429 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.04286\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0351 - mae: 0.1476 - val_loss: 0.0451 - val_mae: 0.1648 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04286\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0342 - mae: 0.1458 - val_loss: 0.0503 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04286\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0341 - mae: 0.1454 - val_loss: 0.0430 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.04286 to 0.04100, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0327 - mae: 0.1427 - val_loss: 0.0410 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.04100\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0324 - mae: 0.1419 - val_loss: 0.0424 - val_mae: 0.1607 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.04100 to 0.03904, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0317 - mae: 0.1404 - val_loss: 0.0390 - val_mae: 0.1542 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.03904\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0311 - mae: 0.1389 - val_loss: 0.0420 - val_mae: 0.1599 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03904\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0306 - mae: 0.1380 - val_loss: 0.0399 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.03904\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0304 - mae: 0.1374 - val_loss: 0.0404 - val_mae: 0.1559 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.03904\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0297 - mae: 0.1358 - val_loss: 0.0399 - val_mae: 0.1534 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.03904 to 0.03833, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0293 - mae: 0.1350 - val_loss: 0.0383 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0289 - mae: 0.1340 - val_loss: 0.0385 - val_mae: 0.1534 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0286 - mae: 0.1335 - val_loss: 0.0401 - val_mae: 0.1562 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0284 - mae: 0.1328 - val_loss: 0.0456 - val_mae: 0.1668 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0281 - mae: 0.1320 - val_loss: 0.0428 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.03833 to 0.03666, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0274 - mae: 0.1306 - val_loss: 0.0367 - val_mae: 0.1490 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03666\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0276 - mae: 0.1311 - val_loss: 0.0381 - val_mae: 0.1521 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03666\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0273 - mae: 0.1302 - val_loss: 0.0376 - val_mae: 0.1498 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.03666 to 0.03636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0268 - mae: 0.1289 - val_loss: 0.0364 - val_mae: 0.1485 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03636\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0270 - mae: 0.1295 - val_loss: 0.0382 - val_mae: 0.1531 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.03636\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0267 - mae: 0.1288 - val_loss: 0.0468 - val_mae: 0.1688 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03636\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0263 - mae: 0.1279 - val_loss: 0.0375 - val_mae: 0.1492 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.03636 to 0.03531, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0264 - mae: 0.1280 - val_loss: 0.0353 - val_mae: 0.1458 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03531\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0262 - mae: 0.1276 - val_loss: 0.0379 - val_mae: 0.1511 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.03531 to 0.03461, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0262 - mae: 0.1276 - val_loss: 0.0346 - val_mae: 0.1446 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03461\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0259 - mae: 0.1266 - val_loss: 0.0363 - val_mae: 0.1485 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03461\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0379 - val_mae: 0.1506 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03461\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0259 - mae: 0.1268 - val_loss: 0.0377 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03461\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0255 - mae: 0.1260 - val_loss: 0.0388 - val_mae: 0.1534 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03461\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0254 - mae: 0.1254 - val_loss: 0.0404 - val_mae: 0.1564 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03461\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0260 - mae: 0.1264 - val_loss: 0.0350 - val_mae: 0.1450 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03461\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0252 - mae: 0.1250 - val_loss: 0.0349 - val_mae: 0.1458 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03461\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0258 - mae: 0.1265 - val_loss: 0.0382 - val_mae: 0.1517 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03461\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0254 - mae: 0.1254 - val_loss: 0.0428 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss improved from 0.03461 to 0.03405, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0255 - mae: 0.1257 - val_loss: 0.0341 - val_mae: 0.1431 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03405\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0254 - mae: 0.1253 - val_loss: 0.0364 - val_mae: 0.1478 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03405\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0252 - mae: 0.1248 - val_loss: 0.0346 - val_mae: 0.1445 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03405\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0253 - mae: 0.1251 - val_loss: 0.0396 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.03405 to 0.03345, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0253 - mae: 0.1253 - val_loss: 0.0335 - val_mae: 0.1425 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03345\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0249 - mae: 0.1241 - val_loss: 0.0352 - val_mae: 0.1463 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03345\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0250 - mae: 0.1244 - val_loss: 0.0385 - val_mae: 0.1529 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03345\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0253 - mae: 0.1250 - val_loss: 0.0383 - val_mae: 0.1533 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03345\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0250 - mae: 0.1244 - val_loss: 0.0362 - val_mae: 0.1480 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03345\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0253 - mae: 0.1251 - val_loss: 0.0368 - val_mae: 0.1499 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.03345 to 0.03273, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0250 - mae: 0.1245 - val_loss: 0.0327 - val_mae: 0.1405 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0250 - mae: 0.1244 - val_loss: 0.0346 - val_mae: 0.1447 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0255 - mae: 0.1254 - val_loss: 0.0438 - val_mae: 0.1606 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0253 - mae: 0.1249 - val_loss: 0.0379 - val_mae: 0.1514 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0250 - mae: 0.1243 - val_loss: 0.0378 - val_mae: 0.1511 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0250 - mae: 0.1242 - val_loss: 0.0352 - val_mae: 0.1466 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0249 - mae: 0.1239 - val_loss: 0.0351 - val_mae: 0.1463 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0253 - mae: 0.1252 - val_loss: 0.0334 - val_mae: 0.1424 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0249 - mae: 0.1240 - val_loss: 0.0379 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1240 - val_loss: 0.0383 - val_mae: 0.1533 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0251 - mae: 0.1245 - val_loss: 0.0356 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0253 - mae: 0.1249 - val_loss: 0.0384 - val_mae: 0.1531 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1240 - val_loss: 0.0388 - val_mae: 0.1544 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0255 - mae: 0.1254 - val_loss: 0.0351 - val_mae: 0.1472 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0252 - mae: 0.1246 - val_loss: 0.0390 - val_mae: 0.1518 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0251 - mae: 0.1244 - val_loss: 0.0362 - val_mae: 0.1482 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0252 - mae: 0.1245 - val_loss: 0.0366 - val_mae: 0.1484 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1238 - val_loss: 0.0357 - val_mae: 0.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0247 - mae: 0.1235 - val_loss: 0.0380 - val_mae: 0.1516 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03273\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0249 - mae: 0.1238 - val_loss: 0.0335 - val_mae: 0.1418 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0251 - mae: 0.1242 - val_loss: 0.0422 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.03273 to 0.02101, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0103 - mae: 0.0798 - val_loss: 0.0210 - val_mae: 0.1115 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.02101 to 0.02089, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0088 - mae: 0.0743 - val_loss: 0.0209 - val_mae: 0.1112 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02089\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0723 - val_loss: 0.0210 - val_mae: 0.1116 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.02089 to 0.02046, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0080 - mae: 0.0710 - val_loss: 0.0205 - val_mae: 0.1099 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02046\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0078 - mae: 0.0701 - val_loss: 0.0208 - val_mae: 0.1106 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02046\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0205 - val_mae: 0.1101 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02046\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0208 - val_mae: 0.1109 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02046 to 0.02039, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0073 - mae: 0.0680 - val_loss: 0.0204 - val_mae: 0.1095 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.02039 to 0.02028, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0072 - mae: 0.0674 - val_loss: 0.0203 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.02028 to 0.02024, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0071 - mae: 0.0669 - val_loss: 0.0202 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02024\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0204 - val_mae: 0.1094 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02024\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0069 - mae: 0.0661 - val_loss: 0.0203 - val_mae: 0.1089 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02024\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0205 - val_mae: 0.1100 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02024\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0068 - mae: 0.0653 - val_loss: 0.0207 - val_mae: 0.1103 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.02024 to 0.02017, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0067 - mae: 0.0651 - val_loss: 0.0202 - val_mae: 0.1088 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02017\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0067 - mae: 0.0647 - val_loss: 0.0202 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0066 - mae: 0.0644 - val_loss: 0.0204 - val_mae: 0.1091 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0065 - mae: 0.0641 - val_loss: 0.0202 - val_mae: 0.1088 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0065 - mae: 0.0639 - val_loss: 0.0203 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0064 - mae: 0.0637 - val_loss: 0.0204 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0064 - mae: 0.0635 - val_loss: 0.0204 - val_mae: 0.1095 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02017\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0063 - mae: 0.0631 - val_loss: 0.0205 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02017\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0063 - mae: 0.0629 - val_loss: 0.0203 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0063 - mae: 0.0627 - val_loss: 0.0205 - val_mae: 0.1097 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0062 - mae: 0.0625 - val_loss: 0.0202 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0062 - mae: 0.0622 - val_loss: 0.0204 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0061 - mae: 0.0620 - val_loss: 0.0206 - val_mae: 0.1098 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02017\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0061 - mae: 0.0619 - val_loss: 0.0205 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0061 - mae: 0.0617 - val_loss: 0.0206 - val_mae: 0.1101 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0060 - mae: 0.0615 - val_loss: 0.0204 - val_mae: 0.1093 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0060 - mae: 0.0613 - val_loss: 0.0203 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0059 - mae: 0.0611 - val_loss: 0.0204 - val_mae: 0.1094 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02017\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0059 - mae: 0.0610 - val_loss: 0.0206 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0059 - mae: 0.0608 - val_loss: 0.0206 - val_mae: 0.1100 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02017\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0058 - mae: 0.0606 - val_loss: 0.0205 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.02017 to 0.01979, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0050 - mae: 0.0557 - val_loss: 0.0198 - val_mae: 0.1073 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.01979 to 0.01975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0049 - mae: 0.0552 - val_loss: 0.0198 - val_mae: 0.1072 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.01975 to 0.01973, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0048 - mae: 0.0551 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01973\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0550 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01973\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0549 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.01973 to 0.01972, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0198 - val_mae: 0.1072 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0547 - val_loss: 0.0198 - val_mae: 0.1072 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0547 - val_loss: 0.0198 - val_mae: 0.1072 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0198 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0198 - val_mae: 0.1072 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0545 - val_loss: 0.0198 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0048 - mae: 0.0545 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0047 - mae: 0.0545 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0197 - val_mae: 0.1072 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0198 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0197 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01972\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0047 - mae: 0.0543 - val_loss: 0.0198 - val_mae: 0.1071 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01972\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0047 - mae: 0.0543 - val_loss: 0.0198 - val_mae: 0.1072 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.01972 to 0.01971, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0538 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01971\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss improved from 0.01971 to 0.01971, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.01971 to 0.01970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01970\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01970\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01970\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01970\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01970\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01970\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01970\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01970\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01970\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01970\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01970\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 224: val_loss improved from 0.01970 to 0.01970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0197 - val_mae: 0.1069 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.01970 to 0.01970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1069 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss improved from 0.01970 to 0.01969, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1069 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01969\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01969\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0197 - val_mae: 0.1070 - learning_rate: 1.0000e-07\n",
      "Epoch 281: early stopping\n",
      "Restoring model weights from the end of the best epoch: 231.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1688 m\n",
      "Median positioning error: 0.1507 m\n",
      "90th percentile error: 0.2971 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7529.038283,
   "end_time": "2025-08-09T13:57:31.722600",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-09T11:52:02.684317",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
