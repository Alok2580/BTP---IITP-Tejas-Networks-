{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "66a469d8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-01T13:35:07.583035Z",
     "iopub.status.busy": "2025-08-01T13:35:07.582802Z",
     "iopub.status.idle": "2025-08-01T13:35:09.027348Z",
     "shell.execute_reply": "2025-08-01T13:35:09.026550Z"
    },
    "papermill": {
     "duration": 1.44905,
     "end_time": "2025-08-01T13:35:09.028665",
     "exception": false,
     "start_time": "2025-08-01T13:35:07.579615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "525c952a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:35:09.034347Z",
     "iopub.status.busy": "2025-08-01T13:35:09.033942Z",
     "iopub.status.idle": "2025-08-01T13:35:23.474936Z",
     "shell.execute_reply": "2025-08-01T13:35:23.474320Z"
    },
    "papermill": {
     "duration": 14.445078,
     "end_time": "2025-08-01T13:35:23.476388",
     "exception": false,
     "start_time": "2025-08-01T13:35:09.031310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-01 13:35:10.666552: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754055310.863759      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754055310.919227      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4ee50402",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:35:23.481662Z",
     "iopub.status.busy": "2025-08-01T13:35:23.481216Z",
     "iopub.status.idle": "2025-08-01T13:35:23.485895Z",
     "shell.execute_reply": "2025-08-01T13:35:23.485171Z"
    },
    "papermill": {
     "duration": 0.008317,
     "end_time": "2025-08-01T13:35:23.486955",
     "exception": false,
     "start_time": "2025-08-01T13:35:23.478638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 11  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6b48a42f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:35:23.491488Z",
     "iopub.status.busy": "2025-08-01T13:35:23.491075Z",
     "iopub.status.idle": "2025-08-01T13:35:23.494075Z",
     "shell.execute_reply": "2025-08-01T13:35:23.493581Z"
    },
    "papermill": {
     "duration": 0.006261,
     "end_time": "2025-08-01T13:35:23.495086",
     "exception": false,
     "start_time": "2025-08-01T13:35:23.488825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b47d9306",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:35:23.499859Z",
     "iopub.status.busy": "2025-08-01T13:35:23.499571Z",
     "iopub.status.idle": "2025-08-01T18:34:46.612315Z",
     "shell.execute_reply": "2025-08-01T18:34:46.611279Z"
    },
    "papermill": {
     "duration": 17963.116986,
     "end_time": "2025-08-01T18:34:46.613838",
     "exception": false,
     "start_time": "2025-08-01T13:35:23.496852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754055345.826916      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754055355.552267      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">101,632</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">62,976</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m101,632\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m62,976\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,220,362</span> (4.66 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,220,362\u001b[0m (4.66 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,219,846</span> (4.65 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,219,846\u001b[0m (4.65 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754055369.829824      56 service.cc:148] XLA service 0x7f5320003030 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754055369.830810      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754055374.470592      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 478.73831, saving model to models/best_model_full.keras\n",
      "4375/4375 - 74s - 17ms/step - loss: 489.0770 - mae: 17.5540 - val_loss: 478.7383 - val_mae: 17.3878 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 478.73831 to 478.23639, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 486.1821 - mae: 17.5166 - val_loss: 478.2364 - val_mae: 17.3789 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 485.3194 - mae: 17.4992 - val_loss: 480.9651 - val_mae: 17.4104 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 485.1768 - mae: 17.4947 - val_loss: 478.7713 - val_mae: 17.3806 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 484.8831 - mae: 17.4952 - val_loss: 481.2463 - val_mae: 17.4118 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 484.1478 - mae: 17.4837 - val_loss: 478.5626 - val_mae: 17.3811 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 484.2859 - mae: 17.4876 - val_loss: 479.4449 - val_mae: 17.4123 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 484.0605 - mae: 17.4854 - val_loss: 480.3837 - val_mae: 17.4231 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.8905 - mae: 17.4794 - val_loss: 479.2707 - val_mae: 17.3968 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 478.23639\n",
      "4375/4375 - 55s - 13ms/step - loss: 484.1404 - mae: 17.4841 - val_loss: 479.0027 - val_mae: 17.3883 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 478.23639 to 478.15326, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 483.8617 - mae: 17.4835 - val_loss: 478.1533 - val_mae: 17.3764 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 478.15326 to 477.94131, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.9001 - mae: 17.4808 - val_loss: 477.9413 - val_mae: 17.3738 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.7845 - mae: 17.4796 - val_loss: 479.1639 - val_mae: 17.3879 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.7304 - mae: 17.4786 - val_loss: 478.5243 - val_mae: 17.3806 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 484.0117 - mae: 17.4871 - val_loss: 478.6956 - val_mae: 17.3937 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.8214 - mae: 17.4835 - val_loss: 477.9478 - val_mae: 17.3731 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.9060 - mae: 17.4860 - val_loss: 478.0923 - val_mae: 17.3757 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.4605 - mae: 17.4734 - val_loss: 478.9056 - val_mae: 17.3937 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.6689 - mae: 17.4826 - val_loss: 480.6946 - val_mae: 17.4279 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.6156 - mae: 17.4768 - val_loss: 478.4331 - val_mae: 17.3795 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.7653 - mae: 17.4828 - val_loss: 478.5320 - val_mae: 17.3815 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.5127 - mae: 17.4826 - val_loss: 481.0189 - val_mae: 17.4196 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.3534 - mae: 17.4733 - val_loss: 478.6522 - val_mae: 17.3834 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 12ms/step - loss: 483.3626 - mae: 17.4739 - val_loss: 488.7018 - val_mae: 17.4992 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.5570 - mae: 17.4760 - val_loss: 485.2101 - val_mae: 17.4495 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.7465 - mae: 17.4775 - val_loss: 478.3119 - val_mae: 17.3805 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 482.3820 - mae: 17.4543 - val_loss: 478.1862 - val_mae: 17.3778 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 12ms/step - loss: 483.5128 - mae: 17.4764 - val_loss: 479.8700 - val_mae: 17.3963 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.5442 - mae: 17.4818 - val_loss: 479.0305 - val_mae: 17.3866 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.6655 - mae: 17.4842 - val_loss: 480.0431 - val_mae: 17.4174 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.5383 - mae: 17.4765 - val_loss: 479.9084 - val_mae: 17.3968 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 32: val_loss did not improve from 477.94131\n",
      "4375/4375 - 55s - 13ms/step - loss: 483.4890 - mae: 17.4790 - val_loss: 478.6603 - val_mae: 17.3835 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss improved from 477.94131 to 477.80536, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 481.6609 - mae: 17.4526 - val_loss: 477.8054 - val_mae: 17.3715 - learning_rate: 1.0000e-03\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 477.80536\n",
      "4375/4375 - 55s - 13ms/step - loss: 481.6973 - mae: 17.4538 - val_loss: 478.0999 - val_mae: 17.3748 - learning_rate: 1.0000e-03\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 477.80536\n",
      "4375/4375 - 56s - 13ms/step - loss: 481.7742 - mae: 17.4537 - val_loss: 478.0533 - val_mae: 17.3761 - learning_rate: 1.0000e-03\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 477.80536\n",
      "4375/4375 - 56s - 13ms/step - loss: 481.6988 - mae: 17.4539 - val_loss: 478.2666 - val_mae: 17.3778 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss improved from 477.80536 to 240.51495, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 384.1169 - mae: 15.2879 - val_loss: 240.5150 - val_mae: 12.1242 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss improved from 240.51495 to 154.06993, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 187.4583 - mae: 10.8568 - val_loss: 154.0699 - val_mae: 10.0028 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 154.06993 to 121.52449, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 134.4415 - mae: 9.3950 - val_loss: 121.5245 - val_mae: 8.9100 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 121.52449 to 104.71730, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 113.2036 - mae: 8.4216 - val_loss: 104.7173 - val_mae: 8.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 104.71730 to 84.78912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 94.2271 - mae: 7.6588 - val_loss: 84.7891 - val_mae: 7.3778 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 84.78912 to 73.50702, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 83.1085 - mae: 7.1769 - val_loss: 73.5070 - val_mae: 6.6523 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 73.50702 to 61.88470, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 69.1846 - mae: 6.4622 - val_loss: 61.8847 - val_mae: 6.0733 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 61.88470 to 47.01348, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 51.5847 - mae: 5.5242 - val_loss: 47.0135 - val_mae: 5.1727 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 47.01348\n",
      "4375/4375 - 56s - 13ms/step - loss: 43.5520 - mae: 4.9890 - val_loss: 49.1282 - val_mae: 5.2932 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 47.01348 to 29.85000, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 32.6835 - mae: 4.3358 - val_loss: 29.8500 - val_mae: 4.0615 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 29.85000\n",
      "4375/4375 - 56s - 13ms/step - loss: 25.1047 - mae: 3.7906 - val_loss: 30.6723 - val_mae: 4.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 29.85000 to 24.33334, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 24.3584 - mae: 3.7273 - val_loss: 24.3333 - val_mae: 3.6103 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 24.33334 to 16.54683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 19.9160 - mae: 3.3363 - val_loss: 16.5468 - val_mae: 2.9339 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 16.54683 to 12.33082, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 12.1827 - mae: 2.6485 - val_loss: 12.3308 - val_mae: 2.4810 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 12.33082 to 8.50337, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 9.2670 - mae: 2.2918 - val_loss: 8.5034 - val_mae: 2.0810 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 8.50337 to 7.58162, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 8.1586 - mae: 2.0790 - val_loss: 7.5816 - val_mae: 1.9841 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 7.58162 to 6.49222, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 6.6986 - mae: 1.8927 - val_loss: 6.4922 - val_mae: 1.7247 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 6.49222 to 5.41986, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 5.1944 - mae: 1.6957 - val_loss: 5.4199 - val_mae: 1.6188 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 5.41986 to 4.69302, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 4.7823 - mae: 1.5733 - val_loss: 4.6930 - val_mae: 1.4689 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 4.69302 to 3.59295, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 3.6737 - mae: 1.3920 - val_loss: 3.5929 - val_mae: 1.2800 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 3.59295\n",
      "4375/4375 - 56s - 13ms/step - loss: 4.1365 - mae: 1.3390 - val_loss: 5.2895 - val_mae: 1.5328 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 3.59295 to 2.90271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 2.8636 - mae: 1.2358 - val_loss: 2.9027 - val_mae: 1.0968 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 2.90271\n",
      "4375/4375 - 56s - 13ms/step - loss: 1.9526 - mae: 1.0606 - val_loss: 3.1123 - val_mae: 1.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 2.90271 to 2.57050, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 2.7117 - mae: 1.1438 - val_loss: 2.5705 - val_mae: 1.0355 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 2.57050 to 2.34533, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 1.9160 - mae: 1.0148 - val_loss: 2.3453 - val_mae: 1.0553 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 2.34533 to 1.82941, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 2.1764 - mae: 1.0502 - val_loss: 1.8294 - val_mae: 0.9664 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 1.82941\n",
      "4375/4375 - 55s - 13ms/step - loss: 2.0291 - mae: 0.9874 - val_loss: 2.1304 - val_mae: 0.8920 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 1.82941\n",
      "4375/4375 - 55s - 13ms/step - loss: 1.5712 - mae: 0.8984 - val_loss: 1.9256 - val_mae: 0.9091 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 1.82941\n",
      "4375/4375 - 55s - 13ms/step - loss: 3.3281 - mae: 1.2341 - val_loss: 1.8317 - val_mae: 0.9957 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 1.82941 to 1.16649, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 1.3041 - mae: 0.8703 - val_loss: 1.1665 - val_mae: 0.7935 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 1.16649\n",
      "4375/4375 - 56s - 13ms/step - loss: 1.4016 - mae: 0.8414 - val_loss: 1.2349 - val_mae: 0.7706 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 1.16649\n",
      "4375/4375 - 55s - 13ms/step - loss: 1.8430 - mae: 0.8837 - val_loss: 3.7243 - val_mae: 1.2617 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 1.16649\n",
      "4375/4375 - 55s - 13ms/step - loss: 1.7982 - mae: 0.9321 - val_loss: 1.6338 - val_mae: 0.9381 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 1.16649\n",
      "4375/4375 - 55s - 13ms/step - loss: 1.9830 - mae: 0.9586 - val_loss: 1.3050 - val_mae: 0.8630 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 1.16649 to 0.89315, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.9007 - mae: 0.7295 - val_loss: 0.8931 - val_mae: 0.7094 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.89315 to 0.66700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 1.1045 - mae: 0.7190 - val_loss: 0.6670 - val_mae: 0.6260 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.66700\n",
      "4375/4375 - 55s - 13ms/step - loss: 1.0895 - mae: 0.6956 - val_loss: 0.8145 - val_mae: 0.6658 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.66700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.9112 - mae: 0.6622 - val_loss: 0.7273 - val_mae: 0.6315 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.66700 to 0.58027, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.5502 - mae: 0.5688 - val_loss: 0.5803 - val_mae: 0.5528 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.58027 to 0.52341, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.6829 - mae: 0.5980 - val_loss: 0.5234 - val_mae: 0.5393 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.52341\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.4155 - mae: 0.4998 - val_loss: 0.5482 - val_mae: 0.5416 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.52341 to 0.42295, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.4064 - mae: 0.4880 - val_loss: 0.4229 - val_mae: 0.5075 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.42295 to 0.35423, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3370 - mae: 0.4479 - val_loss: 0.3542 - val_mae: 0.4622 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.35423\n",
      "4375/4375 - 55s - 13ms/step - loss: 1.0509 - mae: 0.5919 - val_loss: 0.7679 - val_mae: 0.6708 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.35423\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3829 - mae: 0.4763 - val_loss: 0.3779 - val_mae: 0.4358 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.35423\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2888 - mae: 0.4200 - val_loss: 0.3897 - val_mae: 0.4518 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.35423 to 0.28369, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2654 - mae: 0.4006 - val_loss: 0.2837 - val_mae: 0.3971 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.28369\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2371 - mae: 0.3789 - val_loss: 0.3077 - val_mae: 0.4265 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.28369 to 0.23687, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2583 - mae: 0.3843 - val_loss: 0.2369 - val_mae: 0.3781 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.23687\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.4898 - mae: 0.4325 - val_loss: 0.8030 - val_mae: 0.5666 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.23687\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3247 - mae: 0.4209 - val_loss: 0.2947 - val_mae: 0.4156 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.23687\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3354 - mae: 0.4176 - val_loss: 0.2438 - val_mae: 0.3751 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.23687 to 0.21775, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2062 - mae: 0.3557 - val_loss: 0.2177 - val_mae: 0.3453 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.21775\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2085 - mae: 0.3545 - val_loss: 0.2341 - val_mae: 0.3624 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.21775 to 0.21521, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1978 - mae: 0.3437 - val_loss: 0.2152 - val_mae: 0.3558 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.21521 to 0.17700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1739 - mae: 0.3253 - val_loss: 0.1770 - val_mae: 0.3195 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.17700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.3328 - mae: 0.3799 - val_loss: 0.2051 - val_mae: 0.3249 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.17700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1817 - mae: 0.3218 - val_loss: 0.4643 - val_mae: 0.5300 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.17700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.5459 - mae: 0.3945 - val_loss: 0.4960 - val_mae: 0.5233 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.17700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.2385 - mae: 0.3595 - val_loss: 0.1869 - val_mae: 0.3236 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.17700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1553 - mae: 0.3060 - val_loss: 0.2525 - val_mae: 0.3932 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.17700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1494 - mae: 0.3023 - val_loss: 0.1864 - val_mae: 0.3178 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.17700\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.4624 - mae: 0.4090 - val_loss: 0.2077 - val_mae: 0.3431 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.17700 to 0.14343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1763 - mae: 0.3239 - val_loss: 0.1434 - val_mae: 0.2950 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.14343 to 0.13637, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1414 - mae: 0.2944 - val_loss: 0.1364 - val_mae: 0.2881 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.13637\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1602 - mae: 0.3012 - val_loss: 0.1488 - val_mae: 0.3024 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.13637\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1362 - mae: 0.2854 - val_loss: 0.1369 - val_mae: 0.2903 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.13637\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1353 - mae: 0.2871 - val_loss: 0.1394 - val_mae: 0.2916 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.13637 to 0.11601, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1214 - mae: 0.2724 - val_loss: 0.1160 - val_mae: 0.2671 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.11601\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1771 - mae: 0.2910 - val_loss: 0.1462 - val_mae: 0.2949 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.11601 to 0.10429, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1060 - mae: 0.2531 - val_loss: 0.1043 - val_mae: 0.2517 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.10429\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1063 - mae: 0.2555 - val_loss: 0.1134 - val_mae: 0.2588 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.10429\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1161 - mae: 0.2639 - val_loss: 0.1061 - val_mae: 0.2560 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.10429\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1046 - mae: 0.2523 - val_loss: 0.1286 - val_mae: 0.2805 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.10429\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0998 - mae: 0.2478 - val_loss: 0.1220 - val_mae: 0.2655 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.10429\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1051 - mae: 0.2459 - val_loss: 0.1576 - val_mae: 0.3029 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.10429 to 0.09690, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0963 - mae: 0.2429 - val_loss: 0.0969 - val_mae: 0.2410 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.09690 to 0.09669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0993 - mae: 0.2439 - val_loss: 0.0967 - val_mae: 0.2441 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.09669\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.1376 - mae: 0.2616 - val_loss: 0.1204 - val_mae: 0.2674 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.09669 to 0.09356, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0904 - mae: 0.2350 - val_loss: 0.0936 - val_mae: 0.2409 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.09356\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0895 - mae: 0.2345 - val_loss: 0.1082 - val_mae: 0.2591 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.09356\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0884 - mae: 0.2330 - val_loss: 0.1022 - val_mae: 0.2515 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.09356\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0885 - mae: 0.2328 - val_loss: 0.1167 - val_mae: 0.2717 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.09356\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0878 - mae: 0.2303 - val_loss: 0.1228 - val_mae: 0.2735 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.09356\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0878 - mae: 0.2292 - val_loss: 0.0989 - val_mae: 0.2460 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.09356 to 0.09294, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0788 - mae: 0.2198 - val_loss: 0.0929 - val_mae: 0.2394 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.09294 to 0.07994, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0799 - mae: 0.2213 - val_loss: 0.0799 - val_mae: 0.2224 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.07994\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0794 - mae: 0.2197 - val_loss: 0.1604 - val_mae: 0.2929 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.07994\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0759 - mae: 0.2159 - val_loss: 0.1168 - val_mae: 0.2641 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.07994\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0761 - mae: 0.2136 - val_loss: 0.1062 - val_mae: 0.2516 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.07994\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1497 - mae: 0.2485 - val_loss: 0.0899 - val_mae: 0.2345 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.07994\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0659 - mae: 0.2016 - val_loss: 0.0848 - val_mae: 0.2290 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.07994\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0722 - mae: 0.2106 - val_loss: 0.0935 - val_mae: 0.2375 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.07994 to 0.07069, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0774 - mae: 0.2152 - val_loss: 0.0707 - val_mae: 0.2087 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0672 - mae: 0.2032 - val_loss: 0.0745 - val_mae: 0.2120 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0768 - mae: 0.2123 - val_loss: 0.0738 - val_mae: 0.2137 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0646 - mae: 0.1997 - val_loss: 0.0871 - val_mae: 0.2276 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1145 - mae: 0.2312 - val_loss: 0.0771 - val_mae: 0.2196 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0665 - mae: 0.2021 - val_loss: 0.0794 - val_mae: 0.2197 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0728 - mae: 0.2107 - val_loss: 0.0879 - val_mae: 0.2338 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0765 - mae: 0.2111 - val_loss: 0.1031 - val_mae: 0.2462 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0668 - mae: 0.2022 - val_loss: 0.0718 - val_mae: 0.2102 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0672 - mae: 0.2032 - val_loss: 0.0802 - val_mae: 0.2212 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.07069\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0644 - mae: 0.1990 - val_loss: 0.0752 - val_mae: 0.2072 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.07069 to 0.06612, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0663 - mae: 0.2003 - val_loss: 0.0661 - val_mae: 0.2027 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.06612 to 0.05807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0726 - mae: 0.2045 - val_loss: 0.0581 - val_mae: 0.1882 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1009 - mae: 0.2086 - val_loss: 0.0691 - val_mae: 0.2047 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0567 - mae: 0.1873 - val_loss: 0.0723 - val_mae: 0.2078 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0633 - mae: 0.1972 - val_loss: 0.0907 - val_mae: 0.2355 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0662 - mae: 0.2001 - val_loss: 0.0641 - val_mae: 0.1995 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0661 - mae: 0.2002 - val_loss: 0.0675 - val_mae: 0.2022 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0644 - mae: 0.1948 - val_loss: 0.1149 - val_mae: 0.2704 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0604 - mae: 0.1929 - val_loss: 0.0645 - val_mae: 0.1972 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1076 - mae: 0.2143 - val_loss: 0.0706 - val_mae: 0.2071 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.05807\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0575 - mae: 0.1844 - val_loss: 0.0655 - val_mae: 0.1982 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.05807 to 0.05744, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0810 - mae: 0.2010 - val_loss: 0.0574 - val_mae: 0.1883 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.05744 to 0.05104, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0561 - mae: 0.1857 - val_loss: 0.0510 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.1041 - mae: 0.2140 - val_loss: 0.1199 - val_mae: 0.2005 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0531 - mae: 0.1814 - val_loss: 0.0709 - val_mae: 0.2084 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0799 - mae: 0.2044 - val_loss: 0.0696 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0655 - mae: 0.1953 - val_loss: 0.1041 - val_mae: 0.2578 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0651 - mae: 0.1990 - val_loss: 0.0655 - val_mae: 0.2014 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0625 - mae: 0.1956 - val_loss: 0.0777 - val_mae: 0.2173 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0609 - mae: 0.1931 - val_loss: 0.0631 - val_mae: 0.1948 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0599 - mae: 0.1917 - val_loss: 0.0898 - val_mae: 0.2362 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0586 - mae: 0.1888 - val_loss: 0.0757 - val_mae: 0.2173 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.1149 - mae: 0.2030 - val_loss: 1.0272 - val_mae: 0.6124 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0692 - mae: 0.1947 - val_loss: 0.0608 - val_mae: 0.1917 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 12ms/step - loss: 0.0534 - mae: 0.1808 - val_loss: 0.1175 - val_mae: 0.2695 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0600 - mae: 0.1916 - val_loss: 0.0750 - val_mae: 0.2162 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0605 - mae: 0.1914 - val_loss: 0.1106 - val_mae: 0.1989 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0579 - mae: 0.1883 - val_loss: 0.0681 - val_mae: 0.2068 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0605 - mae: 0.1919 - val_loss: 0.0891 - val_mae: 0.2337 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0577 - mae: 0.1863 - val_loss: 0.0786 - val_mae: 0.2178 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0693 - mae: 0.1944 - val_loss: 0.0680 - val_mae: 0.2066 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0555 - mae: 0.1843 - val_loss: 0.0605 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.05104\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0600 - mae: 0.1891 - val_loss: 0.0768 - val_mae: 0.2141 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.05104 to 0.02860, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0219 - mae: 0.1145 - val_loss: 0.0286 - val_mae: 0.1306 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.02860 to 0.02522, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0153 - mae: 0.0977 - val_loss: 0.0252 - val_mae: 0.1223 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.02522 to 0.02438, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0133 - mae: 0.0913 - val_loss: 0.0244 - val_mae: 0.1203 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss improved from 0.02438 to 0.02302, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0122 - mae: 0.0874 - val_loss: 0.0230 - val_mae: 0.1169 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss improved from 0.02302 to 0.02244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0113 - mae: 0.0844 - val_loss: 0.0224 - val_mae: 0.1153 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.02244 to 0.02243, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0107 - mae: 0.0820 - val_loss: 0.0224 - val_mae: 0.1153 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.02243 to 0.02233, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0102 - mae: 0.0803 - val_loss: 0.0223 - val_mae: 0.1152 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.02233 to 0.02172, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0099 - mae: 0.0788 - val_loss: 0.0217 - val_mae: 0.1133 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02172\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0095 - mae: 0.0772 - val_loss: 0.0218 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02172\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0093 - mae: 0.0763 - val_loss: 0.0223 - val_mae: 0.1149 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.02172 to 0.02115, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0089 - mae: 0.0750 - val_loss: 0.0212 - val_mae: 0.1117 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02115\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0086 - mae: 0.0737 - val_loss: 0.0222 - val_mae: 0.1148 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02115\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0084 - mae: 0.0727 - val_loss: 0.0217 - val_mae: 0.1135 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02115\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0082 - mae: 0.0718 - val_loss: 0.0215 - val_mae: 0.1128 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss improved from 0.02115 to 0.02085, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0080 - mae: 0.0712 - val_loss: 0.0209 - val_mae: 0.1110 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.02085 to 0.02047, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0079 - mae: 0.0706 - val_loss: 0.0205 - val_mae: 0.1095 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02047\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0078 - mae: 0.0698 - val_loss: 0.0212 - val_mae: 0.1122 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02047\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0075 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1105 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.02047 to 0.02043, saving model to models/best_model_full.keras\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0074 - mae: 0.0684 - val_loss: 0.0204 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02043\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0073 - mae: 0.0678 - val_loss: 0.0207 - val_mae: 0.1104 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02043\n",
      "4375/4375 - 55s - 13ms/step - loss: 0.0072 - mae: 0.0673 - val_loss: 0.0206 - val_mae: 0.1098 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.02043 to 0.02038, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 0.0070 - mae: 0.0664 - val_loss: 0.0204 - val_mae: 0.1093 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02038\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0069 - mae: 0.0660 - val_loss: 0.0206 - val_mae: 0.1100 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02038\n",
      "4375/4375 - 57s - 13ms/step - loss: 0.0068 - mae: 0.0655 - val_loss: 0.0207 - val_mae: 0.1099 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.02038 to 0.02011, saving model to models/best_model_full.keras\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0067 - mae: 0.0648 - val_loss: 0.0201 - val_mae: 0.1084 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02011\n",
      "4375/4375 - 58s - 13ms/step - loss: 0.0066 - mae: 0.0645 - val_loss: 0.0203 - val_mae: 0.1094 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02011\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0065 - mae: 0.0639 - val_loss: 0.0202 - val_mae: 0.1089 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02011\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0064 - mae: 0.0634 - val_loss: 0.0210 - val_mae: 0.1115 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02011\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0063 - mae: 0.0630 - val_loss: 0.0211 - val_mae: 0.1116 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02011\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0062 - mae: 0.0627 - val_loss: 0.0203 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02011\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0062 - mae: 0.0624 - val_loss: 0.0202 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.02011 to 0.02003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0061 - mae: 0.0618 - val_loss: 0.0200 - val_mae: 0.1080 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02003\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0060 - mae: 0.0616 - val_loss: 0.0210 - val_mae: 0.1114 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02003\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0059 - mae: 0.0611 - val_loss: 0.0206 - val_mae: 0.1100 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.02003\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0058 - mae: 0.0607 - val_loss: 0.0202 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02003\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0203 - val_mae: 0.1091 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.02003 to 0.01995, saving model to models/best_model_full.keras\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0057 - mae: 0.0600 - val_loss: 0.0200 - val_mae: 0.1080 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01995\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0056 - mae: 0.0594 - val_loss: 0.0201 - val_mae: 0.1083 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.01995 to 0.01993, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0055 - mae: 0.0590 - val_loss: 0.0199 - val_mae: 0.1078 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01993\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0202 - val_mae: 0.1088 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.01993 to 0.01978, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0054 - mae: 0.0584 - val_loss: 0.0198 - val_mae: 0.1075 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01978\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0053 - mae: 0.0581 - val_loss: 0.0199 - val_mae: 0.1076 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.01978 to 0.01975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0198 - val_mae: 0.1073 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.01975 to 0.01969, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0052 - mae: 0.0575 - val_loss: 0.0197 - val_mae: 0.1069 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01969\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0200 - val_mae: 0.1078 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01969\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0051 - mae: 0.0570 - val_loss: 0.0203 - val_mae: 0.1087 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01969\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0051 - mae: 0.0568 - val_loss: 0.0197 - val_mae: 0.1069 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss improved from 0.01969 to 0.01967, saving model to models/best_model_full.keras\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0050 - mae: 0.0561 - val_loss: 0.0197 - val_mae: 0.1069 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01967\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0050 - mae: 0.0561 - val_loss: 0.0200 - val_mae: 0.1078 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01967\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0049 - mae: 0.0556 - val_loss: 0.0202 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01967\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0049 - mae: 0.0555 - val_loss: 0.0205 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01967\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0048 - mae: 0.0551 - val_loss: 0.0200 - val_mae: 0.1078 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01967\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0048 - mae: 0.0550 - val_loss: 0.0198 - val_mae: 0.1075 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01967\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0047 - mae: 0.0547 - val_loss: 0.0198 - val_mae: 0.1071 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01967\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0047 - mae: 0.0546 - val_loss: 0.0201 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01967\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0046 - mae: 0.0541 - val_loss: 0.0203 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01967\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0046 - mae: 0.0539 - val_loss: 0.0202 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01967\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0046 - mae: 0.0539 - val_loss: 0.0203 - val_mae: 0.1085 - learning_rate: 1.0000e-04\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01967\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0045 - mae: 0.0533 - val_loss: 0.0201 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01967\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0045 - mae: 0.0533 - val_loss: 0.0205 - val_mae: 0.1093 - learning_rate: 1.0000e-04\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01967\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0045 - mae: 0.0531 - val_loss: 0.0205 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01967\n",
      "4375/4375 - 63s - 14ms/step - loss: 0.0044 - mae: 0.0528 - val_loss: 0.0202 - val_mae: 0.1080 - learning_rate: 1.0000e-04\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01967\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0198 - val_mae: 0.1073 - learning_rate: 1.0000e-04\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01967\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0043 - mae: 0.0523 - val_loss: 0.0201 - val_mae: 0.1078 - learning_rate: 1.0000e-04\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss improved from 0.01967 to 0.01965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0043 - mae: 0.0522 - val_loss: 0.0197 - val_mae: 0.1065 - learning_rate: 1.0000e-04\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01965\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0042 - mae: 0.0518 - val_loss: 0.0198 - val_mae: 0.1068 - learning_rate: 1.0000e-04\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01965\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0042 - mae: 0.0516 - val_loss: 0.0209 - val_mae: 0.1106 - learning_rate: 1.0000e-04\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01965\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0042 - mae: 0.0515 - val_loss: 0.0199 - val_mae: 0.1073 - learning_rate: 1.0000e-04\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss improved from 0.01965 to 0.01876, saving model to models/best_model_full.keras\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0188 - val_mae: 0.1037 - learning_rate: 1.0000e-05\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.01876 to 0.01872, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0027 - mae: 0.0410 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01872\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0187 - val_mae: 0.1035 - learning_rate: 1.0000e-05\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01872\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0026 - mae: 0.0405 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01872\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01872\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01872\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0187 - val_mae: 0.1035 - learning_rate: 1.0000e-05\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01872\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0026 - mae: 0.0400 - val_loss: 0.0187 - val_mae: 0.1035 - learning_rate: 1.0000e-05\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01872\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0026 - mae: 0.0399 - val_loss: 0.0187 - val_mae: 0.1037 - learning_rate: 1.0000e-05\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01872\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0188 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss improved from 0.01872 to 0.01866, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-05\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0188 - val_mae: 0.1037 - learning_rate: 1.0000e-05\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-05\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0394 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0187 - val_mae: 0.1035 - learning_rate: 1.0000e-05\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0393 - val_loss: 0.0187 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01866\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0025 - mae: 0.0392 - val_loss: 0.0187 - val_mae: 0.1035 - learning_rate: 1.0000e-05\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0391 - val_loss: 0.0188 - val_mae: 0.1038 - learning_rate: 1.0000e-05\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01866\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0025 - mae: 0.0392 - val_loss: 0.0188 - val_mae: 0.1036 - learning_rate: 1.0000e-05\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss improved from 0.01866 to 0.01863, saving model to models/best_model_full.keras\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0381 - val_loss: 0.0186 - val_mae: 0.1032 - learning_rate: 1.0000e-06\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-06\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-06\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0186 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0186 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-06\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0186 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0188 - val_mae: 0.1035 - learning_rate: 1.0000e-06\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-06\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0378 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-06\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01863\n",
      "4375/4375 - 62s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0186 - val_mae: 0.1032 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01863\n",
      "4375/4375 - 59s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.01863\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0186 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.01863\n",
      "4375/4375 - 59s - 13ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0186 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.01863\n",
      "4375/4375 - 60s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0186 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1034 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0187 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0186 - val_mae: 0.1032 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.01863\n",
      "4375/4375 - 61s - 14ms/step - loss: 0.0023 - mae: 0.0376 - val_loss: 0.0186 - val_mae: 0.1033 - learning_rate: 1.0000e-07\n",
      "Epoch 313: early stopping\n",
      "Restoring model weights from the end of the best epoch: 263.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 7ms/step\n",
      "Mean positioning error: 0.1630 m\n",
      "Median positioning error: 0.1426 m\n",
      "90th percentile error: 0.2956 m\n"
     ]
    },
    {
     "data": {
      "image/png": "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7fZNmzbFj8sQi9tT2wMGDEhY1A8ZMgTf/OY38fTTT2Pbtm2oqKjAbbfd1mP8VHafHzlyJFzXxYcffphw+969e9HQ0CCtDw6Wz0cffdRt4b5lyxaleSRjWl8REZE5uEgnIqKM8b3vfQ8FBQW4/PLLsXfv3m7HP/roI/zyl788ZJyWlhZ89atfRV1dHX74wx/26WvQulqwYAHWrl2b8AuE/fv34/e//z1GjRqFKVOm9LuNZIYMGYIZM2bg4YcfRkNDQ/z29evX4/nnn8eCBQsAANFoFMFgMOG+gwYNwtChQ7t95VdngUAAABJi9yTW1j333JNw+9133w0AOPPMMw8ZI51OP/107N69G3//+9/jt7W2tuIPf/iD0jySMa2viIjIHPxMOhERZYyxY8fi8ccfx0UXXYTJkyfjkksuwRFHHIG2tja89tpr+Mtf/oLLLrss4T67d+/Go48+CqDj1fMNGzbgL3/5C6qqqvDd734XV155ZVpyu+GGG/C///u/OOOMM/Dtb38b5eXlePjhh7Ft2zY89dRT8Hjk/V785z//Oc444wzMmTMHX//61+NfwVZSUhL/TvPGxkYcdthh+PznP4/p06ejsLAQL7zwAv7zn//grrvu6jF2fn4+pkyZgieeeAITJkxAeXk5jjjiiKSfr58+fTouvfRS/P73v0dDQwNOPPFErF27Fg8//DDOPfdcnHzyybK6IKkrr7wSv/71r/GlL30J1113HYYMGYLHHnsMeXl5AHr/LoF//etf8XdEdDZ37tw+f57ftL4iIiJzcJFOREQZ5eyzz8a7776Ln//853jmmWfw29/+Fn6/H9OmTcNdd93Vbefut99+G1/96lfjm64NHz4cn/vc53D55Zdj1qxZactr8ODBeO211/D9738f9957L1pbWzFt2jT84x//kP6q6Lx587Bs2TIsXrwYN910E3w+H0488UT87Gc/i284FggE8M1vfhPPP/88/vrXv8J1XYwbNw6/+c1vcPXVVx80/h//+Ed861vfwvXXX4+2tjYsXry4x03w/vjHP2LMmDF46KGH8Le//Q2VlZW48cYbsXjx4rTXfSiFhYV48cUX8a1vfQu//OUvUVhYiEsuuQRz587FBRdcEF+sH8pNN92U9PYHH3ywX5vumdRXRERkDkfo3GGFiIiISLF77rkH119/PXbt2oVhw4bpToeIiCgBF+lERERkrZaWloSd0VtbW3HkkUciGo3igw8+0JgZERFRcny7OxEREVnr/PPPx4gRIzBjxgwEg0E8+uij2LRpEx577DHdqRERESXFRToRERFZ6/TTT8cf//hHPPbYY4hGo5gyZQr+7//+DxdddJHu1IiIiJLi292JiIiIiIiIDMHvSSciIiIiIiIyBBfpRERERERERIbIus+ku66LTz75BEVFRXAcR3c6REREREREZDkhBBobGzF06FB4PId4rVxo9O9//1ucddZZYsiQIQKA+Nvf/nbI+6xcuVIceeSRIjc3V4wdO1Y8+OCDKbX58ccfCwD8wz/8wz/8wz/8wz/8wz/8wz/8wz9K/3z88ceHXLNqfSV9//79mD59Or72ta/h/PPPP+TPb9u2DWeeeSauuuoqPPbYY1ixYgUuv/xyDBkyBKeffnqv2iwqKorHKi8v71f+ZC4hBCKRCHw+H98x0YVNfWNyLbpzU9m+zLZkxE5XzEgkgueffx6nnXYafD5fWnIj8xx//B3YuzeIwYNL8PLLN+pOxyi6r3PpZHItunPjfKImJucU+wWDQYwYMSK+Hj0YrYv0M844A2eccUavf/6+++7D6NGjcddddwEAJk+ejFdeeQW/+MUver1Ij51ARUVFKC4uTj1pygiu66Kurg5FRUWHfjtJlrGpb0yuRXduKtuX2ZaM2OmKGYlEEAgEUFxczCdUFvN6/fB4/PB6/Xze0IXu61w6mVyL7tw4n6iJyTnFfq7rAkCvfqGTUZ9JX716NebNm5dw2+mnn47vfOc7ehIiIiIiIiLqxHUF2l0BV3T83R51UdPUhnbXRdQVEAKIHjjuCsAVAm2RCJ7c6oF/UzXmjh+E4jwu1LNZRi3Sq6qqMHjw4ITbBg8ejFAohJaWFuTn53e7TzgcRjgcjv8/FAoB6PhtVSQSkZswaeO6Ltrb2xGJRIz7jbhuNvWNybXozk1l+zLbkhE7XTFjcwjnEtuJ+N8c60S6r3PpZHItunPLhPkk6go0trbDFQKi08LXFYj/PxqNoj7YhJqwB63tHT8fFQcWyu6B+xz4OyoEIlEX9c0RNIfbUbu/DcHWdkSjAlFXxBfbwZYI6veH4cJBW7uL2v1taIm4/egBD15+7G383+WfwcyRZf2IQyZKZQ7JqEV6X9xxxx245ZZbut2+cuVKBAIBDRkREZFNli9frjsFkqi1tTX+99KlSzVnQ2Q+VwDN7UCbC9S2OqhqAaICEOLArlmi0w5aCbc5EADCUaAuDLRFO+4XFQ7CUaCpvePnXAG4SPx3xDVrH4FkvI5Afk7H9187zqd/OwA8nf4eEhD4ZP1q7H1fb76Ufs3Nzb3+2YxapFdWVmLv3r0Jt+3duxfFxcVJX0UHgBtvvBGLFi2K/z8UCmH48OE4+eSTUVFRITVfIiKyVyQSwfLly3Hqqafy84MWu+WWtwC0IS8vHwsWLNCdDpEWQghs2bcfG/c0ItQaQXUojHC7i8ZwO177qBbtUYG2qIt2V6Ap3A4hDh1TJo8DeBynYzHsOJ3+/+m/S/J9yPN54DgOvJ7Yz3Uc93o6fjYvx4NBxX4EfF5UFPoRyPXC63HgdQCvx4Mcr4PyglwU5HqRm+NBXo4XAwpz4fU4yPE48Bz4O/b/g30WmXOK/WLv6O6NjFqkz5kzp9tvsZcvX445c+b0eB+/3w+/39/tdp/PxxPAYkIIhMNh+P1+43Zp1c2mvjG5Ft25qWxfZlsyYqc7JueT7MFxTqT7OpdOJtei+nq+pboJ7+wKYm+oFbsbWvBBVSM2fBJCcySaUqzcHA+K83yYPKQIZYHc+IK5+8IZ8cWzAwfCjaI44MeI8gAC/hz4PA5yvB6UBnzxRXKOp2NB7T3wd47XwYBC/0EXwpkwnwCcU2yWk9P7pbfWRXpTUxO2bNkS//+2bdvw9ttvo7y8HCNGjMCNN96I3bt3409/+hMA4KqrrsKvf/1rfO9738PXvvY1vPjii/jzn/+MZ599VlcJZCghBJqampCbm2vcZKubTX1jci26c1PZvsy2ZMTWPTZEtrDpXDK5lnTm5roCe0KtaGptR6g1go/rmrGpqhFv72zAzrpm1De3Idye/DPVXo+Dw4cWY1BRHgYU5qIk4IM/x4uCXC8OH1qCQcV++Lwe+LwOKovzkONN/fPrsd3Sy8vL0/75d84npJtI4S0mWhfpb7zxBk4++eT4/2NvS7/00kvx0EMPYc+ePdi5c2f8+OjRo/Hss8/i+uuvxy9/+Uscdthh+OMf/9jrr18jIiIiIrJVJOriP9vqsHJzNYItEbRGXOxrDKO+uQ17gq0Ithx646rYYnzMgAIMLPJj9IACDA0IzJowDAE/X+ElUkHrIv2kk0466G8UHnrooaT3eeuttyRmRURERESUOWqbwnjijY/x8GvbsTcUPuTPlxfkIt/nxcAiP8YNKsTUYSU4fGgxSgO5GFKShwL/p0uE2KvbeT6vzBKIqJOM+kw6UW85jgOfz8e3HiVhU9+YXIvu3FS2L7MtGbF1jw2RLWw6l0yupXNuUVfgw+qOz4iv21GPvaEwttU04aN9++M/H8j1Yu7YAThyRCn8OR4EcnMwpDQPZYFcDCvNR0m+D7k5vX8rOecTtTHJXqk8TrhIJys5joOSkhLdaRjJpr4xuRbdualsX2ZbMmLrHhvKLLHnVHwO3p1N55KptbiuwHPvV+HfH+zDqs37UBVq7fFnDyvLxwVHHYbLjx+Norz0vS2d84namGQvLtIp6wkh0NLSgvz8fP52swub+sbkWnTnprJ9mW3JiK17bCizxD6Vp/srpUxk07lkSi3B5gg2VYVQt78NO+qa8cjqHdjd0JLwM/4cDyZVFuHwYSWYPKQYRf4cTB5SjImVRVJy4nyiNibZK2M2jiOSRQiB5uZm5OXl8aLZhU19Y3ItunNT2b7MtmTE1j02RLaw6VzSWcumqhD++PI2/Gd7HXbUNnc77vU4OH1SBeZPOwyzRlegojAXvj7snN5XnE/UxiR7cZFORERERGSwD/Y24k+rt+N/136MqPvpk/fSgA9jBxaiOC8Hc8cOwDkzhsDTtl/K15IRkZm4SCciIiIiUqClLYp/vPsJHl+zE29/3BC/fVJlEa48cQxmjijHiIpAwn06dlffDyLKHlykk5Ucx4Hf7+dbj5KwqW9MrkV3birbl9mWjNi6x4bIFjadS7JrCTZH8NNlm/C/a3cm3P6ZUWU4a9pQfHn2COT08BZ23f3M+URtTLIXN46jrOc4DoqK5Gygkuls6huTa9Gdm8r2ZbYlI7busaHMwt3de2bTuSSjlpa2KF76cB+Wra/CP9/9BJFox1vaywI+nHvkMJx/5GGYetihdwbX3c+cT9TGJHtxkU5ZTwiBpqYmFBYW8rebXdjUNybXojs3le3LbEtGbN1jQ5mFu7v3zKZzKZ21NIXb8fRbu/HrF7ckfGXaiPIArj1lHM47clhKG7/p7mfOJ2pjkr24cRxlPSEEwuEwCgoKeNHswqa+MbkW3bmpbF9mWzJi6x4bIlvYdC71txYhBN7/JITfrvoI/1q/B532gcOpUwbjy7NH4MQJA/scm/OJmbF1jw1lFi7SiYiIiIgkC7VG8MAr2/DM259gW82nm7sNK83HOTOG4tK5ozC4OE9jhkSUibhIJyIiIiJK0d/e2oXvP/Ue2trd+G0nTBiIhXNH4YQJA+H18JVVIuobLtLJSo7jIBAI8K1HSdjUNybXojs3le3LbEtGbN1jQ2QLm86l3tbSGoniVys+xN/f+QS76lvit39n3ngsmDoEEwanfxMx3f3M+URtTLIXN46jrBe7aFJ3NvWNybXozk1l+zLbkhFb99hQZuHu7j2z6Vw6VC1t7S5+/twm/O/aj9EUbj9wH+CSY0bi/50+EUV5Pm25ycb5RG1MshcX6ZT1hBAIhUIoLi7mbze7sKlvTK5Fd24q25fZlozYuseGMgt3d++ZTedST7V8uLcRD6/ejsfX7IxvBpfv8+KqE8fiy8eMwIBCv7bcVOF8ojYm2Ysbx1HWE0IgEolACMGLZhc29Y3JtejOTWX7MtuSEVv32BDZwqZzqWstDc1tuPrRN7F6a238Z3I8Dr523GgsOnUC8nxebbmpxvlEbUyyFxfpRERERER9cOs/NuCBV7fF/z9hcCGuOXkcTptSifxcdYtzIspeXKQTERERUdaLRF3897Mb8cCr2wEAHge46awpuOzY0XoTI6Ksw0U6WclxHBQWFvKtR0nY1Dcm16I7N5Xty2xLRmzdY0NkC5vOpc17G3HNY+9ja00zAGBkRQDPfecEpW9r74nufuZ8ojYm2Ysbx1HWcxwHeXl5utMwkk19Y3ItunNT2b7MtmTE1j02lFm4u3vPbDiXhBB46LXtuH3pRkSiAh4H+MGCyfj6caONWXjp7mfOJ2pjkr1SuaZ4JOZBpI0QAvX19Slt0JAtbOobk2vRnZvK9mW2JSO27rGhzMLd3XuW6efS2m11mHf3v3HLPzYgEhWYUlmAp685FpcfP8aYBTqgv585n6iNSfbixnGU9YQQiEaj3G0zCZv6xuRadOemsn2ZbcmIrXtsiGyRqefSOx834MFXt+Hptz8BAOTmeHD1iWPwpenlGDSgWHN23enuZ84namOSvbhIJyIiIiLqpKUtioUPrcXrW+vit504YSD+58LpqCjwoa6u7iD3JiJSh4t0IiIiIrLaWzvr8e3/ewsf17UAAI4cUYorTxiD06ZUwuNx4Lqu5gyJiD7FRTpZyXEcFBcX861HSdjUNybXojs3le3LbEtGbN1jQ2SLTDmX/rR6O2565n0AQEGuF9+bPwmXzBmZkLfJtejOjfOJ2phkL+7uTlnPcRzk5ubqTsNINvWNybXozk1l+zLbkhFb99hQZuHu7j0z/VxqaYvi+ifexrL3qwAAU4eV4P7Ljsagou67cZtci+7cOJ+ojUn24u7ulPVc10VtbS3fvpaETX1jci26c1PZvsy2ZMTWPTaUWbi7e89MPpeawu04696X4wv0z888DM9cc2zSBTpgdi26c+N8ojYm2SuVxwlfSSdr8eswemZT35hci+7cVLYvsy1ZX8VDRP1n4rkUbInguJ++iMZwOwDgN18+CgumDjnk/UysJUZ3bpxP1MYk4iKdiIiIiKzQ0hbFqXf/G43hdhTkevHri4/CyZMG6U6LiCglfLs7EREREWW89qiLax5/E9WNYQDAd+ZN4AKdiDISX0knKzmOg9LSUu62mYRNfWNyLbpzU9m+zLZkxNY9NkS2MO1cuu6Jt/Hipmr4vA5uP28qLjx6eK/va1otnenOjfOJ2phkL+7uTlnPcRx4PB5eNJOwqW9MrkV3birbl9mWjNi6x4YyC3d375lJ59K9Kz7Es+/uAQDc9YUZOHv60JTub1ItXenOjfOJ2phkL+7uTlnPdV3U1dVxt80kbOobk2vRnZvK9mW2JSO27rGhzMLd3XtmwrkUbo/i5r+/j7uWfwAAOHPqkJQX6IAZtfREd26cT9TGJHtxd3ciIiIislpLWxTfeOQNvPxhDQDg7OlDcdcXpmvOioio/7hIJyIiIqKMsn53EN/+37ewtWY/HAf4+een44KjhvFtx0RkBS7SiYiIiChjvPJhDb5y/xoAQKE/B7eddwTOmTFMc1ZEROnDRTpZyePxoLy8HB4Pt13oyqa+MbkW3bmpbF9mWzJi6x4byizcOK5nOs6l6lAr/uvJdwAAI8oDePyK2TisLNDvuCZfF3TnxvlEbUyyVyqPEz6iyEpCCLiuC8GdfrqxqW9MrkV3birbl9mWjNi6x4YyCzeO65nqc6k1EsVX7l+DPcFW5Pu8aVugA2ZfF3TnxvlEbUyyVyqPk6x9Jd113fgOe47jwHEcCCESOq+vt3fdua+n2z0eT7cYPd2e7hxtr8l1XdTX16OiogIArKipN7f3pibXddHQ0ICysrJun93LtJpi41xWVoacnByjxkkIEc8t9ptTlY+9WN+Ul5fD6/UaU2uqNR0sdl9z723fHGqcOh836bFn07XchJo6E0JYUVO6bo9Go/Hz0+v1Sq1pf1sUVz/6Jj7Y24RCfw6euWYuhpXmA+h+/qX7OqZ7nHrznEbmYy9Z38h67MmotfM1u/O1Px3j1Pl5SOyr2Po6Hp3zPNS1JlOuETZe9/pTE3d3T2LJkiVYsmQJotEoAKChoQGO07FA8fv9KCoqQlNTE8LhcPw+gUAAgUAAoVAIkUgkfnthYSHy8vLQ0NAQjwcAxcXFyM3NRX19fcJAlZaWwuPxoK6uLiGn8vLy+IIpxnEcVFRUIBKJIBQKxW/3er0oKytDOBxGU1NT/Hafz4eSkhK0tLSgubk5fnu21+S6Ltrb2wHAmpqA9IyT67pwHAfRaDQh90ysyXVdNDY2QgiBAQMGGDVOubm5aGpqghAi/qRG5WMv1jc+nw+lpaVSxyknJwehUCih1nTVVFJSgkgkgrq6unjs/o5TrG8KCgoQCAT6fD7FrjGu6yIajRrz2LPpWm5CTZ2fOIdCIStqStc4hcPh+DW4uLhYWk2N4Si+9dcPsH53CB4HuPmM0SjxhNHQ0J62mvLy8tDc3JxwHTNlnFzXRUtLCyoqKrQ89gB0u8bLeuy5rovW1lYASHtNsWt/SUkJHMdJ2zh17pv+nE8tLS0AgPr6epSWlhrx2OtpnHpbk43Xvf7UlApH9PWeGSo2wVZXV8d/S8ffBNlXU+ffxMaOZXpNvbmdr6SbM05CCNTW1mbNK+m9rbUvr6T3FLuvuafrlfRIJIJly5ZhwYIF8cdfquOk+vZsve71p6aZM29BVVUQlZUlWLdusRU1pet2Fa+ku67Al+9fizXb6pDr9eC3XzkSJ08clPaa+nKt0fFKeuxYf2pNtaZkfaPilfR01SrzlfRoNIq6urq0vJLe1taGZcuWYf78+cjNzTXisafy9myoKRgMory8HMFgEMXFxTiYrHklvSuPx9Ptw/uxDu0q1dt72hQg2e3palP27ZlYU9dJtje593S7KTUd6vbe1hS7fybUeqiaOp/LJuUuhIjn1rUGVY+92BOGdNXU0+2p1pqu2LL7pjePvXTkovL2bL7u9bXNZP/P9JrSdXvnc7O/51NPbf7xlY+wZlsdArlePPL1WZg5slxKTX251qgcJ1XzXLLce+obWbmku9bOOXd+rKZrnNLVN53nFlnnk8m3Z0NNyX6mJ1m7SCe7eTye+DslKJFNfWNyLbpzU9m+zLZkxNY9NpRZYs+pUnhulTVkn0s/W7YJv131EQDg+nkTki7Q08Xk64Lu3DifqI1J9urpFxFJf1ZiHkTaxN421PWtMGRX35hci+7cVLYvsy0ZsXWPDWWW2MOED5fuZJ5LD726Lb5AP/+oYfj6caPT3kZnJl8XdOfG+URtTLJXKo8TLtLJSkKI+EYelMimvjG5Ft25qWxfZlsyYuseGyJbyDqXdje04M7nNgMALp0zEnddOB0ej9y3Mph8XdCdG+cTtTHJXlykExEREVHGiboClz/8BprbovjMqDIs/tzhKX2Ok4jIBlykExEREZERfv/SVmzcE4LP6+C/z50q/RV0IiITcZFOVnIcJ/51MJTIpr4xuRbdualsX2ZbMmLrHhsiW6T7XFq2fg9+tmwTAGDhsaMxsbIoLXF7w+Trgu7cOJ+ojUn24u7ulPUcx0FZWZnuNIxkU9+YXIvu3FS2L7MtGbF1jw1lFu7u3rN0nkuNrRH815PvAgDmTR6MG8+YlJa4vWXydUF3bpxP1MYke6WySOcr6WQlIQRaW1u5kUcSNvWNybXozk1l+zLbkhFb99hQZuHu7j1L17kkhMCiP7+DxtZ2DCzy4zdfPkr5K5MmXxd058b5RG1Mshc3jqOsJ4RAU1MTL5pJ2NQ3JteiOzeV7ctsS0Zs3WNDZIt0nUs3PfM+lm/YCwD4r9MnIjdH/dNTk68LunPjfKI2JtmLi3QiIiIiMt6y9VV45PUdAIAvzx6BC446THNGRET68TPpRERERKRcqDWCqx5dBwA4/6hh+Mk5R3A3dyIi8JV0spTjOPD5fNxtMwmb+sbkWnTnprJ9mW3JiK17bIhs0d9z6aan1wMASgM+/PT8aVoX6CZfF3TnxvlEbUyyF3d3p6znOA5KSkp0p2Ekm/rG5Fp056ayfZltyYite2wos3B3957151xat6MeT7/9CQDgBwsma/kcemcmXxd058b5RG1Mshd3d6esJ4RAc3MzN/JIwqa+MbkW3bmpbF9mWzJi6x4byizc3b1nfT2XIlEX33+q4+vWTpgwEBfO1P85dJOvC7pz43yiNibZixvHUdbjRbNnNvWNybXozo1PqtTGJMpGfT2X/rW+Cluqm5Dr9eD2844w4q3CJl8XdOfG+URtTLIXF+lEREREZJy2dhd3P78ZAHDViWNwWFlAc0ZERObhIp2IiIiIlHjk9R3YXtuMAYV+fOPEsbrTISIyEhfpZCXHceD3+414C51pbOobk2vRnZvK9mW2JSO27rEhskWq59LHdc3xV9H/32kTUOg3Z/9ik68LunPjfKI2JtmLu7tT1nMcB0VFRbrTMJJNfWNyLbpzU9m+zLZkxNY9NpRZuLt7z1I5l6KuwKUPrMX+tigmVRbhwqOHS84uNSZfF3TnxvlEbUyyF3d3p6wnhEBjYyM38kjCpr4xuRbdualsX2ZbMmLrHhvKLNzdvWepnEsPvLINW2v2AwB+/vnp8Gr8TvRkTL4u6M6N84namGQvbhxHWU8IgXA4zItmEjb1jcm16M5NZfsy25IRW/fYENmit+dSQ3Mbblu6EQBwzoyhmHqYed8rbfJ1QXdunE/UxiR7cZFOREREREb40dPrAQBFeTn46fnTNGdDRGQ+LtKJiIiISIqt+5rw7Ht7AAC//OIM5Od6NWdERGQ+LtLJSo7jIBAIcLfNJGzqG5Nr0Z2byvZltiUjtu6xIbJFb86lb/3vWxACOGXSIJwyabDC7FJj8nVBd26cT9TGJHtxd3fKerGLJnVnU9+YXIvu3FS2L7MtGbF1jw1lFu7u3rNDnUt/fHkr3v8kBAD49mfHq0qrT0y+LujOjfOJ2phkL+7uTllPCIFgMMiNPJKwqW9MrkV3birbl9mWjNi6x4YyC3d379nBzqUdtfvjm8WdO2MoZgwvVZxdaky+LujOjfOJ2phkL24cR1lPCIFIJMKLZhI29Y3JtejOTWX7MtuSEVv32BDZ4mDn0r0vboEQwKTKIvzs8+ZvFmfydUF3bpxP1MYke3GRTkRERERavLurAU+9uQsAcPv5U+HP4WZxRESp4CKdiIiIiNJCCIGb//4+hOh4m/tRI8p0p0RElHG4SCcrOY6DwsJC7raZhE19Y3ItunNT2b7MtmTE1j02RLZIdi69ubMBb+5sgD/HgxsXTNaYXWpMvi7ozo3zidqYZC/u7k5Zz3Ec5OXl6U7DSDb1jcm16M5NZfsy25IRW/fYUGbh7u49S3YuPfzadgDA2dOHYnBx5pxnJl8XdOfG+URtTLIXd3enrCeEQH19PTfySMKmvjG5Ft25qWxfZlsyYuseG8os3N29Z13PpapgK5atrwIAfHXOSJ2ppczk64Lu3DifqI1J9uLGcZT1hBCIRqO8aCZhU9+YXIvu3FS2L7MtGbF1jw2RLbqeS/e++CHaoi5mjSrHtMNK9SaXIpOvC7pz43yiNibZi4t0IiIiIlJm454QHluzEwBw7SnjNGdDRJTZuEgnIiIioj4LtUSw4FcvAwAGFPpx/PgBmjMiIsps3DiOrOQ4DoqLi7nbZhI29Y3JtejOTWX7MtuSEVv32BDZInYu/ddT78c/s//U1XMy8twy+bqgOzfOJ2pjkr24uztlPcdxkJubqzsNI9nUNybXojs3le3LbEtGbN1jQ5mFu7v3zHEcvL27Cc+88wkA4K4Lp2NkRYHmrPrG5OuC7tw4n6iNSfbi7u6U9VzXRW1tLVzX1Z2KcWzqG5Nr0Z2byvZltiUjtu6xoczC3d171tjShqsfeQMAcOy4Cpx35DDNGfWdydcF3blxPlEbk+yVyuOEi3SyFnfa7JlNfWNyLbpzU9m+zLZk7fJLRP1z/yvbUNscQWWxH7/58kx4PJn9dgOTrwu6c+N8ojYmkfZF+pIlSzBq1Cjk5eVh9uzZWLt2bY8/G4lEcOutt2Ls2LHIy8vD9OnTsWzZMoXZEhEREdFLH+zDPSu2AABuPGMSSvJ9mjMiIrKH1kX6E088gUWLFmHx4sV48803MX36dJx++umorq5O+vM/+tGP8Lvf/Q733nsvNmzYgKuuugrnnXce3nrrLcWZExEREWWnpnA7vvnYmwCAiYMCOGvaEM0ZERHZResi/e6778YVV1yBhQsXYsqUKbjvvvsQCATwwAMPJP35Rx55BD/4wQ+wYMECjBkzBldffTUWLFiAu+66S3HmZDrHcVBaWsrdNpOwqW9MrkV3birbl9mWjNi6x4Yo093w1LtoCrdjaGkenrp6Ljwe7W/M7DeTrwu6c+N8ojYm2Ssjdndva2vDunXrcOONN8Zv83g8mDdvHlavXp30PuFwGHl5eQm35efn45VXXumxnXA4jHA4HP9/KBQCAHz9tmrk+lvwva+WYvp4f/x4VW07vvvLWgDA3Gl5uObzJQnxFv+hDls+jgAAHrt1cMKx59c04+FnGwEAV19QjOOm58ePNbe6uOL2fQCAqeNyccMlZQn3/Z/HGvDW5o48f/v9gSgu+HTCe319K+79cxAA8OX5RVgwN5Bw30tvrUZ7u8DIIT7cfnV5wrE/PBPCqnUtAICfXlOB4YM/HfIN29pw24P1AIDPHV+AL55amHDfa/+nBvWhKMqKvfj1/0v8ztP/W96Ef7y8HwDww4VlmDL6050tP97bjhuWdPThSTPzccU5xQn3/cFv67BjTwQ5OQ4evmlQwrGlrzXjsWUdffitL5TgmCM+He/QfhdX/6yjD4+c6Mf/+3Jpwn1/+qd6vLelraPuHwxEXu6nnxN65Z0W/PapjrG/9MwinDY7sQ+/fNNeAMC44T7cckViHy55MojX3m0FANx1XQUqKz7tw3c+DOPORxoAAOefXIALTk7sw6t+ug+NzS4Gl3tx93cS+/DRfzXiX6ubAQA3X1GO8cM/favgtk8i+NF9dQCAebPysfCsxD783q9rsbu6HXl+B/f/MLEPn3lpP/78QhMAYNHFpZg56dPHd20wim/fVQMBYPbhebjuosTH938/WI+N2zr68MGbBiE359OLyYtvtOD+vx84f84uxilHf/r4bmsXWHhrxztgJo/OxY8WJj6+f/lEEGvf7+jDX313ACpKvPFj6zaFcffjHX34hXmFOOeExJ2Bv35bNVrDAsMG5eDOaysSjj34zxCWr22BA+C/ryrH6KGf9uGHH0dw8x86+vCMOQF85YyihPsuuqcGe+uiKAp4cN8NAxOOPbWyCX9d2fH47s814pGbByZ8Vk31NcJ1XQghlFwjfrWoPKHWdF4jYnUA6btG/O6GChQGPs23L9eISKRjnO/9cz1eX98R15ZrBADMsuQa8cLajsd3X68R9Y3R+G2xMU/XNSITn0c0tO/HP9/dAwD4+syJWHjrPjiw43nEHQ/XY/1Hnz6PCOR92oe6n0cMKvfiFxqvEbHrsIprxKRRPvz4a4l9mK5rxE+/WZYwV6XjGlEY8OB3aXgeEbu+/Ph3tdi6ux1AZl4jsmmtkeo1IhJuRG9pW6TX1NQgGo1i8ODEB9/gwYOxadOmpPc5/fTTcffdd+OEE07A2LFjsWLFCvz1r39FNBpN+vMAcMcdd+CWW27pdntdyEVOrovXVq/F7g8/7bCG/bmoCR4OANi8ZReWLn014X7bP56AmmDHyb906dKEY+/sHICa4HAAwNr/vI3Q7vr4sXC7BzXB6QCAj7ZXY+nSxF9EbNk2BjXBjpP0+eUvIJDbHj/2YVUpaoKjAQBvvv0+0LAv4b776qYjKjxw3HosXfp6wrGNm4ejJtjxoF/175dQUdgaP7arrhA1wfEAgPfe/xDFkT0J991TfTiawrlobW3F0qWJewW898EQ1AQrAQCvvPo6tm9sih+rbcpDTXDygfZ3YOnSjxPuu3P3RNQ0BuB13G59+Ob2gagJHgYAWLP2TdTtbIgfa27LQU1w6oH+qsLSpa8l3Pej7WNRE+w4SZ97/nn4cz7dQXHTJ2WoCY4CAKx7az3aa2sS7lsTPBIAkIO6bn24ectI1AQ7LkgvvrgKpQVt8WM7aopQExwHAHjnvQ+Q31KVcN+qmiPQEvEh0tbSrQ/XbxqGmmDHheOll1/Fh6XN8WPVoXzUBCcBADZs2o6lnl0J9/34k0mo25+PXG+0Wx++vXUwaoJDAQCrX/8P9m4NxY81tvpQEzwCAPDBR7u7Pb637hiHmmDHJLRs2TLkeD6dyNbvqkBNcAQA4I0330VrdW38WLvroCY440CMfd0e3x98NAo1wY7J4oUVL6IoL/Jpm9XFqAmO7cj93U3wNe1NuG917TS0Rb1w24NYunRNwrENmw5DbbBjYvz3S69gY3FL/NiehgBqghM7ct+4FUvF7oT77qqagmCLH/ubw93P5S2VqAl2vH2zP9eIrntm2HyNWLYss64Ry194IW3XiA+3fsJrBMy9RtT08xrhuh01tra2xPsyXdeITHwe8bstEQAOppW7aN21GbUWPY/YuoPPIwD914htO2u69WG6rhHLlqX/GpHu5xE7d9dn9DWCa42erxHtbb3f3T2jvif9l7/8Ja644gpMmjQJjuNg7NixWLhwYY9vjweAG2+8EYsWLYr/PxQKYfjw4Sgv9iDX78HcObO6/Xbr2fc6LhoTxx2GBQsOT4i3Zncd2tFxYViwYEHCsZw1zVj/ScdJOOszM7r9duvJNzoe8GNHDcKCBRMT7ruhvgGNbR2/3Trt1Hndfru1dnvHb7eOmnF4t99uPfFGx2+3Rgwp65bT7kgIe5s6LjgnnXhCt99u/fuDjpN76uHjseDUIxPuu3RD7LdbBd3ihnxN2F7X8dut4449pttvt5at7+jDyRNHYsGCqQn3fWVHHcSeCHJyvN3i4rVmbKzq6MPZs47q9tutv73Z0YfjRldiwYJJCXd9t6Yeze0dE9+p8+Yh3BJEWVkZPB4Pit9pwbqdHZPMzCOP6Pbbrcde77igjxpe3i2nbc1B1DZ3XHBOOeWkbr8Bf2VLAwBg+tQJWHDyUQn3/fu7sVfJCrvFrXMa8XFDx4R6wvHHdvsN+PINHb+9nTJpFBYsmJZw31Vba+Gpbkeev3sfRl7ajw+qOy5kc475TLdXyZ55uwbCdTF+zFAsWDAl4b5v7q1H2O3ow/nz5yf8BjzvjRa8s6ujD48+alq334A/sbbjN+BjRg7EggUTEuJ+2BhEQ2tHH8777CndfgO+emtHH86YNgkLTpiZcN+n3or9BrykW61V0RB2NeyH4/HgxBOO6/Yb8Bc3dfThEZPHYMEZ0xPu+8IHNfDVRVEUyO8Wt2VlEz6q6Xh89/UaIQDMnj07/hgE1F4jXNdFfX09ysrK8MQbNXKvEUWBbrWm6xoxf/78eB0ejyct1wgB4DNHH42hleXxfPtyjYhEIli+fDnGjxmK2uaO88aGa8Tf3+54YjFh7LCMv0bsdUP4JNTx+O7rNWLbgR3L8/Ly4vHTcY0AMu95xGGTj8Le9zqeSP/04uPQtj8HKzfVw/F4Mv55hOu6+M/ufdjfDjgATj/ttIRXyXQ+jwg1u6gozsP8+fMTPlqg6hpx5ARf/Dpc3yikXiMEgGGVxd1qTcs1YmBxt7mqv9eInLooAv7cbvn25RoRm1NGDCtDOzoW0Jl2jcimtUZfrhFt4d5/NMgRmr43oK2tDYFAAE8++STOPffc+O2XXnopGhoa8Mwzz/R439bWVtTW1mLo0KG44YYb8M9//hPvv/9+r9oNhUIoKSlBTU0NKioqDn0Hykiu66Kurg7l5eVWfFYunWzqG5Nr0Z2byvZltiUjdrpiRiIRLF26FAsWLIDPx52tbXXUUTejqiqIysoSvPnmzbrT0epHT7+HR1/fiWGl+Xj1hlO0X+fSyeRadOfG+URNTM4p9mtoaEBZWRmCwSCKi4sP+rParkK5ubmYOXMmVqxYEb/NdV2sWLECc+bMOeh98/LyMGzYMLS3t+Opp57COeecIztdIiIioqzV3NaOf7zT8VbVW84+/BA/TURE/aH17e6LFi3CpZdeiqOPPhqzZs3CPffcg/3792PhwoUAgEsuuQTDhg3DHXfcAQBYs2YNdu/ejRkzZmD37t24+eab4bouvve97+ksgwzk8XiM/G24CWzqG5Nr0Z2byvZltiUjtu6xocwS24w3mzdvjroCVz36JoItEQwtycPJkzo+B23TuWRyLbpz43yiNibZK5XHidZF+kUXXYR9+/bhpptuQlVVFWbMmIFly5bFN5PbuXNnQjGtra340Y9+hK1bt6KwsOPze4888ghKS0s1VUCmEkLAdV04jsOvxejCpr4xuRbdualsX2ZbMmLrHhvKLLEPBer5cKAZ7nnhA7z0wT7k+7z4nwunw3vgc/o2nUsm16I7N84namOSvVL5lLn2jeOuvfZaXHvttUmPrVq1KuH/J554IjZs2KAgK8p0Qgg0NDSgvLycF80ubOobk2vRnZvK9mW2JSO27rEhyiQrN1fj3he3AAB+eOZkzB336dck2XQumVyL7tw4n6iNSfZKZZHO92YQERERUTf7w+1Y+OB/AACzRpXjS7NGaM6IiCg7cJFORERERN3879qdAACPAzy48DPxt7kTEZFcXKSTtfi2o57Z1Dcm16I7N5Xty2xLRmzdY0NkOiEElr7XsZv7BUcdhgJ/8k9I2nQumVyL7tw4n6iNSaT9M+lEMng8HlRUVOhOw0g29Y3JtejOTWX7MtuSEVv32FBmydbd3f/yxi68ubMBuV4PvnPqhKQ/Y9O5ZHItunPjfKI2Jtkrld3d+Uo6WUkIgba2tpQ2aMgWNvWNybXozk1l+zLbkhFb99hQZsnG3d3f2lmP7z31LgBg0WkTMKw0P+nP2XQumVyL7tw4n6iNSfbixnGU9YQQCIVCvGgmYVPfmFyL7txUti+zLRmxdY8Nkenu+NcmAMCI8gCuOH5Mjz9n07lkci26c+N8ojYm2YuLdCIiIiJK2aaqENZuqwMA3Pn5adwsjohIAy7SiYiIiAgA8NtVHwEAjhxRimPG8LO2REQ6cJFOVnIcB16vlztuJmFT35hci+7cVLYvsy0ZsXWPDZGp9oZa8czbnwAAvnf6pEP+vE3nksm16M6N84namGSvVB4n3N2drOQ4DsrKynSnYSSb+sbkWnTnprJ9mW3JiK17bCizZNPu7j9b1vFZ9AmDC3HMmPJD/rxN55LJtejOjfOJ2phkr1QW6XwlnawkhEBrays38kjCpr4xuRbdualsX2ZbMmLrHhvKLNmyu3uoNYJ/vNPxKvqXZ4/s1ZNJm84lk2vRnRvnE7UxyV7cOI6ynhACTU1NvGgmYVPfmFyL7txUti+zLRmxdY8NkYnufv4DRKICuTkefPWYkb26j03nksm16M6N84namGQvLtKJiIiIqFe2VDfisTU7AAA/PX8qPNzRnYhIKy7SiYiIiLLYr1/cgkhU4JRJg3DekcN0p0NElPW4SCcrOY4Dn8/H3TaTsKlvTK5Fd24q25fZlozYuseGyCTba/bj7wc+i/6deeNTOi9sOpdMrkV3bpxP1MYke3F3d8p6juOgpKREdxpGsqlvTK5Fd24q25fZlozYuseGMovtu7vfvnQjXAHMGVOBaYeVpnRfm84lk2vRnRvnE7UxyV7c3Z2ynhACzc3N3MgjCZv6xuRadOemsn2ZbcmIrXtsKLPYvLv7e7uCeH7DXgDALeccnvL9bTqXTK5Fd26cT9TGJHtx4zjKerxo9symvjG5Ft258UmV2phEmehPq7cDAI4aUYoJg4tSvr9N55LJtejOjfOJ2phkLy7SiYiIiKhHu+qb8be3dgMAbjhjsuZsiIioMy7SiYiIiLLMncs2o90VmDOmArNGl+tOh4iIOuEinazkOA78fj9320zCpr4xuRbdualsX2ZbMmLrHhsi3fYEW/Dc+1UAgEvmjOxzHJvOJZNr0Z0b5xO1Mcle3N2dsp7jOCgqSv3zddnApr4xuRbdualsX2ZbMmLrHhvKLLbt7i6EwI/+th7hdheDi/04/fDKPsey6VwyuRbduXE+URuT7MXd3SnrCSHQ2NjIjTySsKlvTK5Fd24q25fZlozYuseGMottu7v/Zd0urNhUjRyPgz99bTY8nr7/9sGmc8nkWnTnxvlEbUyyFzeOo6wnhEA4HOZFMwmb+sbkWnTnprJ9mW3JiK17bIh0iboCP/nnBgDA52cehomV/XsF0KZzyeRadOfG+URtTLIXF+lERERElOCFjXvR2NoOAPiv0ydqzoaIiHrCRToRERGR5faH2/Gzf20CAJwzYygqCv2aMyIiop5wkU5WchwHgUCAu20mYVPfmFyL7txUti+zLRmxdY8NkQ5P/OdjbK3ZjyJ/Dn581pS0xLTpXDK5Ft25cT5RG5Psxd3dKevFLprUnU19Y3ItunNT2b7MtmTE1j02lFls2d39hY17AQDXzRuPAWl6Fd2mc8nkWnTnxvlEbUyyF3d3p6wnhEAwGORGHknY1Dcm16I7N5Xty2xLRmzdY0OZxYbd3bfua8LabXUAgJMnDUpbXJvOJZNr0Z0b5xO1Mcle3DiOsp4QApFIhBfNJGzqG5Nr0Z2byvZltiUjtu6xIVLtwVe3o90VOHniQIwdWJi2uDadSybXojs3zidqY5K9uEgnIiIiItTvb8Nf39wFALhk7ii9yRARUa9wkU5ERERkqSfX7cL+tigmDynGSRMG6k6HiIh6gYt0spLjOCgsLORum0nY1Dcm16I7N5Xty2xLRmzdY0OkihACj6/dCQD46jEj0/6Yt+lcMrkW3blxPlEbk+zF3d0p6zmOg7y8PN1pGMmmvjG5Ft25qWxfZlsyYuseG8osmby7+7Pv7cG2mv0o9OfgnBlD0x7fpnPJ5Fp058b5RG1Mshd3d6esJ4RAfX09N/JIwqa+MbkW3bmpbF9mWzJi6x4byiyZuru7EAJ3LtsMAPj6caNR4E//6zI2nUsm16I7N84namOSvbhxHGU9IQSi0SgvmknY1Dcm16I7N5Xty2xLRmzdY0Okwrod9dhZ1wx/jgdXnjhGShs2nUsm16I7N84namOSvbhIJyIiIspif3trNwDgrGlDEcjlpxuJiDIJF+lEREREFmmNRPHYmo4N42R8Fp2IiOTK2l+tuq4L13UBdHyI33EcCCES3obQ19tjcQ91u8fj6Rajp9vTnaPtNQkhUFRUZFVNvbm9NzUJIVBcXAwAvarV5JqEECgsLEwYd5PGqaioCEKIbtcaFY+9WN/EyK41Ng6HqrUvNfXUj33Nvbd9c6hx6npemfTY43UvfTV1JoTIiJrueeFDAMDAIj+OHVsO13WljUfs3D9U32TCYy/Va42qmoQ49HMa2Y+9rtd4WeMko9ZYzl2v/ekYJwAJfdOf8eg8t9hwPpl2LTehplRkzSJ9yZIlWLJkCaLRKACgoaEhfnL5/X4UFRWhqakJ4XA4fp9AIIBAIIBQKIRIJBK/vbCwEHl5eWhoaIjHA4Di4mLk5uZ220CitLQUHo8HdXV1CTmVl3dMnA0NDfHbHMdBRUUFIpEIQqFQ/Hav14uysjKEw2E0NTXFb/f5fCgpKUFLSwuam5vjt7MmxL8So76+3qqabBwnW2tqbm62rqaexmn//v3SahKiY2Me1TUdapza29sBdDyhikajGTFONj72ZNfU+YlzKBQyvqaWiItHX98BALj4qMHxc8f2cUpHTa2trUbX5Pf70dzcrGWcOueSzpp6Gie/34/GxkZpNQFIyzi1tbWl7XxqaWkBANTX16O0tNSoxx6vEempyePp/ZvYHdH11xCWi02w1dXVqKioAMDfBNlYU+zkLS8vjx/L9Jp6c3tvanJdF8FgEKWlpfFfVGVqTbFxLi0tRU5OjlHjJIRAXV1dfJLpbU2Hyr23NcX6pqysDF6v15haU63pYLH7mntv++ZQ4xSJRLBs2TIsWLAg/vhLdZxU356t173+1DRz5i2oqgqisrIE69YtNr6mm555H4+u2YlRFQGsWHRC/DovYzxiv5wqLS2F1+vN6MdeX641qmrqzXMamY+9ZH0ja5xk1Nr5F22dr/3pGKdoNBpfVHs8nn6NR1tbG5YtW4b58+cjNzfXiMeeytuzoaZgMIjy8nIEg8H4u1p7kjWvpHfl8Xi6/TYj1qFdpXp7T78lSXZ7utqUfTtrMiv3/tYkRMfbqDKh1t7U1PUJlQm5xy7Wya41Kh97sX+bVGu6Ysvum0ONU+fjJj32DnZ7Nl/3+tpmsv+bWlNtUxiPre34LPp/nzsVXq9XWo6d55DY4kRGTapu78u1xvSa+nJ7stx76hvTcu9tTbGfSec1Ih19Y9P51Jfbs6GmZD/TE24cR0RERGSB1z6qhRDApMoiHDd+gO50iIioj7hIJyIiIrLAs+/uAQCcOHGg5kyIiKg/uEgnKzmOk/Qz12RX35hci+7cVLYvsy0ZsXWPDZEM1aFWLHu/CgBwzvRhStq06VwyuRbduXE+URuT7MW3u1PWi322hxfN7mzqG5Nr0Z2byvZltiUjtu6xocwSe5iY/nB54j8fAwDGDizA5CFFStq06VwyuRbduXE+URuT7MVFOmU913VRV1fXr+8ntJVNfWNyLbpzU9m+zLZkxNY9NpRZYhv2dtlI2ChCCDx+YMO4iz4zXNmCwaZzyeRadOfG+URtTLJXKo8TLtKJiIiIMtiu+hbsCbbC53VwyZxRutMhIqJ+4iKdiIiIKIO9uysIAJhYWYQ8X/evXSMioszCRToRERFRBluycgsA4DOjyjVnQkRE6cBFOlnJ4/GgvLwcHg8f4l3Z1Dcm16I7N5Xty2xLRmzdY0OZxfSN46pDrdhUFQIAnHekml3dY2w6l0yuRXdunE/UxiR7pfI44SOKrCSEgOu6ECbv9KOJTX1jci26c1PZvsy2ZMTWPTaUWUzfOG7pe3vgCmD8oEJMO6xUads2nUsm16I7N84namOSvVJ5nHCRTlYSQqChoYEXzSRs6huTa9Gdm8r2ZbYlI7busSFKp7+/8wkA4IuzRihv26ZzyeRadOfG+URtTLIXF+lEREREllu2fg/e3NmAHI+DM6cO0Z0OERGlCRfpRERERBnosTUd343+lWNGorIkT3M2RESULlykk7UcU3f5MYBNfWNyLbpzU9m+zLZkxNY9NkT99UlDC17ZUgMA+Ppxo7XlYdO5ZHItunPjfKI2JlGO7gSIZPB4PKioqNCdhpFs6huTa9Gdm8r2ZbYlI7busaHMYuru7n97azeEAI4ZU47h5QEtOdh0Lplci+7cOJ+ojUn24u7ulPWEEGhra+NGHknY1Dcm16I7N5Xty2xLRmzdY0OZxcTd3YUQeHLdLgDA52cO15qHLeeSybXozo3zidqYZC9uHEdZTwiBUCjEi2YSNvWNybXozk1l+zLbkhFb99gQ9de6HfXYVrMfgVwvzjiiUlseNp1LJteiOzfOJ2pjkr24SCciIiKy1F/e6HgV/YwjhqDAz08uEhHZhot0IiIiogwRbo9i6Xt7AAAXHn2Y5myIiEgGLtLJSo7jwOv1csfNJGzqG5Nr0Z2byvZltiUjtu6xIeqPV7fUoDHcjsriPMwaVa41F5vOJZNr0Z0b5xO1McleqTxO+B4pspLjOCgrK9OdhpFs6huTa9Gdm8r2ZbYlI7busaHMYtru7i9uqgYAzJsyCB6P/q/lsuVcMrkW3blxPlEbk+yVyiKdr6STlYQQaG1t5UYeSdjUNybXojs3le3LbEtGbN1jQ5nFpN3dw+1R/PPdjre6z5s8WHM2dp1LJteiOzfOJ2pjkr24cRxlPSEEmpqaeNFMwqa+MbkW3bmpbF9mWzJi6x4bor56YUM1GpojqCzOw/HjB+pOx6pzyeRadOfG+URtTLIXF+lERERElvnLuo8BABfMHAav5re6ExGRPFykExERERmuKtiKlz7YBwD4/MzhmrMhIiKZuEgnKzmOA5/Px902k7Cpb0yuRXduKtuX2ZaM2LrHhqgvHl+zA64APjOqDKMHFOhOB4Bd55LJtejOjfOJ2phkL+7uTlnPcRyUlJToTsNINvWNybXozk1l+zLbkhFb99hQZjFhd3chBB5evQMAcOncUfoS6cKmc8nkWnTnxvlEbUyyF3d3p6wnhEBzczM38kjCpr4xuRbdualsX2ZbMmLrHhvKLCbs7v7ipmoEWyII5HqN2NU9xqZzyeRadOfG+URtTLIXN46jrMeLZs9s6huTa9GdG59UqY1JJNNDr20HAMweXY48n1dvMp3YdC6ZXIvu3DifqI1J9uIinYiIiMgCO2ub8fKHNQCAH501RXM2RESkAhfpRERERIa6bekGAMCI8gDGDizUnA0REanARTpZyXEc+P1+7raZhE19Y3ItunNT2b7MtmTE1j02RL3lugLrdtQDAL572gTN2XRn07lkci26c+N8ojYm2Yu7u1PWcxwHRUVFutMwkk19Y3ItunNT2b7MtmTE1j02lFl07u7+2ke1qGlqAwCcOsWcDeNibDqXTK5Fd26cT9TGJHtxd3fKekIINDY2ciOPJGzqG5Nr0Z2byvZltiUjtu6xocyic3f3R1/v+Nq1L88egUCuea+r2HQumVyL7tw4n6iNSfbixnGU9YQQCIfDvGgmYVPfmFyL7txUti+zLRmxdY8NUW+0tEWx7P0qAMBZ04ZqziY5m84lk2vRnRvnE7UxyV5cpBMRERFlsDXbauP/njW6XGMmRESkGhfpRERERIZ55u1PAADnzhgKr4ebUhERZRMu0slKjuMgEAhwt80kbOobk2vRnZvK9mW2JSO27rEhOpTWSBTLN+wFAFx49HDN2fTMpnPJ5Fp058b5RG1MsldGbRy3ZMkSjBo1Cnl5eZg9ezbWrl170J+/5557MHHiROTn52P48OG4/vrr0draqihbyhS8aPbMpr4xuRbdufFJldqYZC8du7uv2lyNpnA7KovzMGdMhbqGU2TTuWRyLbpz43yiNibZK2MW6U888QQWLVqExYsX480338T06dNx+umno7q6OunPP/7447jhhhuwePFibNy4Effffz+eeOIJ/OAHP1CcOZlOCIFgMMiNPJKwqW9MrkV3birbl9mWjNi6x4Yyi+rd3VvaovjJPzcCAE6ZPAgeg9/qbtO5ZHItunPjfKI2JtkrYzaOu/vuu3HFFVdg4cKFmDJlCu677z4EAgE88MADSX/+tddew7HHHouLL74Yo0aNwmmnnYYvfelLh3z1nbKPEAKRSIQXzSRs6huTa9Gdm8r2ZbYlI7busSE6mD+/8TF2N7RgQKEf35k3Xnc6B2XTuWRyLbpz43yiNibZKyMW6W1tbVi3bh3mzZv3aTIeD+bNm4fVq1cnvc/cuXOxbt26+KJ869atWLp0KRYsWKAkZyIiIiKZnly3CwDw9eNGY1BRnuZsiIhIhxxdDdfU1CAajWLw4MEJtw8ePBibNm1Kep+LL74YNTU1OO644yCEQHt7O6666qqDvt09HA4jHA7H/x8KhQAAkUgEkUgkDZWQiVzXRXt7OyKRCDwe7VsvGMWmvjG5Ft25qWxfZlsyYqcrZmwO4VxiOxH/W/ZYhyNRfLC3EQDw2YkVxj+2dF/n0snkWnTnxvlETUzOKfZLZWy1LdL7YtWqVbj99tvxm9/8BrNnz8aWLVtw3XXX4Sc/+Ql+/OMfJ73PHXfcgVtuuaXb7StXrkQgEJCdMhERWW758uW6UyCJYpvTtra2YunSpVLb+jDoINzuRbFPYMOaf2OjuR9HJyJJOKfYq7m5udc/6whNH6Joa2tDIBDAk08+iXPPPTd++6WXXoqGhgY888wz3e5z/PHH45hjjsHPf/7z+G2PPvoovvGNb6CpqSnpb7CSvZI+fPhw7NmzBxUV5u6YSkREZotEIli+fDlOPfVU+Hw+3emQJLNn34aqqiAqK0uwZs0PpbZ11/IPcd9L23DW1Er84gvTpLZFRGbhnGK/UCiEAQMGIBgMori4+KA/q+2V9NzcXMycORMrVqyIL9Jd18WKFStw7bXXJr1Pc3Nzt4W41+sF0PMH8f1+P/x+f7fbfT4fTwCLCSHQ0NCA0tJSfi1GFzb1jcm16M5NZfsy25IRO90xOZ9kD9nj/O8PawEAp0wenBGPKd3XuXQyuRbduXE+URuTc4q9cnJ6v/TW+nb3RYsW4dJLL8XRRx+NWbNm4Z577sH+/fuxcOFCAMAll1yCYcOG4Y477gAAfO5zn8Pdd9+NI488Mv529x//+Mf43Oc+F1+sEwEdF81oNAohhHGTrW429Y3JtejOTWX7MtuSEVv32BAl83FdMzZVdeybc+y4AZqz6R2bziWTa9GdG+cTtTHJXqm8gV3rIv2iiy7Cvn37cNNNN6GqqgozZszAsmXL4pvJ7dy5M+GV8x/96EdwHAc/+tGPsHv3bgwcOBCf+9zncNttt+kqgYiIiKjfHl2zA0IAx48fgMHF3NWdiCibad847tprr+3x7e2rVq1K+H9OTg4WL16MxYsXK8iMiIiISL6oK/D3tz8BAFw8a4TmbIiISDezvmOCKE0cx0FxcTHfepSETX1jci26c1PZvsy2ZMTWPTZEXf3z3U+wJ9iK4rwcnDhxoO50es2mc8nkWnTnxvlEbUyyVyqPE+2vpBPJ4DgOcnNzdadhJJv6xuRadOemsn2ZbcmIrXtsKLPEnlPJfA4eexX9/KMOQyA3c56a2XQumVyL7tw4n6iNSfZKZZHOV9LJSq7rora2Fq7r6k7FODb1jcm16M5NZfsy25IRW/fYUGaJ7fMj6wtrWyNRrN7asav72TOGymlEEpvOJZNr0Z0b5xO1McleqTxOuEgna6Wyg2K2salvTK5Fd24q25fZlozYuseGKOalD/ahuS2KYaX5OHJ4qe50UmbTuWRyLbpz43yiNiYRF+lEREREmvz+pa0AgFOnDObnWomICAAX6URERERa7A+3491dQQDAaVMGa86GiIhMwUU6WclxHJSWlvJViSRs6huTa9Gdm8r2ZbYlI7busSGKefbdPWiLdnxGcc7YCs3ZpM6mc8nkWnTnxvlEbUyyFzeOo6znOA48Hg8vmknY1Dcm16I7N5Xty2xLRmzdY0OZRdbu7lFX4L5/fwQAuH7ehIx8PNp0Lplci+7cOJ+ojUn24iKdsp7ruqirq+Num0nY1Dcm16I7N5Xty2xLRmzdY0OZRdbu7ve/shVba/Yj1+vBwuNGpTe4IjadSybXojs3zidqY5K9uLs7ERERkcFe2FgNAPjirOEozvNpzoaIiEzCRToRERGRQntDrXhrZz0A4OLZIzRnQ0REpuEinYiIiEihB1/djkhU4DOjyjCpslh3OkREZBgu0slKHo8H5eXl8Hj4EO/Kpr4xuRbdualsX2ZbMmLrHhvKLOneOK6huS2+Ydwlc0alJ6gmNp1LJteiOzfOJ2pjkr1SeZzwEUVWEkLAdV2IdO/0YwGb+sbkWnTnprJ9mW3JiK17bCizpHvjuD+8vBUAMKAwF2dOHZKeoJrYdC6ZXIvu3DifqI1J9krlccJFOllJCIGGhgZeNJOwqW9MrkV3birbl9mWjNi6x4ayV9QVeGrdbgDAd+ZNgMeT2V/bZNO5ZHItunPjfKI2JtmLi3QiIiIiw6zcVI2qUCuK83Jw4dGH6U6HiIgMxUU6ERERkQJPrtsFALjw6OHw53g1Z0NERKbiIp2s5aRrlx8L2dQ3JteiOzeV7ctsS0Zs3WND2aexNYIXN3V8N/oFR9nzKrpN55LJtejOjfOJ2phEOboTIJLB4/GgoqJCdxpGsqlvTK5Fd24q25fZlozYuseGMku6dnd/cVM12qIuxgwowOQhRf1PzAA2nUsm16I7N84namOSvbi7O2U9IQTa2tq4kUcSNvWNybXozk1l+zLbkhFb99hQZknX7u7PvrsHALBg6hBrXnmz6VwyuRbduXE+URuT7MWN4yjrCSEQCoV40UzCpr4xuRbdualsX2ZbMmLrHhvKPnX727Byc8db3c+cltlfu9aZTeeSybXozo3zidqYZC8u0omIiIgM8fz7VYhEBSZVFmFSpR1vdSciInm4SCciIiKS6F/rqwAAn5s+1Jq3uhMRkTxcpJOVHMeB1+vlk6EkbOobk2vRnZvK9mW2JSO27rGh7BJsieC1j2oAAPOPqNScTXrZdC6ZXIvu3DifqI1J9krlccLd3clKjuOgrKxMdxpGsqlvTK5Fd24q25fZlozYuseGMkt/d3d/dUsNIlGBcYMKMXZgYfoSM4BN55LJtejOjfOJ2phkr1QW6XwlnawkhEBrays38kjCpr4xuRbdualsX2ZbMmLrHhvKLP3d3f2N7fUAgDlj7PuaJpvOJZNr0Z0b5xO1Mcle3DiOsp4QAk1NTbxoJmFT35hci+7cVLYvsy0ZsXWPDWUP1xV44NVtAICjR9n3aptN55LJtejOjfOJ2phkLy7SiYiIiDR74o2PAQAeBzhxwkDN2RARUabgIp2IiIhIgrue3wwAuGzuaJQGcjVnQ0REmYKLdLKS4zjw+XzcbTMJm/rG5Fp056ayfZltyYite2woO2yqCqGmqQ0A8I0TxmjORg6bziWTa9GdG+cTtTHJXtzdnbKe4zgoKSnRnYaRbOobk2vRnZvK9mW2JSO27rGhzNLX3d3/9V7Hd6PPmzwIlSV5ac7KDDadSybXojs3zidqY5K9uLs7ZT0hBJqbm7mRRxI29Y3JtejOTWX7MtuSEVv32FBm6evu7s+937FIP+OIIWnOyBw2nUsm16I7N84namOSvbhxHGU9XjR7ZlPfmFyL7tz4pEptTKLOPtrXhE1VjfB6HHx28iDd6Uhj07lkci26c+N8ojYm2YuLdCIiIiJNHn5tOwBg7tgKbhhHREQp4yKdiIiIKE1aI1E88/YnAIArjrdzwzgiIpKLi3SykuM48Pv93G0zCZv6xuRadOemsn2ZbcmIrXtsyG7PvV+FYEsEw0rzcey4AbrTkcqmc8nkWnTnxvlEbUyyF3d3p6znOA6Kiop0p2Ekm/rG5Fp056ayfZltyYite2wos6S6u/uKjdUAgPOOHAavx+4n7jadSybXojs3zidqY5K9uLs7ZT0hBBobG7mRRxI29Y3JtejOTWX7MtuSEVv32FBmSWV39+a2dvz7g30AgDljKyRmZQabziWTa9GdG+cTtTHJXqk8TrL2lXTXdeG6LoCO32o4jgMhRELn9fX2WNxD3e7xeLrF6On2dOdoe02u66K1tRUFBQUAYEVNvbm9NzW5rotwOIxAINDtN3qZVlNsnPPz85GTk2PUOAkh4rl5PJ5e13So3HtbU6xvAoEAvF6vMbWmWtPBYvc19972zaHGqfNxkx57Nl3LTaipMyHEQXNZtbkawZYIBhTm4qjhJYf8+Uwfp2g0Gj8/vV5vRtfUl2uNqpp685xG5vmUrG9kjZOMWjtfsztf+9MxTp2fh3g8nn6NR+c8D3XtMP18svm615+auv7/YLJmkb5kyRIsWbIE0WgUANDQ0ADH6Vig+P1+FBUVoampCeFwOH6fQCCAQCCAUCiESCQSv72wsBB5eXloaGiIxwOA4uJi5Obmor6+PmGgSktL4fF4UFdXl5BTeXk5XNdFQ0ND/DbHcVBRUYFIJIJQKBS/3ev1oqysDOFwGE1NTfHbfT4fSkpK0NLSgubm5vjt2V6T67pob28HAGtqAtIzTq7rwnEcRKPRhNwzsSbXdeO/wR4wYIBR45Sbm4umpiYIIeJPalQ+9mJ94/P5UFpaKnWccnJyEAqFEmpNV00lJSWIRCKoq6uLx+7vOMX6pqCgAIFAoM/nU+wa47ouotGoMY89m67lJtTU+YlzKBQ6aE0Pv7oNAHDGpArsbwxCGFpTusYpHA7Hr8HFxcUZXVNeXl78q7Ri1xpTxsl1XbS0tKCiokLL+QSg2zVe1jjFFr0A0l5T7NpfUlICx3HSNk6d+6Y/51NLSwsAoL6+HqWlpUY89noap97WZON1rz81pcIRfb1nhopNsNXV1aio6HgrGn8TZF9Nruuivr4eFRUV8WOZXlNvbu/tK+kNDQ0oKyuL/6IqU2uKjXNZWZmRr6TX1tairKxM2yvp9fX1KC8vV/JKem9r7csr6T3F7mvuve2bQ41TJBLBsmXLsGDBgvjjL9VxUn17tl73+lPTzJm3oKoqiMrKEqxbt7jHXD6sbsJpv3gJXo+DVd89EcPK8o2tKV23R6PR+DXYhlfSU73WqHwl/VDPaWSeT8n6RuYr6emutfMv2jpf+9MxTtFoFHV1dfG+6c94tLW1YdmyZZg/fz5yc3ONeOypvD0bagoGgygvL0cwGERxcTEOJmteSe/K4/HELzQxsQ7tKtXbu8Y92O3palP27ZlWk+M4KCgoiN9mQ029ub03NTmOg0AgEJ9MTMm9LzXFxtnr9RqZeyy3rsdUPPZifdP1yWa64neVSq3pii27bw41Tl3PK5Mee7zupa+mZP9P9vNPrdsFADhl0iAMryjoV7uZMk5er7fb+ZnJNaV6rVFVU+ya1fkals74vakpWd/IyEVGrZ2v9Z2v/ekYJ4/Hk7a+6ZyXDeeTrde9/tTUU43JZO0inezmOB0LUerOpr4xuRbdualsX2ZbMmLrHhvKLLHnXUmef8W1RqJ44o2PAQAXHDVMQVZmsOlcMrkW3blxPlEbk+yVbCHfE+7uTlYSQiAYDHZ7KwzZ1Tcm16I7N5Xty2xLRmzdY0OZJfYwOdjDZfXWWjQ0RzCkJA/zJg9Wk5gBbDqXTK5Fd26cT9TGJHul8jjhIp2sJIRAJBLhRTMJm/rG5Fp056ayfZltyYite2zIPu9+HAQAHD2qHDne7HlqZdO5ZHItunPjfKI2JtmLi3QiIiIiRf6zvWP34VmjyjRnQkRENuAinYiIiKiPoq7AWzvrAQAzR5ZrzoaIiGzARTpZyXEcFBYWprRBQ7awqW9MrkV3birbl9mWjNi6x4bs8sqWGuxvi6Ig14uJlUW601HKpnPJ5Fp058b5RG1MslcqjxPu7k5WchwHeXl5utMwkk19Y3ItunNT2b7MtmTE1j02lFkOtbv7a1tqAACDS/Lg9WTXE3WbziWTa9GdG+cTtTHJXtzdnbKeEAL19fXcyCMJm/rG5Fp056ayfZltyYite2wosxxsd/e2dhdPHvh+9G8cP0ZhVmaw6VwyuRbduXE+URuT7MWN4yjrCSEQjUZ50UzCpr4xuRbdualsX2ZbMmLrHhuyx6tbalC7vw0VBbk4L4u+Hz3GpnPJ5Fp058b5RG1MshcX6URERESS/fPdPQCAM6cNgT/HqzkbIiKyBRfpRERERClqjUTx/IYqAMBZ04ZqzoaIiGzCRTpZyXEcFBcXc7fNJGzqG5Nr0Z2byvZltiUjtu6xITs8+voONLa2Y0hJHo4emZ3fj27TuWRyLbpz43yiNibZi7u7U9ZzHAe5ubm60zCSTX1jci26c1PZvsy2ZMTWPTaUWXra3X3l5moAwNePGw1Plu3qHmPTuWRyLbpz43yiNibZi7u7U9ZzXRe1tbVwXVd3KsaxqW9MrkV3birbl9mWjNi6x4YyS7Ld3VvaovjP9noAwIkTBmrIygw2nUsm16I7N84namOSvVJ5nHCRTtbiTps9s6lvTK5Fd24q25fZlqxdfon6as22WrS1uxhakodxgwp1p6OVTeeSybXozo3zidqYRFykExEREaXg5Q9rAAAnTBjIz6ISEVHacZFORERElIKXP9wHADh+fPa+1Z2IiOThIp2s5DgOSktL+QpHEjb1jcm16M5NZfsy25IRW/fYUGarbmzFB3ub4DjAseMqdKejlU3nksm16M6N84namGQvbhxHWc9xHHg8Hl40k7Cpb0yuRXduKtuX2ZaM2LrHhjJL193d39zRAACYOLgIpYHs3tXZpnPJ5Fp058b5RG1MshcX6ZT1XNdFXV0dd9tMwqa+MbkW3bmpbF9mWzJi6x4byixdd3d/Y3sdAODIEdn53eid2XQumVyL7tw4n6iNSfbi7u5EREREaSaEwBNvfAwAOGpEqd5kiIjIWlykExEREfXCh9VNaGxtBwCcNHGQ5myIiMhWXKQTERER9cKqzdUAOr56bWCRX3M2RERkKy7SyUoejwfl5eXwePgQ78qmvjG5Ft25qWxfZlsyYuseG8osnTeO+/cHHV+9duIEfvUaYNe5ZHItunPjfKI2JtkrlccJH1FkJSEEXNeFiO30Q3E29Y3JtejOTWX7MtuSEVv32FBmiT1MXFfgP9vqAQAnTeQiHbDrXDK5Ft25cT5RG5PslcrjhIt0spIQAg0NDbxoJmFT35hci+7cVLYvsy0ZsXWPDWWm5kgUbVEXYwYUYMyAAt3pGMGmc8nkWnTnxvlEbUyyFxfpRERERGkUjnR8dc5lx47idyITEZFUXKQTERERHUJbtGORftqUSs2ZEBGR7bhIJ2vxlY6e2dQ3JteiOzeV7ctsS0Zs3WNDmWn6YSWoLMnTnYZRbDqXTK5Fd26cT9TGJMrRnQCRDB6PBxUVFbrTMJJNfWNyLbpzU9m+zLZkxNY9NpRZOj//PnXKYH2JGMimc8nkWnTnxvlEbUyyF3d3p6wnhEBbWxs38kjCpr4xuRbdualsX2ZbMmLrHhvKLG6nh8mpfKt7ApvOJZNr0Z0b5xO1Mcle3DiOsp4QAqFQiBfNJGzqG5Nr0Z2byvZltiUjtu6xoczS1h4FAOR4HEwYXKg5G7PYdC6ZXIvu3DifqI1J9uIinYiIiCgNItGOJ1U+r4efPSUiIiW4SCciIiLqQfjAK+k+LxfoRESkBhfpZCXHceD1evmqRxI29Y3JtejOTWX7MtuSEVv32FDmqGkKx19Jz/N5NWdjHpvOJZNr0Z0b5xO1McleqTxOuLs7WclxHJSVlelOw0g29Y3JtejOTWX7MtuSEVv32FDmePnDffF/ez18Et6VTeeSybXozo3zidqYZK9UFul8JZ2sJIRAa2srN/JIwqa+MbkW3bmpbF9mWzJi6x4byhyrP6qN/5sPl+5sOpdMrkV3bpxP1MYke3HjOMp6Qgg0NTXxopmETX1jci26c1PZvsy2ZMTWPTaUGYQQeOmDGt1pGM2mc8nkWnTnxvlEbUyyFxfpRERERP3wYXUTqkKt4JvciYhINSMW6UuWLMGoUaOQl5eH2bNnY+3atT3+7EknnQTHcbr9OfPMMxVmTERERDZbsnILAMCfY8RTJSIiyiLaZ54nnngCixYtwuLFi/Hmm29i+vTpOP3001FdXZ305//6179iz5498T/r16+H1+vFhRdeqDhzMpnjOPD5fNxtMwmb+sbkWnTnprJ9mW3JiK17bMh8nzS04Jm3PwEABPzcY7cnNp1LJteiOzfOJ2pjkr0yauO4u+++G1dccQUWLlyIKVOm4L777kMgEMADDzyQ9OfLy8tRWVkZ/7N8+XIEAgEu0imB4zgoKSnhRTMJm/rG5Fp056ayfZltyYite2zIfP98t2OBPmtUefyVdD5curPpXDK5Ft25cT5RG5PslTFfwdbW1oZ169bhxhtvjN/m8Xgwb948rF69ulcx7r//fnzxi19EQUFB0uPhcBjhcDj+/1AoBACIRCKIRCL9yJ5MFtttMy8vjxfOLmzqG5Nr0Z2byvZltiUjdrpixuYQziX2eebt3QCABVMH41cHNvoRQnCsu9B9nUsnk2vRnRvnEzUxOafYr62trdc/q3WRXlNTg2g0isGDByfcPnjwYGzatOmQ91+7di3Wr1+P+++/v8efueOOO3DLLbd0u33lypUIBAKpJ01ERNTJ8uXLdadAaVTdArz/SQ48EPDteQ+tra0AgNbWVixdulRzdkRkO84p9mpubu71z2b0B63uv/9+TJ06FbNmzerxZ2688UYsWrQo/v9QKIThw4fj5JNPRkVFhYo0SQPXdVFfX4+ysjJ4PNo/1WEUm/rG5Fp056ayfZltyYidrpiRSATLly/HqaeeCp/Pl5bcSL97V34E4CMcN34AvnDOTNx1+5sA2pCXl4cFCxboTs8ouq9z6WRyLbpz43yiJibnFPs1NDT0+me1LtIHDBgAr9eLvXv3Jty+d+9eVFZWHvS++/fvx//93//h1ltvPejP+f1++P3+brf7fD6eABZzXRc5OTnw+XzGTba62dQ3JteiOzeV7ctsS0bsdMfkfGIP1xX4y7rYW92HHhjX2FtYHY5zF7qvc+lkci26c+N8ojYm5xR7pTKuWq9Cubm5mDlzJlasWBG/zXVdrFixAnPmzDnoff/yl78gHA7jK1/5iuw0KQM5jgO/32/c58pMYFPfmFyL7txUti+zLRmxdY8NmeudXQ3YE2xFINeLs2cM1Z2O8Ww6l0yuRXdunE/UxiR7ZczGcQCwaNEiXHrppTj66KMxa9Ys3HPPPdi/fz8WLlwIALjkkkswbNgw3HHHHQn3u//++3HuuefyLeuUlOM4KCoq0p2GkWzqG5Nr0Z2byvZltiUjtu6xIXM98Z+PAQAnTRyIQG7HU6TYcyo+B+/OpnPJ5Fp058b5RG1MsldGLdIvuugi7Nu3DzfddBOqqqowY8YMLFu2LL6Z3M6dO7u9fWTz5s145ZVX8Pzzz+tImTKAEAJNTU0oLCzkbze7sKlvTK5Fd24q25fZlozYuseGzBSJuvjX+ioAwIUzh8dvP7C5e/xv+pRN55LJtejOjfOJ2phkL5HCRKJ9kQ4A1157La699tqkx1atWtXttokTJ6ZUJGUfIQTC4TAKCgp40ezCpr4xuRbdualsX2ZbMmLrHhsy0zsfNyDYEkFxXg6OHz9AdzoZwaZzyeRadOfG+URtTLJXKutXs3bGICIiItLgxU3VAIDjxw9EjpdPj4iISB/OQkRERJT1Yov0U6cM1pwJERFlOy7SyUqO4yAQCPCtR0nY1Dcm16I7N5Xty2xLRmzdY0Pm2RtqxaaqRjgO+Fb3FNh0Lplci+7cOJ+ojUn2yqiN44hkiF00qTub+sbkWnTnprJ9mW3JiK17bMg8L39YAwCYOqwEFYX+hGPc3b1nNp1LJteiOzfOJ2pjkr1SWaTzlXSykhACwWCQGwwmYVPfmFyL7txUti+zLRmxdY8NmefNnfUAgDljun+tK3d375lN55LJtejOjfOJ2phkL24cR1lPCIFIJMKLZhI29Y3JtejOTWX7MtuSEVv32JB53t8dBABMPaxEcyaZxaZzyeRadOfG+URtTLIXF+lEREREvRBuj2JjVSMA4IihXKQTEZF+XKQTERFR1vr35n1oa3dRXpCLEeX8bCkREenHRTpZyXEcFBYWcrfNJGzqG5Nr0Z2byvZltiUjtu6xIbOs+mAfAODs6UPh8fAxkQqbziWTa9GdG+cTtTHJXtzdnbKe4zjIy8vTnYaRbOobk2vRnZvK9mW2JSO27rEhcwgh8NKBRfoJE5J/9Rp3d++ZTeeSybXozo3zidqYZC/u7k5ZTwiB+vp6buSRhE19Y3ItunNT2b7MtmTE1j02ZI4dtc3YVd8Cn9fB7NHdd3YHuLv7wdh0Lplci+7cOJ+ojUn24sZxlPWEEIhGo7xoJmFT35hci+7cVLYvsy0ZsXWPDZnj5Q87XkU/emQ5Cvx8c2GqbDqXTK5Fd26cT9TGJHtxkU5ERER0CG/ubAAAHJPk+9GJiIh04SKdiIiIso4QAm/trAcATBvOr14jIiJzcJFOVnIcB8XFxdxtMwmb+sbkWnTnprJ9mW3JiK17bMgM22ubsb22GbleD2aOLNOdTkay6VwyuRbduXE+URuT7MXd3SnrOY6D3Nxc3WkYyaa+MbkW3bmpbF9mWzJi6x4bMsO6HR2voh8+rBjFeb4ef467u/fMpnPJ5Fp058b5RG1Mshd3d6es57ouamtr4bqu7lSMY1PfmFyL7txUti+zLRmxdY8NmeFf7+0BABw/fuBBf467u/fMpnPJ5Fp058b5RG1MslcqjxMu0sla3GmzZzb1jcm16M5NZfsy25K1yy9lr4bmNrx0YGf3z00bojmbzGbTuWRyLbpz43yiNiYRF+lERESUVR5bsxORqMCUIcUYP7hIdzpEREQJuEgnIiKirNEaieKBV7YBAL5xwhjN2RAREXXHRTpZyXEclJaWcrfNJGzqG5Nr0Z2byvZltiUjtu6xIb3e3FGP2v1tGFjkx1l8q3u/2HQumVyL7tw4n6iNSfbixnGU9RzHgcfj4UUzCZv6xuRadOemsn2ZbcmIrXtsSK/VW2sBAHPHViDHe+inQdzdvWc2nUsm16I7N84namOSvbhIp6znui7q6uq422YSNvWNybXozk1l+zLbkhFb99iQPo2tEdz74hYAwEkTD76rewx3d++ZTeeSybXozo3zidqYZC/u7t4LOVNzgMMArOpyYBs6bj8MwLeS3PHsTse7eqjTsb92OdbY6diXk9x3YafjtV2O/bPTsd8nue+YA8fmJzn2X53uu7nLsdWdjt2R5L5HHzh2dJJjd3S67+ouxzZ3OvZfSe47/8CxZB8F/H2n+/6zy7HaTscWJrnvlzsdb+xy7K+djj2U5L6xY2cnOfatTse3dTm2qtOxu5Pcd9qBY8clOXZLp/uu63LsvU7HfpjkvqccODYpybFfd7rv812O7QGcEQ7KppXBuSrJb/Mu7HTfcJdjj3c69niXY+FOxy5MktOVnY7v6XLs+U7Hfp3kvpMOHDul+yHnRwdqGeF09Fln6zrFvSVJ3OMOHJuW5Njdne67qsuxXl4jnBFJ+vehTve16BrhzEpSq8HXCGeEA6epS879uEZ4vuOx6hoRP3Zlkvtm2DUCP+x03/eApQe+di3X68FZkaG9u0ZUJzmWhmuELc8j4tdgC55HFF5V2FGLYc8jnBEOSs4s6X7MwmuEM8JB0deSbOaYhmuEMy/JXNXlGpGgF88jnBEOSk8s7X6sH9cI73leq64RvXkekSnXiP6uNZwpvX8lPafXP2kZZ8+BTup6AYkC2H3g3/VJ7riv0/Gu9nc61tzlmOh0rCbJfWs7He/6S5aWTseaktx3N4A2AIOSHKvvdN/2LsfCnY6Fkty3Cj3XGup0rGsftuPgfVh94HhukmNNne7b0uWY2+lY14sL0NGvseNdX/Fo7nRsf5L7xo4NT3Kscx9Guxw7VB/uOZBXXpJjwU73betyLNLpWEOS++49cDzZpsSNne7b2uVYFHB2O/DCC1GX5GWhgz2+O/dh18c3Oh3bl+RYHXruw9ZOx7pe8ADgkwO3J3l+ggbAu8fb8e9Il2NtneIGk9w39vju+vgFDv747uU1wkGSCzGvEZ+2o/Ea4cBJ6zXCqXesukbEj9UluW8GXiPi940AKzd1NP7FWcPhi3p6d42oBLqdzmm4RiSVgdeI+DXYgmuEp9YDZ/eBwTboeYRT48DjS/K6moXXCAcOPCOT1KroGpGgF88jnN0OPK1J8u3PNaLz89muMvAaYePzCAB9ukYkfW7Yg6xdpIshouN9BP4uB7wAhh34d1mSOw7sdLyrgk7HAl2OOZ2ODUhy34pOx7ue6/mdjhUmue8w9HzilHW6b9fR9nc6VpzkvpVd/u6suNN9u/ZhDg7eh4MOHE924hR2um9+l2OeTscqktx3QKfjXc+BQKdjBUnuGzs2MMmxzn3o7XLsUH045MDPJOvDkk737doXvk7HSpPcdzA6Joxkj4eiTvft+sTfC4hhAq7rwlOeZFI52OO7cx92fXwDB+/DcvTch3mdjiV7sjAUHRfUwUmOlQLRIdGOz4P5ugx6bqe4ySbmSnRM7OVJjh3s8d3La4TodvUGrxExmq8RAiKt1whRJqy6RsSPJTs3MvAaEbtvMBLBsverAADnH3VYx5O43lwjgO5PaNNwjUgqA68R8WtwcZInnxl2jXArXIhhouOJtEHPI4RfwB3kwtv1zhZeIwQE3IoktSq4RsDX5VgvnkeIVgG3xIWn60nXn2tE5+ezXWXgNcLG5xEA+nSNEK7o/k6QHjhCZNenrEKhEEpKSlBTU4OKimS9T7ZwXRceT9Z+ouOgbOobk2vRnZvK9mW2JSN2OmJGIhEsXboUCxYsgM/X9dkdmeaBV7bh1n9uwJCSPLz6/VPg8fTuFY2ZM2/Gnj1BDBlSgnXrbpabZAbSfZ1LJ5Nr0Z0b5xP5MTmn2C+2Dg0GgyguTvZbi0+ZeSUi6ichOl4tzrLfQfWKTX1jci26c1PZvsy2ZMTWPTakx7qdHe+JnDOmotcLdIAbxx2MTeeSybXozo3zidqYZK9UHidcpJOVhBBoaGjgRTMJm/rG5Fp056ayfZltyYite2xIPSEE1m3vWKR//uhkuzFRX9h0Lplci+7cOJ+ojUn24iKdiIiI6ICtNftRFWpFjsfBkcOTfYCRiIjIHFykExERkdUeWb0DAHD0qDLk53bddYqIiMgsXKSTtRyn9585zDY29Y3JtejOTWX7MtuSEVv32JBa63d3fH/S1GHJtmim/rDpXDK5Ft25cT5RG5Moa7+Cjezm8Xi4e38PbOobk2vRnZvK9mW2JSO27rEhtVojUbz9cQMA4KvHjEr5/rHn33we3p1N55LJtejOjfOJ2phkr1S+BYCvpJOVhBBoa2vjRh5J2NQ3JteiOzeV7ctsS0Zs3WNDar3zcQPaXYFBRX4ML+/6pbiHxt3de2bTuWRyLbpz43yiNibZixvHUdYTQiAUCvGimYRNfWNyLbpzU9m+zLZkxNY9NqRW7FX0o0aU8W2paWbTuWRyLbpz43yiNibZi4t0IiIiIgD/Wl8FADhqZKneRIiIiHqJi3QiIiKyUk1TOP5K+nlH8vvRiYgoM3CRTlZyHAder5dvbUzCpr4xuRbdualsX2ZbMmLrHhtSZ8XGvQCAKUOKMbDIrzkb+9h0Lplci+7cOJ+ojUn2SuVxkrW7u7uuC9d1AXR0mOM4EEIkfFagr7fH4h7qdo/H0y1GT7enO8dsqKm0tNS6mtI1TmVlZRBC9KpW02sqKSmBECJpDN01lZaWJhxT/dgrKfn066Zk1xobh0PV2peaeurH/uTem7451Dh1Pm7aY4/XvY7bn3n7EwDAgqmVAPo2Tp31dK3J5nGKnfuxY5lcU6rXGpU1Heo5jezHXtdrvMxxSnetnWvqfO1PxzjFYsaO92c8Os8th7rWZML5ZPN1r681pSJrFulLlizBkiVLEI1GAQANDQ3xk8vv96OoqAhNTU0Ih8Px+wQCAQQCAYRCIUQikfjthYWFyMvLQ0NDQzweABQXFyM3Nxf19fXdLjYejwd1dXUJOZWXl8N1XTQ0NMRvcxwHFRUViEQiCIVC8du9Xi/KysoQDofR1NQUv93n86GkpAQtLS1obm6O357tNQkhkJubi+LiYmtqAtIzTkIIFBQUwOfzIRgMZnRNQghEIhH4fD5UVFQYNU5+vx/V1dXweDzxa43Kx16sbwKBAEpLS6WOk8/nw969e5GTkxOvNV01lZaWIhQKoa2tLR67v+MU65uysjLk5+f3+Xxqb28H0PGEKhqNGvPYs+la3p+aNu2owutbawEAx4/Ij/9yPtWaOj9xDoVCHKdONbW1tcWvwUVFRRldU35+PmpqauLtmTROsTYGDBig5bHnOA727t0Ln88X7xtZ4ySEgMfjQXl5edpril37Bw4cCK/Xm5Zxam1tRX19fbxv+nM+tbS0AADq6+tRWlpqxGOvp3HqbU02Xvf6U1Ps/OkNR3T9NYTlYhNsdXV1/HsN+Zsg+2pyXRf19fWoqKiIH8v0mnpze29qil3YysrKul0sMq2m2DiXlZUhJyfHqHESQqC2thZlZWXx78VU+diL9U15eTm8Xq8xtaZa08Fi9zX33vbNocYpEolg2bJlWLBgQfzxl+o4qb49m657v3/pI9y+dBOmH1aCv31zbp9rmjnzFlRVBVFZWYJ16xZznDrdHo1G49fg2Ft+M7WmvlxrVNXUm+c0Mh97yfpG1jjJqLXzL9o6X/vTMU7RaBR1dXXxvunPeLS1tWHZsmWYP38+cnNzjXjsqbw9G2oKBoMoLy9HMBhEcXExDiZrXknvyuPxdPtC+ViHdpXq7T19UX2y29PVpuzbM7Gm2L9tqulQt6daUybUeqiaOtdhUu5CiHhuXWtQ9djr6d/pih+Taq3pii27bw41Tp2Pm/TYO9jt2XTde/nDjldFz5w2pF/XiGT/5zh9eu3t/Hcm19SXa43KmnQ+9nrqG1m5pLvWnnJO5zilo286zy2Zfj715fZsqCnZz/SEG8cRERGRVWqawnh1S8ci/aSJgzRnQ0RElBou0slKjuMkfHaKPmVT35hci+7cVLYvsy0ZsXWPDcm3fMNeuAKYOqwEEwYX6U7HWjadSybXojs3zidqY5K9UnmcZO3b3clujuMk7OBJn7Kpb0yuRXduKtuX2ZaM2LrHhuR7/v0qAMD8Iyr7HSv2nIrPwbuz6VwyuRbduXE+URuT7MW3u1PWE0Kgubm526YSZFffmFyL7txUti+zLRmxdY8NySWEwBs76gEAJ04YmIZ4iX/Tp2w6l0yuRXdunE/UxiR7pfI44SKdrMSLZs9s6huTa9GdG59UqY1J5tiwJ4TG1nb4vA7GDSrUnY7VbDqXTK5Fd26cT9TGJHtxkU5ERERZ6f3dHd+Re+TwMuT5vJqzISIiSh0X6URERGSNZ9/bAwA4amSZ5kyIiIj6hot0spLjOPD7/dxtMwmb+sbkWnTnprJ9mW3JiK17bEieYEsEL3+4DwDwxc8M15yN/Ww6l0yuRXdunE/UxiR7cXd3ynqO46CoiF+7k4xNfWNyLbpzU9m+zLZkxNY9NiTP02/thiuA0QMKMGpAQVpicnf3ntl0Lplci+7cOJ+ojUn24u7ulPWEEGhsbORGHknY1Dcm16I7N5Xty2xLRmzdY0Py/O2t3QCArx4zMm0xubt7z2w6l0yuRXdunE/UxiR7ceM4ynpCCITDYV40k7Cpb0yuRXduKtuX2ZaM2LrHhuSo29+Gd3Y1AADOmNr/70enQ7PpXDK5Ft25cT5RG5PsxUU6ERERZZXn3q+CEMC4QYUYUpKvOx0iIqI+4yKdiIiIMt6KjdUAgM9NG6o5EyIiov7hIp2s5DgOAoEAd9tMwqa+MbkW3bmpbF9mWzJi6x4bSr/WSBSvbqkBAMybMkhzNtnDpnPJ5Fp058b5RG1Mshd3d6esF7toUnc29Y3JtejOTWX7MtuSEVv32FD6vb61Fi2RKCqL8zBlSHFaY3N3957ZdC6ZXIvu3DifqI1J9uLu7pT1hBAIBoPcyCMJm/rG5Fp056ayfZltyYite2wo/V7c1PFW95MnDUr7K1rc3b1nNp1LJteiOzfOJ2pjkr24cRxlPSEEIpEIL5pJ2NQ3JteiOzeV7ctsS0Zs3WND6eW6As+/vxcA8NlJfKu7SjadSybXojs3zidqY5K9uEgnIiKirLCxKoSqUCsCuV4cN36A7nSIiIj6jYt0IiIiylirP6oFAMwaXY48n1dzNkRERP3HRTpZyXEcFBYWcrfNJGzqG5Nr0Z2byvZltiUjtu6xofRat6MeADB7dIXmTLKPTeeSybXozo3zidqYZC/u7k5Zz3Ec5OXl6U7DSDb1jcm16M5NZfsy25IRW/fYUPq0R12s3trxSvqM4aVS2uDu7j2z6VwyuRbduXE+URuT7MXd3SnrCSFQX1/PjTySsKlvTK5Fd24q25fZlozYuseG0mfNtjo0NEdQnJeDI0eUSmmDu7v3zKZzyeRadOfG+URtTLIXN46jrCeEQDQa5UUzCZv6xuRadOemsn2ZbcmIrXtsKH2WvrcHALBg6hB+Hl0Dm84lk2vRnRvnE7UxyV5cpBMREZHVoq7Acwe+em3+EZWasyEiIkofLtKJiIgo47y6pQY1TWEU5+Vg7lh+9RoREdmDi3SykuM4KC4u5m6bSdjUNybXojs3le3LbEtGbN1jQ+nxr/Udb3U//fBK5Obw6YwONp1LJteiOzfOJ2pjkr24uztlPcdxkJubqzsNI9nUNybXojs3le3LbEtGbN1jQ+mxZlsdAPlvdefu7j2z6VwyuRbduXE+URuT7MXd3Snrua6L2tpauK6rOxXj2NQ3JteiOzeV7ctsS0Zs3WND/RdsjmDrvv0AgCNHlElti7u798ymc8nkWnTnxvlEbUyyVyqPEy7SyVrcabNnNvWNybXozk1l+zLbkrXLL2WuN3Z0vIo+ekABygv4KpZONp1LJteiOzfOJ2pjEnGRTkRERBkl9lb32aPLNWdCRESUflykExERUUZZs7UWADB7DBfpRERkHy7SyUqO46C0tJS7bSZhU9+YXIvu3FS2L7MtGbF1jw31T1O4Hes/CQEAZo+u0JxNdrPpXDK5Ft25cT5RG5PsxY3jKOs5jgOPx8OLZhI29Y3JtejOTWX7MtuSEVv32FD//GdbHaKuwPDyfAwtzZfeHnd375lN55LJtejOjfOJ2phkLy7SKeu5rou6ujrutpmETX1jci26c1PZvsy2ZMTWPTbUP89vqAIAHD9+oJL2uLt7z2w6l0yuRXdunE/UxiR7cXd3IiIisk7d/jb879qPAQBnSP5+dCIiIl24SCciIqKM8IvlHwAAxgwowJwx/Dw6ERHZiYt0IiIiMl7UFfjX+o63un9x1nDkePkUhoiI7MQZjqzk8XhQXl4Oj4cP8a5s6huTa9Gdm8r2ZbYlI7busaG+Wb87iJqmMIr8OVh47Ghl7XLjuJ7ZdC6ZXIvu3DifqI1J9krlcaL9EbVkyRKMGjUKeXl5mD17NtauXXvQn29oaMA111yDIUOGwO/3Y8KECVi6dKmibClTCCHgui4Ed/rpxqa+MbkW3bmpbF9mWzJi6x4b6puXPtgHAJg7rgI+ha+ic+O4ntl0Lplci+7cOJ+ojUn2SuVxonWR/sQTT2DRokVYvHgx3nzzTUyfPh2nn346qqurk/58W1sbTj31VGzfvh1PPvkkNm/ejD/84Q8YNmyY4szJdEIINDQ08KKZhE19Y3ItunNT2b7MtmTE1j021DfPb9gLADhp4iDNmVCMTeeSybXozo3zidqYZK9UHic5EvM4pLvvvhtXXHEFFi5cCAC477778Oyzz+KBBx7ADTfc0O3nH3jgAdTV1eG1116Dz+cDAIwaNUplykRERKTYztpmvLc7CK/HwWlTButOh4iISCptr6S3tbVh3bp1mDdv3qfJeDyYN28eVq9enfQ+f//73zFnzhxcc801GDx4MI444gjcfvvtiEajqtImIiIixWLfjT57dDkqCv2asyEiIpJL2yvpNTU1iEajGDw48TfigwcPxqZNm5LeZ+vWrXjxxRfx5S9/GUuXLsWWLVvwzW9+E5FIBIsXL056n3A4jHA4HP9/KBQCAEQiEUQikTRVQ6ZxXRfRaBSRSISbeXRhU9+YXIvu3FS2L7MtGbHTFTM2h3Auke+59zsW6adMHKChv0X8b451It3XuXQyuRbduXE+UROTc4r9UhlbrW93T5Xruhg0aBB+//vfw+v1YubMmdi9ezd+/vOf97hIv+OOO3DLLbd0u33lypUIBAKyUyYiIsstX75cdwpWa4oAb2z3AnDgrXofS5e+r7T91tbW+N/cqJaIZOOcYq/m5uZe/6y2RfqAAQPg9Xqxd+/ehNv37t2LysrKpPcZMmQIfD4fvF5v/LbJkyejqqoKbW1tyM3N7XafG2+8EYsWLYr/PxQKYfjw4Tj55JNRUVGRpmrINEJ0vOLh8/ng8HtzEtjUNybXojs3le3LbEtG7HTFjEQiWL58OU499dT4PimUfk+9uRvijfcxubIIXzlvjvL2b7nlTQBtyMvLw4IFC5S3bzLd17l0MrkW3blxPlETk3OK/YLBYK9/VtsiPTc3FzNnzsSKFStw7rnnAuh4pXzFihW49tprk97n2GOPxeOPPw7XdeNvKfnggw8wZMiQpAt0APD7/fD7u39+zefz8QSwmOu6CIVCyM/PN+5ta7rZ1Dcm16I7N5Xty2xLRux0x+R8ItfLH9UBAE47vFJTPzvxvznOiXRf59LJ5Fp058b5RG1Mzin2ysnp/dJb61Vo0aJF+MMf/oCHH34YGzduxNVXX439+/fHd3u/5JJLcOONN8Z//uqrr0ZdXR2uu+46fPDBB3j22Wdx++2345prrtFVAhEREUkihMAb2zsW6XPG8t1vRESUHbR+Jv2iiy7Cvn37cNNNN6GqqgozZszAsmXL4pvJ7dy5M+G3UsOHD8dzzz2H66+/HtOmTcOwYcNw3XXX4fvf/76uEoiIiEiSD/Y2YW8ojByPg+mHlepOh4iISAntG8dde+21Pb69fdWqVd1umzNnDl5//XXJWVGmcxwHXq/XuM+VmcCmvjG5Ft25qWxfZlsyYuseG+q9Z97eDQA4edIg5Od6D/HTpJpN55LJtejOjfOJ2phkr1QeJ9oX6UQyOI6DsrIy3WkYyaa+MbkW3bmpbF9mWzJi6x4b6h0hBP61vuOr1+ZNHqQtj9hzKj4H786mc8nkWnTnxvlEbUyyVyqLdLN2xiBKEyEEWltbIYQ49A9nGZv6xuRadOemsn2ZbcmIrXtsqHe2VDdhW81+5OZ4cNa0odryiD1M+HDpzqZzyeRadOfG+URtTLJXKo8TLtLJSkIINDU18aKZhE19Y3ItunNT2b7MtmTE1j021DsrN1cDAI4ZU4ECP9/4ZyKbziWTa9GdG+cTtTHJXlykExERUcYSQuDZd/cAAE6ZOFBzNkRERGqltEiPRCL42te+hm3btsnKh4iIiLLcpqpGvLMriNwcDxZMG6I7HSIiIqVSWqT7fD489dRTsnIhShvHceDz+bjbZhI29Y3JtejOTWX7MtuSEVv32NChrdq8DwAwc0QZBhXlac6GemLTuWRyLbpz43yiNibZS+rGceeeey6efvrpVO9GpJTjOCgpKeFFMwmb+sbkWnTnprJ9mW3JiK17bOjQXvuoBgBw8iT9b3Xn7u49s+lcMrkW3blxPlEbk+wl9SvYxo8fj1tvvRWvvvoqZs6ciYKCgoTj3/72t1MNSZR2Qgi0tLQgPz+fF84ubOobk2vRnZvK9mW2JSO27rGhg2trd/HG9noAwIkT9H31Wgx3d++ZTeeSybXozo3zidqYZK9UNo5LeZF+//33o7S0FOvWrcO6desSjjmOw0U6GUEIgebmZuTl5fGi2YVNfWNyLbpzU9m+zLZkxNY9NnRwH+xtREskitKAD+MHFepOhw7CpnPJ5Fp058b5RG1MspfURTo3jSMiIiJZNlc1AgDGDSyEx8MnvURElH369RVsQgh+LyARERGlzdL3Or56bfaYcs2ZEBER6dGnRfqf/vQnTJ06Ffn5+cjPz8e0adPwyCOPpDs3oj5zHAd+v59vPUrCpr4xuRbdualsX2ZbMmLrHhvqWWskilcPbBp31rShmrOhQ7HpXDK5Ft25cT5RG5PsJXXjuLvvvhs//vGPce211+LYY48FALzyyiu46qqrUFNTg+uvvz7VkERp5zgOioqKdKdhJJv6xuRadOemsn2ZbcmIrXtsqGerP6pFa8RFZXEeJlWaMUbc3b1nNp1LJteiOzfOJ2pjkr2kfgXbvffei9/+9rf42c9+hrPPPhtnn3027rzzTvzmN7/Br371q1TDEUkhhEBjYyM/jpGETX1jci26c1PZvsy2ZMTWPTbUsxWb9gIATpk8yJhXpri7e89sOpdMrkV3bpxP1MYke6XyOEl5kb5nzx7MnTu32+1z587Fnj17Ug1HJIUQAuFwmBfNJGzqG5Nr0Z2byvZltiUjtu6xoeSEEHhhQzUA4KQJ+r8fnQ7NpnPJ5Fp058b5RG1MspfURfq4cePw5z//udvtTzzxBMaPH59qOCIiIiJsqmpEVagVeT4PTuAinYiIsljKn0m/5ZZbcNFFF+Gll16Kfyb91VdfxYoVK5Iu3omIiIgO5Yn/fAwAmDOmAnk+r+ZsiIiI9En5lfQLLrgAa9euxYABA/D000/j6aefxoABA7B27Vqcd955MnIkSpnjOAgEAsZ8ptEkNvWNybXozk1l+zLbkhFb99hQd9WNrXjk9R0AgK8dN1pzNtRbNp1LJteiOzfOJ2pjkr2k7e4eiURw5ZVX4sc//jEeffTRlBMjUiV20aTubOobk2vRnZvK9mW2JSO27rGh7lZ/VIuoKzBlSDGOH2/WW925u3vPbDqXTK5Fd26cT9TGJHtJ293d5/PhqaeeSjkhItWEEAgGg9zIIwmb+sbkWnTnprJ9mW3JiK17bKi717bUAgCOGz9AcybdcXf3ntl0Lplci+7cOJ+ojUn2krpx3Lnnnounn3461bsRKSWEQCQS4UUzCZv6xuRadOemsn2ZbcmIrXtsqLvXttYAAOaMrdCcCaXCpnPJ5Fp058b5RG1Mslcqj5OUN44bP348br31Vrz66quYOXMmCgoKEo5/+9vfTjUkERERZamt+5rwcV0LcjwOPjOqXHc6RERE2qW8SL///vtRWlqKdevWYd26dQnHHMfhIp2IiIh67TerPgIAfGZUOQr9KT8tISIisk5Ks6EQAqtWrcKgQYOQn58vKyeifnMcB4WFhdxtMwmb+sbkWnTnprJ9mW3JiK17bOhTQgi8uKkaAPDVOSM1Z0OpsulcMrkW3blxPlEbk+wlbeM4IQTGjx+PXbt2pZwUkUqO4yAvL48XzSRs6huTa9Gdm8r2ZbYlI7busaFPrd8dQt3+NuR6PThl0iDd6STF3d17ZtO5ZHItunPjfKI2JtlL2iLd4/Fg/PjxqK2tTTkpIpWEEKivr+dGHknY1Dcm16I7N5Xty2xLRmzdY0OfWr5xLwDgpIkDkefzas4mOe7u3jObziWTa9GdG+cTtTHJXlJ3d//pT3+K//qv/8L69etTvSuRMkIIRKNRXjSTsKlvTK5Fd24q25fZlozYuseGOkRdgWXr9wAATp0yWHM21Bc2nUsm16I7N84namOSvaTu7n7JJZegubkZ06dPR25ubrfPptfV1aUakoiIiLLMqs3V+GBvEwr9OfjsZC7SiYiIYlJepN9zzz0S0iAiIqJssmZbxy/1Pzd9CMoLcjVnQ0REZI6UF+mXXnqpjDyI0spxHBQXF3MjjyRs6huTa9Gdm8r2ZbYlI7busaEO63bUAwCOHsnvRs9UNp1LJteiOzfOJ2pjkr2kbBz35z//GW1tbfH/79q1C67rxv/f3NyMO++8s9cNE8nkOA5yc3N50UzCpr4xuRbdualsX2ZbMmLrHhsCwu1RvLc7CACYObJMczYHx93de2bTuWRyLbpz43yiNibZS8oi/Utf+hIaGhri/58yZQq2b98e/39jYyNuvPHGXjdMJJPruqitrU34RRJ1sKlvTK5Fd24q25fZlozYuseGgHd3BdHW7qK8IBcjKwK60zko7u7eM5vOJZNr0Z0b5xO1McleqTxOer1I77obHXcxJNPxMdozm/rG5Fp056ayfZltydrll/R55u3dAIC5Yyv4ClSGs+lcMrkW3blxPlEbkyjlr2AjIiIi6qv2qItn3voEAHDRZ4ZrzoaIiMg8XKQTERGRMu/sCqIx3I7SgA9zxw7QnQ4REZFxUtrd/bnnnkNJSQmAjvfUr1ixAuvXrweAhM+rE+nmOA5KS0v5NsokbOobk2vRnZvK9mW2JSO27rHJdq9uqQHQ8VZ3r4djkMlsOpdMrkV3bpxP1MYke6XyOElpkd7169euvPLKPjdMJJPjOPB4PHxMJmFT35hci+7cVLYvsy0ZsXWPTbaLLdKPHZcZr6Jzd/ee2XQumVyL7tw4n6iNSfaSsru767qH/BONRvuUMFG6ua6Luro67raZhE19Y3ItunNT2b7MtmTE1j022ay5rR1v7uz4fvRjM+St7tzdvWc2nUsm16I7N84namOSvVJ5nKT0SrpNYr9YADp+q+E4DoQQCTs09vX2rgPQ0+0ej6dbjJ5uT3eOttfkum7837bU1Jvbe1NT7N9CiF7VanJNsXF2Xde4cUrWxyofe7G+OdR5oLrWVGs6WOy+5t7bvjnUOHU+btJjz+Rr+ZqttYhEBYaV5mNEeX5axlV2TZ0JIbJinHp7e+drcKbXBKR+rVFVU2+e08h87CXrG1njJKPWztfsrm0dKvfe1pSONUXXPE147Km8PRtq6przwWTNIn3JkiVYsmRJ/NX+hoaG+IXH7/ejqKgITU1NCIfD8fsEAgEEAgGEQiFEIpH47YWFhcjLy0NDQ0PCuweKi4uRm5uL+vr6hEEoLS2Fx+NBXV1dQk7l5eVwXTfh8/yO46CiogKRSAShUCh+u9frRVlZGcLhMJqamuK3+3w+lJSUoKWlBc3NzfHbs70m13XR3t4OANbUBKRnnGJPpqLRaELumViT67pobGyEEAIDBgwwapxyc3PR1NQEIQQ8Hk/K4wT077EX6xufz4fS0lKp45STk4NQKJRQa7pqKikpQSQSQV1dXTx2f8cp1jcFBQUIBAJ9Pp9i15jYO8lMeeyZfC3/1zsfAwBOmDAA+/fvz4iaOj9xDoVCWTFOva0pHA7Hr8HFxcUZXVNeXh6am5sTrmOmjJPrumhpaUFFRYWWxx6Abtd4WePkui5aW1sBIO01xa79JSUlcBwnbePUuW/6cz61tLQAAOrr61FaWmrEY6+nceptTTZe9/pTUyoc0dd7ZqjYBFtdXY2KigoA/E2QjTW5rov6+npUVFTEj2V6Tb25vbevpDc0NKCsrCz+i6pMrSk2zmVlZcjJyTFqnIQQqK2tRVlZWfxJjcrHXqxvysvL4fV6jak11ZoOFruvufe2bw41TpFIBMuWLcOCBQvij79Ux0n17Tqve0IIHP/zVfikoRX3X3o0Tpk0KCNqmjnzFlRVBVFZWYJ16xZbP06p3B6NRuPXYK/Xm9E19eVao/KV9EM9p5H52EvWNzJfSU93rZ1/0db52p+OcYpGo6irq4v3TX/Go62tDcuWLcP8+fORm5trxGNP5e3ZUFMwGER5eTmCwSCKi4txMFnzSnpXHo8nfqGJiXVoV6ne3jXuwW5PV5uyb8+0mjweDyoqKhIm2t7k3tPtJtTUm9t7U5PH40F5eXmPP5tJNSUbZ1NydxwnIbfe1pSuXFT2Taq1piu27L451Dh1Pm7SY+9gt+u87m34JIRPGlqR5/Pg2HEDMqim2L8/nUtsHqdUbs/Jyel2fmZqTX251qiqqTfPaWQ+9nrqGxnjIaPWztfszrHTMU5erzdtfdM5r0Nda0w/n/pyezbU5PV6u/1MT/g96WQlIT79rBwlsqlvTK5Fd24q25fZlozYuscmW63YuBcAcNy4gcjz9f6Jim6xhwkfLt3ZdC6ZXIvu3DifqI1J9krlccJFOllJCIGGhgZeNJOwqW9MrkV3birbl9mWjNi6xyZbvXBgkX7qlEGaM6F0selcMrkW3blxPlEbk+yVyuMk5be7J/scK9DxMn9eXh7GjRuHyy67DAsXLkw1NBEREVlob6gV7+wKAgBOnsRFOhER0cGkvEi/6aabcNttt+GMM87ArFmzAABr167FsmXLcM0112Dbtm24+uqr0d7ejiuuuCLtCRMREVFmeXFTNQBgxvBSDCrK05wNERGR2VJepL/yyiv47//+b1x11VUJt//ud7/D888/j6eeegrTpk3Dr371Ky7SSatk7/igDjb1jcm16M5NZfsy25IRW/fYZJsXNsTe6j5YcyaUbjadSybXojs3zidqYxKl/Jn05557DvPmzet2+2c/+1k899xzAIAFCxZg69at/c+OqI+67uBJn7Kpb0yuRXduKtuX2ZaM2LrHJtvsrG3Gqg/2AcjMRXrn3d0pkU3nksm16M6N84namGSvVB4nKT+iysvL8Y9//KPb7f/4xz9QXl4OANi/fz+KiopSDU2UNrHvm+RGHt3Z1Dcm16I7N5Xty2xLRmzdY5Ntnnl7N6KuwLHjKjBhcOY9N+Du7j2z6VwyuRbduXE+URuT7CV147gf//jHuPrqq7Fy5cr4Z9L/85//YOnSpbjvvvsAAMuXL8eJJ56YamiitBFCIBQKoby8nG9D6sKmvjG5Ft25qWxfZlsyYusem2yzcnPH59HPnDpUcyaUbjadSybXojs3zidqY5K9pC7Sr7jiCkyZMgW//vWv8de//hUAMHHiRPz73//G3LlzAQDf/e53Uw1LRERElqltCuOtjxsAACdPGqg3GSIiogyR8iIdAI499lgce+yx6c6FiIiILPLipmoIARw+tBhDSvJ1p0NERJQR+rRId10XW7ZsQXV1NVzXTTh2wgknpCUxov5wHAder5dvPUrCpr4xuRbdualsX2ZbMmLrHpts8sLGjl3d503OvA3j6NBsOpdMrkV3bpxP1MYke6XyOEl5kf7666/j4osvxo4dO7q9r95xHESj0VRDEqWd4zgoKyvTnYaRbOobk2vRnZvK9mW2JSO27rHJFq2RKF7+sAZAZu7qHsPd3Xtm07lkci26c+N8ojYm2SuVRXrKu7tfddVVOProo7F+/XrU1dWhvr4+/qeuri7VcERSCCHQ2trK3TaTsKlvTK5Fd24q25fZlozYuscmW6zeWovmtigqi/Nw+NBi3en0GXd375lN55LJtejOjfOJ2phkL6kbx3344Yd48sknMW7cuFTvSqSMEAJNTU3Izc3lW5C6sKlvTK5Fd24q25fZlozYuscmWzz//oG3uk8ZxH62lE3nksm16M6N84namGSvVBbpKb+SPnv2bGzZsiXVuxEREVGWCLdH8c93PgEAzD98iOZsiIiIMkvKr6R/61vfwne/+11UVVVh6tSp8Pl8CcenTZuWtuSIiIgo87y6pQaN4XYMKvJj7tgK3ekQERFllJQX6RdccAEA4Gtf+1r8NsdxIITgxnFkDMdx4PP5+NajJGzqG5Nr0Z2byvZltiUjtu6xyQbL1lcBAOYfUQmPh/1sK5vOJZNr0Z0b5xO1McleUnd337ZtW6p3IVLOcRyUlJToTsNINvWNybXozk1l+zLbkhFb99jYLtwejS/STz+8UnM2/cfd3Xtm07lkci26c+N8ojYm2UvqIn3kyJGp3oVIOSEEWlpakJ+fz99udmFT35hci+7cVLYvsy0ZsXWPje3+vXkfQq3tKM7LwWdGletOp9+4u3vPbDqXTK5Fd26cT9TGJHulfXf3v//97zjjjDPg8/nw97///aA/e/bZZ/e6cSJZhBBobm5GXl4eL5pd2NQ3JteiOzeV7ctsS0Zs3WNju2Xvd7yKfsYRQ5Cbk/L+tJRBbDqXTK5Fd26cT9TGJHulfZF+7rnnoqqqCoMGDcK5557b48/xM+lERETZy3UF/r15HwDgnCOHas6GiIgoM/Vqke66btJ/ExEREcW8uzuI2v1tKPLb8VZ3IiIiHfg+NLKS4zjw+/1861ESNvWNybXozk1l+zLbkhFb99jY7JHVOwAAx08YAJ+XTzFsZ9O5ZHItunPjfKI2JtlL6sZxALBixQqsWLEC1dXV3V5Zf+CBB/oSkiitHMdBUVGR7jSMZFPfmFyL7txUti+zLRmxdY+NrdqjLpa+twcAcNLEQZqzSR/u7t4zm84lk2vRnRvnE7UxyV6pLNJT/jX3LbfcgtNOOw0rVqxATU0N6uvrE/4QmUAIgcbGxpQ2aMgWNvWNybXozk1l+zLbkhFb99jY6n//8zFaIh370pw5dYjmbNKHu7v3zKZzyeRadOfG+URtTLJX2jeO6+y+++7DQw89hK9+9aup3pVIGSEEwuEwCgoK+BakLmzqG5Nr0Z2byvZltiUjtu6xsdXKTdUAgLOnD0WBv09v1KMMY9O5ZHItunPjfKI2JtkrlUV6yq+kt7W1Ye7cuanejYiIiCzVGoniP9vrAACXzBmpORsiIqLMlvIi/fLLL8fjjz8uIxciIiLKQH9/+xM0trZjWGk+Zgwv1Z0OERFRRkv5/Witra34/e9/jxdeeAHTpk2Dz+dLOH733XenLTmivnIcB4FAgG89SsKmvjG5Ft25qWxfZlsyYuseGxu9saPjVfTzjhyGHO7qnjVsOpdMrkV3bpxP1MYke0nd3f3dd9/FjBkzAADr16/vc8NEMsUumtSdTX1jci26c1PZvsy2ZMTWPTa2cV2Blz6oAQAcNbJUbzIScHf3ntl0Lplci+7cOJ+ojUn2krpIX7lyZap3IVJOCIFQKITi4mL+8qgLm/rG5Fp056ayfZltyYite2xs89bH9agKtaLQn4O5YwfoTiftuLt7z2w6l0yuRXdunE/UxiR7Sd04rrNdu3Zh165d/QlBJIUQApFIhF+JkYRNfWNyLbpzU9m+zLZkxNY9NrZ59t0qAMC8yYOQ5/NqzoZUsulcMrkW3blxPlEbk+wldZHuui5uvfVWlJSUYOTIkRg5ciRKS0vxk5/8BK7rphqOiIiIMpQQAs+937FIX2DRd6MTERHplPLb3X/4wx/i/vvvx09/+lMce+yxAIBXXnkFN998M1pbW3HbbbelPUkiIiIyz676FuxuaEGOx8Fx4+17qzsREZEOKS/SH374Yfzxj3/E2WefHb9t2rRpGDZsGL75zW9ykU5GcBwHhYWF/HxQEjb1jcm16M5NZfsy25IRW/fY2OSR13cAAGYML0UgN+WnFJThbDqXTK5Fd26cT9TGJHtJ3Tiurq4OkyZN6nb7pEmTUFdXl2o4Iikcx0FeXp7uNIxkU9+YXIvu3FS2L7MtGbF1j40t9gRb8NCr2wEA15w8Tm8yEnF3957ZdC6ZXIvu3DifqI1J9kplkZ7yZ9KnT5+OX//6191u//Wvf43p06enGo5ICiEE6uvruZFHEjb1jcm16M5NZfsy25IRW/fY2OKFDXvRFnUxYXAhTpo4UHc60nB3957ZdC6ZXIvu3DifqI1J9krlcZLyK+l33nknzjzzTLzwwguYM2cOAGD16tX4+OOPsXTp0lTDEUkhhEA0GoUQgm9B6sKmvjG5Ft25qWxfZlsyYuseG1s8tmYnAOBz04ayH7OUTeeSybXozo3zidqYZC+pu7ufeOKJ+OCDD3DeeeehoaEBDQ0NOP/887F582Ycf/zxqYYjIiKiDFMVbMWmqkYAwBdnjdCcDRERkV36tMvL0KFD07pB3JIlS/Dzn/8cVVVVmD59Ou69917MmjUr6c8+9NBDWLhwYcJtfr8fra2tacuHiIiIerZmWy0AYOqwEgws8mvOhoiIyC69WqS/++67OOKII+DxePDuu+8e9GenTZuWUgJPPPEEFi1ahPvuuw+zZ8/GPffcg9NPPx2bN2/GoEGDkt6nuLgYmzdvjv+fby+hrhzHQXFxMR8bSdjUNybXojs3le3LbEtGbN1jY4OXP6wBAMweXa45E9LJpnPJ5Fp058b5RG1Mslfad3efMWMGqqqqMGjQIMyYMQOO4yR9T73jOIhGo73PFMDdd9+NK664Iv7q+H333Ydnn30WDzzwAG644Yak93EcB5WVlSm1Q9nFcRzk5ubqTsNINvWNybXozk1l+zLbkhFb99hkOiEEVmzcCwA4ZXLyX6bbhLu798ymc8nkWnTnxvlEbUyyV9oX6du2bcPAgQPj/06XtrY2rFu3DjfeeGP8No/Hg3nz5mH16tU93q+pqQkjR46E67o46qijcPvtt+Pwww9P+rPhcBjhcDj+/1AoBADYffylaMzxoeLeHyBv7oz48fade7D3vOsAAPnzj0P5bd9OiLfv0h+ibf2HAIBh6/6cmNcTyxC88wEAQNlPrkVgwQnxY25TM/aceBkAwH/MdAxY8sOE+9Z+52dofXkdAKBy+R/gLS+JH2tZvhp1N/wCAFBy/SUo/MpZCffdfcyXgUgEvomjMejxnyUcq7/1PjQ/8yIAYNAT/wPfuE8/Oxh+433UXHkLAKDwsnNR8q2LE+5bNf8qRPfVwTuwHJXL7ks4Frz3cTQ99DQAYMDvFsN/9Kf9H9myE9UX/T8AQOCcU1B201UJ962++PuIbN4G+HwY9vpjCceaHv0ngr/4EwCg/KfXI//UOfFj0bogqk69AgCQd/xMVNzz/YT71lxzG8KvvwMAGLzyAYTa21BaWgqPx4PmpS+h/scd30pQ8r2vofCi+Yl9OPMLAIDcI8Zj4MOJH+Wo++Gv0LLslY64f/slckYMiR9rfe1t1H7rdgBA0TcuRPGVFybcd89nL4fbEELOYZUY/MyvEvvwrofR9PizAICBD/43cqdNiB9r27gV+77S8UuqggtPR+kNX0+47/9n777DpKruPoB/78zO9r6wu5SFpRcVkCpgAQVB7BpbVJQYjCa8apAYjVGERLGgogmKJYqxJMYSJUowiICKKAhSBaTXXdqW2b6zc+/7xzojuzvDzuzee8+ZM9/P8+SJTPmVc9ueKWcOXzUVdbsOQEtMQPsvXmtwX9kr/4Z77j/qx/DJ3yFh1JCfxvDwcRRecDt0Q0fimOHIeuLuBs89eutDqF3zPQCg/VdvQIv76cJT8f4SlDz8AgAg/f5fIemK8/z3GTW1ODTihvoxHNQXbV98qOEY3vMUqpZ8DQDIXfg8nDlZ/vuqlq1G0d1PAABSf3MdUn5xeYPnHjrrJhiVVYjp2hE57zzV4L7iWS+j/F+L4NAcaPvmo4jt0/WnMdzwA45O+iMAIPnnFyLt7psajuGld6DuQCEc6alot+TlBve5X3gHZS++AwAtP0cYQMKn8/z7IGDvOULXdZSUlCA9PR0FI2609BzhaJuJuLceadCrWeeIdl+97u/D4XCYc44wgPgPn0ZGh3b+eltyjvB4PPVx75uDmv99BUCRc8SE2wEACeedgczHpzZ47tFbH0Llqs14vrwWt/z8dvRvn+IfBxnPESWP/g0V73xSP4ZvtOwcUVecB8AJwzD8vZpyjkDk/x1RtXoTjt36EByaA8mTIvvvCF3XUfirh2Cs2QpoQLvl8+FITvTfL/TviGI3jHZt0P4/f/WfswD7zhFxZw/yn4eNo8XNniNa9XeEAaBfd7R75c8NejXlHNGlI1wv/rHBtarV54j9hTBSEtF+6SsN6m3JOcJ3fjk88Q+o27wDQOSfI1Sea7TkHFFW50GoQpqkd+7c2f/fe/fuxYgRIxAT0/CpdXV1+Oqrrxo8tjnHjh2D1+tFTk5Og9tzcnKwdevWgM/p1asXXnnlFfTr1w+lpaWYPXs2RowYgc2bN6Njx45NHj9r1izMmDGjye364ePwOmKw6ssVKC855L899nAxehbUf4zvwPfb8HWjFeu77tyDxB/vb7yafebq79D+x/u+W7kKpSj33+eoqkHfH+87/MNOrGr03E7bdiD1x/s/XbwY3pSfNnrqt9vQ6cf7Nn+7FsczG6731/fQETjqvCh3OfBto7jtN21B5o/P/XzpMtT80MZ/X9LWfejy43071m3A4YXpDZ7ba/8huIrLUV1d3aTXnHUb0PbH5379+ReoOLLXf1/cwWPo8eN9ezdtwcpGz+22ay8SCo5Bj3E2iZv17Vq0+/G5a1Z+Dben2H+fs6wSfX68r2DbDnzT6Lmdf9iJlBPGUE/46XuSaSu/R96P921avQZFKXqD5576433HE1xY3Shux++3If3H+5ct+Qy1ORn++5I37Ub+j/f9sHYdjixMavDc3vsLEFNehcq6OqxpFDd3wya0+fG5K5Z/jqoDO/z3xe89jO4/3rd742YUNHpu9937EV9wHN742CZj2GbtOuT++Nxvv1qJssqj/vtiisrQu7D+vkNbtzcZwy4/7ELSj89dtGgRDNdPx3nGqg3o8ON9G1atRnH8Ty9+aZ46nPLjfcd+2NVkDPO2/IC0H+9fsvhT1GWm+O9LWbcDnX+8b8vadTiW2/D7rX0OHoazuhYVmtFkDNtt+h5Zh4vgBfDlsuWo3v3TeSNh5yF0+zHuzg2bUNjouT32HEDc0RLUlFU0GcPsteuQ/eNzW3OO+Prrrxvcp/I54rtGvZp1jli0aFGD+8w6R6xetcq0c8ShrdvVOkf8eN/BLT802b+7/LALSUeOoy2A7sl1+PR/P20fKc8RGzcj68fntvQcYbg6AHA2uBaadY5Q4u+IH8/BSvwdsecAUn68Rv7vk0+k+juixlvX5Hwo7TmilX9HVKTGY32jXs06R+xodK0y4xxRV57QZNu05hxRvGuvWucIRecaLTlHePU6hCrsheNGjx6NgoKCJt8XLy0txejRo8P+uHu4hg8f7v/pNwAYMWIE+vTpgxdeeAF/+tOfmjz+vvvuw9SpP73K53a7kZeXB0dOFpwxLgw9c2TTV7f++iEAoGPfXug3YUKDeEffXoHaqvpXQSY0uq+8zIHSpfWvrpw+fGjTV7fa1b8qmdOzG05p9Nzj/9uI6iOlAIAxY8c2fHXLlYGiD+s/WXDK4IFIbvTcg+3fBDweZHTt3KSm4m/3oXJnAQDg7NGjGr66lb0Zx96sf+Wr+4B+GNTouYXPLoA3vgixbTObxC3dWYLydbsAAGecfVbTV7fmfQQA6HxqHwxo9NwjbyyHx6PD6XI1HcMiHaVfbAIADBp+RtNXt9rVv6LYrld3nNroucc+/g41RfUnqzFjx6LUU4OMjIz6d9KRjOKFqwAApw4ZhOQJjV7dajcfAJDVLR+9G8UtWrEDVfvqL1Cjzju34Svg6etw/O3lAICeAwdgcKPnFjz5PvQSN1I75jYdwy1HUb6p/oQz8pyzm74C/vJ/AQBdTjsFpzd67uFXP0WdoSEmMaFJ3LLCGrhXbgEADB4xvOm7ZLnvQdd1tO/dA6c13r8/WIXasvpFGMePH9/wFfDqOJQsXgsA6Dd0CJImNHoFvN0bAIA2PbuiT+MxXLYVVYeKAADnjR3T8BXwxNUoeq/+HYY+AwcgpdFzD3V4G0ZlFdK6dGy6f68/hPLN++BwOHDmqHOavgI+/38AgG79TsXAxmP4wiLUxcTAlZ7aJK57fwXKvq1/p6vF5wgDGDZsmH8fBOw9R+i6juLiYmRkZKDA4nOEq21mk17NOkeMHz/e34fD4TDnHGEAg4cMQWbH9j+9k96Cc4TH48HixYvRvncP1Kh0jmj3HgCgQ5+eTc8R/16FQwVu1HkNXHv2qZhwRr7/PhnPESUbClCx9QAAtPgcoRU7AC8QHx/vj2/KOQKR/3dEVdtNOPb3T+FwOCL+7whd11Hw/tfA8XJAA84fN67hu2Qi/44odiOhXRbGjx/f8J10m84RcWcP8p+HjaPFJz9HtPbvCANI7dyxSa+mnCPyOza5VrX6HOGMgZaS2KTelpwjfNeUjK6dUafIOULluUZLzhHOOg9QhJBoRjg/2Ib6j6MfPnzY//F3nx9++AGDBw/2f5w8FLW1tUhMTMS7776Lyy67zH/7TTfdhJKSEnz44YchxbnqqqsQExODf/zjH80+1u12Iy0tDceOHUNWVlazj6fIpOs6ioqKkJmZ2eCkSWqNjcy9iK7NzvxW5rIitlkxPR4PFi5ciAkTJsDlcplSm+w2HSzFRX/5EnExDnzzh/OQnqj+dzEHDnwIhYWlyM1Nw9q1D4kuRyqiz3NmkrkX0bXxemJPzGi8pkSbkpISZGRkoLS0FKmpqSd9bMjvpF9xxRUA6r/wfvPNNyMu7qe3971eLzZs2IARI0aEVWhsbCwGDRqEJUuW+Cfpuq5jyZIlmDJlSkgxvF4vNm7c2ORVEopumqYhPT2dq20GoNLYyNyL6NrszG9lLitii942kezjjfXvlpzTs21UTNDp5FQ6lmTuRXRtvJ7YG5PUZfrCcQCQllb/kQjDMJCSkoKEhAT/fbGxsTjjjDMwefLkMMqsN3XqVNx0000YPHgwhg4dijlz5qCiosK/2vvEiRPRoUMHzJo1CwAwc+ZMnHHGGejevTtKSkrwxBNPYO/evfjlL38Zdm5Sl6ZpcDgcPGkGoNLYyNyL6NrszG9lLitii942kUrXDTy/bCcAYEyfnGYerQ6u7h6cSseSzL2Iro3XE3tjkrosmaS/+uqrAID8/HxMmzYNSUlJzTwjNNdccw2OHj2KBx98EIWFhRgwYAAWLVrkX0xu3759DT4+UlxcjMmTJ6OwsBAZGRkYNGgQvvrqK/Tt29eUekgNoj8aJjOVxkbmXkTXxo8n2hszGuwvrvT/9/mnRM8k3felwPC+HBgdVDqWZO5FdG28ntgbk9Sl63rzD/pR2AvHTZ8+PdynNGvKlClBP96+bNmyBv9++umn8fTTT5teAxEREQW382j9Yjm9c1P4UXciIiILhTRJHzhwIJYsWYKMjAycfvrpJ32rfu3ataYVR0RERHL4dk/9z9T0aXfyxW6IiIiodUKapF966aX+heJOXIWdiIiIosPn2+t/QuqsHm2aeSQRERG1RkiT9BM/4m7Fx92JzOZwOPj9oCBUGhuZexFdm535rcxlRWzR2yYSHSuvwaaD9T+xelaPts08Wi1cOC44lY4lmXsRXRuvJ/bGJHWFs5+EvUft378fBw4c8P971apVuOuuu/Diiy+GG4rIMoZhQNd1GFzppwmVxkbmXkTXZmd+K3NZEVv0tolEX24/BgDo2y4VbVPimnm0WrhwXHAqHUsy9yK6Nl5P7I1J6gpnPwl7kv7zn/8cS5cuBQAUFhZizJgxWLVqFe6//37MnDkz3HBEljAMAyUlJTxpBqDS2Mjci+ja7MxvZS4rYoveNpHI/1H3nvyoO/1EpWNJ5l5E18brib0xSV2WTtI3bdqEoUOHAgD+9a9/4bTTTsNXX32FN998E/Pnzw83HBEREUnMMAx88eM76edE2UfdiYiIRAh7ku7xePyLyH366ae45JJLAAC9e/dGQUGBudURERGRUFsKynC0rAYJLicG5WeILoeIiEh5YU/STznlFMybNw9ffPEFFi9ejPHjxwMADh06hKysLNMLJGqpk/1UYLRTaWxk7kV0bXbmtzKXFbFFb5tI8umWwwCA4d2yEBfjFFwNyUalY0nmXkTXxuuJvTGJwp6kP/bYY3jhhRcwatQoXHfddejfvz8AYMGCBf6PwROJ5nA4kJWVxdU2A1BpbGTuRXRtdua3MpcVsUVvm0hiGAbeWbMfADC2b47gasTg6u7BqXQsydyL6Np4PbE3JqkrnP0kpJ9gO9GoUaNw7NgxuN1uZGT89LG3W2+9FYmJieGGI7KEYRjweDxwuVx8hbMRlcZG5l5E12ZnfitzWRFb9LaJJDuPlmN/URWcDg0X928vuhwhuLp7cCodSzL3Iro2Xk/sjUnqsnThOABwOp2oq6vDl19+iS+//BJHjx5Ffn4+srOzWxKOyHSGYcDtdnO1zQBUGhuZexFdm535rcxlRWzR2yaS+BaMG941C8lxYb+uT4pT6ViSuRfRtfF6Ym9MUpelk/SKigr84he/QLt27XD22Wfj7LPPRvv27XHLLbegsrIy3HBEREQkqc+2HgEAnNmDP71GRERkl7An6VOnTsXy5cvxn//8ByUlJSgpKcGHH36I5cuX4+6777aiRiIiIrJZtceLr3cdBxC930cnIiISIezPrr333nt49913MWrUKP9tEyZMQEJCAq6++mo8//zzZtZH1CKapsHpdPL7QQGoNDYy9yK6NjvzW5nLitiit02kWLLlCDxeA+3S4tG1TZLockhCKh1LMvciujZeT+yNSeoKZz8Je5JeWVmJnJymr6hnZ2fz4+4kDU3TGixsSD9RaWxk7kV0bXbmtzKXFbFFb5tI8d7aAwCAC09rF9V/gHJ19+BUOpZk7kV0bbye2BuT1BXOtTTsj7sPHz4c06dPR3V1tf+2qqoqzJgxA8OHDw83HJElDMNAdXU1F/IIQKWxkbkX0bXZmd/KXFbEFr1tIoHHq+ObHz/qflGUruruw9Xdg1PpWJK5F9G18Xpib0xSVzj7SdjvpM+ZMwfjxo1Dx44d/b+Rvn79esTHx+OTTz4JNxyRJQzDQHl5OWJjY6P6HaBAVBobmXsRXZud+a3MZUVs0dsmEry75gAqar3ISopFvw5posshSal0LMnci+jaeD2xNyapy9JJ+mmnnYYdO3bgrbfewpYtWwAA1113Ha6//nokJCSEG46IiIgks/THVd2H5GfC4eAfnkRERHYKa5L+9ddf4z//+Q9qa2tx7rnn4pe//KVVdREREZEAJ67qftOIfLHFEBERRaGQJ+nvvvsurrnmGiQkJMDlcuGpp57CY489hmnTpllZH1GLaJoGl8vFjx4FoNLYyNyL6NrszG9lLitii942snt/7UG4q+vQIT0BQ/K5IBIFp9KxJHMvomvj9cTemKQuSxaOmzVrFiZPnozS0lIUFxfjz3/+Mx555JEWFUhkNU3TkJaWxpNmACqNjcy9iK7NzvxW5rIituhtI7t/rt4HAJg0Mh8xzrDXl1UOV3cPTqVjSeZeRNfG64m9MUldlkzSt23bhmnTpsHpdAIA7r77bpSVleHIkSPhV0hkMcMwUFlZydU2A1BpbGTuRXRtdua3MpcVsUVvG5kdKavGhgOl0DTgstM7iC5HClzdPTiVjiWZexFdG68n9sYkdYWzn4Q8Sa+srERqaqr/37GxsYiPj0d5eXl41RHZgCfN4FQaG5l7EV0b/6iyN6YqFm0qBACc2j4NbZLjBFdDslPpWJK5F9G18Xpib0xSl2Wru7/88stITk72/7uurg7z589HmzZt/Lfdcccd4YQkIiIiSby6Yg8A4KwebU7+QCIiIrJMyJP0Tp064aWXXmpwW25uLl5//XX/vzVN4ySdiIgoAhVV1GLP8QoAwITT2gmuhoiIKHqFPEnfs2ePhWUQmUvTNMTFxXEhjwBUGhuZexFdm535rcxlRWzR20ZWH647CMMATu2QilM7pIkuhyKASseSzL2Iro3XE3tjkrrC2U/C+rg7UaTQNA0pKSmiy5CSSmMjcy+ia7Mzv5W5rIgtetvIyvfb6Bf1ay+4ErlwdffgVDqWZO5FdG28ntgbk9RlyeruRJHEMAyUlZVxIY8AVBobmXsRXZud+a3MZUVs0dtGRoZhYM3eYgDgb6M3wtXdg1PpWJK5F9G18Xpib0xSlyWruxNFEsMwUFNTw5NmACqNjcy9iK7NzvxW5rIituhtI6NdxypwrLwWsTEOftSdQqbSsSRzL6Jr4/XE3pikLk7SiYiIKGRf7TgGABjUKQNxMU7B1RAREUW3kCbpU6dORUVF/Yqvn3/+Oerq6iwtioiIiOzz5Y+T9DP502tERETChTRJ/8tf/oLy8nIAwOjRo1FUVGRpUUStpWkaEhMTudpmACqNjcy9iK7NzvxW5rIituhtIxuvbmDlzvpF40Z0yxJcDUUSlY4lmXsRXRuvJ/bGJHWZvrp7fn4+nn32WZx//vkwDAMrV65ERkbghWXOPvvskJMTWcV30qSmVBobmXsRXZud+a3MZUVs0dtGNqt2F8FdXYeU+Bicxu+jN8HV3YNT6ViSuRfRtfF6Ym9MUpfpk/QnnngCt912G2bNmgVN03D55ZcHTez1ekNOTmQVwzDgdruRmprKVzcbUWlsZO5FdG125rcylxWxRW8b2SzbdgQAMO6UXMQ4uVRNY1zdPTiVjiWZexFdG68n9sYkdZm+cNxll12GwsJCuN1uGIaBbdu2obi4uMn/+DF4koVhGPB4PFxtMwCVxkbmXkTXZmd+K3NZEVv0tpHN17vrr91D8zMFV0KRRqVjSeZeRNfG64m9MUld4ewnIb2T7pOcnIylS5eiS5cuiIkJ66lEREQkmb3HK7B+fwkA4OyebcUWQ0RERADCnKQDwDnnnAOv14v33nsPW7ZsAQD07dsXl156KZxO/mwLERFRpHh79X4AwNAumchNixdcDREREQEtmKTv2LEDF154IQ4cOIBevXoBAGbNmoW8vDx8/PHH6Natm+lFEoVL0zQkJyfz+0EBqDQ2MvciujY781uZy4rYoreNLOq8un+Sft3QPMHVUCRS6ViSuRfRtfF6Ym9MUpfpC8ed6I477kDXrl2xcuVKZGbWf3/t+PHjuOGGG3DHHXfg448/DjekELquQ9d1APUDpmkaDMNo8F2Blt7ui9vc7Q6Ho0mMYLebXWM09BQXF6dcT2Ztp/j4eBiGEVKvsvcUGxsLwzACxhDdU1xcXIP77N73YmNj/fdb3atvOzTXa0t6CjaOrak9lLFpbjudeL9s+14oPX27pwjHK2qRHBeDC07JbXCfiue9lvZ0omDnmkjryczbfce+775I7incc42dPTX3N43V+17jc7yV28nsXk/s6cRzvxnbyRfTd39rtseJ15bmzjWRcDypfN5raU/hCHuSvnz5cnz99df+CToAZGVl4dFHH8XIkSNbXIjV5s6di7lz5/pXny8pKfEfXHFxcUhJSUF5eTlqamr8z0lMTERiYiLcbjc8Ho//9uTkZMTHx6OkpKTBavapqamIjY1FcXFxgw2Vnp4Oh8PRZGG9zMxM6LqOkpIS/22apiErKwsejwdut9t/u9PpREZGBmpqavy/WQ8ALpcLaWlpqKqqQmVlpf/2aO/JMAx4vV7k5OQo0xNgznYyDANOpxMpKSkoLS2N6J4Mw0B5eTmSk5ORlZUl1XaKi4vD/v37kZCQ4D/X2Lnv+cYmIyMD6enplm4nl8uFffv2ISkpyd+rWT2lp6fj8OHDcDqd/tit3U6+scnNzUVCQkKLj6e6ujoA9X9Qeb1eafa9UI+nj7/bBwAY0ycb5e6fam/JdpKlJ8D84+nEP5zdbrcSPZm1nWpra/3n4JSUlIjuKSEhAQcOHEB8fLz/XCPLdjIMA9XV1ejYsaOQfU/TNOzbt6/BO8ZWbSfDMFBbW4v27dub3pPv3N+xY0c4nU5TtlN1dTUKCwv9Y9Oa46mqqgoAUFxcjPT0dCn2vWDbKdSeVDzvtaYn3/ETCs1o/DJEMzIzM/HRRx9hxIgRDW5fsWIFLr74YulXePddYI8cOYKsrCwAfCVIxZ50XUdxcTGysrL890V6T6HcHkpPvhNbRkZGk5NFpPXk284ZGRmIiYmRajsZhoHjx48jIyMDDocj5J6aqz3Unnxjk5mZCafTKU2v4fZ0stgtrT3UsWluO3k8HixatAgTJkzw73/hbie7bz+xpzFPfY5dxyrw15+fjgmn5rZqO8nS08lub2lPgwbNQGFhKXJz07BmzXQlejLrdq/X6z8H+15Ii9SeWnKusaunUP6msXLfCzQ2Vm0nK3o98YW2E8/9Zmwnr9eLoqIi/9i0ZnvU1tZi0aJFGD9+PGJjY6XY9+y8PRp6Ki0tRWZmJkpLS5GamoqTCfud9Isuugi33nor/va3v2Ho0KEAgG+++Qa33XYbLrnkknDDCeNwOPwnGh/fgDYW7u2N457sdrNyWn17JPbk+2+Vemru9nB7ioRem+vpxD5kqt0wDH9tjXuwa98L9t9mxfcJt1ezYls9Ns1tpxPvl2nfO9ntvpp3H6vArmMViHFoOLtn24g4F4g6lwf6d6T3ZNbtvkmJ7/8juaeWnGvs7EnkvhdsbKyqxexeg9Vs5nYyY2xOvLZE+vHUktujoadAjwkmpN9JP9Gzzz6Lbt26Yfjw4YiPj0d8fDxGjhyJ7t2745lnngk3HBEREdlsyZbDAIBhXTORGu8SXA0RERGdKOx30tPT0/Hhhx9ix44d/p9g69OnD7p37256cUQtpWkaUlNTw3rFKlqoNDYy9yK6NjvzW5nLitiit40MPv1xkn5e7xzBlVAkU+lYkrkX0bXxemJvTFJXOPtJ2JN0n+7du3NiTtLSNK3BCp70E5XGRuZeRNdmZ34rc1kRW/S2Ea200oPVe4oBAGP6cJLeHN/fVPwbvCmVjiWZexFdG68n9sYkdVn6cXeiSKDrOo4fP96qnz5QlUpjI3MvomuzM7+VuayILXrbiLbshyPw6gZ6ZCejU1ai6HKk51sLqNEaRQS1jiWZexFdG68n9sYkdYWzn3CSTspqvOoj/USlsZG5F9G12ZnfylxWxBa9bURasuUIAOA8votOJlDpWJK5F9G18Xpib0wiTtKJiIiihMerY9m2+kn6mD7ZgqshIiKiQDhJJyIiihLf7imGu7oOmUmxOL1ThuhyiIiIKICQJ+kTJ05EWVmZ/9/r16+Hx+OxpCii1tI0Denp6VxtMwCVxkbmXkTXZmd+K3NZEVv0thFp0aYCAMDoXtlwOqKvfzKXSseSzL2Iro3XE3tjkrosWTjuzTffRFVVlf/fZ511Fvbv3x9eZUQ20TQNDoeDJ80AVBobmXsRXZud+a3MZUVs0dtGFK9u4OONhQCAi/q1E1xN5ODq7sGpdCzJ3Ivo2ng9sTcmqcuSSXrjRRG4SALJTNd1FBUVcbXNAFQaG5l7EV2bnfmtzGVFbNHbRpRvdh3HsfIapCe6MLJ7G9HlRAyu7h6cSseSzL2Iro3XE3tjkrq4ujsRERE1MP+rPQCAC07NRWwML/9ERESyignnwd9//z0KC+s/KmcYBrZu3Yry8vIGj+nXr5951REREVGr7T5Wgf99fxgAcPOILoKrISIiopMJa5J+3nnnNfiY+0UXXQSg/vP1hmFA0zR4vV5zKyQiIqJW+eeqfQCArKRY9MpNEVwNERERnUzIk/Tdu3dbWQeRqRwOBzIzM+Fw8COdjak0NjL3Iro2O/NbmcuK2KK3jQiLf3wX/f4L+wiuJPJw4bjgVDqWZO5FdG28ntgbk9QVzn4S8iS9c+fOLSqGSATDMKDrOjRN44qbjag0NjL3Iro2O/NbmcuK2KK3jd12Hi3HrmMViHFoGNs3R3Q5EYcLxwWn0rEkcy+ia+P1xN6YpK5wFl4P+2Wf7du3Y/bs2ZgyZQr+7//+D0899RR27doVbhgiSxmGgZKSEv4KQQAqjY3MvYiuzc78VuayIrbobWO3t76p/6j78G5ZSIl3Ca6GVKLSsSRzL6Jr4/XE3pikrnD2k7C+kz5r1iw8+OCD0HUd2dnZMAwDR48exb333otHHnkE06ZNC7tYIiIiss5XO48DAC7p315wJURERBSKkN9JX7p0Kf74xz/i/vvvx7Fjx1BQUIDCwkL/JP3ee+/F559/bmWtREREFIaiilpsK3QDAM7u2VZwNURERBSKkN9JnzdvHn75y1/ioYceanB7ZmYmZs6cicLCQjz//PM4++yzza6RqEX43aDgVBobmXsRXZud+a3MZUVs0dvGLh+uOwjdAE7tkIqc1HjR5ZCCVDqWZO5FdG28ntgbkyjkd9JXrVqFG2+8Mej9N954I77++mtTiiJqLYfDgaysLK62GYBKYyNzL6JrszO/lbmsiC1629jp/bUHAQCXn95RcCWRi6u7B6fSsSRzL6Jr4/XE3pikrnD2k5AfefjwYeTn5we9v0uXLigsLAw5MZGVDMNAbW0tF/IIQKWxkbkX0bXZmd/KXFbEFr1t7FJW7cHmQ6UAgAmn5QquJnJxdffgVDqWZO5FdG28ntgbk9Rlyeru1dXViI2NDXq/y+VCbW1tyImJrGQYBtxuN0+aAag0NjL3Iro2O/NbmcuK2KK3jV1W7jwO3QDysxLRLi1BdDmkIJWOJZl7EV0bryf2xiR1Wba6+8svv4zk5OSA95WVlYUTioiIiCz0+fajALhgHBERUaQJeZLeqVMnvPTSS80+hoiIiMRbu7cEADCiW5bYQoiIiCgsIU/S9+zZY2EZRObSNA1Op5Mrbgag0tjI3Ivo2uzMb2UuK2KL3jZ2KK+pw44j5QCAvu3SBFdDqlLpWJK5F9G18Xpib0xSVzj7SVgfdyeKFJqmISMjQ3QZUlJpbGTuRXRtdua3MpcVsUVvGzus3l2EWq+OvMwE5GXy++itwdXdg1PpWJK5F9G18Xpib0xSVziT9JAXjvvss8/Qt29fuN3uJveVlpbilFNOweeffx5yYiIrGYaB6upqLuQRgEpjI3MvomuzM7+VuayILXrb2OHrXccBACO6tuE7PK3E1d2DU+lYkrkX0bXxemJvTFKXJau7z5kzB5MnT0ZqamqT+9LS0vCrX/0KTz/9dMiJiaxkGAbKy8t50gxApbGRuRfRtdmZ38pcVsQWvW2s5vHqWPz9YQDAGd0yBVdDKlPpWJK5F9G18Xpib0xSlyWT9PXr12P8+PFB7z///POxZs2akBMTERGR+T747iB2HatAWoILo3pmiy6HiIiIwhTyJP3w4cNwuVxB74+JicHRo0dNKYqIiIhaZvWeIgDAdUM7ISMpVnA1REREFK6QJ+kdOnTApk2bgt6/YcMGtGvXzpSiiFpL0zS4XC5+FzMAlcZG5l5E12ZnfitzWRFb9LaxUlWtF//69gAAYEg+FzMia6l0LMnci+jaeD2xNyapy5KF4yZMmIAHHngA1dXVTe6rqqrC9OnTcdFFF4WcmMhKmqYhLS2NJ80AVBobmXsRXZud+a3MZUVs0dvGSh9tOOT/7+H8fXRTcHX34FQ6lmTuRXRtvJ7YG5PUZckk/Y9//COKiorQs2dPPP744/jwww/x4Ycf4rHHHkOvXr1QVFSE+++/v0UFE5nNMAxUVlZyIY8AVBobmXsRXZud+a3MZUVs0dvGSh+sOwgAuPO8HkiM5a+smoGruwen0rEkcy+ia+P1xN6YpK5w9pOQr+A5OTn46quvcPvtt+O+++7zJ9E0DePGjcPcuXORk5MTfrVEFvCdNOPj4/nqZiMqjY3MvYiuzc78VuayIrbobWOV8po6rNpd/330y07vILgaigYqHUsy9yK6Nl5P7I1J6rJkkg4AnTt3xsKFC1FcXIwdO3bAMAz06NEDGRn83hsREZFIn/9wFB6vgc5ZiejSJkl0OURERNRCLfosXEZGBoYMGWJ2LURERNRCH3xX/1H30b34s2tERESRLOTvpBNFEk3TEBcXx48eBaDS2Mjci+ja7MxvZS4rYoveNlbQdQPf/PhR9wtOzRVcDUULlY4lmXsRXRuvJ/bGJHWFs59wVRlSkqZpSElJEV2GlFQaG5l7EV2bnfmtzGVFbNHbxgrfF7hRWuVBvMuBgZ35FTQzcXX34FQ6lmTuRXRtvJ7YG5PUZcnq7laaO3cu8vPzER8fj2HDhmHVqlUhPe+f//wnNE3DZZddZm2BFHEMw0BZWRlX2wxApbGRuRfRtdmZ38pcVsQWvW2sMOM/mwEA5/RsC5dTiku7Mri6e3AqHUsy9yK6Nl5P7I1J6gpnPxF+JX/77bcxdepUTJ8+HWvXrkX//v0xbtw4HDly5KTP27NnD6ZNm4azzjrLpkopkhiGgZqaGp40A1BpbGTuRXRtdua3MpcVsUVvG7NtOliK1XuKAQA/H9ZZcDUUTVQ6lmTuRXRtvJ7YG5PUFVGT9KeeegqTJ0/GpEmT0LdvX8ybNw+JiYl45ZVXgj7H6/Xi+uuvx4wZM9C1a1cbqyUiIpLLu2sOAAAu7NcO5/RsK7gaIiIiai2hk/Ta2lqsWbMGY8aM8d/mcDgwZswYrFy5MujzZs6ciezsbNxyyy12lElERCSlOq+OjzYcAgBcOZC/jU5ERKQCoQvHHTt2DF6vFzk5OQ1uz8nJwdatWwM+58svv8Tf/vY3rFu3LqQcNTU1qKmp8f/b7XYDADweDzweT8sKJ+kZhoHY2FjU1dVxxc1GVBobmXsRXZud+a3MZUVss2L6riEiryVfbD+GY+W1yEh04Yz8dF7XLGH4/5/j25Do85yZZO5FdG28ntgTU4ZrClmrrq4u5MdG1OruZWVluPHGG/HSSy+hTZs2IT1n1qxZmDFjRpPbly5disTERLNLJCKiKLN48WJhud/a4QDgwCkpNVj8ySJhdaisurra//8LFy4UXA0RqU7kNYWsVVlZGfJjhU7S27RpA6fTicOHDze4/fDhw8jNbfo7rzt37sSePXtw8cUX+2/TdR0AEBMTg23btqFbt24NnnPfffdh6tSp/n+73W7k5eVh9OjRyMrKMrMdkohvtc2UlBTpXhEXTaWxkbkX0bXZmd/KXFbENiumx+PB4sWLMXbsWLhcLlNqC0dNnY6H1i8H4MGvJgzFGV0zba8hGsyYsRZALeLj4zFhwgTR5UhF9HnOTDL3Iro2Xk/siSn6mkLWKy0tDfmxQifpsbGxGDRoEJYsWeL/GTVd17FkyRJMmTKlyeN79+6NjRs3Nrjtj3/8I8rKyvDMM88gLy+vyXPi4uIQFxfX5HaXy8UDQGG6rsMwDMTExMDhEL4+olRUGhuZexFdm535rcxlRWyzY4q6nryzdh+KKz3ISY3D8O5tEcOfXrOI5v9//t3QkOjznJlk7kV0bbye2BuTcxR1xcSEPvUW/nH3qVOn4qabbsLgwYMxdOhQzJkzBxUVFZg0aRIAYOLEiejQoQNmzZqF+Ph4nHrqqQ2en56eDgBNbiciIlLZ/74vBADcPKILJ+hEREQKET5Jv+aaa3D06FE8+OCDKCwsxIABA7Bo0SL/YnL79u2T7hVNIiIikYorarFixzEAwJg+2YKrISIiIjMJn6QDwJQpUwJ+vB0Ali1bdtLnzp8/3/yCKOJpmobk5GTpvlcmA5XGRuZeRNdmZ34rc1kRW/S2McPiLYfh8Rro2y4VPXJSRJdDUUqFY8lH5l5E18brib0xSV3h7CdSTNKJzKZpGuLj40WXISWVxkbmXkTXZmd+K3NZEVv0tjHDmj3FAICze7YVXIn6fH9T8W/wplQ4lnxk7kV0bbye2BuT1BXOJJ2fIyclGYaB4uJiGIbR/IOjjEpjI3MvomuzM7+VuayILXrbtFadV8dn244AAIZ14YruVvPtJhG6u1gq0o+lE8nci+jaeD2xNyapK5z9hJN0UpJhGPB6vTxpBqDS2Mjci+ja7MxvZS4rYoveNq31zpoDOFpWg8ykWIzs3kZ0ORTFIv1YOpHMvYiujdcTe2OSujhJJyIiUtQ73+4HANwwrBNiY3gZJyIiUg2v7kRERBGivKYO6w+UAgCuGpwnuBoiIiKyAifppCRN05CamsrVNgNQaWxk7kV0bXbmtzKXFbFFb5vWWL27CF7dQF5mAvIyE0WXQ1Euko+lxmTuRXRtvJ7YG5PUxdXdKeppmobY2FjRZUhJpbGRuRfRtdmZ38pcVsQWvW1aY8nWwwCAEV35XXS7cHX34CL5WGpM5l5E18brib0xSV1c3Z2inq7rOH78OHRdF12KdFQaG5l7EV2bnfmtzGVFbNHbpjWWbj0KABjdO1twJdGDq7sHF8nHUmMy9yK6Nl5P7I1J6gpnP+EknZTFlTaDU2lsZO5FdG125rcyl1Wr/EaawtJqHCypgqYBI7tniS6HCEBkHkvByNyL6Np4PbE3JhEn6URERBHgf98XAgD6dUxHSrxLcDVERERkFU7SiYiIIsC/fvzptUv6txdcCREREVmJk3RSkqZpSE9P52qbAag0NjL3Iro2O/NbmcuK2KK3TUtsPlSKTQfdcDk1XH56B9HlEAGIzGMpGJl7EV0bryf2xiR1ceE4inqapsHhcPCkGYBKYyNzL6JrszO/lbmsiC1627TEO98eAACM7ZuDzCSuJGwnru4eXCQeS8HI3Ivo2ng9sTcmqYuTdIp6uq6jqKiIq20GoNLYyNyL6NrszG9lLitii9424TIMAx9vLAAAXDU4T3A10YeruwcXacfSycjci+jaeD2xNyapi6u7ExERKeJgSRWOltUgxqFheFeu6k5ERKQ6TtKJiIgk9u2eYgBAr9wUxLucgqshIiIiq3GSTkREJDHfqu7n9c4WXAkRERHZgZN0UpLD4UBmZiYcDu7ijak0NjL3Iro2O/NbmcuK2KK3TTg2HCjBVzuPQ9OAa4Z2El1OVOLCccFF0rHUHJl7EV0bryf2xiR1hbOfcI8iJRmGAV3XYXClnyZUGhuZexFdm535rcxlRWzR2yYcM//zPQBgwqnt0CE9QXA10YkLxwUXScdSc2TuRXRtvJ7YG5PUFc5+wkk6KckwDJSUlPCkGYBKYyNzL6JrszO/lbmsiC1624Rq97EKfLu3GA4NeOCivqLLIWoiUo6lUMjci+jaeD2xNyapi5N0IiKiCPfvtfW/jX5Wj7bITYsXXA0RERHZhZN0IiIiyRiGgQ/XHwIAXDGwg+BqiIiIyE6cpJOyNK7yE5RKYyNzL6JrszO/lbmsiC162zRna2EZ9h6vRGyMA2P65Iguhygo2Y+lcMjci+jaeD2xNyZRjOgCiKzgcDiQlZUlugwpqTQ2MvciujY781uZy4rYordNKD7ZXAgAOLtHGyTF8VItEld3Dy4SjqVQydyL6Np4PbE3JqmLq7tT1DMMA7W1tVzIIwCVxkbmXkTXZmd+K3NZEVv0tmlOeU0d3vxmHwBg3Cm5gqshru4enOzHUjhk7kV0bbye2BuT1MWF4yjqGYYBt9vNk2YAKo2NzL2Irs3O/FbmsiK26G3TnC+3H8XRshp0SE/Axf3biy6HKCjZj6VwyNyL6Np4PbE3JqmLk3QiIqII9daq/QCA8/pkI97lFFwNERER2Y2TdCIiIknsL6rE5z8chaYBN4/IF10OERERCcBJOilJ0zQ4nU6uuBmASmMjcy+ia7Mzv5W5rIgtetuczNJtRwAAQ/Iz0bVtsuBqiE5O5mMpXDL3Iro2Xk/sjUnqCmc/4ZKxpCRN05CRkSG6DCmpNDYy9yK6NjvzW5nLitiit83JfLa1fpI+ule24ErIh6u7ByfzsRQumXsRXRuvJ/bGJHWFM0nnO+mkJMMwUF1dzYU8AlBpbGTuRXRtdua3MpcVsUVvm2Cqar1YufM4AODc3pyky4Kruwcn67HUEjL3Iro2Xk/sjUnq4sJxFPUMw0B5eTlPmgGoNDYy9yK6NjvzW5nLitiit00wS7cdQU2djg7pCeiZw4+6k/xkPZZaQuZeRNfG64m9MUldnKQTERFFmP9tLgQAjO2bw+83EhERRTFO0omIiCSw/kApAGA0P+pOREQU1ThJJyVpmgaXy8V3owJQaWxk7kV0bXbmtzKXFbFFb5tAdh4tx+5jFQCAfh3SBFdDFBoZj6WWkrkX0bXxemJvTFIXV3enqKdpGtLS+IduICqNjcy9iK7NzvxW5rIituhtE8jLX+wCAIzpk42MpFjB1dCJuLp7cDIeSy0lcy+ia+P1xN6YpC6u7k5RzzAMVFZWciGPAFQaG5l7EV2bnfmtzGVFbNHbprEjZdV4b+1BAMCvzukmuBpqjKu7ByfbsdQaMvciujZeT+yNSeriwnEU9XjSDE6lsZG5F9G18Y8qe2O2xptf70NtnY7TO6VjcGf+3i5FDtmOpdaQuRfRtfF6Ym9MUlc4+0nUftxd13Xoug6g/qMHmqbBMIwGg9fS231xm7vd4XA0iRHsdrNrVL0nXdf9/61KT6HcHkpPvv82DCOkXmXuybeddV2XbjsFGmM79z3f2DR3HNjda7g9nSx2S2sPdWya204n3t/S7eTx6njj670AgGsG5zWJG+3nchl6OpFhGEr0ZNbtJ56DI70nIPxzjV09hfI3jZX7XqCxsWo7WdHriefsxrmaqz3UnsyYUzSuU4Z9z87bo6GnxjWfTNRM0ufOnYu5c+fC6/UCAEpKSvwnnri4OKSkpKC8vBw1NTX+5yQmJiIxMRFutxsej8d/e3JyMuLj41FSUuKPBwCpqamIjY1FcXFxg42Qnp4Oh8OBoqKiBjVlZmZC13WUlJT4b9M0DVlZWfB4PHC73f7bnU4nMjIyUFNTg/Lycv/tLpcLaWlpqKqqQmVlpf/2aO9J13XU1dUBgDI9AeZsJ98fU16vt0HtkdiTrusoKyuDYRho06aNVNspNjbW/9upDocj7O0EtG7f842Ny+VCenq6pdspJiYGbre7Qa9m9ZSWlgaPx4OioiJ/7NZuJ9/YJCUlITExscXHk+8co+s6vF5vi7bTil0lOF5Ri+Q4Jy47vYMU54iWbCdZzxFm9HTiH85ut1uJnszaTjU1Nf5zcGpqakT3FB8f739H1HeukWU76bqOqqoqZGVlCdn3ADQ5x1u1nXRdR3V1NQCY3pPv3J+WlgZN00zbTieOTWuOp6qqKgBAcXEx0tPTpdj3gm2nUHtS8bzXmp7CoRktfWaE8l1gjxw5gqysLAB8JUjFngzDQEVFBVJSUvz/jvSeQrk9lJ4Mo/6jWUlJSWgs0noyDAPl5eVITk6G0+mUajsB8E8Eff+2c9/zjU1KSoot70C53W4kJyc322tL3kkPNo4trT3UsWluO3k8HixatAgTJkxATExMi7bT1H+txwfrDuGm4Z0x49JTpThHtGQ7yXqOMKOnQYNmoLCwFLm5aVizZroSPZl1u67r/nOww+GI6J6A8M81dvVkGM3/TWPlvgc0PcdbtZ2s6PXETxCeeO43Yzv5Jv6+sWnN9qitrcWiRYswfvx4xMbGSrHv2Xl7NPTkdruRkZGB0tJSpKam4mSi5p30xhwOh//VQB/fgDYW7u2N457sdrNyWn17JPZ04s6vSk/N3R5qT76LXyCR1tOJq6rKVnuwE7Bd+56dYxNsdVszego2jlaPTXPb6cT7W1JLtUfH/74/DAC49PQOre4plNuj+bzX8py+//7pWhL5PZlzu+/TLqE8PhJ6CvdcY2dPzf1NY/W+F+gcb9X2MLvXE3s6sQ8ztpPD4TBtbE68tjR3romE40nV815regrWYyBcOI6UZBiG/yN41JBKYyNzL6JrszO/lbmsiC162/h8uO4gKmu9yMtMwOl56UJroeB8u4mEpxnhZDmWzCBzL6Jr4/XE3pikrnD2E07SSUmGYaCmpoYnzQBUGhuZexFdm535rcxlRWzR2wYAqj1evPTjb6NfObBjwFfgiWQnw7FkFpl7EV0bryf2xiR1cZJOREQkseU/HMXOoxWIdTpw4xmdRZdDREREEuEknYiIyGYfbygAAFw9pCOykuMEV0NEREQy4SSdlKRpGhITE/kR0gBUGhuZexFdm535rcxlRWzR26as2oNPt9QvGHflwI5CaiAyg+hjyUwy9yK6Nl5P7I1J6gpnP4na1d1Jbb6TJjWl0tjI3Ivo2uzMb2UuK2KL3jafbT2CylovurZNwgAuGCc9399U/Bu8KdHHkplk7kV0bbye2BuT1BXOJJ3vpJOSDMNAaWkpF/IIQKWxkbkX0bXZmd/KXFbEFr1tPlx3CABwdo+2fPclAnB19+BEH0tmkrkX0bXxemJvTFIXF46jqGcYBjweD0+aAag0NjL3Iro2O/NbmcuK2CK3zY4jZfhs6xEAwDVD8mzPT2Qm0ec5M8nci+jaeD2xNyapi5N0IiIiCX3wXf276KN6tUWfdqmCqyEiIiIZcZJORERkA1038MG6gwC4YBwREREFx0k6KUnTNCQnJ/P7ngGoNDYy9yK6NjvzW5nLitiits2afcU4UFyF5LgYjOmTY2tuIiuIPs+ZSeZeRNfG64m9MUldXN2dop6maYiPjxddhpRUGhuZexFdm535rcxlRWxR2+a/GwsBAOefkoOEWKft+alluLp7cKLPc2aSuRfRtfF6Ym9MUhdXd6eoZxgGiouLuZBHACqNjcy9iK7NzvxW5rIitqhts/yH+gXjxvJd9IjC1d2DE32eM5PMvYiujdcTe2OSurhwHEU9wzDg9Xp50gxApbGRuRfRtdmZ38pcVsQWsW32F1Vi59EKOB0aRnRvY1teIiuJPs+ZSeZeRNfG64m9MUldnKQTERFJZPkPRwEAAzulIy3BJbgaIiIikhkn6URERBbzTdLP6dlWcCVEREQkO07SSUmapiE1NZWrbQag0tjI3Ivo2uzMb2UuK2LbvW1q6rxYseMYAGBUr2xbchLZQfR5zkwy9yK6Nl5P7I1J6uLq7hT1NE1DbGys6DKkpNLYyNyL6NrszG9lLiti271tVu8uRmWtF21T4nBK+1Tb8pI5uLp7cKLPc2aSuRfRtfF6Ym9MUhdXd6eop+s6jh8/Dl3XRZciHZXGRuZeRNdmZ34rc1kR2+5ts2xb/aruo3q25bstEYiruwcn+jxnJpl7EV0bryf2xiR1hbOfcJJOyuJKm8GpNDYy9yK6NjvzW5nLqlV+7fLZj5P00b35UXdSj+jznJlk7kV0bbye2BuTiJN0IiIii6zZW4RdP/702kj+9BoRERGFgJN0IiIii7zx9T4AwKX92/On14iIiCgknKSTkjRNQ3p6Or//GYBKYyNzL6JrszO/lbmsiG3X2FTVevHJ5kIAwA3DO1uai0gE0ec5M8nci+jaeD2xNyapiwvHUdTTNA0Oh4MnzQBUGhuZexFdm535rcxlRWy7xuazrUdQWetFXmYCTs9LtzQXWYeruwcn+jxnJpl7EV0bryf2xiR1cZJOUU/XdRQVFXG1zQBUGhuZexFdm535rcxlRWy7xuajDYcAABee1p5/wEUwru4enOjznJlk7kV0bbye2BuT1MXV3YmIiAQ6Xl6DJVvrV3W/qF87wdUQERFRJOEknYiIyGSfbjmM2jodp7RPxSntU0WXQ0RERBGEk3QiIiKTrdlbDAA4u2dbftSdiIiIwsJJOinJ4XAgMzMTDgd38cZUGhuZexFdm535rcxlRWyrx8YwDHz+wzEAwLAumZbkIPtw4bjgRJ/nzCRzL6Jr4/XE3pikrnD2E+5RpCTDMKDrOgyu9NOESmMjcy+ia7Mzv5W5rIht9dh8X+BGobsaCS4nzuiaZUkOsg8XjgtO9HnOTDL3Iro2Xk/sjUnqCmc/4SSdlGQYBkpKSnjSDEClsZG5F9G12ZnfylxWxLZ6bJb+uGDcyO5tEO9yWpKDSAaiz3NmkrkX0bXxemJvTFIXJ+lERESC+FZ1P7d3tuBKiIiIKBJxkk5ERGSSI+5qrNtfAoCTdCIiImoZTtJJWVxROTiVxkbmXkTXZmd+K3NZEduqeh//ZBsMAxjYKR25afGW5CCSiejznJlk7kV0bbye2BuTKEZ0AURWcDgcyMrigk2BqDQ2MvciujY781uZy4rYVtX77Z4ivLvmAADg/gv7mh6fxODq7sGJPs+ZSeZeRNfG64m9MUldXN2dop5hGKitreVCHgGoNDYy9yK6NjvzW5nLithW1fv4om0AgGsG52FQ5wxTY5M4XN09ONHnOTPJ3Ivo2ng9sTcmqYsLx1HUMwwDbrebJ80AVBobmXsRXZud+a3MZUVsK2LuPV6BVXuKoGnAXWN7mBaXSGaiz3NmkrkX0bXxemJvTFIXJ+lEREQ2emvVPgDAmd3boF1aguBqiIiIKJJxkk5ERNQKum7g3W/rv4t+1eA8wdUQERFRpJNikj537lzk5+cjPj4ew4YNw6pVq4I+9v3338fgwYORnp6OpKQkDBgwAK+//rqN1VIk0DQNTqeTK24GoNLYyNyL6NrszG9lLitimx1zc4EbxytqkRwXg/Gn5JoSkygSiD7PmUnmXkTXxuuJvTFJXeHsJ8In6W+//TamTp2K6dOnY+3atejfvz/GjRuHI0eOBHx8ZmYm7r//fqxcuRIbNmzApEmTMGnSJHzyySc2V04y0zQNGRkZPGkGoNLYyNyL6NrszG9lLitimx1zwfoCAMCIblmIjRF+WSWTcXX34ESf58wkcy+ia+P1xN6YpK6ImqQ/9dRTmDx5MiZNmoS+ffti3rx5SExMxCuvvBLw8aNGjcLll1+OPn36oFu3brjzzjvRr18/fPnllzZXTjIzDAPV1dVcyCMAlcZG5l5E12ZnfitzWRHbzJhHq4A3vtkPAPj5sE6tjkfy4eruwYk+z5lJ5l5E18brib0xSV3h7CdCfye9trYWa9aswX333ee/zeFwYMyYMVi5cmWzzzcMA5999hm2bduGxx57LOBjampqUFNT4/+32+0GAHg8Hng8nlZ2QLLSdR0lJSXIyMgI6zcJo4FKYyNzL6JrszO/lbmsiG1WTI/Hg88KHKjTDZzdIwsju2bwuqIkw///3L4NiT7PmUnmXkTXxuuJPTF95xeeZ9RVW1sb8mOFTtKPHTsGr9eLnJycBrfn5ORg69atQZ9XWlqKDh06oKamBk6nE8899xzGjh0b8LGzZs3CjBkzmty+dOlSJCYmtq4BIiKKWroBrD/uBACcGnMECxcuFFwRWaG6utr//9zGRGS1xYsXiy6BLFJZWRnyY4VO0lsqJSUF69atQ3l5OZYsWYKpU6eia9euGDVqVJPH3nfffZg6dar/3263G3l5eRg9ejSysrJsrJrspOs6iouLpXxFXDSVxkbmXkTXZmd+K3NZEdusmKt2HUPF12uRFOvElGvGwOWUax8kc8yYsRZALeLj4zFhwgTR5UhF9HnOTDL3Iro2Xk/sienxeLB48WKMHTsWLpfLlPpILiUlJSE/VugkvU2bNnA6nTh8+HCD2w8fPozc3OAr5DocDnTv3h0AMGDAAGzZsgWzZs0KOEmPi4tDXFxck9tdLhcPAIUZhoGEhATExsZyMY9GVBobmXsRXZud+a3MZUVss2Iu3HwUADCsSyYS45teZ0gVmv//+XdDQ6LPc2aSuRfRtfF6Ym9MzlHUFRsbG/Jjhb5UGBsbi0GDBmHJkiX+23Rdx5IlSzB8+PCQ4+i63uB750SapiEtLU26C60MVBobmXsRXZud+a3MZUVsM2JW1tbhk+/rX2Aef0pOM4+mSMbV3YMTfZ4zk8y9iK6N1xN7Y5K6Imp196lTp+Kll17Ca6+9hi1btuD2229HRUUFJk2aBACYOHFig4XlZs2ahcWLF2PXrl3YsmULnnzySbz++uu44YYbRLVAEjIMA5WVlVxtMwCVxkbmXkTXZmd+K3NZEduMmB9vKMCx8lpkxRm48DT+NrrKuLp7cKLPc2aSuRfRtfF6Ym9MUlfErO4OANdccw2OHj2KBx98EIWFhRgwYAAWLVrkX0xu3759Db7jUVFRgV//+tc4cOAAEhIS0Lt3b7zxxhu45pprRLVAEvKdNOPj4/nqZiMqjY3MvYiuzc78VuayIrYZMT/aUP/b6EPaGvxtdIpaos9zZpK5F9G18Xpib0xSV0RN0gFgypQpmDJlSsD7li1b1uDff/7zn/HnP//ZhqqIiIia2lLgxvIfjsKhAYPb6KLLISIiIsXw5X8iIqIw/PWzHQCAcX1z0DZBcDFERESkHE7SSUmapiEuLo4fPQpApbGRuRfRtdmZ38pcVsRuTczSKg+WbjsCAPj50DzTaiKKRKLPc2aSuRfRtfF6Ym9MUldELRxHZAVN05CSksKTZgAqjY3MvYiuzc78VuayInZrYj63bAcqa73ISY3DoM7pptVE8uLq7sGJPs+ZSeZeRNfG64m9MUldnKRT1DMMA2VlZVxtMwCVxkbmXkTXZmd+K3NZEbulMStq6vDutwcAAPde0BsuJy+h0YCruwcn+jxnJpl7EV0bryf2xiR1hbOf8C8MUpJhGKipqeFJMwCVxkbmXkTXZmd+K3NZEbulMed/tQfHK2qRkejC+X35s2tEos9zZpK5F9G18Xpib0xSFyfpREREJvLqBv6xah8A4PfjeyMpToofRyEiIiIFcZJORETUjIUbC3CguArpiS5cOqCD6HKIiIhIYZykk5I0TUNiYiIX8ghApbGRuRfRtdmZ38pcVsQON6ZhGHhu2U4AwM0j8pEQ6zStFqJIJvo8ZyaZexFdG68n9sYkdYWzn/DzeqQk30mTmlJpbGTuRXRtdua3MpcVscONuXLXcWwpcCMuxoGbR+SbWgvJj6u7Byf6PGcmmXsRXRuvJ/bGJHVxdXeKeoZhoLS0lAt5BKDS2Mjci+ja7MxvZS4rYocb8+UvdgMALu7fHumJsabVQZGBq7sHJ/o8ZyaZexFdG68n9sYkdXHhOIp6hmHA4/HwpBmASmMjcy+ia7Mzv5W5rIgdTsz1+0vw2dYjAICfD+tkWg1EKhB9njOTzL2Iro3XE3tjkro4SSciIjLBi5/vAgAM65KJgZ0yBFdDRERE0YCTdCIiogAOFFdi0eZCAMAd5/UQXA0RERFFC07SSUmapiE5OZmrbQag0tjI3Ivo2uzMb2UuK2KHGvOlz3fBqxvonZuCEd2yTMtPpArR5zkzydyL6Np4PbE3JqmLq7tT1NM0DfHx8aLLkJJKYyNzL6JrszO/lbmsiB1KTHe1B++uOQAAuP/CPvwDLIpxdffgRJ/nzCRzL6Jr4/XE3pikLq7uTlHPMAwUFxdzIY8AVBobmXsRXZud+a3MZUXsUGL+/as9qKj1okd2Ms7s3sa03BR5uLp7cKLPc2aSuRfRtfF6Ym9MUhcXjqOoZxgGvF4vT5oBqDQ2MvciujY781uZy4rYzcWsqfPihR8XjLt5ZD7fRScKQvR5zkwy9yK6Nl5P7I1J6uIknYiIqIVW7DiGsuo6pCW4cN0Q/uwaERER2YuTdCIiohP8+7tDAIDLBrSHw8F30YmIiMhenKSTkjRNQ2pqKj+mGoBKYyNzL6JrszO/lbmsiH2ymPuLKvHxhvpJ+lWD80zLSaQi0ec5M8nci+jaeD2xNyapi6u7U9TTNA2xsbGiy5CSSmMjcy+ia7Mzv5W5rIh9sphzPt0O3QDO6tEGp3ZIMzUvRSau7h6c6POcmWTuRXRtvJ7YG5PUxdXdKerpuo7jx49D13XRpUhHpbGRuRfRtdmZ38pcVsQOFnPzoVK8t7b+Z9fuGtPTtHwU2bi6e3Ciz3NmkrkX0bXxemJvTFJXOPsJJ+mkLK60GZxKYyNzL6JrszO/lbmsWuW3sVkLtwIAxp+Si0GdM0zPSaQi0ec5M8nci+jaeD2xNyYRJ+lERBT11u4rxpc7jgEA7hrbQ3A1REREFM04SScioqjm1Q08+OEmAMDPBnVE79xUwRURERFRNOMknZSkaRrS09O52mYAKo2NzL2Irs3O/FbmsiJ245hvfrMXmw66kRofg9+P721aHiLViT7PmUnmXkTXxuuJvTFJXVw4jqKepmlwOBw8aQag0tjI3Ivo2uzMb2UuK2KfGPP7Q278+aMtAIBp43qhbUqcaXlIDVzdPTjR5zkzydyL6Np4PbE3JqmLk3SKerquo6ioiKttBqDS2Mjci+ja7MxvZS4rYp8Y84XPd6LWq6N/XjquH9bZtBykDq7uHpzo85yZZO5FdG28ntgbk9TF1d2JiIiaUVFTh0WbCgEA0y/uC6eD74QQERGReJykExFRVPps6xHU1Ono0iYJp+eliy6HiIiICAAn6UREFKU+3lj/LvqE03L5fUIiIiKSBifppCSHw4HMzEw4HNzFG1NpbGTuRXRtdua3MpcVsR0OB/ZXOvDZ1iMAgAtPa29abFIPF44LTvR5zkwy9yK6Nl5P7I1J6gpnP+EeRUoyDAO6rsPgSj9NqDQ2MvciujY781uZy4rYhmFg3vJdqNMNjDslB33b83fRKTguHBec6POcmWTuRXRtvJ7YG5PUFc5+wkk6KckwDJSUlPCkGYBKYyNzL6JrszO/lbmsiP3dvmIs/v4wAOCO83qYFpco2og+z5lJ5l5E18brib0xSV2cpBMREQVgGAbufW8jdAO4qF87nNI+TXRJRERERA1wkk5ERFFj/YFS/HCkHADwxwm9BVdDRERE1BQn6aQsrtYcnEpjI3MvomuzM7+VucyMvWDdIQDAuD5ZyE6NNy0uUbQSfZ4zk8y9iK6N1xN7YxLFiC6AyAoOhwNZWVmiy5CSSmMjcy+ia7Mzv5W5zIxdVu3Bh+sOAgCuGtKFq/FSSLi6e3Ciz3NmkrkX0bXxemJvTFJXOH93RO0kXdd16LoOoP4VME3TYBhGgy/0t/R2X9zmbnc4HE1iBLvd7BpV78kwDNTV1SE2Ntb/70jvKZTbQ+nJMAx4vV7ExDQ9/COtJ8Mw4PF44HK54HQ6pdpOAFBbW4uYmBj/v+3c93xjExsba/kYAEBNTQ1cLlezvYbb08nGMdzaX/lyN45X1CI3LR5DO6VA1/WTjk1z26nxcSXLvqfSuVyOnupvM4z67axGT+bcruu6/xzscDgiuicg/HONXT0ZRvN/01i57wFNz/FWbScrevX11Pi6aMZ20nUdtbW1/rFp7fEEwP/3jQz7np23R0NPjf99MlEzSZ87dy7mzp0Lr9cLACgpKfGfaOLi4pCSkoLy8nLU1NT4n5OYmIjExES43W54PB7/7cnJyYiPj0dJSYk/HgCkpqYiNjYWxcXFDTZUeno6HA4HioqKGtSUmZkJXddRUlLiv03TNGRlZcHj8cDtdvtvdzqdyMjIQE1NDcrLy/23u1wupKWloaqqCpWVlf7bo70nXddRV1eH3NxclJaWKtETYM520nUdmqYhLS2tQe2R2JOu6ygrK0NKSgratGkj1XaKjY3FoUOHkJSU5H/l1M59zzc2WVlZSE9Pt3Q7xcTE4ODBg0hJSfH3alZPaWlpOH78OGJiYvyxW7KdEhIS8J/19e+iTx6Wi6OHCxDTrh0SExNbfDzV1dUBqD+mvF6vNPueSudyGXo68Q9nt9utRE9mbaeamhr/OTg1NTWie4qPj0dhYSESEhL85xpZtpOu66iqqkJeXh6qq6tt3/cANDnHW7WddF1HdXU1OnbsiIqKClN78l0X8/LyEBMTY8p2qq6uRkFBgX9sWnM8VVVVAQCKi4uRnp4uxb4XbDuF2pOK573W9BQOzWjpMyOU7wJ75MgR/8dT+EqQej3puo7i4mJkZWX574v0nkK5PZSefCe2jIwM/wtVkdqTbztnZGQgJiZGqu1kGAaOHz+OjIwM/x81du57vrHJzMwM+CkDUb2G29PJYodT48KNhfjNW2sR69Sw8t7R0KvLmx2b5raTx+PBokWLMGHCBP/+F+52svv2aD3vtaanQYNmoLCwFLm5aVizZroSPZl1u9fr9Z+DnU5nRPfUknONXT2F8jeNlfteoLGxajtZ0euJL7SdeF00Yzt5vV4UFRX5x6Y126O2thaLFi3C+PHjERsbK8W+Z+ft0dBTaWkpMjMzUVpaitTUVJxM1LyT3pjD4WjyvQDfgDYW7u3Bvm8Q6Hazclp9eyT25PtvlXpq7vZwe4qEXpvr6cQ+ZKrdMAx/bY17sGvfC/bfZsX3CbdXs2KHGqeytg4Pf/w9AOC2Ud2RkRSHopqKVp8jTrxfpn3vZLfzvBd+zkD/jvSezLrdNynx/X8k99SSc42dPYnc94KNjVW1mN1rsJrN3E5mjM2J15ZIP55acns09BToMcFw1RxSkqZp/lf1qSGVxkbmXkTXZmd+K3OZEftvX+zGodJqtEuLx69HdRO+bYhUodKxJHMvomvj9cTemKSucPaTqH0nndSmaRoyMjJElyEllcZG5l5E12ZnfitztTa2YRh4b+0BAMBdY3og3uUEAGn3G5KP728q/g3elOjznJlk7kV0bbye2BuT1MV30inqGYaB6urqJt9XIbXGRuZeRNdmZ34rc7U29uLvD2PP8Uokx8Xgon7tTYlJ0cW3m3B3aUqlY0nmXkTXxuuJvTFJXeHsJ5ykk5IMw0B5eTlPmgGoNDYy9yK6NjvzW5mrNbHrvDoe/2QbAGDi8M5IiotpdUwi+olKx5LMvYiujdcTe2OSujhJJyKiqLfhYCl2HClHjEPDL8/qKrocIiIiopBwkk5EREr662c7AAAXnNYOmUmxgqshIiIiCg0n6aQkTdPgcrm42mYAKo2NzL2Irs3O/FbmamnsrYVufLb1CADg/87tbkpMImpIpWNJ5l5E1xbt1xO7Y5K6uLo7RT1N05CWlia6DCmpNDYy9yK6NjvzW5mrJbG9uoHfv7cRAHBe72z0zElpdUyKXlzdPTiVjiWZexFdWzRfT0TEJHVxdXeKeoZhoLKykgt5BKDS2Mjci+ja7MxvZa6WxN50sBTr95cg1unAHy7sY0pMil5c3T04lY4lmXsRXVs0X09ExCR1ceE4ino8aQan0tjI3Ivo2qL5j6r5X+0BAJzXJxvd2iabEpOImlLpWJK5F9G1RfP1RERMUhcn6UREFJW+P+TGv787CACYfDZXdCciIqLIw0k6EREpY+6y+hXdx/TJxsBOGYKrISIiIgofJ+mkJE3TEBcXx9U2A1BpbGTuRXRtdua3Mlc4sY+X12Dx94cBALed082UmEQUnErHksy9iK4tGq8nImOSuri6O0U9TdOQkpLS/AOjkEpjI3MvomuzM7+VucKJ/dyynait09E7NwWDOgd/F130tqHIwtXdg1PpWJK5F9G1ReP1RGRMUhdXd6eoZxgGysrKuJBHACqNjcy9iK7NzvxW5go1dmVtHd5bewAAcNeYnie9EIreNhRZuLp7cCodSzL3Irq2aLueiI5J6uLCcRT1DMNATU0NT5oBqDQ2MvciujY781uZK9TYH647hJJKD/IyEzC2b44pMYno5FQ6lmTuRXRt0XY9ER2T1MVJOhERRQ3DMPDajz+7NvGMfDgd/FwyERERRS5O0omIKKIt3XYEWwvLkOBy4qrBHUWXQ0RERNQqnKSTkjRNQ2JiIlfbDEClsZG5F9G12ZnfylyhxH75i90AgBvO6IT0xFhTYhJR81Q6lmTuRXRt0XQ9kSEmqYuru1PU8500qSmVxkbmXkTXZmd+K3M1F3vN3iJ8tfM4XE4NE4fnmxKT6ERc3T04lY4lmXsRXVu0XE9kiUnq4uruFPUMw0BpaSkX8ghApbGRuRfRtdmZ38pcJ4ut6wb+9NEWAMBF/dojLzO0P5REbxuKLFzdPTiVjiWZexFdWzRcT2SKSeriwnEU9QzDgMfj4UkzAJXGRuZeRNdmZ34rc50s9pvf7MW6/SVIjHXi7vN7mhKTiEKn0rEkcy+ia4uG64lMMUldnKQTEZHSDMPAKyv2AAB+N64XOmbw44ZERESkBk7SiYgo4izaVIjdxyqQHBeDqwfniS6HiIiIyDScpJOSNE1DcnIyV9sMQKWxkbkX0bXZmd/KXIFil9fU4ZH/1n8X/ZoheUiKC28NVNHbhkgVKh1LMvciujaVrycyxiR1cXV3inqapiE+Pl50GVJSaWxk7kV0bXbmtzJXoNizP9mG/UVV6JCegN+ODf276CeLSRQMV3cPTqVjSeZeRNem8vVExpikLq7uTlHPMAwUFxdzIY8AVBobmXsRXZud+a3M1Ti2u9qDf6zaBwD4/QW9kRzmu+iBYhKdDFd3D06lY0nmXkTXpur1RNaYpC4uHEdRzzAMeL1enjQDUGlsZO5FdG125rcyV+PYizYVoqZOR8eMBFzcr50pMYmoZVQ6lmTuRXRtql5PZI1J6uIknYiIlGMYBl77ag8A4LqhnfgdQCIiIlISJ+lERBQRvtxxDJsPuZHgcuLnQzuJLoeIiIjIEpykk5I0TUNqairfaQtApbGRuRfRtdmZ38pcJ8aet3wngPoV3TOSYk2JSUQtp9KxJHMvomtT8Xoic0xSF1d3p6inaRpiY1v+R7zKVBobmXsRXZud+a3M5Yu98UApVuw4DqdDwy/P6mJKTKJQcHX34FQ6lmTuRXRtql1PZI9J6uLq7hT1dF3H8ePHoeu66FKko9LYyNyL6NrszG9lLl/sect3AAAu7tcOHTMSTYkp435D8uHq7sGpdCzJ3Ivo2lS7npgZW/S2ocgSzn7CSTopiyttBqfS2Mjci+ja7MxvZa79xVX476ZCAMCtZ3czJabobUOkCpWOJZl7EV2bKtcTq1aNJzIbJ+lERCS1t787DN0AzunZFn3bp4ouh4iIiMhSnKQTEZG0DMPAJ1uOAQBuOKOz4GqIiIiIrMdJOilJ0zSkp6dztc0AVBobmXsRXZud+a3M9fgnP6Cosg6JsU6c1aONKTFFbxsiVah0LMnci+jaVLmeWBFb9LahyMKF4yjqaZoGh8PBk2YAKo2NzL2Irs3O/Fblqqipw/yv9gAArh3SCfEupylxRW8biixc3T04lY4lmXsRXZsK1xOrYoveNhRZIm6SPnfuXOTn5yM+Ph7Dhg3DqlWrgj72pZdewllnnYWMjAxkZGRgzJgxJ308RSdd11FUVMTVNgNQaWxk7kV0bXbmtyrXe2sPoKZOR8f0ONw/oZdpcUVvG4osXN09OJWOJZl7EV2bCtcTq2KL3jYUWSJqdfe3334bU6dOxfTp07F27Vr0798f48aNw5EjRwI+ftmyZbjuuuuwdOlSrFy5Enl5eTj//PNx8OBBmysnIiKrVNV68eyS+p9du/r0HL5LQURERFFD+CT9qaeewuTJkzFp0iT07dsX8+bNQ2JiIl555ZWAj3/zzTfx61//GgMGDEDv3r3x8ssvQ9d1LFmyxObKiYjIKn9fuQfHymvQMSMBVw3IEV0OERERkW2ETtJra2uxZs0ajBkzxn+bw+HAmDFjsHLlypBiVFZWwuPxIDMz06oyiYjIRuU1dZi3fCcA4I5zu8PlFP56MhEREZFtYkQmP3bsGLxeL3JyGr5LkpOTg61bt4YU4/e//z3at2/fYKJ/opqaGtTU1Pj/7Xa7AQAejwcej6eFlVMkSElJgdfrhdfrFV2KdFQaG5l7EV2bnfnNzPXet/tRXOlBl6xEXHxaDhwaTO/DjHp91xBeS6IHt3VTos9zZpK5F9G1Rer1xI7YZsXkNUV94ewjQifprfXoo4/in//8J5YtW4b4+PiAj5k1axZmzJjR5PalS5ciMTHR6hKJiChM/9rqAODAKUll+N8ni0SX06zFixeLLoEsVF1d5f//hQsXCq6GiFTHa4q6KisrQ36s0El6mzZt4HQ6cfjw4Qa3Hz58GLm5uSd97uzZs/Hoo4/i008/Rb9+/YI+7r777sPUqVP9/3a73cjLy8Po0aORlZXVugZIWrquo7i4GBkZGXA4+FHZE6k0NjL3Iro2O/Obmauoohb3rP4cgI7JF41E75xk0/swq16Px4PFixdj7NixcLlcptRG8pkxYy2AWsTHx2PChAmiy5GK6POcmWTuRXRtkXo9sSO2mTF5TVFfSUlJyI8VOkmPjY3FoEGDsGTJElx22WUA4F8EbsqUKUGf9/jjj+Phhx/GJ598gsGDB580R1xcHOLi4prc7nK5eAAoTNd1xMTEwOVySXexFU2lsZG5F9G12ZnfzFz/+HY3aup09MxJRr+8TBiGYXofZo8Nryeq0/z/z+3ckOjznJlk7kV0bZF6PbEjthUxeU1RVzjbVfjH3adOnYqbbroJgwcPxtChQzFnzhxUVFRg0qRJAICJEyeiQ4cOmDVrFgDgsccew4MPPoi33noL+fn5KCwsBAAkJycjOTlZWB9ERNQ6h0qq8MLyXQCA34zuDk3TYPDHqYmIiCjKCJ+kX3PNNTh69CgefPBBFBYWYsCAAVi0aJF/Mbl9+/Y1eGXq+eefR21tLX72s581iDN9+nQ89NBDdpZOkuPvKgen0tjI3Ivo2uzMb0auhxduQZXHiyH5Gbikf3tTYzcmetsQqUKlY0nmXkTXFmnXEztji942pCbhk3QAmDJlStCPty9btqzBv/fs2WN9QRTxHA4H1xwIQqWxkbkX0bXZmd+MXOv3l+DjDQVwaMCMS071/9FjRR+itw1FFt/f3/w7vCmVjiWZexFdW6RdT+yMLXrbUGQJ5ysRcn3phsgkhmGgtraWH5UNQKWxkbkX0bXZmd+MXH9fuRcAcOmADujbPtXU2I2J3jYUWXy7CXeXplQ6lmTuRXRtkXY9sTO26G1DkSWc/YSTdFKSYRhwu908aQag0tjI3Ivo2uzM39pc3+0rxntrDwAAbjijk6mxAxG9bYhUodKxJHMvomuLpOuJ3bFFbxuKLJykExFRxPjrZzsAABNOy8WgzpmCqyEiIiISi5N0IiIS5qudx7Bk6xE4NOB343qLLoeIiIhIOE7SSUmapsHpdHLFzQBUGhuZexFdm535W5qrqKIWv317HQDg2qGd0KVNkmmxT0b0tiFShUrHksy9iK4tEq4nomKL3jYUWcLZT6RY3Z3IbJqmISMjQ3QZUlJpbGTuRXRtduZvaa4nPtmKw+4apCe6cNd5PUyNfTKitw1FFq7uHpxKx5LMvYiuLRKuJ6Jii942FFnCmaTznXRSkmEYqK6u5kIeAag0NjL3Iro2O/O3JNd/1h/CP1btBwDMu2EQslPjTYvdHNHbhiILV3cPTqVjSeZeRNcm+/VEZGzR24YiCxeOo6hnGAbKy8t50gxApbGRuRfRtdmZP9xcRRW1uP/fGwEAPxvUEWd0Df4bs1b0IXrbEKlCpWNJ5l5E1ybz9UR0bNHbhiILJ+lERCStd9fsh7u6DllJsZh56SmiyyEiIiKSCifpRERkm6KKWvzlx59cm3p+TyTGcmkUIiIiohNxkk5K0jQNLpeLq20GoNLYyNyL6NrszB9Orje+3ouy6jr0zk3B1YPzTI0dKtHbhkgVKh1LMvciujZZrycyxBa9bSiycHV3inqapiEtLU10GVJSaWxk7kV0bXbmDzXX/qJKzF1a/y765LO6wuVs/nViK/oQvW0osnB19+BUOpZk7kV0bTJeT2SJLXrbUGTh6u4U9QzDQGVlJRfyCEClsZG5F9G12Zk/lFy1dTp++/Y61NTpGNgpHZcOaG9a7HCJ3jYUWbi6e3AqHUsy9yK6NtmuJzLFFr1tKLJw4TiKejxpBqfS2Mjci+jaZPuj6olPtuLbvcVIiY/B7Kv6IyaEd9FDjR0u0duGSBUqHUsy9yK6NtmuJzLFFr1tKLJwkk5ERNJYufM4XvpiNwDg0Sv6oWvbZMEVEREREcmLk3QiIrKMYRh48n/bAADjT8nFhNNyBVdEREREJDcuHEdK0jQNcXFxXG0zAJXGRuZeRNdmZ/5guXTdwJxPf8C3e4sRF+PAjEtPCbseK/oQvW2IVKHSsSRzL6Jrk+F6Imts0duGIgtXd6eop2kaUlJSRJchJZXGRuZeRNdmZ/5guf6+cg+e/fE30X9xZhfkpMabFrs1RG8biixc3T04lY4lmXsRXZsM1xNZY4veNhRZuLo7RT3DMFBWVsaFPAJQaWxk7kV0bXbmD5TrSFk15izZDgC4eUQ+fnd+L9Nit5bobUORhau7B6fSsSRzL6JrIkCWPwAAjhtJREFUE309kTm26G1DkYULx1HUMwwDNTU1PGkGoNLYyNyL6NrszB8o16MLt6Kk0oNTO6Ti/gv7wOFo2duQVvQhetsQqUKlY0nmXkTXJvp6InNs0duGIgsn6UREJMySLYfx/ncHAQAPX3YaXCH+3BoRERERcZJOREQm8nh1PPFJ/WruPxvUEf3z0sUWRERERBRhOEknJWmahsTERK62GYBKYyNzL6JrszP/ibn+8tkObC0sQ0p8DO69oLepsc0ietsQqUKlY0nmXkTXJup6EgmxRW8biixc3Z2inu+kSU2pNDYy9yK6Njvz+3J9uO4g/vJZ/WJxD19+Gtokx5kW20yitw1FFq7uHpxKx5LMvYiuTcT1JFJii942FFm4ujtFPcMwUFpayoU8AlBpbGTuRXRtduY3DAMHDh/HzP98D8MAbhreGZf0b29abLP7EL1tKLJwdffgVDqWZO5FdG12X0+sysXrCYnGheMo6hmGAY/Hw5NmACqNjcy9iK7NzvyGYeCFL/fieEUturZNwh8v6mtqbLP7EL1tiFSh0rEkcy+ia7P7emJVLl5PSDRO0omIyDYFpVV4e20hAOCPF/bhau5ERERErcC/pIiIqFUeWbgVtV4DQ/IzMLpXtuhyiIiIiCIaJ+mkJE3TkJyczNU2A1BpbGTuRXRtduX/ZtdxfLyxEA4NuH9CH9PzWdGH6G1DpAqVjiWZexFdm535rczF6wmJxtXdKeppmob4+HjRZUhJpbGRuRfRtdmRv7K2DlP/tR4AcOXAjhjQKcP0HFb0IXrbUGTh6u7BqXQsydyL6NrszG9lLl5PSDSu7k5RzzAMFBcXcyGPAFQaG5l7EV2b1fkNw8BDCzbjYEkV2qfF4/YR7Sxb6MfsPkRvG4osXN09OJWOJZl7EV2bnfmtzMXrCYnGheMo6hmGAa/Xy5NmACqNjcy9iK7N6vx/+WwH/vXtAQDA9Iv7IjXOYdkfVWb3IXrbEKlCpWNJ5l5E12Znfitz8XpConGSTkREljAMA88u2Y6nP/0BAHDtkDyM6cPF4oiIiIjMwu+kExFRyN74ei+eWlw/QZ84vDNmXHIK30EgIiIiMhEn6aQkTdOQmprK1TYDUGlsZO5FdG1W5C+vqcNfl+4AAFw1qCNmXHKKP75VvVrRh+htQ6QKlY4lmXsRXZud+a3MxesJicbV3SnqaZqG2NhY0WVISaWxkbkX0bWZnX/N3iLc8+4GHHbXIDslDjMvPdV/sbGyVytii942FFm4untwKh1LMvciujY78/N6Qirj6u4U9XRdx/Hjx6HruuhSpKPS2Mjci+jazMy/rbAMN7+yGjuPViAtwYWXJg5GQqzTklyNWRFb9LahyMLV3YNT6ViSuRfRtdmZn9cTUlk4+wnfSSdl8Xuywak0NjL3Iro2M/LruoE//HsjymrqkJ+ViH//eiQykpq+a2Blr1at8ktErafSsSRzL6JrszM/rydEUTxJ13Xd/2qGpmnQNA2GYTQ40Fp6e+NXSYLd7nA4msQIdrvZNarek67r/v9WpadQbg+lJ99/G4YRUq8y9+TbzrquS7edAo2xnfueb2yaOw6au/2Fz3dhzd5ixDg0/O3mIUhPdDXpKZxew+3pZLFb2lOoY9Pcdjrxfpn2PZXO5TL0dCLDMJToyazbTzwHR3pPQPjnGrt6CuVvGiv3vUBjY9V2sqLXE8/ZjXM1V3uoPZkxp2hcpwz7np23R0NPjWs+maiZpM+dOxdz586F1+sFAJSUlPhPPHFxcUhJSUF5eTlqamr8z0lMTERiYiLcbjc8Ho//9uTkZMTHx6OkpMQfD6hfOCk2NhbFxcUNNkJ6ejocDgeKiooa1JSZmQld11FSUuK/TdM0ZGVlwePxwO12+293Op3IyMhATU0NysvL/be7XC6kpaWhqqoKlZWV/tujvSdd11FXVwcAyvQEmLOdfH9Meb3eBrVHYk+6rqOsrAyGYaBNmzZSbafY2FiUl5fDMAw4HI6wtxPQun3PNzYulwvp6ekt6unLHcfw+KJtAIA/XtAT3domo7i4uMl2iomJgdvtbtCrWT2lpaXB4/GgqKjIH7u128k3NklJSUhMTGzx8eQ7x+i6Dq/XK82+p9K5XIaeTvzD2e12K9GTWduppqbGfw5OTU2N6J7i4+NRWVnZ4Dwmy3bSdR1VVVXIysoSsu8BaHKOt2o76bqO6upqADC9J9+5Py0tDZqmmbadThyb1hxPVVVVAIDi4mKkp6dLse8F206h9qTiea81PYVDM1r6zAjlu8AeOXIEWVlZAPhKkIo9+U7GMTEx/n9Hek+h3B5KT77n+i60kdyTYRjwer1wOp1wOp1SbSegfhLncDj8/7Zz3/ONTUxMTIvGYO3eIlz30jeoqdMxuldb/O2mwSd9t9vj8cDpdDbba0veSQ82ji3dTqGOTXPbyePxYNGiRZgwYQJiYmKk2fdUOpfL0NOgQTNQWFiK3Nw0rFkzXYmezLrd9wKV0+n0H6OR2hMQ/rnGrp58Y32yv2ms3PeApud4q7aTFb2e+AnCE8/9Zmwn35tCvrFpzfaora3FokWLMH78eMTGxkqx79l5ezT05Ha7kZGRgdLSUqSmpuJkouad9MYcDkeTSYpvQBsL9/ZAk59gt5uV0+rbI7GnE/+tSk/N3R5qT76PhwcSaT1pmtbgv2Wq3feHa7DaQ7m9NbW0dGwMw8Af/r0JNXU6hnbJxJNXD2g2ju+PHit6CjaOVo9Nc9vpxPtl2/dUOpc3d7v1Pfn++6drSeT3ZM7tvolJKMdCJPQU7rnGzp4an7/Mjn+y2oHA53irtofZvTbePwOdw1sT26yxObGu5s41kXA8qXrea01PwXoMhKu7k5J0Xfd/HJoaUmlsZO5FdG2tyf/wx1uwtbAMibFOPHf9QGQGWCjOrFzNsSK26G1DkcX35kijN20Iah1LMvciujY78/N6QioLZz/hJJ2IiPw2HSzFq1/tAQD8YUIftEmOE1sQERERUZThJJ2IiAAAS7cdwdUvrIRXN9C/YxquH9ZJdElEREREUSdqv5NOREQ/+WbXcfzytW/h1Q2M7J6F534+KOD3q4iIiIjIWpykk5IcDgcyMzPDWqAhWqg0NjL3Irq2cPKX19Thvvc3wqsbGNw5A6/cPARxMU5LcoXLitiitw1FlhMXjqOGVDqWZO5FdG125uf1hFTGheMo6vl+wqPxzzOQWmMjcy+iaws1v64buP2NNdh1rAK5qfF4ceLgsCbo4eRqCStii942FFm4cFxwKh1LMvciujY78/N6QioLZz/hJJ2UZBgGSkpKeNIMQKWxkbkX0bWFmn/u0h34YvsxxDodmHv96c2u5N6aXC1hRWzR24ZIFSodSzL3Iro2O/PzekIq4ySdiIia9e6aA3hy8Q8AgHvG98KgzpmCKyIiIiIiTtKJiKLQsm1HcO97GwAAN5zRCZNGdhFcEREREREBXDiOFMaVqYNTaWxk7kV0bcHyF5ZW4zdvrkWdbuDSAe0x85JT4XC0rlYre7UituhtQ6QKlY4lmXsRXZud+Xk9IeIknRTlcDiQlZUlugwpqTQ2MvciurZg+Y+4q3HFcytQUetF17ZJeOJn/Vs9QbeyVytii942FFm4untwKh1LMvciujY78/N6Qirj6u4U9QzDQG1tLRfyCEClsZG5F9G1Bct/3/sbcai0GjmpcfjLdacjNqb1lwEre7UituhtQ5GFq7sHp9KxJHMvomuzMz+vJ6QyLhxHUc8wDLjdbp40A1BpbGTuRXRtgfIv23YES7YegaYB824YhFPap1mWyyxWxBa9bYhUodKxJHMvomuzMz+vJ6QyTtKJiKiBqlovHlu0DQBw84h8nN4pQ3BFRERERBQIJ+lERFFgzpIfsKXAjfREF24f1U10OUREREQUBCfppCRN0+B0OrniZgAqjY3MvYiu7cT8u46W45UvdwMAnvhZf2SnxFuWy2xWxBa9bYhUodKxJHMvomuzMz+vJ6SycPYTru5OStI0DRkZ/DhvICqNjcy9iK7Nl98wDExfsBker4FRvdpiTJ9sy3JZwYrYorcNRRau7h6cSseSzL2Irs3O/LyekMrCmaTznXRSkmEYqK6u5kIeAag0NjL3Iro2X/6FGwvwxfZjiI1xYMYlp1jyar+VvVoRW/S2ocjC1d2DU+lYkrkX0bXZmZ/XE1IZF46jqGcYBsrLy3nSDEClsZG5F9G1GYaBL7cW4HfvbgAA3HZON3TOSrIsl1W9WhFb9LYhUoVKx5LMvYiuzc78vJ6QyjhJJyKKcjUeL/78v12orPWia9sk/JqLxRERERFFBE7SiYgUc7y8Bv/3z3XYU1SNtAQX3r51OOJdTtFlEREREVEIuHAcKUnTNLhcLq62GYBKYyNzL6Jqq6ytw6T5q7HhQCkcGjD356ejbUqcpTmt7NWK2DLvN0SRRKVjSeZeRNdmZ35eT0hlXN2dop6maUhLSxNdhpRUGhuZexFRW7XHi5tfrZ+gA8BTVw/AmT3aWp7Xyl6tiC3zfkPy4eruwal0LDXXi9frhcfjsbGihuLi4lBTUxMV+a3MZUVss2J6PB7ExMSguroaXq/XhMpIhNjYWDgcgT+szkk6RT3DMFBVVYWEhAS+utmISmMjcy9211ZV68Vv3lqLVbuLkBjrxPPXD8SQvGQYhmF5fit7tSK2zPsNyYeruwen0rEUrBfDMFBYWIiSkhJxxQHQdT3oH/6q5bcylxWxzYppGAZyc3Oxf//+iD+eopnD4UCXLl0QGxvb5L5wFo7jJJ2UZBgGKisrER8fzxNdIyqNjcy92FlbRU0drnjuK2w7XIZYpwOv3DwEQ/MzUFRUZEt+K3u1IrbM+w1RJFHpWArWi2+Cnp2djcTERCF9GoaBuro6xMTEKJ/fylxWxDYzpq7rKC8vR3JystAXZKjldF3HoUOHUFBQgE6dOjXZJzhJJyKKEh6vjsl//xbbDpchweXEczcMxBlds6DruujSiIgimtfr9U/Qs7KyhNXBSbq8sc2epNfW1iI+Pp6T9AjWtm1bHDp0CHV1dXC5XC2Ow0k6EVGEKq6oxa/eWINVu4sQ73LgpYmDcWaPNqLLIiJSgu876ImJiYIrIaJI4fuYu9frbdUknS/TkJI0TUNcXFzEf/zOCiqNjcy92FHbjP9sxqrdRUiKdeL56wc1mKDbOTZW5rIitsz7DVEkUelYOlkvMvQn+p1VO/NbmcuK2KK3DcnlZOcLLhxHUU/TNKSkpIguQ0oqjY3MvVhd279W78cH6w5B04A3fjkMp3fKsDW/XbmsiC3zfkPy4eruwal0LMnci6ZpcDqdUZHfylxWxBa9bSiyhDNJ50s/pCTDMFBWVhbWAg3RQqWxkbkXq2ozDAPPfLod97y3AQDwf6O7N5mgW5k/WE1W5bIitsz7DcmHq7sHp9KxJHMvhmHA6/WGVduoUaOgaRo0TcO6detszy9Droceesg/BnPmzLGkDzvHJpj8/HzMmTPnpI956KGHMGDAAFPzzp8/H+np6abGVF04+wkn6aQkwzBQU1Mj5cVWNJXGRuZerKpt9v+24elPfwAAXDWoI+4c09PW/HbnsiK2zPsNUSRR6ViSvZeWLAY6efJkFBQU4NRTT21w+3vvvYdRo0YhLS0NycnJ6NevH2bOnImioiI8+eSTyMjIQHV1dZP8lZWVSE1NxbPPPgvgp8nhsmXL/JPhYP9btmxZSJO61157DcOGDUNSUhJSUlJwzjnn4KOPPmryOMMw8OKLL2LYsGFITk5Geno6Bg8ejDlz5qCyshIAMG3aNBQUFKBjx44nHcf169fjuuuuQ15eHhISEtCnTx8888wzDR4zf/58fy9OpxMZGRkYNmwYZs6cieLi4pP21Hh8cnJycOWVV2LXrl0nfV6oVq9ejVtvvdX/b03T8MEHHzR4zLRp07BkyRJT8vlcc801+OGHH0yNGciJY3/i/+Lj4y3PbTZO0omIFPTVjmOYu3QnAOA3o7vhsSv7wengZ3CJiKipxMRE5ObmIibmp2+33n///bjmmmswZMgQ/Pe//8WmTZvw5JNPYv369Xj99ddx4403oqKiAu+//36TeO+++y5qa2txww03NLh9xIgRKCgo8P/v6quvxvjx4xvcNmLEiGbrnTZtGm677TZcddVVWL9+PVatWoUzzzwTl156Kf761782eOyNN96Iu+66C5deeimWLl2KdevW4YEHHsCHH36I//3vfwCA5ORk5ObmNvtx9DVr1iA7OxtvvPEGNm/ejPvvvx/33Xdfk5ypqakoKCjAgQMH8NVXX+HWW2/F66+/jiFDhuDQoUPN9rdt2zYcOnQI77zzDjZv3oyLL74YXq+32ec1p23bts0ubpicnGz6LxQkJCQgOzvb1JjB+Mb+xP/t3bs36ONra2ub3OZbiT9cLX1ea3GSTkQUAfYXVeJXr68BAFxxegf8blxvODhBJyKiEK1atQqPPPIInnzySTzxxBMYMWIE8vPzMXbsWLz33nu46aabkJ2djYsvvhivvPJKk+e/+uqruOyyy5CZmdng9tjYWOTm5vr/l5CQgLi4uAa3+Va8Dubrr7/Gk08+iccffxxTp05F9+7d0adPHzz88MO46667MHXqVOzfvx8A8K9//Qtvvvkm/vGPf+APf/gDhgwZgvz8fFx66aX47LPPMHr06LDG5Re/+AWeeeYZnHPOOejatStuuOEGTJo0qckLFZqmITc3F+3atUOfPn1wyy23YMWKFSgvL8fvf//7ZvNkZ2ejXbt2OPvss/Hggw/i+++/x44dOwAAzz//PHr06IHs7Gz06dMHr7/+uv95hmHgoYceQqdOnRAXF4f27dvjjjvu8N9/4sfd8/PzAQCXX345NE3z/7vxx911XcfMmTPRsWNHxMXFYcCAAVi0aJH//j179kDTNLz//vsYPXo0EhMT0b9/f6xcudL/mMafjPDleP3115Gfn4+0tDRce+21KCsr8z+mrKwM119/PZKSktCuXTs8/fTTGDVqFO66666Tjp1v7E/8X05Ojv/+UaNGYcqUKbjrrrvQpk0bjBs3zv8Jhv/+978YNGgQ4uLi8OWXX6KmpgZ33HEHsrOzER8fjzPPPBOrV6/2xwr2PLtxkk5K0jQNiYmJUqzIKhuVxkbmXsysbdPBUvxs3lcoq6lDlzZJ+MOFfWzNLzKXFbFl3m+IIolKx1KovRiGgcraOtv/V12nt/qj+G+++SaSk5Px61//OuD9vgnXLbfcgs8++6zBO5V79uzB559/jltuuaVVNQTzj3/8A8nJyfjVr37VZLX0u+++Gx6PB++9956/j169euHSSy9tEkfTNKSlpQXNE+pK7KWlpU1ejAgkOzsbP//5z7FgwYKw3hVPSEgAUP+O77///W/ceeedmDp1qv8d+kmTJmHp0qUA6r+e8PTTT+OFF17A9u3b8cEHH+C0004LGNc32Xz11VdRUFDQYPJ5omeeeQZPPvkkZs+ejQ0bNmDcuHG45JJLsH379gaPu//++zFt2jSsW7cOPXv2xHXXXXfSd5V37tyJDz74AB999BE++ugjLF++HI8++qj//qlTp2LFihVYsGABFi9ejC+++AJr164NedxO5rXXXkNsbCxWrFiBefPm+W+/99578eijj2LLli3o168f7rnnHrz33nt47bXXsHbtWnTv3h3jxo1DUVFRg3iNn2cGru5OUc93saWmVBobmXsxq7b/rD+E3727HtUeHW1T4vD6LUPRJjnOtvyhsDKXFbFl3m9IPlzdPTiVjqVQe6nyeNH3wU9sqKip72eOQ2Jsy99f2759O7p27drsbzePGzcO7du3x6uvvupffO31119HXl4ezjvvvBbnP5kffvgB3bp1Q1xc0+tb+/btkZqa6v/+8/bt29GrV6+wc4S6EvtXX32Ft99+Gx9//HFIMfv06YOysjIcP348pI9/FxQUYPbs2ejQoQN69eqF2267DTfffDNuv/12uN1uDBw4EN988w1mz56N0aNHY9++fcjNzcWYMWPgcrnQqVMnDB06NGDstm3bAqh/wSU3NzdoDbNnz8bvf/97XHvttQCAxx57DEuXLsWcOXMwd+5c/+OmTZuGCy+8EAAwY8YMnHLKKdixYwd69+4dMK6u65g/f77/lxJuvPFGLFmyBA8//DDKysrw2muv4a233vLvR6+++irat2/f7JiVlpYiOTm5wW1nnXUW/vvf//r/3aNHDzz++OP+fxcUFAAAZs6cibFjxwIAKioq8Pzzz2P+/Pm44IILAAAvvfQSFi9ejL/97W/43e9+53/+ic8zC1d3p6hnGAZKS0ulXQBGJJXGRuZezKjtg+8O4v/+8R2qPTrO6dkWn9x1NjpmhPYHsZ1jY2UuK2LLvN+QfLi6e3AqHUuR0Etrawv1+U6nEzfddBPmz5/vX738tddew80332zpb4IbhuH//u/Jam3pOBiGgfHjxyM5ORnJyck45ZRTmjxm06ZNuPTSSzF9+nScf/75IcX0vbPc3ASsY8eOSEpKQvv27VFRUYH33nsPsbGx2LJlC0aOHNngsSNHjsSWLVsAAFdddRWqqqrQtWtXTJ48Gf/+979b9R1pt9uNQ4cOnTSnz4nvILdr1w4AcOTIkaCx8/PzG/yUYbt27fyP37VrFzweT4MXGNLS0kJ6wSUlJQXr1q1r8L+XX365wWMGDRoU8LmDBw/2//fOnTvh8Xga9O5yuTB06NAmvZ/4PLOEs+/ynXRSkmEY8Hg8MAxDiY/hmUmlsZG5l9bWtvFAqf9n1q4dkoeHLz8trEXi7BwbK3NZEVvm/YYokqh0LIXaS4LLie9njrOxsp8mggmu1v0ed8+ePfHll1/C4/E0+276L37xC8yaNQufffYZvF4v9u/fj0mTJrUqfyi11dbWNnkh4NChQ3C73ejZs6f/sVu3bm1Rnnnz5sHj8UDTtCZj8P333+O8887Drbfeij/+8Y8hx9y6dStSU1ObXZjtiy++QGpqKrKzsxtMZJuTl5eHbdu24dNPP8XixYvx61//Gk888QSWL1/e7HZsrRPj+46Lk/3SQON6NE1r0S8TNOZwONC9e/eTPiYpKSms25vT0uedDFd3JyKKYEu3HsH1L3+N2jodAzul48GL+3IVdyIiCWiahsTYGCH/a+0LIT//+c9RXl6O5557LuD9JSUl/v/u1q0bzjnnHLzyyiuYP38+zjvvPHTu3LlV+U/m2muvRXl5OV544YUm982ePRsulwtXXnklgPo+fvjhB3z44YdNHuv7REQwHTp0QPfu3dG9e/cG/WzevBmjR4/GTTfdhIcffjjkuo8cOYJ//vOfuOyyy5r9lEGXLl3QrVu3JhP0Pn36YMWKFQ1uW7FiBfr27ev/d0JCAi6++GI8++yzWLZsGVauXImNGzcGzONyuU76/fjU1FS0b9++2Zxm833V4sTvyZeWltryM24+3bp1839v3cfj8WD16tWW9t4SfCediEgia/YW4dbXv4XHa6BfxzS89ouhSIzlqZqIiFpn2LBhuOeee3D33Xfj4MGDuPzyy9G+fXvs2LED8+bNw5lnnok777zT//hbbrkFkydPBoAmHy1uKa/Xi3Xr1jW4LS4uDsOHD8edd96Je+65B9XV1bjiiitQV1eHN954A8888wzmzJmDvLw8AMDVV1+Nf//737juuuvwxz/+Eeeffz7atm2LjRs34umnn8b//d//4bLLLgu5pk2bNuHcc8/FuHHjMHXqVBQWFgKo/9i/7zveQP0LAIWFhTAMAyUlJVi5ciUeeeQRpKWlYdasWS0ek9/97ne4+uqr0b9/f5xxxhlYtmwZ3n//fXz66acA6ldR93q9GDZsGBITE/HGG28gISEh6Ism+fn5WLJkCUaOHIm4uDhkZGQEzDl9+nR069YNAwYMwKuvvop169bhzTffbHEfzUlJScFNN92E3/3ud8jMzER2djamT58Oh8MR0oKNvu1youzs7LC+gpGUlITbb7/dX0OnTp3w+OOPo7Ky0rJFEVtK+F9+c+fOxRNPPIHCwkL0798ff/nLX4IuhrB582Y8+OCDWLNmDfbu3Yunn3662SX7KTppmobk5OSI//idFVQaG5l7aUltWwvd+OVr9RP00b3aYu71A1s8QbdzbKzMZUVsmfcbokii0rEkey+hLHgWisceewyDBg3C3LlzMW/ePOi6jm7duuFnP/sZbrrppgaPvfLKKzFlyhQ4nU5cccUVpuQvLy/H6aef3uC2bt26YceOHZgzZw5OO+00PP/885g+fTqcTicGDhyIDz74ABdffLH/8Zqm4a233sKLL76IV155BQ8//DBiYmLQo0cPTJw4EePGBf86QqBxfPfdd3H06FG88cYbeOONN/y3d+7cGXv27PH/2+12o127dtA0DampqejVqxcmTpyIO+6446QryjfnsssuwzPPPIPZs2dj//796NKlC1599VWMGjUKQP0icI8++iimTp0Kr9eL0047Df/5z3+Cfrz+ySefxNSpU/HSSy+hQ4cODXrwueOOO1BaWoq7774bR44cQd++fbFgwQL06NGjxX2E4qmnnsJtt92Giy66CKmpqbjnnnuwf/9+xMfHn/R5vrFvrKCg4KQL5AXy6KOPQtd13HjjjSgrK8PgwYPxySefBHwxw2zhnF80Q+AKGW+//TYmTpyIefPmYdiwYZgzZw7eeecdbNu2LeDqiKtXr8a//vUvDBo0CL/97W/x+9//PuxJutvtRlpaGo4dO9bsd0eIiOyy82g5fv7S1zjsrkHPnGT8+9cjkRQn/HVUOgmPx4OFCxdiwoQJln8vkMQZNOghFBSUol27NKxZ85DocshG1dXV2L17N7p06dLsJEI2o0aN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3sP8+fPxzTffoHv37hg3bhyKiooaPO7+++/Hk08+iW+//RYxMTH4xS9+cdK+vvjiC+zcuRNLly7Fa6+9hvnz5zf4mP3EiRNx6NAhLFu2DO+99x5efPHFFn3sP5DZs2ejf//++O677/DAAw8AACorK/HYY4/h5ZdfxubNm5GdnY2bb74Z3377LRYsWICVK1fCMAxMmDChwYsJgZ7XEjt37sQHH3yAjz76CB999BGWL1+ORx991H//rFmz8Pe//x3z5s3D5s2b8dvf/hY33HADli9f3rrBkAAn6UREJliztwi3zF+NKo8XZ/Vog3dvOwPxLp5iiYhUVPL8P7Gn3xXY0+8KVK1o+F1tz95D/vuO3vt0k+cW3HCv//7G3P9Y6L+v/KOWTzSGDRuG+fPnY9GiRXj++eexe/dunHXWWf53IQsLCxEbG9tkoa6cnBwUFhYCAO69917ExMSge/fu+PDDD/Hyyy9j+/bteO211/DAAw/gtttuQ9euXXH11VejtLQ0pLpmzZqF66+/HnfddRd69OiBESNG4Nlnn8Xf//53VFdXhxRj+/btmDdvHgYPHoyUlBTMnj0bv//973HttdeiV69eeOyxxzBgwAD/u8v79u1Djx49cOaZZ6Jz584488wzcd111wWM3bZtWwBAVlYWcnNzkZmZ2eQxFRUVeP755/HEE0/gggsuQN++ffHiiy8iISEBf/vb3xo89uGHH8Y555yDvn374t5778VXX3110j7T09Pxl7/8Bb1798ZFF12ECy+80P+99a1bt+LTTz/FSy+9hGHDhmHgwIF4+eWXUVVV1eyYbdy40f/xet//brvttgaPOffcc3H33XejW7du6NatG4D6T00899xzGDFiBHr16oWDBw9iwYIFePnll3HWWWehf//+ePPNN3Hw4MEGi+81fl5iYmKzNQai6zrmz5+PU089FWeddRZuvPFG/3jU1NTgkUcewSuvvIJx48aha9euuPnmm3HDDTfghRdeaFE+mfAtHiKiVtpS4MavXl+DOt3AuFNy8JfrBiLGAYT25wYREUUavawS3oKjAACjprbhnV7df59eWtb4qfAeL/Hf35hRWf1T3KqWX0V8C6EBQL9+/TBs2DB07twZ//rXv3DLLbeEFCMtLQ1vvfWW/yPoMTExOO+88/DEE0/gzTffxK5du7Bt2zZMnjwZM2fObLKIXCDr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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17986.843343,
   "end_time": "2025-08-01T18:34:50.327809",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-01T13:35:03.484466",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
