{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f997a613",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T05:30:06.391322Z",
     "iopub.status.busy": "2025-08-07T05:30:06.391057Z",
     "iopub.status.idle": "2025-08-07T05:30:07.933184Z",
     "shell.execute_reply": "2025-08-07T05:30:07.932357Z"
    },
    "papermill": {
     "duration": 1.547127,
     "end_time": "2025-08-07T05:30:07.934594",
     "exception": false,
     "start_time": "2025-08-07T05:30:06.387467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "115591ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:30:07.939767Z",
     "iopub.status.busy": "2025-08-07T05:30:07.939429Z",
     "iopub.status.idle": "2025-08-07T05:30:23.667456Z",
     "shell.execute_reply": "2025-08-07T05:30:23.666625Z"
    },
    "papermill": {
     "duration": 15.732003,
     "end_time": "2025-08-07T05:30:23.669000",
     "exception": false,
     "start_time": "2025-08-07T05:30:07.936997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 05:30:09.841320: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754544610.054587      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754544610.120607      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "88a0975f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:30:23.674277Z",
     "iopub.status.busy": "2025-08-07T05:30:23.673824Z",
     "iopub.status.idle": "2025-08-07T05:30:23.678201Z",
     "shell.execute_reply": "2025-08-07T05:30:23.677694Z"
    },
    "papermill": {
     "duration": 0.007944,
     "end_time": "2025-08-07T05:30:23.679157",
     "exception": false,
     "start_time": "2025-08-07T05:30:23.671213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4298af3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:30:23.683977Z",
     "iopub.status.busy": "2025-08-07T05:30:23.683486Z",
     "iopub.status.idle": "2025-08-07T05:30:23.686713Z",
     "shell.execute_reply": "2025-08-07T05:30:23.686168Z"
    },
    "papermill": {
     "duration": 0.006629,
     "end_time": "2025-08-07T05:30:23.687672",
     "exception": false,
     "start_time": "2025-08-07T05:30:23.681043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1c91e9c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:30:23.692420Z",
     "iopub.status.busy": "2025-08-07T05:30:23.692206Z",
     "iopub.status.idle": "2025-08-07T08:16:40.203204Z",
     "shell.execute_reply": "2025-08-07T08:16:40.202411Z"
    },
    "papermill": {
     "duration": 9976.515156,
     "end_time": "2025-08-07T08:16:40.204629",
     "exception": false,
     "start_time": "2025-08-07T05:30:23.689473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754544643.253543      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754544652.877550      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">339,082</span> (1.29 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m339,082\u001b[0m (1.29 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">338,822</span> (1.29 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m338,822\u001b[0m (1.29 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754544667.169628      57 service.cc:148] XLA service 0x7b94fc001d20 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754544667.170589      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754544671.450156      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 191.22356, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 334.8173 - mae: 14.2778 - val_loss: 191.2236 - val_mae: 11.1111 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 191.22356 to 122.16625, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 156.4058 - mae: 10.1368 - val_loss: 122.1663 - val_mae: 8.9766 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 122.16625\n",
      "4375/4375 - 38s - 9ms/step - loss: 192.8437 - mae: 11.0970 - val_loss: 214.8156 - val_mae: 11.6703 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 122.16625\n",
      "4375/4375 - 38s - 9ms/step - loss: 163.5049 - mae: 10.3534 - val_loss: 160.5142 - val_mae: 10.1720 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 122.16625\n",
      "4375/4375 - 38s - 9ms/step - loss: 128.9112 - mae: 9.1682 - val_loss: 144.8831 - val_mae: 9.6293 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 122.16625\n",
      "4375/4375 - 38s - 9ms/step - loss: 158.1546 - mae: 10.0320 - val_loss: 129.7873 - val_mae: 9.2890 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 122.16625 to 100.44292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 118.2360 - mae: 8.7962 - val_loss: 100.4429 - val_mae: 8.1433 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 100.44292 to 75.91095, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 92.8762 - mae: 7.6888 - val_loss: 75.9109 - val_mae: 6.9001 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 75.91095\n",
      "4375/4375 - 39s - 9ms/step - loss: 110.5690 - mae: 8.0538 - val_loss: 78.3850 - val_mae: 6.8304 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 75.91095 to 65.63065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 89.3277 - mae: 7.2320 - val_loss: 65.6307 - val_mae: 6.2267 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 65.63065 to 43.89233, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 54.8040 - mae: 5.6452 - val_loss: 43.8923 - val_mae: 5.1095 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 43.89233\n",
      "4375/4375 - 39s - 9ms/step - loss: 53.5372 - mae: 5.5224 - val_loss: 57.1567 - val_mae: 5.5992 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 43.89233\n",
      "4375/4375 - 38s - 9ms/step - loss: 55.4760 - mae: 5.3817 - val_loss: 54.6511 - val_mae: 5.7414 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 43.89233\n",
      "4375/4375 - 38s - 9ms/step - loss: 42.6614 - mae: 4.9492 - val_loss: 98.1503 - val_mae: 6.5367 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 43.89233\n",
      "4375/4375 - 38s - 9ms/step - loss: 37.5722 - mae: 4.5020 - val_loss: 48.5282 - val_mae: 5.4443 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 43.89233 to 28.60257, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 46.5435 - mae: 5.2083 - val_loss: 28.6026 - val_mae: 4.1439 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 28.60257 to 23.06461, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 25.2939 - mae: 3.7936 - val_loss: 23.0646 - val_mae: 3.5756 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 35.5547 - mae: 4.4335 - val_loss: 28.5229 - val_mae: 4.0553 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 33.5912 - mae: 4.2256 - val_loss: 69.9874 - val_mae: 6.2868 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 52.0478 - mae: 5.4648 - val_loss: 43.6074 - val_mae: 4.9625 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 56.9752 - mae: 5.7144 - val_loss: 122.5002 - val_mae: 8.5289 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 47.8973 - mae: 5.2009 - val_loss: 30.6590 - val_mae: 4.2548 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 43.0495 - mae: 4.8742 - val_loss: 48.5989 - val_mae: 5.0342 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 54.9212 - mae: 5.2654 - val_loss: 100.9287 - val_mae: 7.7311 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 23.06461\n",
      "4375/4375 - 39s - 9ms/step - loss: 53.3272 - mae: 5.3771 - val_loss: 32.4055 - val_mae: 4.1765 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 23.06461\n",
      "4375/4375 - 38s - 9ms/step - loss: 26.3024 - mae: 3.7887 - val_loss: 33.7858 - val_mae: 4.3207 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 23.06461 to 12.43933, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 16.8352 - mae: 3.0132 - val_loss: 12.4393 - val_mae: 2.6142 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 27.5400 - mae: 3.7729 - val_loss: 14.7801 - val_mae: 2.9661 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 25.6484 - mae: 3.5651 - val_loss: 22.8844 - val_mae: 3.6919 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 28.5566 - mae: 3.7303 - val_loss: 31.9857 - val_mae: 4.3159 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 44.9524 - mae: 4.9952 - val_loss: 29.9749 - val_mae: 4.1792 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 87.5995 - mae: 7.1413 - val_loss: 72.7011 - val_mae: 6.7128 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 45.6045 - mae: 5.1507 - val_loss: 45.1552 - val_mae: 5.1181 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 107.2927 - mae: 7.9328 - val_loss: 85.6565 - val_mae: 7.2043 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 12.43933\n",
      "4375/4375 - 39s - 9ms/step - loss: 126.8150 - mae: 8.7201 - val_loss: 94.0142 - val_mae: 7.5868 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 142.9667 - mae: 9.4445 - val_loss: 105.7870 - val_mae: 8.1793 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 132.9492 - mae: 9.2427 - val_loss: 104.4794 - val_mae: 8.1419 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 113.9096 - mae: 8.3814 - val_loss: 103.1803 - val_mae: 7.8682 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 100.2139 - mae: 7.8145 - val_loss: 124.0706 - val_mae: 8.6260 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 80.0425 - mae: 6.9038 - val_loss: 63.7242 - val_mae: 6.1613 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 105.7004 - mae: 7.9361 - val_loss: 104.6365 - val_mae: 7.9677 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 106.0339 - mae: 8.0539 - val_loss: 126.4889 - val_mae: 8.6988 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 109.9008 - mae: 8.1396 - val_loss: 116.7465 - val_mae: 8.4942 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 127.7008 - mae: 8.7717 - val_loss: 163.7751 - val_mae: 9.9579 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 141.1779 - mae: 9.5560 - val_loss: 171.2360 - val_mae: 10.6553 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 115.3959 - mae: 8.5840 - val_loss: 136.4330 - val_mae: 9.1138 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 47: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 105.4868 - mae: 8.1470 - val_loss: 123.6184 - val_mae: 8.8892 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 80.5810 - mae: 6.9618 - val_loss: 73.7848 - val_mae: 6.5544 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 64.2999 - mae: 6.1799 - val_loss: 58.0659 - val_mae: 5.8671 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 55.6099 - mae: 5.7082 - val_loss: 52.7103 - val_mae: 5.5561 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 51.1371 - mae: 5.4727 - val_loss: 48.7902 - val_mae: 5.3203 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 45.4582 - mae: 5.1431 - val_loss: 43.0549 - val_mae: 5.0088 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 39.2188 - mae: 4.7694 - val_loss: 35.9775 - val_mae: 4.5602 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 32.9496 - mae: 4.3426 - val_loss: 31.5325 - val_mae: 4.2369 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 28.5399 - mae: 4.0312 - val_loss: 27.0154 - val_mae: 3.8737 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 24.9882 - mae: 3.7636 - val_loss: 26.9630 - val_mae: 3.7670 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 21.3550 - mae: 3.4598 - val_loss: 22.2222 - val_mae: 3.4365 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 18.2617 - mae: 3.1895 - val_loss: 20.3881 - val_mae: 3.3883 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 15.4550 - mae: 2.9359 - val_loss: 14.9021 - val_mae: 2.8029 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 12.43933\n",
      "4375/4375 - 38s - 9ms/step - loss: 13.3907 - mae: 2.7316 - val_loss: 12.8573 - val_mae: 2.6297 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 12.43933 to 12.00336, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 11.7685 - mae: 2.5569 - val_loss: 12.0034 - val_mae: 2.5274 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 12.00336 to 10.00728, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 9.9359 - mae: 2.3446 - val_loss: 10.0073 - val_mae: 2.2734 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 10.00728\n",
      "4375/4375 - 38s - 9ms/step - loss: 8.6755 - mae: 2.1959 - val_loss: 10.7714 - val_mae: 2.3377 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 10.00728 to 8.74292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 7.6883 - mae: 2.0601 - val_loss: 8.7429 - val_mae: 2.0894 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 8.74292\n",
      "4375/4375 - 38s - 9ms/step - loss: 6.8576 - mae: 1.9365 - val_loss: 9.1915 - val_mae: 2.1127 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 8.74292 to 5.95652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 6.1482 - mae: 1.8460 - val_loss: 5.9565 - val_mae: 1.7783 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 5.95652 to 5.67881, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 5.3988 - mae: 1.7259 - val_loss: 5.6788 - val_mae: 1.6770 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 5.67881 to 5.06910, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 4.6983 - mae: 1.6084 - val_loss: 5.0691 - val_mae: 1.5620 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 5.06910 to 4.67845, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 4.0739 - mae: 1.5083 - val_loss: 4.6784 - val_mae: 1.4841 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 4.67845 to 3.77158, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 3.5140 - mae: 1.3977 - val_loss: 3.7716 - val_mae: 1.3650 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 3.77158 to 3.50989, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 3.1809 - mae: 1.3309 - val_loss: 3.5099 - val_mae: 1.3363 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 3.50989\n",
      "4375/4375 - 38s - 9ms/step - loss: 2.8131 - mae: 1.2487 - val_loss: 4.6189 - val_mae: 1.4298 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 3.50989 to 2.81739, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 2.4074 - mae: 1.1549 - val_loss: 2.8174 - val_mae: 1.1768 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 2.81739\n",
      "4375/4375 - 38s - 9ms/step - loss: 2.3295 - mae: 1.1286 - val_loss: 2.8477 - val_mae: 1.1022 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 2.81739 to 2.34249, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 1.8003 - mae: 1.0075 - val_loss: 2.3425 - val_mae: 1.1180 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 2.34249 to 2.33783, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 1.7523 - mae: 0.9805 - val_loss: 2.3378 - val_mae: 1.0632 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 2.33783 to 1.60446, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 1.4639 - mae: 0.9090 - val_loss: 1.6045 - val_mae: 0.9128 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 1.60446\n",
      "4375/4375 - 38s - 9ms/step - loss: 1.2793 - mae: 0.8470 - val_loss: 2.2865 - val_mae: 1.0344 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 1.60446\n",
      "4375/4375 - 38s - 9ms/step - loss: 1.1511 - mae: 0.7985 - val_loss: 1.6999 - val_mae: 0.7789 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 1.60446 to 1.38159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.9780 - mae: 0.7452 - val_loss: 1.3816 - val_mae: 0.7655 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 1.38159 to 1.35206, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.9860 - mae: 0.7256 - val_loss: 1.3521 - val_mae: 0.6973 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 1.35206\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.7847 - mae: 0.6694 - val_loss: 1.4021 - val_mae: 0.7476 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 1.35206 to 1.13111, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.7378 - mae: 0.6471 - val_loss: 1.1311 - val_mae: 0.6391 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 1.13111 to 1.08752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.7087 - mae: 0.6309 - val_loss: 1.0875 - val_mae: 0.6649 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 1.08752 to 1.06932, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.5971 - mae: 0.5882 - val_loss: 1.0693 - val_mae: 0.6182 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 1.06932 to 0.81603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.6812 - mae: 0.6049 - val_loss: 0.8160 - val_mae: 0.5567 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.81603\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.6137 - mae: 0.5639 - val_loss: 0.8415 - val_mae: 0.6397 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.81603 to 0.51381, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.4899 - mae: 0.5319 - val_loss: 0.5138 - val_mae: 0.5068 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.51381 to 0.49484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.4426 - mae: 0.5065 - val_loss: 0.4948 - val_mae: 0.4868 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.4389 - mae: 0.4984 - val_loss: 0.6287 - val_mae: 0.4693 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.3610 - mae: 0.4583 - val_loss: 1.5788 - val_mae: 0.4764 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.4209 - mae: 0.4712 - val_loss: 2.1277 - val_mae: 0.4798 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2992 - mae: 0.4221 - val_loss: 2.6101 - val_mae: 0.4785 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.49484\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.2985 - mae: 0.4198 - val_loss: 1.9938 - val_mae: 0.5038 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2764 - mae: 0.4054 - val_loss: 1.3633 - val_mae: 0.5061 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.5620 - mae: 0.4751 - val_loss: 0.7436 - val_mae: 0.4401 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2998 - mae: 0.4150 - val_loss: 0.7992 - val_mae: 0.4028 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2696 - mae: 0.3973 - val_loss: 0.4959 - val_mae: 0.4063 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2564 - mae: 0.3861 - val_loss: 1.0149 - val_mae: 0.4554 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2482 - mae: 0.3793 - val_loss: 0.6064 - val_mae: 0.4188 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.4786 - mae: 0.4533 - val_loss: 0.8442 - val_mae: 0.3967 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2008 - mae: 0.3473 - val_loss: 0.5347 - val_mae: 0.3594 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.49484\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.2088 - mae: 0.3521 - val_loss: 0.8794 - val_mae: 0.3618 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.49484 to 0.37537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1877 - mae: 0.3353 - val_loss: 0.3754 - val_mae: 0.3452 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.37537 to 0.35581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1797 - mae: 0.3286 - val_loss: 0.3558 - val_mae: 0.3154 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.35581\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1655 - mae: 0.3142 - val_loss: 0.5860 - val_mae: 0.3824 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.35581\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1596 - mae: 0.3091 - val_loss: 1.2792 - val_mae: 0.3306 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.35581 to 0.28105, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1524 - mae: 0.3030 - val_loss: 0.2810 - val_mae: 0.2909 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.28105 to 0.18904, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1544 - mae: 0.3012 - val_loss: 0.1890 - val_mae: 0.3020 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.18904\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1345 - mae: 0.2845 - val_loss: 0.2678 - val_mae: 0.3146 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.18904\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1358 - mae: 0.2854 - val_loss: 0.6061 - val_mae: 0.2891 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.18904\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1963 - mae: 0.3088 - val_loss: 0.1971 - val_mae: 0.2804 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.18904 to 0.16208, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1396 - mae: 0.2791 - val_loss: 0.1621 - val_mae: 0.2797 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.16208 to 0.12155, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1494 - mae: 0.2843 - val_loss: 0.1216 - val_mae: 0.2566 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.12155\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1174 - mae: 0.2660 - val_loss: 0.2943 - val_mae: 0.3839 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.12155\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1263 - mae: 0.2700 - val_loss: 0.1647 - val_mae: 0.2727 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.12155\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1612 - mae: 0.2748 - val_loss: 0.1734 - val_mae: 0.2603 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.12155\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1013 - mae: 0.2486 - val_loss: 0.1589 - val_mae: 0.2780 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.12155\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1999 - mae: 0.2868 - val_loss: 0.5362 - val_mae: 0.4916 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.12155 to 0.10562, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1183 - mae: 0.2615 - val_loss: 0.1056 - val_mae: 0.2444 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.10562\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1004 - mae: 0.2469 - val_loss: 0.2049 - val_mae: 0.2921 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.10562 to 0.10416, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1113 - mae: 0.2562 - val_loss: 0.1042 - val_mae: 0.2420 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.10416\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0996 - mae: 0.2454 - val_loss: 0.1278 - val_mae: 0.2756 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.10416\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1029 - mae: 0.2460 - val_loss: 0.1128 - val_mae: 0.2617 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.10416 to 0.09595, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0987 - mae: 0.2433 - val_loss: 0.0960 - val_mae: 0.2364 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.09595\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0972 - mae: 0.2414 - val_loss: 0.4894 - val_mae: 0.2667 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.09595\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1038 - mae: 0.2439 - val_loss: 0.1524 - val_mae: 0.2334 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.09595 to 0.09014, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0926 - mae: 0.2354 - val_loss: 0.0901 - val_mae: 0.2302 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.09014\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0892 - mae: 0.2322 - val_loss: 1.0437 - val_mae: 0.2975 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.09014\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0922 - mae: 0.2336 - val_loss: 0.1046 - val_mae: 0.2377 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.09014\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0869 - mae: 0.2283 - val_loss: 0.2159 - val_mae: 0.2519 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.09014\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1294 - mae: 0.2353 - val_loss: 0.8072 - val_mae: 0.2589 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.09014 to 0.08843, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0940 - mae: 0.2226 - val_loss: 0.0884 - val_mae: 0.2070 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.08843 to 0.08809, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0788 - mae: 0.2187 - val_loss: 0.0881 - val_mae: 0.2067 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.08809\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0815 - mae: 0.2221 - val_loss: 0.1275 - val_mae: 0.2286 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.08809\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0819 - mae: 0.2215 - val_loss: 0.1096 - val_mae: 0.2409 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.08809\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0791 - mae: 0.2170 - val_loss: 0.9421 - val_mae: 0.3289 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.08809\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1946 - mae: 0.2628 - val_loss: 0.0905 - val_mae: 0.2111 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.08809\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0696 - mae: 0.2062 - val_loss: 0.1374 - val_mae: 0.2284 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.08809\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0781 - mae: 0.2171 - val_loss: 0.1281 - val_mae: 0.2672 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.08809 to 0.08484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0745 - mae: 0.2124 - val_loss: 0.0848 - val_mae: 0.2211 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.08484 to 0.07429, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0731 - mae: 0.2106 - val_loss: 0.0743 - val_mae: 0.2133 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.07429 to 0.07278, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.1081 - mae: 0.2354 - val_loss: 0.0728 - val_mae: 0.1922 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.07278\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0718 - mae: 0.2087 - val_loss: 0.1284 - val_mae: 0.2812 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.07278\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0870 - mae: 0.2210 - val_loss: 0.1130 - val_mae: 0.2509 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.07278 to 0.07066, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0662 - mae: 0.1993 - val_loss: 0.0707 - val_mae: 0.2061 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.07066\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0690 - mae: 0.2047 - val_loss: 0.0965 - val_mae: 0.2409 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.07066\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0675 - mae: 0.2029 - val_loss: 0.0844 - val_mae: 0.2168 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.07066\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0760 - mae: 0.2079 - val_loss: 0.1839 - val_mae: 0.2052 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.07066 to 0.06479, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0646 - mae: 0.1948 - val_loss: 0.0648 - val_mae: 0.1933 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.06479\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0643 - mae: 0.1983 - val_loss: 0.1441 - val_mae: 0.2372 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.06479\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0655 - mae: 0.1985 - val_loss: 0.0649 - val_mae: 0.1777 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.06479 to 0.05669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0831 - mae: 0.2049 - val_loss: 0.0567 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.05669\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0624 - mae: 0.1946 - val_loss: 0.1231 - val_mae: 0.2516 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.05669\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0638 - mae: 0.1955 - val_loss: 0.1312 - val_mae: 0.2161 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.05669\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0609 - mae: 0.1929 - val_loss: 0.0765 - val_mae: 0.2160 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.05669 to 0.05498, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0642 - mae: 0.1950 - val_loss: 0.0550 - val_mae: 0.1732 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.05498\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0608 - mae: 0.1918 - val_loss: 0.0571 - val_mae: 0.1867 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.05498 to 0.05406, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1845 - mae: 0.2487 - val_loss: 0.0541 - val_mae: 0.1813 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0535 - mae: 0.1811 - val_loss: 0.0835 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0609 - mae: 0.1926 - val_loss: 0.0699 - val_mae: 0.2033 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0709 - mae: 0.1938 - val_loss: 0.0715 - val_mae: 0.2033 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0662 - mae: 0.1928 - val_loss: 0.0802 - val_mae: 0.2234 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0603 - mae: 0.1919 - val_loss: 0.0924 - val_mae: 0.2368 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0642 - mae: 0.1914 - val_loss: 0.0567 - val_mae: 0.1797 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0579 - mae: 0.1873 - val_loss: 0.0692 - val_mae: 0.2043 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.05406\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0591 - mae: 0.1889 - val_loss: 0.0620 - val_mae: 0.1935 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.05406 to 0.04811, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0581 - mae: 0.1875 - val_loss: 0.0481 - val_mae: 0.1710 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0577 - mae: 0.1868 - val_loss: 0.0526 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0551 - mae: 0.1830 - val_loss: 0.0697 - val_mae: 0.2067 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0569 - mae: 0.1851 - val_loss: 0.0621 - val_mae: 0.1898 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0598 - mae: 0.1851 - val_loss: 0.0549 - val_mae: 0.1826 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0561 - mae: 0.1836 - val_loss: 0.1073 - val_mae: 0.2509 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0547 - mae: 0.1819 - val_loss: 0.0545 - val_mae: 0.1817 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0534 - mae: 0.1800 - val_loss: 0.0806 - val_mae: 0.2213 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0546 - mae: 0.1808 - val_loss: 0.0483 - val_mae: 0.1671 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0518 - mae: 0.1774 - val_loss: 0.0655 - val_mae: 0.1965 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.04811\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0533 - mae: 0.1792 - val_loss: 0.0492 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.04811 to 0.04213, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0508 - mae: 0.1758 - val_loss: 0.0421 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0533 - mae: 0.1782 - val_loss: 0.0531 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0513 - mae: 0.1755 - val_loss: 0.0656 - val_mae: 0.1774 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0511 - mae: 0.1757 - val_loss: 0.0510 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.04213\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.1072 - mae: 0.2007 - val_loss: 0.0429 - val_mae: 0.1580 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.04213\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0467 - mae: 0.1680 - val_loss: 0.0493 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0519 - mae: 0.1760 - val_loss: 0.0602 - val_mae: 0.1882 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0538 - mae: 0.1768 - val_loss: 0.0574 - val_mae: 0.1885 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0503 - mae: 0.1747 - val_loss: 0.0661 - val_mae: 0.1977 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0499 - mae: 0.1740 - val_loss: 0.0554 - val_mae: 0.1802 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0515 - mae: 0.1756 - val_loss: 0.0610 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0860 - mae: 0.1962 - val_loss: 0.0452 - val_mae: 0.1663 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0473 - mae: 0.1694 - val_loss: 0.0592 - val_mae: 0.1865 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0512 - mae: 0.1764 - val_loss: 0.0536 - val_mae: 0.1798 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0489 - mae: 0.1727 - val_loss: 0.0654 - val_mae: 0.1993 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0743 - mae: 0.1904 - val_loss: 0.0491 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0471 - mae: 0.1689 - val_loss: 0.0657 - val_mae: 0.1894 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0492 - mae: 0.1729 - val_loss: 0.0582 - val_mae: 0.1836 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0502 - mae: 0.1735 - val_loss: 0.0813 - val_mae: 0.1839 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0482 - mae: 0.1707 - val_loss: 0.0441 - val_mae: 0.1635 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.04213\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0476 - mae: 0.1700 - val_loss: 0.0475 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.04213 to 0.01718, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0136 - mae: 0.0912 - val_loss: 0.0172 - val_mae: 0.0985 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01718\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0174 - val_mae: 0.0972 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01718\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0104 - mae: 0.0804 - val_loss: 0.0178 - val_mae: 0.0972 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.01718 to 0.01644, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0099 - mae: 0.0783 - val_loss: 0.0164 - val_mae: 0.0942 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01644\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0095 - mae: 0.0770 - val_loss: 0.0168 - val_mae: 0.0950 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.01644 to 0.01570, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0092 - mae: 0.0758 - val_loss: 0.0157 - val_mae: 0.0928 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0090 - mae: 0.0748 - val_loss: 0.0162 - val_mae: 0.0938 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0088 - mae: 0.0740 - val_loss: 0.0171 - val_mae: 0.0931 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0086 - mae: 0.0732 - val_loss: 0.0162 - val_mae: 0.0914 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01570\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0177 - val_mae: 0.0935 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01570\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0083 - mae: 0.0718 - val_loss: 0.0181 - val_mae: 0.0920 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01570\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0081 - mae: 0.0714 - val_loss: 0.0223 - val_mae: 0.0930 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0080 - mae: 0.0709 - val_loss: 0.0183 - val_mae: 0.0926 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0079 - mae: 0.0703 - val_loss: 0.0231 - val_mae: 0.0945 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0078 - mae: 0.0698 - val_loss: 0.0231 - val_mae: 0.0942 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0253 - val_mae: 0.0942 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0211 - val_mae: 0.0923 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0214 - val_mae: 0.0919 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0250 - val_mae: 0.0933 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01570\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0073 - mae: 0.0677 - val_loss: 0.0229 - val_mae: 0.0911 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01570\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.0946 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0072 - mae: 0.0669 - val_loss: 0.0267 - val_mae: 0.0924 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01570\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0229 - val_mae: 0.0904 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0070 - mae: 0.0664 - val_loss: 0.0260 - val_mae: 0.0939 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0070 - mae: 0.0659 - val_loss: 0.0238 - val_mae: 0.0922 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0069 - mae: 0.0659 - val_loss: 0.0226 - val_mae: 0.0904 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0217 - val_mae: 0.0862 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0053 - mae: 0.0573 - val_loss: 0.0219 - val_mae: 0.0859 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0214 - val_mae: 0.0861 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0222 - val_mae: 0.0865 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0223 - val_mae: 0.0860 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0246 - val_mae: 0.0868 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0218 - val_mae: 0.0857 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0567 - val_loss: 0.0219 - val_mae: 0.0861 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0566 - val_loss: 0.0230 - val_mae: 0.0861 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0565 - val_loss: 0.0212 - val_mae: 0.0855 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0565 - val_loss: 0.0225 - val_mae: 0.0864 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0564 - val_loss: 0.0224 - val_mae: 0.0861 - learning_rate: 1.0000e-05\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0564 - val_loss: 0.0197 - val_mae: 0.0852 - learning_rate: 1.0000e-05\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0563 - val_loss: 0.0246 - val_mae: 0.0868 - learning_rate: 1.0000e-05\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0563 - val_loss: 0.0225 - val_mae: 0.0861 - learning_rate: 1.0000e-05\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0562 - val_loss: 0.0223 - val_mae: 0.0861 - learning_rate: 1.0000e-05\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0051 - mae: 0.0562 - val_loss: 0.0239 - val_mae: 0.0864 - learning_rate: 1.0000e-05\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01570\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0050 - mae: 0.0561 - val_loss: 0.0256 - val_mae: 0.0868 - learning_rate: 1.0000e-05\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01570\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0050 - mae: 0.0561 - val_loss: 0.0260 - val_mae: 0.0867 - learning_rate: 1.0000e-05\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01570\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0050 - mae: 0.0561 - val_loss: 0.0215 - val_mae: 0.0858 - learning_rate: 1.0000e-05\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0552 - val_loss: 0.0275 - val_mae: 0.0867 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0212 - val_mae: 0.0852 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0256 - val_mae: 0.0862 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01570\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0246 - val_mae: 0.0862 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0222 - val_mae: 0.0856 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0231 - val_mae: 0.0854 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0220 - val_mae: 0.0854 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0249 - val_mae: 0.0860 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0244 - val_mae: 0.0859 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01570\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0049 - mae: 0.0550 - val_loss: 0.0215 - val_mae: 0.0851 - learning_rate: 1.0000e-06\n",
      "Epoch 255: early stopping\n",
      "Restoring model weights from the end of the best epoch: 205.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1462 m\n",
      "Median positioning error: 0.1307 m\n",
      "90th percentile error: 0.2569 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10001.969226,
   "end_time": "2025-08-07T08:16:43.908676",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T05:30:01.939450",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
