{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4c0d4fae",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:37.412079Z",
     "iopub.status.busy": "2025-07-30T18:21:37.411820Z",
     "iopub.status.idle": "2025-07-30T18:21:38.853055Z",
     "shell.execute_reply": "2025-07-30T18:21:38.852060Z"
    },
    "papermill": {
     "duration": 1.446107,
     "end_time": "2025-07-30T18:21:38.854378",
     "exception": false,
     "start_time": "2025-07-30T18:21:37.408271",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "829f7485",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:38.860038Z",
     "iopub.status.busy": "2025-07-30T18:21:38.859670Z",
     "iopub.status.idle": "2025-07-30T18:21:53.584434Z",
     "shell.execute_reply": "2025-07-30T18:21:53.583763Z"
    },
    "papermill": {
     "duration": 14.729054,
     "end_time": "2025-07-30T18:21:53.586112",
     "exception": false,
     "start_time": "2025-07-30T18:21:38.857058",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-30 18:21:40.530711: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753899700.734522      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753899700.791002      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13a1edad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:53.591608Z",
     "iopub.status.busy": "2025-07-30T18:21:53.591169Z",
     "iopub.status.idle": "2025-07-30T18:21:53.595705Z",
     "shell.execute_reply": "2025-07-30T18:21:53.595122Z"
    },
    "papermill": {
     "duration": 0.008453,
     "end_time": "2025-07-30T18:21:53.596869",
     "exception": false,
     "start_time": "2025-07-30T18:21:53.588416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 11   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e817ccdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:53.601437Z",
     "iopub.status.busy": "2025-07-30T18:21:53.601226Z",
     "iopub.status.idle": "2025-07-30T18:21:53.604266Z",
     "shell.execute_reply": "2025-07-30T18:21:53.603771Z"
    },
    "papermill": {
     "duration": 0.006391,
     "end_time": "2025-07-30T18:21:53.605250",
     "exception": false,
     "start_time": "2025-07-30T18:21:53.598859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "24814a68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:53.610325Z",
     "iopub.status.busy": "2025-07-30T18:21:53.610138Z",
     "iopub.status.idle": "2025-07-30T20:12:01.194931Z",
     "shell.execute_reply": "2025-07-30T20:12:01.194217Z"
    },
    "papermill": {
     "duration": 6607.589071,
     "end_time": "2025-07-30T20:12:01.196170",
     "exception": false,
     "start_time": "2025-07-30T18:21:53.607099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753899736.648785      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753899746.028214      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">50,816</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">246</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,488</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m50,816\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m246\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,488\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">215,562</span> (842.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m215,562\u001b[0m (842.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">215,302</span> (841.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m215,302\u001b[0m (841.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753899757.121552      57 service.cc:148] XLA service 0x7eb830006ca0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753899757.122408      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753899760.589906      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 11.30186, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 121.0065 - mae: 7.2385 - val_loss: 11.3019 - val_mae: 2.5945 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 11.30186 to 4.39420, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 5.8146 - mae: 1.8476 - val_loss: 4.3942 - val_mae: 1.6510 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 4.39420 to 1.63199, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.7178 - mae: 1.4145 - val_loss: 1.6320 - val_mae: 0.9608 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 1.63199\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.4983 - mae: 1.1165 - val_loss: 2.2053 - val_mae: 1.1797 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.63199 to 0.65333, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6411 - mae: 0.8950 - val_loss: 0.6533 - val_mae: 0.6327 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 0.65333 to 0.55664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.6261 - mae: 1.0159 - val_loss: 0.5566 - val_mae: 0.5827 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.55664\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.3975 - mae: 0.9482 - val_loss: 0.7927 - val_mae: 0.6979 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.55664\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8416 - mae: 0.6978 - val_loss: 0.7409 - val_mae: 0.6686 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.55664\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7369 - mae: 0.8557 - val_loss: 0.6405 - val_mae: 0.6324 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.55664 to 0.47447, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9428 - mae: 0.6820 - val_loss: 0.4745 - val_mae: 0.5435 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.47447\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.2319 - mae: 0.8476 - val_loss: 0.9563 - val_mae: 0.7493 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.47447\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6580 - mae: 0.6243 - val_loss: 0.5709 - val_mae: 0.5975 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.47447 to 0.43706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5317 - mae: 0.7510 - val_loss: 0.4371 - val_mae: 0.5116 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.43706\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5848 - mae: 0.5778 - val_loss: 0.5634 - val_mae: 0.5923 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.43706 to 0.43572, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9794 - mae: 0.6544 - val_loss: 0.4357 - val_mae: 0.5120 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.43572\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4284 - mae: 0.5065 - val_loss: 0.7651 - val_mae: 0.7012 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.43572 to 0.38952, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1265 - mae: 0.6531 - val_loss: 0.3895 - val_mae: 0.4924 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8878 - mae: 0.5920 - val_loss: 0.7272 - val_mae: 0.6623 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7169 - mae: 0.8792 - val_loss: 0.6300 - val_mae: 0.6116 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8246 - mae: 0.6459 - val_loss: 0.5092 - val_mae: 0.5576 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.2513 - mae: 0.8936 - val_loss: 0.8955 - val_mae: 0.7269 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4577 - mae: 0.8717 - val_loss: 1.9961 - val_mae: 1.0963 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7697 - mae: 0.8972 - val_loss: 0.7965 - val_mae: 0.6926 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4542 - mae: 0.8583 - val_loss: 0.7740 - val_mae: 0.6763 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1515 - mae: 0.7650 - val_loss: 1.4950 - val_mae: 0.8303 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9081 - mae: 0.6963 - val_loss: 0.8848 - val_mae: 0.7299 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9697 - mae: 0.6473 - val_loss: 0.4626 - val_mae: 0.5280 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.2780 - mae: 0.7882 - val_loss: 1.6400 - val_mae: 0.9577 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.38952\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8579 - mae: 0.7095 - val_loss: 0.8005 - val_mae: 0.6680 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 0.38952 to 0.38649, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5679 - mae: 0.5777 - val_loss: 0.3865 - val_mae: 0.4815 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.38649\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8234 - mae: 0.7560 - val_loss: 0.8328 - val_mae: 0.7077 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss improved from 0.38649 to 0.29662, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4685 - mae: 0.5276 - val_loss: 0.2966 - val_mae: 0.4305 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9851 - mae: 0.6431 - val_loss: 0.4187 - val_mae: 0.4972 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7096 - mae: 0.5653 - val_loss: 0.4041 - val_mae: 0.4941 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3593 - mae: 0.4675 - val_loss: 0.3563 - val_mae: 0.4626 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5595 - mae: 0.7659 - val_loss: 0.6276 - val_mae: 0.6047 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4652 - mae: 0.5183 - val_loss: 0.2985 - val_mae: 0.4296 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7091 - mae: 0.5539 - val_loss: 0.3052 - val_mae: 0.4342 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1274 - mae: 0.6211 - val_loss: 0.4119 - val_mae: 0.4999 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9223 - mae: 0.5970 - val_loss: 1.0637 - val_mae: 0.7678 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7718 - mae: 0.6337 - val_loss: 0.7622 - val_mae: 0.6764 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3923 - mae: 0.4859 - val_loss: 0.4021 - val_mae: 0.4949 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9459 - mae: 0.6701 - val_loss: 0.4270 - val_mae: 0.5115 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3649 - mae: 0.4705 - val_loss: 0.3499 - val_mae: 0.4434 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0077 - mae: 0.6203 - val_loss: 0.3214 - val_mae: 0.4324 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7769 - mae: 0.7778 - val_loss: 0.7449 - val_mae: 0.6657 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0071 - mae: 0.6374 - val_loss: 2.4450 - val_mae: 1.1711 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7501 - mae: 0.6185 - val_loss: 0.4149 - val_mae: 0.4900 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3137 - mae: 0.6787 - val_loss: 0.8349 - val_mae: 0.6509 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5053 - mae: 0.5306 - val_loss: 0.3342 - val_mae: 0.4509 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.29662\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8782 - mae: 0.6057 - val_loss: 0.4920 - val_mae: 0.5469 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.29662 to 0.29390, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7415 - mae: 0.5941 - val_loss: 0.2939 - val_mae: 0.4258 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9886 - mae: 0.6186 - val_loss: 0.7775 - val_mae: 0.6841 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4674 - mae: 0.5262 - val_loss: 0.3728 - val_mae: 0.4771 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4969 - mae: 0.7278 - val_loss: 0.5161 - val_mae: 0.5612 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4219 - mae: 0.5059 - val_loss: 0.5282 - val_mae: 0.5626 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.4299 - mae: 0.9058 - val_loss: 0.6780 - val_mae: 0.6406 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9454 - mae: 0.6940 - val_loss: 0.4791 - val_mae: 0.5430 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1914 - mae: 0.6125 - val_loss: 1.7181 - val_mae: 0.9707 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4930 - mae: 0.5306 - val_loss: 0.3197 - val_mae: 0.4446 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5860 - mae: 0.7269 - val_loss: 0.5608 - val_mae: 0.5824 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4325 - mae: 0.5085 - val_loss: 0.3774 - val_mae: 0.4760 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9227 - mae: 0.6100 - val_loss: 0.4317 - val_mae: 0.5288 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0923 - mae: 0.6262 - val_loss: 0.3486 - val_mae: 0.4641 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1143 - mae: 0.6490 - val_loss: 0.5291 - val_mae: 0.5639 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3488 - mae: 0.4595 - val_loss: 0.4219 - val_mae: 0.4996 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.29390\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8723 - mae: 0.7987 - val_loss: 0.4691 - val_mae: 0.5326 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.29390 to 0.24136, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3694 - mae: 0.4746 - val_loss: 0.2414 - val_mae: 0.3862 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6506 - mae: 0.7946 - val_loss: 0.4744 - val_mae: 0.5320 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3979 - mae: 0.4911 - val_loss: 0.4311 - val_mae: 0.5059 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6590 - mae: 0.5454 - val_loss: 0.3916 - val_mae: 0.4866 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8498 - mae: 0.5717 - val_loss: 0.6430 - val_mae: 0.6081 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3580 - mae: 0.4634 - val_loss: 0.2524 - val_mae: 0.3939 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3332 - mae: 0.6691 - val_loss: 0.4407 - val_mae: 0.5214 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3788 - mae: 0.4766 - val_loss: 0.2790 - val_mae: 0.4124 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7912 - mae: 0.5727 - val_loss: 0.3109 - val_mae: 0.4371 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3496 - mae: 0.4442 - val_loss: 0.3524 - val_mae: 0.4539 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2382 - mae: 0.6761 - val_loss: 0.5249 - val_mae: 0.5659 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3457 - mae: 0.4587 - val_loss: 0.3086 - val_mae: 0.4332 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2806 - mae: 0.7008 - val_loss: 0.7423 - val_mae: 0.6633 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3661 - mae: 0.4678 - val_loss: 0.3470 - val_mae: 0.4613 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5031 - mae: 0.4901 - val_loss: 7.9486 - val_mae: 1.8483 - learning_rate: 0.0100\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4679 - mae: 0.7630 - val_loss: 0.3922 - val_mae: 0.4885 - learning_rate: 0.0100\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3238 - mae: 0.4433 - val_loss: 0.3568 - val_mae: 0.4599 - learning_rate: 0.0100\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0060 - mae: 0.6342 - val_loss: 0.4143 - val_mae: 0.5012 - learning_rate: 0.0100\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4087 - mae: 0.4933 - val_loss: 0.4240 - val_mae: 0.5072 - learning_rate: 0.0100\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0891 - mae: 0.6578 - val_loss: 0.4659 - val_mae: 0.5330 - learning_rate: 0.0100\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.24136\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3768 - mae: 0.4761 - val_loss: 0.3946 - val_mae: 0.5002 - learning_rate: 0.0100\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.24136 to 0.10734, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1198 - mae: 0.2706 - val_loss: 0.1073 - val_mae: 0.2575 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.10734 to 0.09625, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0902 - mae: 0.2358 - val_loss: 0.0962 - val_mae: 0.2435 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.09625 to 0.07513, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0752 - mae: 0.2155 - val_loss: 0.0751 - val_mae: 0.2154 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.07513 to 0.06839, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0668 - mae: 0.2030 - val_loss: 0.0684 - val_mae: 0.2043 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.06839 to 0.05862, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0599 - mae: 0.1924 - val_loss: 0.0586 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.05862 to 0.05577, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0546 - mae: 0.1839 - val_loss: 0.0558 - val_mae: 0.1857 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.05577 to 0.05354, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0503 - mae: 0.1764 - val_loss: 0.0535 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.05354 to 0.04981, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0471 - mae: 0.1709 - val_loss: 0.0498 - val_mae: 0.1745 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04981\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0445 - mae: 0.1660 - val_loss: 0.0591 - val_mae: 0.1927 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.04981 to 0.04659, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0422 - mae: 0.1620 - val_loss: 0.0466 - val_mae: 0.1680 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04659\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0403 - mae: 0.1583 - val_loss: 0.0472 - val_mae: 0.1710 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04659\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0384 - mae: 0.1543 - val_loss: 0.0488 - val_mae: 0.1739 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.04659 to 0.04049, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0367 - mae: 0.1510 - val_loss: 0.0405 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.04049\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0353 - mae: 0.1480 - val_loss: 0.0420 - val_mae: 0.1609 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04049\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0343 - mae: 0.1459 - val_loss: 0.0431 - val_mae: 0.1611 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04049\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0335 - mae: 0.1442 - val_loss: 0.0413 - val_mae: 0.1584 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.04049 to 0.03884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0326 - mae: 0.1425 - val_loss: 0.0388 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.03884 to 0.03713, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0317 - mae: 0.1404 - val_loss: 0.0371 - val_mae: 0.1503 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.03713 to 0.03613, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0305 - mae: 0.1380 - val_loss: 0.0361 - val_mae: 0.1487 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03613\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0297 - mae: 0.1358 - val_loss: 0.0395 - val_mae: 0.1548 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03613\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0292 - mae: 0.1348 - val_loss: 0.0422 - val_mae: 0.1620 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.03613 to 0.03373, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0290 - mae: 0.1341 - val_loss: 0.0337 - val_mae: 0.1431 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03373\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0283 - mae: 0.1328 - val_loss: 0.0368 - val_mae: 0.1499 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03373\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0277 - mae: 0.1313 - val_loss: 0.0351 - val_mae: 0.1463 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03373\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0272 - mae: 0.1302 - val_loss: 0.0402 - val_mae: 0.1572 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03373\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0269 - mae: 0.1293 - val_loss: 0.0339 - val_mae: 0.1434 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03373\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0264 - mae: 0.1279 - val_loss: 0.0346 - val_mae: 0.1446 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.03373 to 0.03225, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1271 - val_loss: 0.0322 - val_mae: 0.1397 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.03225 to 0.03166, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1261 - val_loss: 0.0317 - val_mae: 0.1393 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03166\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0255 - mae: 0.1260 - val_loss: 0.0319 - val_mae: 0.1394 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03166\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0252 - mae: 0.1251 - val_loss: 0.0387 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03166\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0251 - mae: 0.1248 - val_loss: 0.0317 - val_mae: 0.1387 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03166\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0246 - mae: 0.1236 - val_loss: 0.0344 - val_mae: 0.1448 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.03166 to 0.03147, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0244 - mae: 0.1233 - val_loss: 0.0315 - val_mae: 0.1377 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.03147 to 0.03040, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0242 - mae: 0.1224 - val_loss: 0.0304 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03040\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0241 - mae: 0.1226 - val_loss: 0.0328 - val_mae: 0.1412 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.03040 to 0.03010, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0237 - mae: 0.1213 - val_loss: 0.0301 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.03010 to 0.02951, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0237 - mae: 0.1211 - val_loss: 0.0295 - val_mae: 0.1337 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02951\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0237 - mae: 0.1213 - val_loss: 0.0308 - val_mae: 0.1362 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02951\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0235 - mae: 0.1208 - val_loss: 0.0308 - val_mae: 0.1364 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.02951 to 0.02946, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0231 - mae: 0.1196 - val_loss: 0.0295 - val_mae: 0.1341 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0231 - mae: 0.1199 - val_loss: 0.0333 - val_mae: 0.1430 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0231 - mae: 0.1196 - val_loss: 0.0315 - val_mae: 0.1382 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0228 - mae: 0.1191 - val_loss: 0.0327 - val_mae: 0.1409 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0232 - mae: 0.1203 - val_loss: 0.0369 - val_mae: 0.1516 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0230 - mae: 0.1194 - val_loss: 0.0312 - val_mae: 0.1380 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0232 - mae: 0.1199 - val_loss: 0.0300 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0228 - mae: 0.1189 - val_loss: 0.0340 - val_mae: 0.1441 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0227 - mae: 0.1186 - val_loss: 0.0332 - val_mae: 0.1416 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0227 - mae: 0.1186 - val_loss: 0.0307 - val_mae: 0.1365 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0227 - mae: 0.1184 - val_loss: 0.0311 - val_mae: 0.1384 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0225 - mae: 0.1181 - val_loss: 0.0324 - val_mae: 0.1396 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0223 - mae: 0.1173 - val_loss: 0.0309 - val_mae: 0.1374 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0226 - mae: 0.1176 - val_loss: 0.0314 - val_mae: 0.1389 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0222 - mae: 0.1173 - val_loss: 0.0322 - val_mae: 0.1400 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0224 - mae: 0.1177 - val_loss: 0.0327 - val_mae: 0.1423 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0225 - mae: 0.1177 - val_loss: 0.0326 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02946\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0224 - mae: 0.1177 - val_loss: 0.0370 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.02946 to 0.01897, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0791 - val_loss: 0.0190 - val_mae: 0.1067 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.01897 to 0.01852, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0089 - mae: 0.0747 - val_loss: 0.0185 - val_mae: 0.1053 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01852\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0730 - val_loss: 0.0188 - val_mae: 0.1063 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01852\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0082 - mae: 0.0719 - val_loss: 0.0186 - val_mae: 0.1057 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.01852 to 0.01829, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0080 - mae: 0.0712 - val_loss: 0.0183 - val_mae: 0.1045 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0079 - mae: 0.0705 - val_loss: 0.0186 - val_mae: 0.1054 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0078 - mae: 0.0700 - val_loss: 0.0185 - val_mae: 0.1050 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0696 - val_loss: 0.0184 - val_mae: 0.1047 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0187 - val_mae: 0.1055 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0187 - val_mae: 0.1052 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0684 - val_loss: 0.0184 - val_mae: 0.1044 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01829\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0184 - val_mae: 0.1045 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0677 - val_loss: 0.0183 - val_mae: 0.1043 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0072 - mae: 0.0675 - val_loss: 0.0183 - val_mae: 0.1043 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0072 - mae: 0.0671 - val_loss: 0.0185 - val_mae: 0.1048 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0071 - mae: 0.0669 - val_loss: 0.0184 - val_mae: 0.1043 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0070 - mae: 0.0666 - val_loss: 0.0185 - val_mae: 0.1049 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0070 - mae: 0.0664 - val_loss: 0.0185 - val_mae: 0.1048 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0184 - val_mae: 0.1044 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0069 - mae: 0.0660 - val_loss: 0.0184 - val_mae: 0.1042 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0069 - mae: 0.0659 - val_loss: 0.0184 - val_mae: 0.1043 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0068 - mae: 0.0656 - val_loss: 0.0187 - val_mae: 0.1051 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0068 - mae: 0.0653 - val_loss: 0.0185 - val_mae: 0.1044 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0067 - mae: 0.0651 - val_loss: 0.0184 - val_mae: 0.1041 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01829\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0067 - mae: 0.0650 - val_loss: 0.0186 - val_mae: 0.1048 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.01829 to 0.01788, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0059 - mae: 0.0607 - val_loss: 0.0179 - val_mae: 0.1025 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.01788 to 0.01785, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0179 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.01785 to 0.01784, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0058 - mae: 0.0601 - val_loss: 0.0178 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01784\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0600 - val_loss: 0.0179 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.01784 to 0.01783, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0057 - mae: 0.0600 - val_loss: 0.0178 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0599 - val_loss: 0.0179 - val_mae: 0.1025 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0599 - val_loss: 0.0179 - val_mae: 0.1025 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0598 - val_loss: 0.0179 - val_mae: 0.1026 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0598 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01783\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0057 - mae: 0.0597 - val_loss: 0.0179 - val_mae: 0.1025 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01783\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0057 - mae: 0.0597 - val_loss: 0.0179 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0597 - val_loss: 0.0179 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0596 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0596 - val_loss: 0.0179 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0596 - val_loss: 0.0179 - val_mae: 0.1025 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0595 - val_loss: 0.0178 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss improved from 0.01783 to 0.01783, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0595 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01783\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0595 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0594 - val_loss: 0.0179 - val_mae: 0.1025 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01783\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0594 - val_loss: 0.0178 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01783\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0594 - val_loss: 0.0179 - val_mae: 0.1024 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.01783 to 0.01781, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0589 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.01781 to 0.01781, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0589 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01781\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01781\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01781\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01781\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01781\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01781\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01781\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss improved from 0.01781 to 0.01780, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01780\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01780\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01780\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01780\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0178 - val_mae: 0.1022 - learning_rate: 1.0000e-07\n",
      "Epoch 252: early stopping\n",
      "Restoring model weights from the end of the best epoch: 202.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1607 m\n",
      "Median positioning error: 0.1430 m\n",
      "90th percentile error: 0.2848 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6631.663999,
   "end_time": "2025-07-30T20:12:04.824117",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T18:21:33.160118",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
