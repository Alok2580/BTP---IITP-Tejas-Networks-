{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ecb1c8ed",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-31T17:23:40.394039Z",
     "iopub.status.busy": "2025-07-31T17:23:40.393763Z",
     "iopub.status.idle": "2025-07-31T17:23:41.859991Z",
     "shell.execute_reply": "2025-07-31T17:23:41.859187Z"
    },
    "papermill": {
     "duration": 1.471284,
     "end_time": "2025-07-31T17:23:41.861307",
     "exception": false,
     "start_time": "2025-07-31T17:23:40.390023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "825062dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:23:41.867557Z",
     "iopub.status.busy": "2025-07-31T17:23:41.866656Z",
     "iopub.status.idle": "2025-07-31T17:23:56.314087Z",
     "shell.execute_reply": "2025-07-31T17:23:56.313263Z"
    },
    "papermill": {
     "duration": 14.451738,
     "end_time": "2025-07-31T17:23:56.315614",
     "exception": false,
     "start_time": "2025-07-31T17:23:41.863876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-31 17:23:43.443487: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753982623.639197      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753982623.699548      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8fc2c6f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:23:56.321398Z",
     "iopub.status.busy": "2025-07-31T17:23:56.320551Z",
     "iopub.status.idle": "2025-07-31T17:23:56.324869Z",
     "shell.execute_reply": "2025-07-31T17:23:56.324388Z"
    },
    "papermill": {
     "duration": 0.008077,
     "end_time": "2025-07-31T17:23:56.325930",
     "exception": false,
     "start_time": "2025-07-31T17:23:56.317853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "91c9a390",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:23:56.330559Z",
     "iopub.status.busy": "2025-07-31T17:23:56.330357Z",
     "iopub.status.idle": "2025-07-31T17:23:56.333543Z",
     "shell.execute_reply": "2025-07-31T17:23:56.332983Z"
    },
    "papermill": {
     "duration": 0.006637,
     "end_time": "2025-07-31T17:23:56.334541",
     "exception": false,
     "start_time": "2025-07-31T17:23:56.327904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fbf9b826",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:23:56.339378Z",
     "iopub.status.busy": "2025-07-31T17:23:56.339048Z",
     "iopub.status.idle": "2025-07-31T19:20:33.199589Z",
     "shell.execute_reply": "2025-07-31T19:20:33.198880Z"
    },
    "papermill": {
     "duration": 6996.864411,
     "end_time": "2025-07-31T19:20:33.200751",
     "exception": false,
     "start_time": "2025-07-31T17:23:56.336340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753982666.332365      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753982675.645978      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753982686.437422      57 service.cc:148] XLA service 0x7f884c0065e0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753982686.438214      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753982689.766021      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 21.79771, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 121.7124 - mae: 7.6757 - val_loss: 21.7977 - val_mae: 3.6172 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 21.79771 to 8.72725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 13.5918 - mae: 2.8258 - val_loss: 8.7273 - val_mae: 2.3180 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 8.72725 to 4.32488, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 7.4289 - mae: 2.0905 - val_loss: 4.3249 - val_mae: 1.6008 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 4.32488 to 3.26563, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 5.1247 - mae: 1.6966 - val_loss: 3.2656 - val_mae: 1.4080 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 3.26563 to 2.76574, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.2949 - mae: 1.3830 - val_loss: 2.7657 - val_mae: 1.3202 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.76574 to 1.89998, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.3762 - mae: 1.1532 - val_loss: 1.9000 - val_mae: 1.0625 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.89998 to 1.01572, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3378 - mae: 0.8749 - val_loss: 1.0157 - val_mae: 0.7801 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.01572 to 0.57840, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1251 - mae: 0.7602 - val_loss: 0.5784 - val_mae: 0.5822 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.57840 to 0.51780, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5918 - mae: 0.8203 - val_loss: 0.5178 - val_mae: 0.5594 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.51780\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5117 - mae: 0.8283 - val_loss: 1.0995 - val_mae: 0.8078 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.51780 to 0.50505, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4087 - mae: 0.7919 - val_loss: 0.5050 - val_mae: 0.5516 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.50505\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6101 - mae: 0.6046 - val_loss: 0.8694 - val_mae: 0.7263 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.50505 to 0.37382, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9087 - mae: 0.6650 - val_loss: 0.3738 - val_mae: 0.4824 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.37382\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0030 - mae: 0.6583 - val_loss: 0.3774 - val_mae: 0.4803 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.37382\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4716 - mae: 0.5273 - val_loss: 0.3811 - val_mae: 0.4803 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.37382\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6340 - mae: 0.8045 - val_loss: 0.6324 - val_mae: 0.6171 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.37382\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5386 - mae: 0.5635 - val_loss: 0.3990 - val_mae: 0.4923 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.37382 to 0.30953, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1713 - mae: 0.6693 - val_loss: 0.3095 - val_mae: 0.4314 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.30953\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4320 - mae: 0.5029 - val_loss: 0.3577 - val_mae: 0.4701 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.30953\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7675 - mae: 0.8574 - val_loss: 0.6367 - val_mae: 0.6314 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.30953\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4584 - mae: 0.5242 - val_loss: 0.4114 - val_mae: 0.5056 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.30953\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0830 - mae: 0.6896 - val_loss: 0.4724 - val_mae: 0.5446 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.30953\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4242 - mae: 0.5036 - val_loss: 0.4055 - val_mae: 0.4949 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.30953\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7074 - mae: 0.5610 - val_loss: 0.4294 - val_mae: 0.5123 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.30953 to 0.28948, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0112 - mae: 0.6120 - val_loss: 0.2895 - val_mae: 0.4197 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.28948\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4561 - mae: 0.4615 - val_loss: 25.6039 - val_mae: 4.0305 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.28948 to 0.28052, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3695 - mae: 0.6920 - val_loss: 0.2805 - val_mae: 0.4111 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.28052\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3442 - mae: 0.4520 - val_loss: 0.3819 - val_mae: 0.4575 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.28052 to 0.27061, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1009 - mae: 0.6130 - val_loss: 0.2706 - val_mae: 0.4088 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9639 - mae: 0.6331 - val_loss: 0.4763 - val_mae: 0.5318 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3661 - mae: 0.4696 - val_loss: 0.2801 - val_mae: 0.4112 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4782 - mae: 0.7012 - val_loss: 0.5568 - val_mae: 0.5828 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3897 - mae: 0.4836 - val_loss: 0.4113 - val_mae: 0.4953 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0947 - mae: 0.6587 - val_loss: 0.4262 - val_mae: 0.5103 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5561 - mae: 0.5515 - val_loss: 0.3754 - val_mae: 0.4776 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9251 - mae: 0.6223 - val_loss: 0.3954 - val_mae: 0.4936 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0233 - mae: 0.6132 - val_loss: 0.3041 - val_mae: 0.4319 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7405 - mae: 0.7579 - val_loss: 0.5184 - val_mae: 0.5527 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4370 - mae: 0.5136 - val_loss: 0.4190 - val_mae: 0.5088 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6209 - mae: 0.8290 - val_loss: 0.8135 - val_mae: 0.6949 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5285 - mae: 0.5609 - val_loss: 0.5452 - val_mae: 0.5503 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.6571 - mae: 0.9633 - val_loss: 1.6406 - val_mae: 0.9752 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1040 - mae: 0.7906 - val_loss: 0.6851 - val_mae: 0.6423 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6825 - mae: 0.6175 - val_loss: 0.6489 - val_mae: 0.6247 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5898 - mae: 0.8717 - val_loss: 0.9762 - val_mae: 0.7449 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3819 - mae: 0.7916 - val_loss: 7.0891 - val_mae: 1.8398 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6133 - mae: 0.8174 - val_loss: 11.0573 - val_mae: 2.3627 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8850 - mae: 0.9352 - val_loss: 0.7152 - val_mae: 0.6403 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9531 - mae: 0.6855 - val_loss: 11.5032 - val_mae: 2.4089 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.27061\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6867 - mae: 0.6048 - val_loss: 0.3518 - val_mae: 0.4586 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.27061 to 0.21117, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2680 - mae: 0.3998 - val_loss: 0.2112 - val_mae: 0.3577 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.21117 to 0.16519, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1750 - mae: 0.3249 - val_loss: 0.1652 - val_mae: 0.3166 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.16519 to 0.13250, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1258 - mae: 0.2762 - val_loss: 0.1325 - val_mae: 0.2847 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.13250 to 0.09085, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0989 - mae: 0.2458 - val_loss: 0.0908 - val_mae: 0.2359 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.09085 to 0.08270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0823 - mae: 0.2244 - val_loss: 0.0827 - val_mae: 0.2252 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.08270 to 0.07509, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0706 - mae: 0.2081 - val_loss: 0.0751 - val_mae: 0.2140 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.07509 to 0.06465, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0627 - mae: 0.1963 - val_loss: 0.0646 - val_mae: 0.1987 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.06465 to 0.06023, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0568 - mae: 0.1871 - val_loss: 0.0602 - val_mae: 0.1908 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.06023 to 0.05328, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0518 - mae: 0.1786 - val_loss: 0.0533 - val_mae: 0.1803 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.05328 to 0.05089, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0492 - mae: 0.1740 - val_loss: 0.0509 - val_mae: 0.1756 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.05089 to 0.04863, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0460 - mae: 0.1682 - val_loss: 0.0486 - val_mae: 0.1722 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.04863\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0437 - mae: 0.1642 - val_loss: 0.0489 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.04863 to 0.04832, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0429 - mae: 0.1626 - val_loss: 0.0483 - val_mae: 0.1714 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.04832 to 0.04583, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0424 - mae: 0.1613 - val_loss: 0.0458 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.04583\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0396 - mae: 0.1563 - val_loss: 0.0477 - val_mae: 0.1718 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.04583 to 0.04347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0380 - mae: 0.1531 - val_loss: 0.0435 - val_mae: 0.1623 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.04347\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0369 - mae: 0.1505 - val_loss: 0.0443 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.04347 to 0.03989, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0357 - mae: 0.1483 - val_loss: 0.0399 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.03989 to 0.03857, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0349 - mae: 0.1466 - val_loss: 0.0386 - val_mae: 0.1530 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.03857\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0340 - mae: 0.1446 - val_loss: 0.0393 - val_mae: 0.1556 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.03857 to 0.03813, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0331 - mae: 0.1430 - val_loss: 0.0381 - val_mae: 0.1514 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.03813\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0327 - mae: 0.1422 - val_loss: 0.0411 - val_mae: 0.1588 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.03813 to 0.03663, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1400 - val_loss: 0.0366 - val_mae: 0.1496 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.03663 to 0.03366, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0311 - mae: 0.1384 - val_loss: 0.0337 - val_mae: 0.1433 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.03366\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0304 - mae: 0.1371 - val_loss: 0.0355 - val_mae: 0.1469 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03366\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0308 - mae: 0.1378 - val_loss: 0.0360 - val_mae: 0.1480 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03366\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0310 - mae: 0.1376 - val_loss: 0.0350 - val_mae: 0.1457 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03366\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0295 - mae: 0.1352 - val_loss: 0.0389 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.03366 to 0.03208, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0298 - mae: 0.1354 - val_loss: 0.0321 - val_mae: 0.1399 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03208\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0291 - mae: 0.1337 - val_loss: 0.0344 - val_mae: 0.1448 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.03208\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0290 - mae: 0.1337 - val_loss: 0.0325 - val_mae: 0.1412 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.03208\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0283 - mae: 0.1322 - val_loss: 0.0354 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.03208 to 0.03158, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0279 - mae: 0.1312 - val_loss: 0.0316 - val_mae: 0.1383 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.03158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0279 - mae: 0.1311 - val_loss: 0.0370 - val_mae: 0.1499 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.03158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0282 - mae: 0.1307 - val_loss: 0.0335 - val_mae: 0.1417 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.03158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0278 - mae: 0.1307 - val_loss: 0.0349 - val_mae: 0.1458 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.03158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0271 - mae: 0.1291 - val_loss: 0.0324 - val_mae: 0.1406 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.03158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0272 - mae: 0.1295 - val_loss: 0.0316 - val_mae: 0.1384 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.03158 to 0.03046, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0266 - mae: 0.1282 - val_loss: 0.0305 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.03046\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0268 - mae: 0.1284 - val_loss: 0.0310 - val_mae: 0.1361 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03046\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0267 - mae: 0.1281 - val_loss: 0.0367 - val_mae: 0.1501 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.03046 to 0.03037, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0271 - mae: 0.1290 - val_loss: 0.0304 - val_mae: 0.1355 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0265 - mae: 0.1277 - val_loss: 0.0310 - val_mae: 0.1365 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0264 - mae: 0.1274 - val_loss: 0.0322 - val_mae: 0.1402 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0261 - mae: 0.1267 - val_loss: 0.0315 - val_mae: 0.1379 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0260 - mae: 0.1267 - val_loss: 0.0326 - val_mae: 0.1410 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0258 - mae: 0.1259 - val_loss: 0.0337 - val_mae: 0.1436 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0258 - mae: 0.1261 - val_loss: 0.0311 - val_mae: 0.1370 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0258 - mae: 0.1260 - val_loss: 0.0395 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0255 - mae: 0.1254 - val_loss: 0.0407 - val_mae: 0.1569 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03037\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0259 - mae: 0.1263 - val_loss: 0.0337 - val_mae: 0.1429 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.03037 to 0.02908, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0256 - mae: 0.1256 - val_loss: 0.0291 - val_mae: 0.1332 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02908\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0257 - mae: 0.1257 - val_loss: 0.0294 - val_mae: 0.1327 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02908\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0256 - mae: 0.1256 - val_loss: 0.0293 - val_mae: 0.1334 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.02908 to 0.02864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0256 - mae: 0.1257 - val_loss: 0.0286 - val_mae: 0.1315 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0253 - mae: 0.1250 - val_loss: 0.0299 - val_mae: 0.1345 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0259 - mae: 0.1261 - val_loss: 0.0294 - val_mae: 0.1333 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0258 - mae: 0.1260 - val_loss: 0.0357 - val_mae: 0.1475 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0257 - mae: 0.1256 - val_loss: 0.0325 - val_mae: 0.1383 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0255 - mae: 0.1250 - val_loss: 0.0292 - val_mae: 0.1323 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0257 - mae: 0.1255 - val_loss: 0.0360 - val_mae: 0.1487 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0259 - mae: 0.1262 - val_loss: 0.0315 - val_mae: 0.1382 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0259 - mae: 0.1259 - val_loss: 0.0302 - val_mae: 0.1351 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0255 - mae: 0.1253 - val_loss: 0.0301 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0259 - mae: 0.1257 - val_loss: 0.0333 - val_mae: 0.1432 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0258 - mae: 0.1257 - val_loss: 0.0341 - val_mae: 0.1446 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0261 - mae: 0.1263 - val_loss: 0.0325 - val_mae: 0.1380 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0262 - mae: 0.1266 - val_loss: 0.0302 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0259 - mae: 0.1261 - val_loss: 0.0294 - val_mae: 0.1329 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0262 - mae: 0.1268 - val_loss: 0.0350 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0269 - mae: 0.1276 - val_loss: 0.0347 - val_mae: 0.1430 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0269 - mae: 0.1279 - val_loss: 0.0456 - val_mae: 0.1703 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0271 - mae: 0.1283 - val_loss: 0.0375 - val_mae: 0.1508 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0264 - mae: 0.1272 - val_loss: 0.0362 - val_mae: 0.1504 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0268 - mae: 0.1278 - val_loss: 0.0351 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.02864 to 0.01759, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0110 - mae: 0.0825 - val_loss: 0.0176 - val_mae: 0.1025 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.01759 to 0.01738, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0777 - val_loss: 0.0174 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.01738 to 0.01681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0092 - mae: 0.0759 - val_loss: 0.0168 - val_mae: 0.1000 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.01681 to 0.01669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0090 - mae: 0.0749 - val_loss: 0.0167 - val_mae: 0.0999 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.01669\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0088 - mae: 0.0741 - val_loss: 0.0170 - val_mae: 0.1007 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.01669 to 0.01652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0086 - mae: 0.0735 - val_loss: 0.0165 - val_mae: 0.0992 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.01652\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0731 - val_loss: 0.0168 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.01652\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0167 - val_mae: 0.0996 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.01652\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0083 - mae: 0.0720 - val_loss: 0.0172 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.01652\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0082 - mae: 0.0717 - val_loss: 0.0167 - val_mae: 0.0997 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.01652\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0081 - mae: 0.0713 - val_loss: 0.0166 - val_mae: 0.0994 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.01652 to 0.01644, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0080 - mae: 0.0710 - val_loss: 0.0164 - val_mae: 0.0986 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.01644\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0080 - mae: 0.0706 - val_loss: 0.0165 - val_mae: 0.0989 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.01644\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0702 - val_loss: 0.0164 - val_mae: 0.0985 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.01644\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0701 - val_loss: 0.0166 - val_mae: 0.0989 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.01644\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0699 - val_loss: 0.0166 - val_mae: 0.0991 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.01644\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0171 - val_mae: 0.1007 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.01644\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0692 - val_loss: 0.0167 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.01644 to 0.01640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0164 - val_mae: 0.0982 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01640\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0688 - val_loss: 0.0177 - val_mae: 0.1030 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.01640 to 0.01638, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0164 - val_mae: 0.0984 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01638\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0165 - val_mae: 0.0987 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01638\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0171 - val_mae: 0.1009 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.01638 to 0.01628, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0678 - val_loss: 0.0163 - val_mae: 0.0979 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01628\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0678 - val_loss: 0.0166 - val_mae: 0.0987 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0165 - val_mae: 0.0983 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01628\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0072 - mae: 0.0673 - val_loss: 0.0167 - val_mae: 0.0990 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0072 - mae: 0.0673 - val_loss: 0.0165 - val_mae: 0.0988 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0072 - mae: 0.0670 - val_loss: 0.0166 - val_mae: 0.0987 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0071 - mae: 0.0669 - val_loss: 0.0171 - val_mae: 0.1004 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0071 - mae: 0.0667 - val_loss: 0.0168 - val_mae: 0.0992 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01628\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0166 - val_mae: 0.0989 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0070 - mae: 0.0663 - val_loss: 0.0165 - val_mae: 0.0984 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0165 - val_mae: 0.0981 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0069 - mae: 0.0661 - val_loss: 0.0166 - val_mae: 0.0985 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0069 - mae: 0.0660 - val_loss: 0.0167 - val_mae: 0.0992 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01628\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0168 - val_mae: 0.0993 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0068 - mae: 0.0655 - val_loss: 0.0165 - val_mae: 0.0983 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0068 - mae: 0.0653 - val_loss: 0.0168 - val_mae: 0.0991 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0068 - mae: 0.0653 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0068 - mae: 0.0652 - val_loss: 0.0166 - val_mae: 0.0986 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0067 - mae: 0.0651 - val_loss: 0.0167 - val_mae: 0.0988 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01628\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0067 - mae: 0.0649 - val_loss: 0.0168 - val_mae: 0.0991 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.01628 to 0.01601, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0057 - mae: 0.0598 - val_loss: 0.0160 - val_mae: 0.0965 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.01601 to 0.01599, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0593 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.01599 to 0.01598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0056 - mae: 0.0591 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0591 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0590 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0590 - val_loss: 0.0160 - val_mae: 0.0965 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0590 - val_loss: 0.0160 - val_mae: 0.0966 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0589 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0589 - val_loss: 0.0160 - val_mae: 0.0965 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0056 - mae: 0.0589 - val_loss: 0.0161 - val_mae: 0.0967 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0589 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0589 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0160 - val_mae: 0.0964 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0160 - val_mae: 0.0965 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0161 - val_mae: 0.0966 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01598\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0160 - val_mae: 0.0965 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0161 - val_mae: 0.0965 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0161 - val_mae: 0.0966 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01598\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01598\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.01598 to 0.01598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01598\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.01598 to 0.01597, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss improved from 0.01597 to 0.01597, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss improved from 0.01597 to 0.01597, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01597\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01597\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01597\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0962 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01597\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0160 - val_mae: 0.0963 - learning_rate: 1.0000e-07\n",
      "Epoch 275: early stopping\n",
      "Restoring model weights from the end of the best epoch: 225.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1514 m\n",
      "Median positioning error: 0.1339 m\n",
      "90th percentile error: 0.2692 m\n"
     ]
    },
    {
     "data": {
      "image/png": "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06Zut2/cuDF2XIZo3GRtDxgwIG5RP3ToUHzrW9/CE088ga1bt6KyshI333xz0vip7D4/evRouK6Ljz76KO72vXv3oqGhQVofHCqfjz/+uNvCffPmzUrzSMS0viIiInNwkU5ERBnjBz/4AQoLC/GNb3wDe/fu7Xb8448/xu9+97se47S0tOCrX/0q6urq8OMf/7hPX4PW1cKFC7FmzZq4XyDs378fd999N8aMGYMpU6b0u41Ehg4dipkzZ+L+++9HQ0ND7Pb169fjueeew8KFCwEAkUgEgUAg7r6DBg3CsGHDun3lV2cFBQUAEBc7mWhbt99+e9ztt912GwDgjDPO6DFGOi1YsAC7d+/GU089FbuttbUVf/7zn5XmkYhpfUVERObgZ9KJiChjjB8/Hg8//DDOP/98HH744bjoooswdepUtLW14dVXX8U///lPXHLJJXH32b17Nx588EEAHa+eb9iwAf/85z9RVVWFa665Bpdddllacrv22mvxv//7vzj99NPx3e9+FxUVFbj//vuxdetWPPbYY/B45P1e/Fe/+hVOP/10HHPMMfj6178e+wq20tLS2HeaNzY2YsSIEfjCF76AGTNmoKioCM8//zzeeOMN/OY3v0kaOz8/H1OmTMEjjzyCww47DBUVFZg6dWrCz9fPmDEDF198Me6++240NDTgxBNPxJo1a3D//ffj7LPPxsknnyyrCxK67LLLcOedd+KCCy7AVVddhaFDh+Khhx5CXl4egN6/S+Df//537B0Rnc2bN6/Pn+c3ra+IiMgcXKQTEVFGOfPMM/Huu+/iV7/6FZ588kn88Y9/hN/vx/Tp0/Gb3/ym287db7/9Nr761a/GNl0bOXIkPve5z+Eb3/gG5syZk7a8Bg8ejFdffRU//OEPcccdd6C1tRXTp0/H008/Lf1V0fnz52P58uVYsmQJrr/+evh8Ppx44on45S9/GdtwrKCgAN/61rfw3HPP4V//+hdc18WECRPwhz/8AVdcccUh4//lL3/Bd77zHVx99dVoa2vDkiVLkm6C95e//AXjxo3Dfffdh8cffxxDhgzBddddhyVLlqS97p4UFRXhhRdewHe+8x387ne/Q1FRES666CLMmzcP5557bmyx3pPrr78+4e1//etf+7Xpnkl9RURE5nCEzh1WiIiIiBS7/fbbcfXVV2PXrl0YPny47nSIiIji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3cDlcoUex+zCQuVyuTB48OAGb3nQdR1LlizB6aefLqosUoSmaXC5XBH/S4MVVBobGXs5XlaNiU9/iWeW7QIATD27h+0TdMDesbEylxWxZdxvSF6+3YS7S1MqHUsy9+KbtImqzc78VuayIrbobUORJZz9ROifaXzf4ffyyy9j69atuPXWW1FeXo4pU6YAACZPntxgYbmamhqsX78e69evR01NDQ4ePIj169dj586dologSem6juPHjyuzCIWZVBob2XrRdQN3vrMBu4+Wo12iCw9f1BO/H9NdUC32jY2VuayILdt+Q3Lj6u7BqXQsydyL6BXEI3V1dztii942FFnCOb8I/Uz6lVdeiaNHj+K+++5DQUEBBg4ciEWLFvkXk9u3b1+Dt3scOnQIp556qv/nOXPmYM6cOTjrrLOwbNkyu8snyfGEGZxKYyNTL/9YuhPLth9FTJQD//7VMGS6PEL/um7n2FiZy6pf1oio9VQ6lmTuRXRtvJ7YG5NI+MJxU6dOxdSpUwPe13jinZeXxwOBiKT0zy924fHFPwAAZlx4EvpkJ6GwsFBwVUREREQUabgqARFRKy3/4Sge+m/dV0fePKobrh6WK7giIiIi++3ZsweapmH9+vUA6l5w0zQtrFWt7aZpGj744IMTPuaGG27ApEmTTM17//33Y+DAgabGjCSN94358+cjNTVVaE0y4SSdlKRpGlJTU7mQRwAqjY0Mvbz97X7c/O9voRvAlUNycc95ffyrvIqszc78VuayIrbobUOkCpWOJdl7iYoK782v999/v/9a5PvXp0+fBo+pqqrC7373O2RkZCAxMRGXXXZZg29dKiwsxIUXXoikpCQMGzYM3333XYPn/+53v8Njjz3W4Lbc3Fzk5+fj5JNPDrPDnzXudf78+f4eHA4HOnXqhClTpuDIkSOtjg0A+fn5OO+88wA0/SODz1NPPYX58+eHHDMU06dPD/id4WYLtC8E2h9Eu/LKK/HDDz+ILsNS4ZxfhL/dncgKXG0zOJXGRmQvhmHgicU/4OnP6xauHN27PWZNOslfi+hx5mq89sYkdXF19+BUOpZk7kXTNBiGEXZtJ510Ej777DP/z40nk3/4wx/wySef4J133kFKSgqmTp2KSy+9FCtWrAAAPPDAAygtLcW6devwzDPP4Oabb8a3334LAFi1ahW++eYbPP300w1iOp3OVn2VcrBek5OTsX37dui6jg0bNmDKlCk4dOgQPv3001bHDqXelJSUsGKGIjExEYmJiWE/ryUa7wvAif+4UFNT0+Trwup/JWE4Qn1eXFwc4uLiwoodaSJmdXciq+i6jsLCQilXaRVNpbER2cvDi7b7J+i/P7sHXrx+KGKinFLUZnd+K3NZEVv0tqHIwtXdg1PpWJK5l5auIB4VFYXs7Gz/v3bt2vnvKykpwb/+9S88/vjjOPvsszF48GC89NJL+Prrr7Fq1SoAwNatW3HVVVehZ8+e+NWvfoWtW7cCADweD2655RbMmzcPTqezQc5gr0TX99VXX+HMM89EXFwccnNzcdttt6G8vPyEvWqahuzsbHTo0AHnnXcebrvtNnz22WeorKyEruuYNWsWOnXqhJiYGP9C1D41NTWYOnUqcnJyEBcXhy5dumD27NkNYvve7t61a1cAwKmnngpN0zB69GgATd/uXl1djdtuuw2ZmZmIi4vDGWecgTVr1vjv972Ve8mSJRgyZAji4+MxYsQIbN++3f+Yxm93nzJlCq655ho89thjyMnJQUZGBn73u9/B4/H4H5Ofn4/zzz8fcXFx6Nq1K15//XXk5eXhySefDDreQNN9ofH+kJeXh7/+9a+YPHkykpOTcfPNN/vffr5gwQL069cPMTEx2LdvH4qKijB58mSkpaUhPj4e5513Hnbs2OGPFex5zWn8dnff+LzyyivIy8tDSkoKrrrqKpSWlvofo+s6Zs+eja5duyIuLg4DBgzAu+++22wuUcI5v3CSTkQUphe/+hHzltd9D/pfJ52MO8/tDYdDvldfiIio7dqxYwc6dOiAbt264ZprrmkwUVq7di08Hg/Gjh3rv61Pnz7o3LkzVq5cCQAYMGAAPv/8c9TW1mLx4sXo378/AOCRRx7B6NGjMWTIkLBr2rVrFyZMmIDLLrsMGzduxFtvvYWvvvoq6CLSwcTFxUHXddTW1uKpp57CY489hjlz5mDjxo0YP348LrroIv/E8emnn8aCBQvw1ltvYfPmzXj11VeRl5cXMO7q1asBAJ999hny8/Px/vvvB3zcXXfdhffeew/z58/HN998gx49emD8+PFNFoy999578dhjj+Hbb79FVFQUfvWrX52wry+//BK7du3C0qVL8fLLL2P+/PkN3mY/efJkHDp0CMuWLcN7772Hf/7zny16238gc+bMwYABA/Ddd9/hL3/5CwCgoqICDz/8MF544QVs2bIFmZmZuOGGG/Dtt99iwYIFWLlyJQzDwMSJExv8MSHQ81pi165d+OCDD/Dxxx/j448/xvLly/HQQw/57589ezb+/e9/Y968ediyZQv+8Ic/4Nprr8Xy5ctbNxgS4CSdiChEhmHgmWU7Mevj7wEAd03ojetO6yK4KiIislvxs29iT/9Lsaf/pahc0fCz2p69h/z3Hb37iSbPzb/2bv/9jbnfWOi/r+zjlk80hg8fjvnz52PRokV49tln8eOPP+LMM8/0vwpZUFAAl8vVZKGurKwsFBQUAADuvvtuREVFoUePHvjwww/xwgsvYMeOHXj55Zfxl7/8Bbfccgu6deuGK664AiUlJSHVNXv2bFxzzTW444470LNnT4wYMQJPP/00/v3vf6OqqiqkGDt27MC8efMwZMgQJCUlYc6cOfjTn/6Eq666Cr1798bDDz+MgQMH+l9d3rdvH3r27IkzzjgDXbp0wRlnnIGrr746YOz27dsDADIyMpCdnY309PQmjykvL8ezzz6LRx99FOeddx769euHf/7zn4iLi8O//vWvBo994IEHcNZZZ6Ffv364++678fXXX5+wz9TUVPz9739Hnz59cMEFF+D888/3f25927Zt+Oyzz/D8889j+PDhGDRoEF544QVUVlY2O2abNm3yv73e9++WW25p8Jizzz4bd955J7p3747u3bsDqHvXxDPPPIMRI0agd+/eOHjwIBYsWIAXXngBZ555JgYMGIDXXnsNBw8ebLD4XuPnxcfHN1tjILquY/78+Tj55JNx5pln4rrrrvOPR3V1NR588EG8+OKLGD9+PLp164YbbrgB1157LZ577rkW5ZMJP5NORBSCo6XVuOOt77Bi53EAwG9Hd8etZ3UXXBUREYmgl1bAm38UAGBU1zS806v779NLShs/Fd7jxf77GzMqqn6OWxnapDUQ30JoANC/f38MHz4cXbp0wdtvv40bb7wxpBgpKSl4/fXX/W9Bj4qKwjnnnINHH30Ur732Gnbv3o3t27fjpptuwqxZs5osIhfIhg0bsHHjRrz22mv+2wzDgK7r+PHHH4MuZlZSUoLExETouo6qqiqcccYZeOGFF+B2u3Ho0CGMHDmyweNHjhyJDRs2AKh7q/q4cePQp08fnHvuubjwwgsxfvz4kMYg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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7020.643739,
   "end_time": "2025-07-31T19:20:36.886912",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-31T17:23:36.243173",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
