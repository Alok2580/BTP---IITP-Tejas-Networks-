{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d742277",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-12T04:51:19.680685Z",
     "iopub.status.busy": "2025-08-12T04:51:19.680322Z",
     "iopub.status.idle": "2025-08-12T04:51:21.171445Z",
     "shell.execute_reply": "2025-08-12T04:51:21.170592Z"
    },
    "papermill": {
     "duration": 1.496663,
     "end_time": "2025-08-12T04:51:21.173256",
     "exception": false,
     "start_time": "2025-08-12T04:51:19.676593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-16/(32 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-16/(32 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-16/(64 16)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "73f7936f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:51:21.180190Z",
     "iopub.status.busy": "2025-08-12T04:51:21.179490Z",
     "iopub.status.idle": "2025-08-12T04:51:36.047832Z",
     "shell.execute_reply": "2025-08-12T04:51:36.046913Z"
    },
    "papermill": {
     "duration": 14.873408,
     "end_time": "2025-08-12T04:51:36.049587",
     "exception": false,
     "start_time": "2025-08-12T04:51:21.176179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 04:51:22.820829: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754974283.015217      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754974283.069914      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8eb899ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:51:36.054888Z",
     "iopub.status.busy": "2025-08-12T04:51:36.054436Z",
     "iopub.status.idle": "2025-08-12T04:51:36.058721Z",
     "shell.execute_reply": "2025-08-12T04:51:36.058162Z"
    },
    "papermill": {
     "duration": 0.007874,
     "end_time": "2025-08-12T04:51:36.059798",
     "exception": false,
     "start_time": "2025-08-12T04:51:36.051924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9  #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "329be7e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:51:36.064727Z",
     "iopub.status.busy": "2025-08-12T04:51:36.064045Z",
     "iopub.status.idle": "2025-08-12T04:51:36.067181Z",
     "shell.execute_reply": "2025-08-12T04:51:36.066687Z"
    },
    "papermill": {
     "duration": 0.006466,
     "end_time": "2025-08-12T04:51:36.068253",
     "exception": false,
     "start_time": "2025-08-12T04:51:36.061787",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-16/(128 16)(Training)Dataset-1-003.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-16/(128 16)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "edd084a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:51:36.073224Z",
     "iopub.status.busy": "2025-08-12T04:51:36.072881Z",
     "iopub.status.idle": "2025-08-12T06:45:09.992298Z",
     "shell.execute_reply": "2025-08-12T06:45:09.991444Z"
    },
    "papermill": {
     "duration": 6813.92369,
     "end_time": "2025-08-12T06:45:09.993762",
     "exception": false,
     "start_time": "2025-08-12T04:51:36.070072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754974318.595107      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754974328.260049      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754974339.453124      56 service.cc:148] XLA service 0x7c21dc016da0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754974339.454148      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754974342.851428      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 23.54668, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 103.1319 - mae: 7.1276 - val_loss: 23.5467 - val_mae: 3.6985 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 23.54668 to 14.43174, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 19.2988 - mae: 3.3457 - val_loss: 14.4317 - val_mae: 2.9493 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 14.43174 to 9.38803, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 10.5729 - mae: 2.4704 - val_loss: 9.3880 - val_mae: 2.3985 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 9.38803 to 1.88478, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.6216 - mae: 1.4385 - val_loss: 1.8848 - val_mae: 1.0590 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.88478\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.4033 - mae: 1.1093 - val_loss: 1.9282 - val_mae: 1.0733 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.88478 to 0.95518, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.0448 - mae: 1.0122 - val_loss: 0.9552 - val_mae: 0.7661 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.95518\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4439 - mae: 0.7681 - val_loss: 3.2214 - val_mae: 1.3185 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.95518 to 0.73562, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0140 - mae: 0.7270 - val_loss: 0.7356 - val_mae: 0.6701 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.73562\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.0218 - mae: 0.8285 - val_loss: 1.0812 - val_mae: 0.7969 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.73562 to 0.36640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6347 - mae: 0.6105 - val_loss: 0.3664 - val_mae: 0.4780 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.36640 to 0.35231, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5827 - mae: 0.5863 - val_loss: 0.3523 - val_mae: 0.4623 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.35231\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7813 - mae: 0.8361 - val_loss: 0.5124 - val_mae: 0.5597 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.35231\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4606 - mae: 0.5235 - val_loss: 0.3899 - val_mae: 0.4866 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.35231 to 0.35214, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6538 - mae: 0.5536 - val_loss: 0.3521 - val_mae: 0.4772 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.35214\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2489 - mae: 0.6703 - val_loss: 0.4336 - val_mae: 0.5157 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.35214\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4562 - mae: 0.4711 - val_loss: 614.3181 - val_mae: 14.6438 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.35214\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.9598 - mae: 0.8242 - val_loss: 3.1219 - val_mae: 0.6407 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.35214\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6771 - mae: 0.5671 - val_loss: 0.3536 - val_mae: 0.4651 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.35214 to 0.34909, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3336 - mae: 0.4501 - val_loss: 0.3491 - val_mae: 0.4491 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.34909\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1020 - mae: 0.6330 - val_loss: 0.4517 - val_mae: 0.5273 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.34909\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3094 - mae: 0.4326 - val_loss: 1.2306 - val_mae: 0.4345 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.34909\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6383 - mae: 0.7520 - val_loss: 0.7986 - val_mae: 0.6908 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.34909\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4620 - mae: 0.5287 - val_loss: 0.3990 - val_mae: 0.4938 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.34909\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3925 - mae: 0.4837 - val_loss: 0.5645 - val_mae: 0.5992 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.34909 to 0.24856, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3463 - mae: 0.4539 - val_loss: 0.2486 - val_mae: 0.3916 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9172 - mae: 0.5590 - val_loss: 0.2765 - val_mae: 0.4154 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2188 - mae: 0.6385 - val_loss: 0.4875 - val_mae: 0.5663 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.24856\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2846 - mae: 0.4148 - val_loss: 0.2857 - val_mae: 0.4198 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.9951 - mae: 0.7996 - val_loss: 0.4036 - val_mae: 0.5032 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7702 - mae: 0.5550 - val_loss: 0.9545 - val_mae: 0.7558 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.24856\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3678 - mae: 0.4662 - val_loss: 0.2784 - val_mae: 0.4181 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.5556 - mae: 0.8387 - val_loss: 0.6559 - val_mae: 0.6172 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.24856\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3701 - mae: 0.4727 - val_loss: 0.3364 - val_mae: 0.4536 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9757 - mae: 0.6127 - val_loss: 0.2707 - val_mae: 0.4115 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0916 - mae: 0.6225 - val_loss: 0.7659 - val_mae: 0.6733 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.24856\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3886 - mae: 0.4837 - val_loss: 0.7938 - val_mae: 0.6808 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2823 - mae: 0.7080 - val_loss: 0.3992 - val_mae: 0.4953 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.24856\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3880 - mae: 0.4841 - val_loss: 0.4726 - val_mae: 0.4999 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7028 - mae: 0.5602 - val_loss: 0.8029 - val_mae: 0.3990 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.0535 - mae: 0.8077 - val_loss: 0.7294 - val_mae: 0.5852 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.24856\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3809 - mae: 0.4817 - val_loss: 0.4106 - val_mae: 0.4823 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4222 - mae: 0.7069 - val_loss: 0.3446 - val_mae: 0.4628 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.24856\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9620 - mae: 0.7480 - val_loss: 0.9821 - val_mae: 0.7143 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4436 - mae: 0.5109 - val_loss: 0.3179 - val_mae: 0.4355 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.1340 - mae: 0.9840 - val_loss: 0.5106 - val_mae: 0.5557 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.24856\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3498 - mae: 0.4540 - val_loss: 0.2785 - val_mae: 0.4114 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.24856 to 0.18966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2206 - mae: 0.3665 - val_loss: 0.1897 - val_mae: 0.3402 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.18966 to 0.12853, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1478 - mae: 0.3006 - val_loss: 0.1285 - val_mae: 0.2809 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.12853 to 0.10083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1115 - mae: 0.2617 - val_loss: 0.1008 - val_mae: 0.2479 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.10083 to 0.08404, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0903 - mae: 0.2358 - val_loss: 0.0840 - val_mae: 0.2263 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.08404 to 0.07787, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0783 - mae: 0.2193 - val_loss: 0.0779 - val_mae: 0.2183 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.07787\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0695 - mae: 0.2073 - val_loss: 0.0869 - val_mae: 0.2185 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.07787 to 0.06778, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0625 - mae: 0.1967 - val_loss: 0.0678 - val_mae: 0.2029 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.06778 to 0.06076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0577 - mae: 0.1887 - val_loss: 0.0608 - val_mae: 0.1879 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.06076\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0533 - mae: 0.1814 - val_loss: 0.0643 - val_mae: 0.1953 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.06076 to 0.05093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0502 - mae: 0.1761 - val_loss: 0.0509 - val_mae: 0.1765 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.05093 to 0.04885, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0470 - mae: 0.1707 - val_loss: 0.0489 - val_mae: 0.1734 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.04885\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0459 - mae: 0.1670 - val_loss: 0.0563 - val_mae: 0.1818 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.04885\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0428 - mae: 0.1626 - val_loss: 0.0507 - val_mae: 0.1758 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.04885 to 0.04841, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0412 - mae: 0.1599 - val_loss: 0.0484 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.04841 to 0.04728, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0397 - mae: 0.1569 - val_loss: 0.0473 - val_mae: 0.1706 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.04728 to 0.04478, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0379 - mae: 0.1535 - val_loss: 0.0448 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.04478\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0369 - mae: 0.1514 - val_loss: 0.0473 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.04478 to 0.04291, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0358 - mae: 0.1492 - val_loss: 0.0429 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.04291 to 0.03924, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0353 - mae: 0.1479 - val_loss: 0.0392 - val_mae: 0.1539 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.03924\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0342 - mae: 0.1454 - val_loss: 0.0431 - val_mae: 0.1621 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.03924\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0335 - mae: 0.1442 - val_loss: 0.0394 - val_mae: 0.1537 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.03924\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0327 - mae: 0.1423 - val_loss: 0.0433 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.03924 to 0.03909, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0327 - mae: 0.1427 - val_loss: 0.0391 - val_mae: 0.1548 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.03909 to 0.03808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1407 - val_loss: 0.0381 - val_mae: 0.1522 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.03808\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0313 - mae: 0.1397 - val_loss: 0.0469 - val_mae: 0.1710 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.03808\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0308 - mae: 0.1385 - val_loss: 0.0413 - val_mae: 0.1582 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.03808\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0306 - mae: 0.1380 - val_loss: 0.0408 - val_mae: 0.1586 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.03808 to 0.03557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0300 - mae: 0.1366 - val_loss: 0.0356 - val_mae: 0.1469 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.03557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0374 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03557\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0293 - mae: 0.1351 - val_loss: 0.0356 - val_mae: 0.1476 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0289 - mae: 0.1338 - val_loss: 0.0362 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0284 - mae: 0.1327 - val_loss: 0.0428 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.03557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0285 - mae: 0.1332 - val_loss: 0.0390 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0282 - mae: 0.1322 - val_loss: 0.0402 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.03557\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0285 - mae: 0.1330 - val_loss: 0.0357 - val_mae: 0.1478 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.03557 to 0.03421, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0275 - mae: 0.1307 - val_loss: 0.0342 - val_mae: 0.1443 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.03421\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0274 - mae: 0.1302 - val_loss: 0.0357 - val_mae: 0.1452 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.03421\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0269 - mae: 0.1292 - val_loss: 0.0352 - val_mae: 0.1464 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.03421\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0267 - mae: 0.1289 - val_loss: 0.0396 - val_mae: 0.1542 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.03421 to 0.03374, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0265 - mae: 0.1283 - val_loss: 0.0337 - val_mae: 0.1432 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.03374\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0266 - mae: 0.1284 - val_loss: 0.0459 - val_mae: 0.1506 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.03374 to 0.03235, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0266 - mae: 0.1284 - val_loss: 0.0324 - val_mae: 0.1399 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0336 - val_mae: 0.1421 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.03235\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0373 - val_mae: 0.1489 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0257 - mae: 0.1262 - val_loss: 0.0360 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0261 - mae: 0.1272 - val_loss: 0.0373 - val_mae: 0.1456 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0253 - mae: 0.1254 - val_loss: 0.0329 - val_mae: 0.1395 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0253 - mae: 0.1254 - val_loss: 0.0334 - val_mae: 0.1407 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0254 - mae: 0.1253 - val_loss: 0.0359 - val_mae: 0.1483 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0253 - mae: 0.1250 - val_loss: 0.0347 - val_mae: 0.1443 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0253 - mae: 0.1251 - val_loss: 0.0371 - val_mae: 0.1488 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1243 - val_loss: 0.0343 - val_mae: 0.1432 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0252 - mae: 0.1247 - val_loss: 0.0331 - val_mae: 0.1407 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1243 - val_loss: 0.0401 - val_mae: 0.1579 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03235\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1240 - val_loss: 0.0342 - val_mae: 0.1440 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.03235 to 0.03177, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0245 - mae: 0.1231 - val_loss: 0.0318 - val_mae: 0.1397 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1240 - val_loss: 0.0391 - val_mae: 0.1557 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1242 - val_loss: 0.0360 - val_mae: 0.1479 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0243 - mae: 0.1226 - val_loss: 0.0331 - val_mae: 0.1407 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0245 - mae: 0.1233 - val_loss: 0.0329 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1236 - val_loss: 0.0327 - val_mae: 0.1413 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0245 - mae: 0.1232 - val_loss: 0.0438 - val_mae: 0.1632 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0247 - mae: 0.1235 - val_loss: 0.0340 - val_mae: 0.1440 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0247 - mae: 0.1235 - val_loss: 0.0336 - val_mae: 0.1424 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.03177 to 0.03156, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1239 - val_loss: 0.0316 - val_mae: 0.1379 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03156\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0243 - mae: 0.1226 - val_loss: 0.0356 - val_mae: 0.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03156\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0245 - mae: 0.1230 - val_loss: 0.0347 - val_mae: 0.1440 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03156\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1238 - val_loss: 0.0331 - val_mae: 0.1416 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03156\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0245 - mae: 0.1231 - val_loss: 0.0340 - val_mae: 0.1430 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03156\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1237 - val_loss: 0.0328 - val_mae: 0.1418 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03156\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0247 - mae: 0.1232 - val_loss: 0.0345 - val_mae: 0.1438 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss improved from 0.03156 to 0.03036, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1238 - val_loss: 0.0304 - val_mae: 0.1349 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0247 - mae: 0.1235 - val_loss: 0.0316 - val_mae: 0.1376 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0245 - mae: 0.1232 - val_loss: 0.0354 - val_mae: 0.1463 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1239 - val_loss: 0.0378 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1236 - val_loss: 0.0374 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1237 - val_loss: 0.0330 - val_mae: 0.1413 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0245 - mae: 0.1229 - val_loss: 0.0353 - val_mae: 0.1451 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0250 - mae: 0.1241 - val_loss: 0.0352 - val_mae: 0.1442 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1235 - val_loss: 0.0319 - val_mae: 0.1391 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0247 - mae: 0.1234 - val_loss: 0.0365 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0247 - mae: 0.1233 - val_loss: 0.0306 - val_mae: 0.1358 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0251 - mae: 0.1241 - val_loss: 0.0318 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0250 - mae: 0.1241 - val_loss: 0.0322 - val_mae: 0.1409 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0250 - mae: 0.1240 - val_loss: 0.0329 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0251 - mae: 0.1240 - val_loss: 0.0371 - val_mae: 0.1496 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1235 - val_loss: 0.0313 - val_mae: 0.1385 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0253 - mae: 0.1246 - val_loss: 0.0337 - val_mae: 0.1421 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0249 - mae: 0.1241 - val_loss: 0.0362 - val_mae: 0.1486 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0254 - mae: 0.1248 - val_loss: 0.0353 - val_mae: 0.1469 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0248 - mae: 0.1238 - val_loss: 0.0319 - val_mae: 0.1394 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03036\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0254 - mae: 0.1248 - val_loss: 0.0330 - val_mae: 0.1408 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.03036 to 0.01835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0786 - val_loss: 0.0184 - val_mae: 0.1051 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss improved from 0.01835 to 0.01781, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0086 - mae: 0.0736 - val_loss: 0.0178 - val_mae: 0.1036 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.01781 to 0.01762, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0082 - mae: 0.0716 - val_loss: 0.0176 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.01762 to 0.01760, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0079 - mae: 0.0704 - val_loss: 0.0176 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.01760 to 0.01752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0175 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0688 - val_loss: 0.0179 - val_mae: 0.1033 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0683 - val_loss: 0.0175 - val_mae: 0.1023 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0677 - val_loss: 0.0178 - val_mae: 0.1029 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0072 - mae: 0.0674 - val_loss: 0.0176 - val_mae: 0.1025 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0071 - mae: 0.0668 - val_loss: 0.0176 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0070 - mae: 0.0666 - val_loss: 0.0175 - val_mae: 0.1021 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0176 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0069 - mae: 0.0660 - val_loss: 0.0178 - val_mae: 0.1023 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0068 - mae: 0.0655 - val_loss: 0.0176 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0068 - mae: 0.0654 - val_loss: 0.0176 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0068 - mae: 0.0652 - val_loss: 0.0177 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0067 - mae: 0.0648 - val_loss: 0.0177 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0066 - mae: 0.0645 - val_loss: 0.0177 - val_mae: 0.1020 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0066 - mae: 0.0644 - val_loss: 0.0178 - val_mae: 0.1026 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0065 - mae: 0.0641 - val_loss: 0.0178 - val_mae: 0.1018 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0065 - mae: 0.0640 - val_loss: 0.0178 - val_mae: 0.1025 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0065 - mae: 0.0638 - val_loss: 0.0177 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.01752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0064 - mae: 0.0636 - val_loss: 0.0176 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.01752 to 0.01707, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0171 - val_mae: 0.1000 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.01707 to 0.01685, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0583 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0171 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0170 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0172 - val_mae: 0.1000 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0170 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0171 - val_mae: 0.1000 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0579 - val_loss: 0.0171 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0170 - val_mae: 0.1000 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01685\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0173 - val_mae: 0.1001 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0576 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0576 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01685\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0053 - mae: 0.0576 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0576 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01685\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0053 - mae: 0.0575 - val_loss: 0.0171 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.01685 to 0.01683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01683\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0171 - val_mae: 0.0998 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.01683 to 0.01677, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0168 - val_mae: 0.0994 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-06\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0171 - val_mae: 0.0998 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0171 - val_mae: 0.0999 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0183 - val_mae: 0.1002 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01677\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0171 - val_mae: 0.0998 - learning_rate: 1.0000e-07\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01677\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0172 - val_mae: 0.0999 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.01677 to 0.01677, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01677\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01677\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01677\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0173 - val_mae: 0.0999 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0172 - val_mae: 0.0999 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0171 - val_mae: 0.0998 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0171 - val_mae: 0.0999 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0173 - val_mae: 0.1000 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0171 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01677\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0171 - val_mae: 0.0998 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01677\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0995 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01677\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0172 - val_mae: 0.0999 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0168 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0171 - val_mae: 0.0998 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0169 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0998 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01677\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0052 - mae: 0.0568 - val_loss: 0.0170 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 261: early stopping\n",
      "Restoring model weights from the end of the best epoch: 211.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1566 m\n",
      "Median positioning error: 0.1395 m\n",
      "90th percentile error: 0.2772 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAB9+ElEQVR4nO3deXgUZbbH8V91d9JkD2sCGjZFdhBBMOKCioZFRMUFZImKMGLAQVwYZhQRF9xGGQXh6iDREURRQcQFAVlUwi6IgCiKJAghbFkhW3fdP0LaNEkQYtLd6Xw/z1MP6aq3q96qyTXnnjp1yjBN0xQAAAAAAADgQRZvTwAAAAAAAAA1D0kpAAAAAAAAeBxJKQAAAAAAAHgcSSkAAAAAAAB4HEkpAAAAAAAAeBxJKQAAAAAAAHgcSSkAAAAAAAB4HEkpAAAAAAAAeBxJKQAAAAAAAHgcSSkANYJhGJo0adJZf++3336TYRhKTEys9DkBAAD4EuIlAJ5GUgqAxyQmJsowDBmGoW+++abUdtM0FRMTI8MwdP3113thhhW3cuVKGYahDz74wNtTAQAA1VhNiJcMw9A777xT5pju3bvLMAy1a9euzO0Oh0ONGjWSYRj6/PPPyxwzadIk13HKWlJTUyvtnAD8NTZvTwBAzVOrVi3NnTtXl112mdv6VatWad++fbLb7V6aGQAAgG/w53ip+NyGDBnitv63337TmjVrVKtWrXK/+9VXX+nAgQNq2rSp5syZo969e5c7dsaMGQoNDS21PjIyssJzB1C5SEoB8Lg+ffpo/vz5euWVV2Sz/fGfoblz56pz5846fPiwF2cHAADgff4cL/Xp00eLFi3S4cOHVa9ePdf6uXPnKioqSi1atNCxY8fK/O4777yjiy66SPHx8frnP/+pnJwchYSElDn2lltucds/AN/D43sAPG7QoEE6cuSIli5d6lqXn5+vDz74QHfccUeZ38nJydGDDz6omJgY2e12tWzZUi+++KJM03Qbl5eXpwceeED169dXWFiYbrjhBu3bt6/Mff7++++6++67FRUVJbvdrrZt2+rNN9+svBMtw6+//qpbb71VderUUXBwsC655BJ9+umnpca9+uqratu2rYKDg1W7dm116dJFc+fOdW3PysrS2LFj1bRpU9ntdjVo0EDXXnutNm/eXKXzBwAAnuHP8VL//v1lt9s1f/58t/Vz587VbbfdJqvVWub3Tpw4oQULFmjgwIG67bbbdOLECX388cd/aS4AvIukFACPa9q0qWJjY/Xuu++61n3++efKyMjQwIEDS403TVM33HCDXn75ZfXq1UsvvfSSWrZsqYcffljjxo1zG3vPPfdo6tSpuu666/Tss88qICBAffv2LbXPgwcP6pJLLtGyZcs0evRo/ec//9H555+v4cOHa+rUqZV+zsXHvPTSS7VkyRLdd999evrpp5Wbm6sbbrhBCxYscI174403dP/996tNmzaaOnWqnnjiCV144YVat26da8y9996rGTNmaMCAAXrttdf00EMPKSgoSDt37qySuQMAAM/y53gpODhY/fv3dzu3rVu3avv27eUm3CRp0aJFys7O1sCBAxUdHa0ePXpozpw55Y4/evSoDh8+7Lakp6dXeN4AqoAJAB4ye/ZsU5K5YcMGc9q0aWZYWJh5/Phx0zRN89ZbbzWvuuoq0zRNs0mTJmbfvn1d31u4cKEpyXzqqafc9nfLLbeYhmGYu3fvNk3TNLds2WJKMu+77z63cXfccYcpyXz88cdd64YPH242bNjQPHz4sNvYgQMHmhEREa557dmzx5Rkzp49+7TntmLFClOSOX/+/HLHjB071pRkfv311651WVlZZrNmzcymTZuaDofDNE3T7N+/v9m2bdvTHi8iIsJMSEg47RgAAFD91JR4afHixaZhGGZycrJpmqb58MMPm82bNzdN0zSvvPLKMmOh66+/3uzevbvr8+uvv27abDYzLS3Nbdzjjz9uSipzadmy5WnnCMCzqJQC4BXFJdeLFy9WVlaWFi9eXO6dsc8++0xWq1X333+/2/oHH3xQpmm63rzy2WefSVKpcWPHjnX7bJqmPvzwQ/Xr10+mabrdPYuLi1NGRkaVPAb32WefqWvXrm4NS0NDQzVy5Ej99ttv2rFjh6Si5pv79u3Thg0byt1XZGSk1q1bp/3791f6PAEAgG/w53jpuuuuU506dTRv3jyZpql58+Zp0KBB5Y4/cuSIlixZ4jZmwIABMgxD77//fpnf+fDDD7V06VK3Zfbs2RWeM4DKR6NzAF5Rv3599ezZU3PnztXx48flcDh0yy23lDl27969atSokcLCwtzWt27d2rW9+F+LxaLzzjvPbVzLli3dPh86dEjp6el6/fXX9frrr5d5zLS0tAqd1+ns3btX3bp1K7W+5Hm0a9dO48eP17Jly9S1a1edf/75uu6663THHXeoe/furu88//zzio+PV0xMjDp37qw+ffpo2LBhat68eaXPGwAAeIc/x0sBAQG69dZbNXfuXHXt2lUpKSmnfXTvvffeU0FBgTp16qTdu3e71nfr1k1z5sxRQkJCqe9cccUVNDoHfBxJKQBec8cdd2jEiBFKTU1V7969PfZ6XqfTKUkaMmSI4uPjyxzToUMHj8ylLK1bt9auXbu0ePFiffHFF/rwww/12muvaeLEiXriiSckFd05vfzyy7VgwQJ9+eWXeuGFF/Tcc8/po48+Ou2rkQEAQPXiz/HSHXfcoZkzZ2rSpEnq2LGj2rRpU+7Y4t5RJW/SlfTrr79ycw6ohkhKAfCam266SX/729+0du1avffee+WOa9KkiZYtW6asrCy3u38//vija3vxv06nU7/88ovb3b5du3a57a/4TTMOh0M9e/aszFM6rSZNmpSai1T6PCQpJCREt99+u26//Xbl5+fr5ptv1tNPP60JEyaoVq1akqSGDRvqvvvu03333ae0tDRddNFFevrpp0lKAQDgR/w5XrrsssvUuHFjrVy5Us8991y54/bs2aM1a9Zo9OjRuvLKK922OZ1ODR06VHPnztWjjz5aJfMEUHXoKQXAa0JDQzVjxgxNmjRJ/fr1K3dcnz595HA4NG3aNLf1L7/8sgzDcCVhiv995ZVX3Mad+nYYq9WqAQMG6MMPP9QPP/xQ6niHDh2qyOn8qT59+mj9+vVKSkpyrcvJydHrr7+upk2buu4OHjlyxO17gYGBatOmjUzTVEFBgRwOhzIyMtzGNGjQQI0aNVJeXl6VzB0AAHiHP8dLhmHolVde0eOPP66hQ4eWO664SuqRRx7RLbfc4rbcdtttuvLKK0/7Fj4AvotKKQBeVV45eEn9+vXTVVddpX/961/67bff1LFjR3355Zf6+OOPNXbsWFdPhAsvvFCDBg3Sa6+9poyMDF166aVavny5W9+BYs8++6xWrFihbt26acSIEWrTpo2OHj2qzZs3a9myZTp69GiFzufDDz903ZE89Tz/8Y9/6N1331Xv3r11//33q06dOnrrrbe0Z88effjhh7JYiu4TXHfddYqOjlb37t0VFRWlnTt3atq0aerbt6/CwsKUnp6uc889V7fccos6duyo0NBQLVu2TBs2bNC///3vCs0bAAD4Ln+Ll0rq37+/+vfvf9oxc+bM0YUXXqiYmJgyt99www0aM2aMNm/erIsuusi1/oMPPlBoaGip8ddee62ioqL+2sQBVAqSUgB8nsVi0aJFizRx4kS99957mj17tpo2baoXXnhBDz74oNvYN998U/Xr19ecOXO0cOFCXX311fr0009LBTFRUVFav369Jk+erI8++kivvfaa6tatq7Zt2562fPzPzJs3r8z1PXr00GWXXaY1a9Zo/PjxevXVV5Wbm6sOHTrok08+Ud++fV1j//a3v2nOnDl66aWXlJ2drXPPPVf333+/qyQ9ODhY9913n7788kt99NFHcjqdOv/88/Xaa69p1KhRFZ47AACovqpTvHQ2Nm/erB9//FGPPfZYuWP69eunMWPG6J133nFLSpUXF61YsYKkFOAjDNM0TW9PAgAAAAAAADULPaUAAAAAAADgcSSlAAAAAAAA4HEkpQAAAAAAAOBxJKUAAAAAAADgcSSlAAAAAAAA4HEkpQAAAAAAAOBxNm9PwBc4nU7t379fYWFhMgzD29MBAAA+zDRNZWVlqVGjRrJYas79PeIlAABwps40XiIpJWn//v2KiYnx9jQAAEA1kpKSonPPPdfb0/AY4iUAAHC2/ixeIiklKSwsTFLRxQoPD/fybAAAgC/LzMxUTEyMK36oKYiXAADAmTrTeImklOQqQQ8PDyfIAgAAZ6SmPcJGvAQAAM7Wn8VLNacRAgAAAAAAAHwGSSkAAAAAAAB4HEkpAAAAAAAAeBw9pQAA1ZbD4VBBQYG3pwE/ExAQIKvV6u1pAABQKZxOp/Lz8709DfiZyoqXSEoBAKod0zSVmpqq9PR0b08FfioyMlLR0dE1rpk5AMC/5Ofna8+ePXI6nd6eCvxQZcRLJKUAANVOcUKqQYMGCg4OJnGASmOapo4fP660tDRJUsOGDb08IwAAKsY0TR04cEBWq1UxMTGyWOjeg8pRmfESSSkAQLXicDhcCam6det6ezrwQ0FBQZKktLQ0NWjQgEf5AADVUmFhoY4fP65GjRopODjY29OBn6mseIlUKQCgWinuIUVwhapU/PtFzzIAQHXlcDgkSYGBgV6eCfxVZcRLJKUAANUSj+yhKvH7BQDwF/xNQ1WpjN8tklIAAAAAAADwOJJS/ubb/0j/u1kqzPP2TAAAHtC0aVNNnTr1jMevXLlShmHw5kLUbFvfk2b3kbIPeXsmAAAPIF7yXSSl/M2G/0q/LJcO/uDtmQAASjAM47TLpEmTKrTfDRs2aOTIkWc8/tJLL9WBAwcUERFRoeOdKYI5+LTv/ift/Vba+423ZwIAKKGmxku1a9dWbm6u27YNGza4zrssrVq1kt1uV2pqaqltPXr0KPP63XvvvVVyHn8Fb9/zN06n+78AAJ9w4MAB18/vvfeeJk6cqF27drnWhYaGun42TVMOh0M225//ma5fv/5ZzSMwMFDR0dFn9R3A7zgd7v8CAHxCTY2XwsLCtGDBAg0aNMi1btasWWrcuLGSk5NLjf/mm2904sQJ3XLLLXrrrbc0fvz4UmNGjBihyZMnu63zxRcFeb1S6vfff9eQIUNUt25dBQUFqX379tq4caNru2mamjhxoho2bKigoCD17NlTP//8s9s+jh49qsGDBys8PFyRkZEaPny4srOzPX0qvsF0uv8LAPAJ0dHRriUiIkKGYbg+//jjjwoLC9Pnn3+uzp07y26365tvvtEvv/yi/v37KyoqSqGhobr44ou1bNkyt/2eWo5uGIb++9//6qabblJwcLBatGihRYsWubafWsGUmJioyMhILVmyRK1bt1ZoaKh69erlFhQWFhbq/vvvV2RkpOrWravx48crPj5eN954Y4Wvx7FjxzRs2DDVrl1bwcHB6t27t9vf971796pfv36qXbu2QkJC1LZtW3322Weu7w4ePFj169dXUFCQWrRoodmzZ1d4LqiBXPGS6d15AADc1NR4KT4+Xm+++abr84kTJzRv3jzFx8eXOX7WrFm64447NHToULfvlRQcHOx2PaOjoxUeHv6nc/E0ryaljh07pu7duysgIECff/65duzYoX//+9+qXbu2a8zzzz+vV155RTNnztS6desUEhKiuLg4t9K2wYMHa/v27Vq6dKkWL16s1atXn1Vpnn8xT/kXAPyfaZo6nl/olcWsxP+n9h//+IeeffZZ7dy5Ux06dFB2drb69Omj5cuX67vvvlOvXr3Ur1+/Mu+YlfTEE0/otttu0/fff68+ffpo8ODBOnr0aLnjjx8/rhdffFH/+9//tHr1aiUnJ+uhhx5ybX/uuec0Z84czZ49W99++60yMzO1cOHCv3Sud955pzZu3KhFixYpKSlJpmmqT58+rlcKJyQkKC8vT6tXr9a2bdv03HPPue6OPvbYY9qxY4c+//xz7dy5UzNmzFC9evX+0nxQ05z8v1tu4gGoQYiX3PlSvDR06FB9/fXXrjl/+OGHatq0qS666KJSY7OysjR//nwNGTJE1157rTIyMvT111+f0XF8kVcf33vuuecUExPjdnezWbNmrp9N09TUqVP16KOPqn///pKkt99+W1FRUVq4cKEGDhyonTt36osvvtCGDRvUpUsXSdKrr76qPn366MUXX1SjRo08e1LeRqUUgBroRIFDbSYu8cqxd0yOU3Bg5fw5nTx5sq699lrX5zp16qhjx46uz08++aQWLFigRYsWafTo0eXu584773SVfz/zzDN65ZVXtH79evXq1avM8QUFBZo5c6bOO+88SdLo0aPdyr1fffVVTZgwQTfddJMkadq0aa6qpYr4+eeftWjRIn377be69NJLJUlz5sxRTEyMFi5cqFtvvVXJyckaMGCA2rdvL0lq3ry56/vJycnq1KmT6+9+06ZNKzwX1FCuOImbeABqDuIld74ULzVo0EC9e/dWYmKiJk6cqDfffFN33313mWPnzZunFi1aqG3btpKkgQMHatasWbr88svdxr322mv673//67bu//7v/zR48OAzmpOneLVSatGiRerSpYtuvfVWNWjQQJ06ddIbb7zh2r5nzx6lpqaqZ8+ernURERHq1q2bkpKSJElJSUmKjIx0BaaS1LNnT1ksFq1bt85zJ+MrSEoBQLVV8m+ZJGVnZ+uhhx5S69atFRkZqdDQUO3cufNP7/x16NDB9XNISIjCw8OVlpZW7vjg4GBXgCVJDRs2dI3PyMjQwYMH1bVrV9d2q9Wqzp07n9W5lbRz507ZbDZ169bNta5u3bpq2bKldu7cKUm6//779dRTT6l79+56/PHH9f3337vGjho1SvPmzdOFF16oRx55RGvWrKnwXFBDES8BQLXlr/HS3XffrcTERP36669KSkoqN3n05ptvasiQIa7PQ4YM0fz585WVleU2bvDgwdqyZYvbcsMNN5zxfDzFq5VSv/76q2bMmKFx48bpn//8pzZs2KD7779fgYGBio+Pd3WRj4qKcvteVFSUa1tqaqoaNGjgtt1ms6lOnTpldqGXpLy8POXl5bk+Z2ZmVuZpeZdJOTqAmicowKodk+O8duzKEhIS4vb5oYce0tKlS/Xiiy/q/PPPV1BQkG655Rbl5+efdj8BAQFunw3DkPM0L8Aoa3xlltlXxD333KO4uDh9+umn+vLLLzVlyhT9+9//1pgxY9S7d2/t3btXn332mZYuXaprrrlGCQkJevHFF706Z1QjJKUA1EDES+58LV7q3bu3Ro4cqeHDh6tfv36qW7duqTE7duzQ2rVrtX79erfm5g6HQ/PmzdOIESNc6yIiInT++edX2vyqilcrpZxOpy666CI988wz6tSpk0aOHKkRI0Zo5syZVXrcKVOmKCIiwrXExMRU6fE8isadAGogwzAUHGjzylLea3orw7fffqs777xTN910k9q3b6/o6Gj99ttvVXa8skRERCgqKkobNmxwrXM4HNq8eXOF99m6dWsVFha6VTQfOXJEu3btUps2bVzrYmJidO+99+qjjz7Sgw8+6FZNXb9+fcXHx+udd97R1KlT9frrr1d4PqiBSEoBqIGIl6pOZcRLNptNw4YN08qVK8t9dG/WrFm64oortHXrVrcKqHHjxmnWrFl/+Ty8watJqYYNG7oFn1JRoFpcZlf8CsaDBw+6jTl48KBrW3R0dKkSu8LCQh09erTcVzhOmDBBGRkZriUlJaVSzscnEGQBgN9o0aKFPvroI23ZskVbt27VHXfccdo7eFVlzJgxmjJlij7++GPt2rVLf//733Xs2LEzCjC3bdvmFjRt3bpVLVq0UP/+/TVixAh988032rp1q4YMGaJzzjnH1UNy7NixWrJkifbs2aPNmzdrxYoVat26tSRp4sSJ+vjjj7V7925t375dixcvdm2rqVavXq1+/fqpUaNGMgzjtI1V7733XhmG4fYWohrHVVnOTTwAqO78IV4q9uSTT+rQoUOKiytd0VZQUKD//e9/GjRokNq1a+e23HPPPVq3bp22b9/uGn/8+HGlpqa6LceOHauUc61MXk1Kde/eXbt27XJb99NPP6lJkyaSipqeR0dHa/ny5a7tmZmZWrdunWJjYyVJsbGxSk9P16ZNm1xjvvrqKzmdTrdeFSXZ7XaFh4e7LX6Dx/cAwG+89NJLql27ti699FL169dPcXFxZb6FpaqNHz9egwYN0rBhwxQbG6vQ0FDFxcWpVq1af/rdK664Qp06dXItxb0VZs+erc6dO+v6669XbGysTNPUZ5995iqNdzgcSkhIUOvWrdWrVy9dcMEFeu211yRJgYGBmjBhgjp06KArrrhCVqtV8+bNq7oLUA3k5OSoY8eOmj59+mnHLViwQGvXrq15L4I5FfESAPgNf4iXigUGBqpevXplJrIWLVqkI0eOuBqpl9S6dWu1bt3arVrqjTfeUMOGDd2W4sbuvsQwvdg0YsOGDbr00ktdr2Jcv369RowYoddff93V1Ou5557Ts88+q7feekvNmjXTY489pu+//147duxw/Y/bu3dvHTx4UDNnzlRBQYHuuusudenSRXPnzj2jeWRmZioiIkIZGRnVP0E1JUbKy5SGfCid3/PPxwNANZObm6s9e/aoWbNmZ/VHHpXH6XSqdevWuu222/Tkk096ezpV4nS/Z74eNxiGoQULFujGG290W//777+rW7duWrJkifr27auxY8dq7NixZ7xfXz/vs/LapVLadqnvS9LFw709GwCoEsRM3kW8dGZxg1cbnV988cVasGCBJkyYoMmTJ6tZs2aaOnWqW5f5Rx55RDk5ORo5cqTS09N12WWX6YsvvnA74Tlz5mj06NG65pprZLFYNGDAAL3yyiveOCXvo6cUAKCS7d27V19++aWuvPJK5eXladq0adqzZ4/uuOMOb08NZ8jpdGro0KF6+OGHXa+Q/jP+/WIY2h0AACoX8VLFeDUpJUnXX3+9rr/++nK3G4ahyZMna/LkyeWOqVOnzhlXRfk9giwAQCWzWCxKTEzUQw89JNM01a5dOy1btqzG93GqTp577jnZbDbdf//9Z/ydKVOm6IknnqjCWXkTPaUAAJWLeKlivJ6UQiWjRwIAoJLFxMTo22+/9fY0UEGbNm3Sf/7zH23evPmsmq1OmDBB48aNc33OzMz0nzcWu+IkklIAgMpBvFQxXm10jirA43sAAKCEr7/+WmlpaWrcuLFsNptsNpv27t2rBx98UE2bNi33e/79YhgqywEA8AVUSvkbgiwAAFDC0KFD1bOn+8tP4uLiNHToUN11111empWXES8BAOATSEr5HR7fAwCgpsnOztbu3btdn/fs2aMtW7aoTp06aty4serWres2PiAgQNHR0WrZsqWnp+obaHcAAIBPICnlb+iRAABAjbNx40ZdddVVrs/FvaDi4+OVmJjopVn5MNodAADgE0hK+RvK0QEAqHF69Ogh8ywSLL/99lvVTaY6oFIKAACfQKNzf1IyGCXIAgAAKBs38QAA8AkkpfyJW1KKcnQA8Ec9evTQ2LFjXZ+bNm2qqVOnnvY7hmFo4cKFf/nYlbUfwPuolAIAf0a8VH2QlPInJQMrklIA4FP69eunXr16lbnt66+/lmEY+v777896vxs2bNDIkSP/6vTcTJo0SRdeeGGp9QcOHFDv3r0r9VinSkxMVGRkZJUeA6AHJwD4JuKlM5OYmCjDMNS6detS2+bPny/DMNS0adNS206cOKE6deqoXr16ysvLK7W9adOmMgyj1PLss89WxWlIIinlX9ySUtz5AwBfMnz4cC1dulT79u0rtW327Nnq0qWLOnTocNb7rV+/voKDgytjin8qOjpadrvdI8cCqhSNzgHAJxEvnbmQkBClpaUpKSnJbf2sWbPUuHHjMr/z4Ycfqm3btmrVqlW51VyTJ0/WgQMH3JYxY8ZU9vRdSEr5FXpKAYCvuv7661W/fv1Sb0LLzs7W/PnzNXz4cB05ckSDBg3SOeeco+DgYLVv317vvvvuafd7ajn6zz//rCuuuEK1atVSmzZttHTp0lLfGT9+vC644AIFBwerefPmeuyxx1RQUCCp6M7bE088oa1bt7rujhXP+dRy9G3btunqq69WUFCQ6tatq5EjRyo7O9u1/c4779SNN96oF198UQ0bNlTdunWVkJDgOlZFJCcnq3///goNDVV4eLhuu+02HTx40LV969atuuqqqxQWFqbw8HB17txZGzdulCTt3btX/fr1U+3atRUSEqK2bdvqs88+q/BcUI3RUwoAfBLx0pnHSzabTXfccYfefPNN17p9+/Zp5cqVuuOOO8r8zqxZszRkyBANGTJEs2bNKnNMWFiYoqOj3ZaQkJDTzuWv4O17/sQtsOLOH4AaxDSlguPeOXZAsGQYfzrMZrNp2LBhSkxM1L/+9S8ZJ78zf/58ORwODRo0SNnZ2ercubPGjx+v8PBwffrppxo6dKjOO+88de3a9U+P4XQ6dfPNNysqKkrr1q1TRkaGWz+FYmFhYUpMTFSjRo20bds2jRgxQmFhYXrkkUd0++2364cfftAXX3yhZcuWSZIiIiJK7SMnJ0dxcXGKjY3Vhg0blJaWpnvuuUejR492CyRXrFihhg0basWKFdq9e7duv/12XXjhhRoxYsSfnk9Z51eckFq1apUKCwuVkJCg22+/XStXrpQkDR48WJ06ddKMGTNktVq1ZcsWBQQESJISEhKUn5+v1atXKyQkRDt27FBoaOhZzwN+gLfvAaiJiJck+Ve8dPfdd6tHjx76z3/+o+DgYCUmJqpXr16KiooqNfaXX35RUlKSPvroI5mmqQceeEB79+5VkyZN/vSaVSWSUv6Ex/cA1FQFx6VnGnnn2P/cLwWe2d2ju+++Wy+88IJWrVqlHj16SCoqRR8wYIAiIiIUERGhhx56yDV+zJgxWrJkid5///0zCrKWLVumH3/8UUuWLFGjRkXX45lnninV1+DRRx91/dy0aVM99NBDmjdvnh555BEFBQUpNDRUNptN0dHR5R5r7ty5ys3N1dtvv+26ezZt2jT169dPzz33nCsYql27tqZNmyar1apWrVqpb9++Wr58eYWSUsuXL9e2bdu0Z88excTESJLefvtttW3bVhs2bNDFF1+s5ORkPfzww2rVqpUkqUWLFq7vJycna8CAAWrfvr0kqXnz5mc9B/gJKqUA1ETES5L8K17q1KmTmjdvrg8++EBDhw5VYmKiXnrpJf3666+lxr755pvq3bu3ateuLUmKi4vT7NmzNWnSJLdx48ePdzt3Sfr88891+eWXn3YuFcXje/7E5PE9APBlrVq10qWXXuoqs969e7e+/vprDR8+XJLkcDj05JNPqn379qpTp45CQ0O1ZMkSJScnn9H+d+7cqZiYGFeAJUmxsbGlxr333nvq3r27oqOjFRoaqkcfffSMj1HyWB07dnQr5+7evbucTqd27drlWte2bVtZrVbX54YNGyotLe2sjlXymDExMa6ElCS1adNGkZGR2rlzpyRp3Lhxuueee9SzZ089++yz+uWXX1xj77//fj311FPq3r27Hn/88Qo1SoWfoKcUAPgs4qWzi5fuvvtuzZ49W6tWrVJOTo769OlTaozD4dBbb72lIUOGuNYNGTJEiYmJcjrdcwcPP/ywtmzZ4rZ06dLljM/5bFEp5U+olAJQUwUEF92B89axz8Lw4cM1ZswYTZ8+XbNnz9Z5552nK6+8UpL0wgsv6D//+Y+mTp2q9u3bKyQkRGPHjlV+fn6lTTcpKUmDBw/WE088obi4OEVERGjevHn697//XWnHKKn40blihmGUCn4q06RJk3THHXfo008/1eeff67HH39c8+bN00033aR77rlHcXFx+vTTT/Xll19qypQp+ve//12lzTvho3h8D0BNRLx0xqpTvDR48GA98sgjmjRpkoYOHSqbrXSaZ8mSJfr99991++23u613OBxavny5rr32Wte6evXq6fzzz6/AWVQMlVL+xC0pxZ0/ADWIYRSVhHtjOYP+CCXddtttslgsmjt3rt5++23dfffdrn4J3377rfr3768hQ4aoY8eOat68uX766acz3nfr1q2VkpKiAwcOuNatXbvWbcyaNWvUpEkT/etf/1KXLl3UokUL7d27121MYGCgHA7Hnx5r69atysnJca379ttvZbFY1LJlyzOe89koPr+UlBTXuh07dig9PV1t2rRxrbvgggv0wAMP6Msvv9TNN9+s2bNnu7bFxMTo3nvv1UcffaQHH3xQb7zxRpXMFb6OpBSAGoh4SZL/xUt16tTRDTfcoFWrVunuu+8uc8ysWbM0cODAUhVQAwcOLLfhuaeQlPInVEoBgM8LDQ3V7bffrgkTJujAgQO68847XdtatGihpUuXas2aNdq5c6f+9re/ub1Z7s/07NlTF1xwgeLj47V161Z9/fXX+te//uU2pkWLFkpOTta8efP0yy+/6JVXXtGCBQvcxjRt2lR79uzRli1bdPjwYeXl5ZU61uDBg1WrVi3Fx8frhx9+0IoVKzRmzBgNHTq0zOaaZ8PhcJQKmnbu3KmePXuqffv2Gjx4sDZv3qz169dr2LBhuvLKK9WlSxedOHFCo0eP1sqVK7V37159++232rBhg1q3bi1JGjt2rJYsWaI9e/Zo8+bNWrFihWsbahh6SgGATyNeOjuJiYk6fPiwq6dmSYcOHdInn3yi+Ph4tWvXzm0ZNmyYFi5cqKNHj7rGZ2VlKTU11W3JzMystLmeiqSUvyLIAgCfNXz4cB07dkxxcXFu/QweffRRXXTRRYqLi1OPHj0UHR2tG2+88Yz3a7FYtGDBAp04cUJdu3bVPffco6efftptzA033KAHHnhAo0eP1oUXXqg1a9bosccecxszYMAA9erVS1dddZXq169f5muWg4ODtWTJEh09elQXX3yxbrnlFl1zzTWaNm3a2V2MMmRnZ6tTp05uS79+/WQYhj7++GPVrl1bV1xxhXr27KnmzZvrvffekyRZrVYdOXJEw4YN0wUXXKDbbrtNvXv31hNPPCGpKNmVkJCg1q1bq1evXrrgggv02muv/eX5ohpyxUlUlgOAryJeOnNBQUGqW7dumduKm6xfc801pbZdc801CgoK0jvv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44SHh/v0L42/4Xp7Ftfbs7jensX19qzqcL1rUoVUMeIl/8T19iyut2dxvT2L6+1Z1eF6n0m8VHNu7wEAAAAAAMBnkJQCAAAAAACAx5GU8gC73a7HH39cdrvd21OpEbjensX19iyut2dxvT2L612z8b+/Z3G9PYvr7Vlcb8/ienuWv11vGp0DAAAAAADA46iUAgAAAAAAgMeRlAIAAAAAAIDHkZQCAAAAAACAx5GUqmLTp09X06ZNVatWLXXr1k3r16/39pT8wqRJk2QYhtvSqlUr1/bc3FwlJCSobt26Cg0N1YABA3Tw4EEvzrh6Wb16tfr166dGjRrJMAwtXLjQbbtpmpo4caIaNmyooKAg9ezZUz///LPbmKNHj2rw4MEKDw9XZGSkhg8fruzsbA+eRfXxZ9f7zjvvLPX73qtXL7cxXO8zM2XKFF188cUKCwtTgwYNdOONN2rXrl1uY87kvx/Jycnq27evgoOD1aBBAz388MMqLCz05KlUC2dyvXv06FHq9/vee+91G8P19n/ES1WDeKlqES95FvGSZxEzeVZNjplISlWh9957T+PGjdPjjz+uzZs3q2PHjoqLi1NaWpq3p+YX2rZtqwMHDriWb775xrXtgQce0CeffKL58+dr1apV2r9/v26++WYvzrZ6ycnJUceOHTV9+vQytz///PN65ZVXNHPmTK1bt04hISGKi4tTbm6ua8zgwYO1fft2LV26VIsXL9bq1as1cuRIT51CtfJn11uSevXq5fb7/u6777pt53qfmVWrVikhIUFr167V0qVLVVBQoOuuu045OTmuMX/23w+Hw6G+ffsqPz9fa9as0VtvvaXExERNnDjRG6fk087kekvSiBEj3H6/n3/+edc2rrf/I16qWsRLVYd4ybOIlzyLmMmzanTMZKLKdO3a1UxISHB9djgcZqNGjcwpU6Z4cVb+4fHHHzc7duxY5rb09HQzICDAnD9/vmvdzp07TUlmUlKSh2boPySZCxYscH12Op1mdHS0+cILL7jWpaenm3a73Xz33XdN0zTNHTt2mJLMDRs2uMZ8/vnnpmEY5u+//+6xuVdHp15v0zTN+Ph4s3///uV+h+tdcWlpaaYkc9WqVaZpntl/Pz777DPTYrGYqamprjEzZswww8PDzby8PM+eQDVz6vU2TdO88sorzb///e/lfofr7f+Il6oO8ZLnEC95FvGS5xEzeVZNipmolKoi+fn52rRpk3r27OlaZ7FY1LNnTyUlJXlxZv7j559/VqNGjdS8eXMNHjxYycnJkqRNmzapoKDA7dq3atVKjRs35tpXgj179ig1NdXt+kZERKhbt26u65uUlKTIyEh16dLFNaZnz56yWCxat26dx+fsD1auXKkGDRqoZcuWGjVqlI4cOeLaxvWuuIyMDElSnTp1JJ3Zfz+SkpLUvn17RUVFucbExcUpMzNT27dv9+Dsq59Tr3exOXPmqF69emrXrp0mTJig48ePu7Zxvf0b8VLVI17yDuIl7yBeqjrETJ5Vk2Imm7cn4K8OHz4sh8Ph9gshSVFRUfrxxx+9NCv/0a1bNyUmJqply5Y6cOCAnnjiCV1++eX64YcflJqaqsDAQEVGRrp9JyoqSqmpqd6ZsB8pvoZl/W4Xb0tNTVWDBg3ctttsNtWpU4f/DSqgV69euvnmm9WsWTP98ssv+uc//6nevXsrKSlJVquV611BTqdTY8eOVffu3dWuXTtJOqP/fqSmppb5+1+8DWUr63pL0h133KEmTZqoUaNG+v777zV+/Hjt2rVLH330kSSut78jXqpaxEveQ7zkecRLVYeYybNqWsxEUgrVUu/evV0/d+jQQd26dVOTJk30/vvvKygoyIszAyrfwIEDXT+3b99eHTp00HnnnaeVK1fqmmuu8eLMqreEhAT98MMPbv1VUHXKu94le3m0b99eDRs21DXXXKNffvlF5513nqenCfgV4iXUJMRLVYeYybNqWszE43tVpF69erJaraXePnDw4EFFR0d7aVb+KzIyUhdccIF2796t6Oho5efnKz093W0M175yFF/D0/1uR0dHl2pQW1hYqKNHj/K/QSVo3ry56tWrp927d0vielfE6NGjtXjxYq1YsULnnnuua/2Z/PcjOjq6zN//4m0orbzrXZZu3bpJktvvN9fbfxEveRbxkucQL3kf8VLlIGbyrJoYM5GUqiKBgYHq3Lmzli9f7lrndDq1fPlyxcbGenFm/ik7O1u//PKLGjZsqM6dOysgIMDt2u/atUvJyclc+0rQrFkzRUdHu13fzMxMrVu3znV9Y2NjlZ6erk2bNrnGfPXVV3I6na7/eKLi9u3bpyNHjqhhw4aSuN5nwzRNjR49WgsWLNBXX32lZs2auW0/k/9+xMbGatu2bW6B7dKlSxUeHq42bdp45kSqiT+73mXZsmWLJLn9fnO9/RfxkmcRL3kO8ZL3ES/9NcRMnlWjYybv9ln3b/PmzTPtdruZmJho7tixwxw5cqQZGRnp1g0fFfPggw+aK1euNPfs2WN+++23Zs+ePc169eqZaWlppmma5r333ms2btzY/Oqrr8yNGzeasbGxZmxsrJdnXX1kZWWZ3333nfndd9+ZksyXXnrJ/O6778y9e/eapmmazz77rBkZGWl+/PHH5vfff2/279/fbNasmXnixAnXPnr16mV26tTJXLdunfnNN9+YLVq0MAcNGuStU/Jpp7veWVlZ5kMPPWQmJSWZe/bsMZctW2ZedNFFZosWLczc3FzXPrjeZ2bUqFFmRESEuXLlSvPAgQOu5fjx464xf/bfj8LCQrNdu3bmddddZ27ZssX84osvzPr165sTJkzwxin5tD+73rt37zYnT55sbty40dyzZ4/58ccfm82bNzevuOIK1z643v6PeKnqEC9VLeIlzyJe8ixiJs+qyTETSakq9uqrr5qNGzc2AwMDza5du5pr16719pT8wu233242bNjQDAwMNM855xzz9ttvN3fv3u3afuLECfO+++4za9eubQYHB5s33XSTeeDAAS/OuHpZsWKFKanUEh8fb5pm0WuOH3vsMTMqKsq02+3mNddcY+7atcttH0eOHDEHDRpkhoaGmuHh4eZdd91lZmVleeFsfN/prvfx48fN6667zqxfv74ZEBBgNmnSxBwxYkSp/2eN631myrrOkszZs2e7xpzJfz9+++03s3fv3mZQUJBZr14988EHHzQLCgo8fDa+78+ud3JysnnFFVeYderUMe12u3n++eebDz/8sJmRkeG2H663/yNeqhrES1WLeMmziJc8i5jJs2pyzGSYpmlWfv0VAAAAAAAAUD56SgEAAAAAAMDjSEoBAAAAAADA40hKAQAAAAAAwONISgEAAAAAAMDjSEoBAAAAAADA40hKAQAAAAAAwONISgEAAAAAAMDjSEoBAAAAAADA40hKAUAlMwxDCxcu9PY0AAAAfBbxEgCJpBQAP3PnnXfKMIxSS69evbw9NQAAAJ9AvATAV9i8PQEAqGy9evXS7Nmz3dbZ7XYvzQYAAMD3EC8B8AVUSgHwO3a7XdHR0W5L7dq1JRWVis+YMUO9e/dWUFCQmjdvrg8++MDt+9u2bdPVV1+toKAg1a1bVyNHjlR2drbbmDfffFNt27aV3W5Xw4YNNXr0aLfthw8f1k033aTg4GC1aNFCixYtqtqTBgAAOAvESwB8AUkpADXOY489pgEDBmjr1q0aPHiwBg4cqJ07d0qScnJyFBcXp9q1a2vDhg2aP3++li1b5hZEzZgxQwkJCRo5cqS2bdumRYsW6fzzz3c7xhNPPKHbbrtN33//vfr06aPBgwfr6NGjHj1PAACAiiJeAuARJgD4kfj4eNNqtZohISFuy9NPP22apmlKMu+9916373Tr1s0cNWqUaZqm+frrr5u1a9c2s7OzXds//fRT02KxmKmpqaZpmmajRo3Mf/3rX+XOQZL56KOPuj5nZ2ebkszPP/+80s4TAACgooiXAPgKekoB8DtXXXWVZsyY4bauTp06rp9jY2PdtsXGxmrLli2SpJ07d6pjx44KCQlxbe/evbucTqd27dolwzC0f/9+XXPNNaedQ4cOHVw/h4SEKDw8XGlpaRU9JQAAgEpFvATAF5CUAuB3QkJCSpWHV5agoKAzGhcQEOD22TAMOZ3OqpgSAADAWSNeAuAL6CkFoMZZu3Ztqc+tW7eWJLVu3Vpbt25VTk6Oa/u3334ri8Wili1bKiwsTE2bNtXy5cs9OmcAAABPIl4C4AlUSgHwO3l5eUpNTXVbZ7PZVK9ePUnS/Pnz1aVLF1122WWaM2eO1q9fr1mzZkmSBg8erMcff1zx8fGaNGmSDh06pDFjxmjo0KGKioqSJE2aNEn33nuvGjRooN69eysrK0vffvutxowZ49kTBQAAqCDiJQC+gKQUAL/zxRdfqGHDhm7rWrZsqR9//FFS0Zte5s2bp/vuu08NGzbUu+++qzZt2kiSgoODtWTJEv3973/XxRdfrODgYA0YMEAvvfSSa1/x8fHKzc3Vyy+/rIceekj16tXTLbfc4rkTBAAA+IuIlwD4AsM0TdPbkwAATzEMQwsWLNCNN97o7akAAAD4JOIlAJ5CTykAAAAAAAB4HEkpAAAAAAAAeByP7wEAAAAAAMDjqJQCAAAAAACAx5GUAgAAAAAAgMeRlAIAAAAAAIDHkZQCAAAAAACAx5GUAgAAAAAAgMeRlAIAAAAAAIDHkZQCAAAAAACAx5GUAgAAAAAAgMeRlAIAAAAAAIDH/T/iqlWrJXyb3QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799010,
     "sourceId": 12369413,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848033,
     "sourceId": 12441223,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031041,
     "sourceId": 12707186,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6838.768616,
   "end_time": "2025-08-12T06:45:14.150488",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-12T04:51:15.381872",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
