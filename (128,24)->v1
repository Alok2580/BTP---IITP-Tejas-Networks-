{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b91de24c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-07T09:10:09.628574Z",
     "iopub.status.busy": "2025-07-07T09:10:09.628274Z",
     "iopub.status.idle": "2025-07-07T09:10:11.112981Z",
     "shell.execute_reply": "2025-07-07T09:10:11.112010Z"
    },
    "papermill": {
     "duration": 1.489487,
     "end_time": "2025-07-07T09:10:11.114164",
     "exception": false,
     "start_time": "2025-07-07T09:10:09.624677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset/(128 24)TestDataset-1.npz\n",
      "/kaggle/input/dataset/(128 24)TrainingDataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8f166376",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T09:10:11.119427Z",
     "iopub.status.busy": "2025-07-07T09:10:11.119104Z",
     "iopub.status.idle": "2025-07-07T09:10:26.075783Z",
     "shell.execute_reply": "2025-07-07T09:10:26.075173Z"
    },
    "papermill": {
     "duration": 14.960699,
     "end_time": "2025-07-07T09:10:26.077248",
     "exception": false,
     "start_time": "2025-07-07T09:10:11.116549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-07 09:10:12.548323: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1751879412.727151      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1751879412.776588      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eec64c23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T09:10:26.085517Z",
     "iopub.status.busy": "2025-07-07T09:10:26.084879Z",
     "iopub.status.idle": "2025-07-07T09:10:26.089962Z",
     "shell.execute_reply": "2025-07-07T09:10:26.089207Z"
    },
    "papermill": {
     "duration": 0.009221,
     "end_time": "2025-07-07T09:10:26.091048",
     "exception": false,
     "start_time": "2025-07-07T09:10:26.081827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43a03c56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T09:10:26.095534Z",
     "iopub.status.busy": "2025-07-07T09:10:26.095296Z",
     "iopub.status.idle": "2025-07-07T09:10:26.098674Z",
     "shell.execute_reply": "2025-07-07T09:10:26.098115Z"
    },
    "papermill": {
     "duration": 0.006912,
     "end_time": "2025-07-07T09:10:26.099837",
     "exception": false,
     "start_time": "2025-07-07T09:10:26.092925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset/(128 24)TrainingDataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset/(128 24)TestDataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "87579efa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-07T09:10:26.105228Z",
     "iopub.status.busy": "2025-07-07T09:10:26.105028Z",
     "iopub.status.idle": "2025-07-07T11:41:33.475754Z",
     "shell.execute_reply": "2025-07-07T11:41:33.474908Z"
    },
    "papermill": {
     "duration": 9067.375108,
     "end_time": "2025-07-07T11:41:33.476977",
     "exception": false,
     "start_time": "2025-07-07T09:10:26.101869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1751879449.076652      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1751879458.380553      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization                  │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)             │               <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                         │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ transformer_encoder_block            │ ?                           │         <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)            │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling1d             │ ?                           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization                  │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)             │               \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │         \u001b[38;5;34m138,496\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                         │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ batch_normalization_1                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │           \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)                │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)                  │          \u001b[38;5;34m61,952\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ transformer_encoder_block            │ ?                           │         \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)            │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ global_average_pooling1d             │ ?                           │               \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)             │                             │                 │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                      │             \u001b[38;5;34m514\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1751879469.097060      56 service.cc:148] XLA service 0x78fb7c006860 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1751879469.097803      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1751879472.951755      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 21.25765, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 88.6238 - mae: 6.7319 - val_loss: 21.2577 - val_mae: 3.5823 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 21.25765 to 4.77851, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.0161 - mae: 2.2870 - val_loss: 4.7785 - val_mae: 1.6900 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 4.77851 to 3.04092, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.8047 - mae: 1.4926 - val_loss: 3.0409 - val_mae: 1.3604 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.04092 to 1.24974, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7564 - mae: 1.0144 - val_loss: 1.2497 - val_mae: 0.8913 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.24974\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7772 - mae: 1.1395 - val_loss: 1.4655 - val_mae: 0.9365 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.24974 to 1.04135, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3828 - mae: 0.8597 - val_loss: 1.0414 - val_mae: 0.7719 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.04135 to 0.60957, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7092 - mae: 0.6463 - val_loss: 0.6096 - val_mae: 0.6137 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.60957 to 0.58420, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3664 - mae: 0.7649 - val_loss: 0.5842 - val_mae: 0.5855 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.58420\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5592 - mae: 0.7781 - val_loss: 0.5970 - val_mae: 0.5959 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.58420 to 0.41894, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6469 - mae: 0.5992 - val_loss: 0.4189 - val_mae: 0.5072 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.41894\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4658 - mae: 0.9595 - val_loss: 0.5688 - val_mae: 0.5876 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.41894\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6800 - mae: 0.6017 - val_loss: 0.4868 - val_mae: 0.5387 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.41894 to 0.38079, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2470 - mae: 0.7140 - val_loss: 0.3808 - val_mae: 0.4780 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.38079\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7117 - mae: 0.5876 - val_loss: 0.5180 - val_mae: 0.5603 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.38079 to 0.33196, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7607 - mae: 0.5661 - val_loss: 0.3320 - val_mae: 0.4444 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.33196\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1458 - mae: 0.6697 - val_loss: 0.4168 - val_mae: 0.4992 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.33196\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5216 - mae: 0.5439 - val_loss: 0.3537 - val_mae: 0.4659 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.33196\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1755 - mae: 0.6250 - val_loss: 0.7859 - val_mae: 0.6965 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.33196\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3863 - mae: 0.4817 - val_loss: 0.4705 - val_mae: 0.5486 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.33196 to 0.25376, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7516 - mae: 0.5467 - val_loss: 0.2538 - val_mae: 0.3918 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3842 - mae: 0.4599 - val_loss: 0.2623 - val_mae: 0.4016 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8415 - mae: 0.5729 - val_loss: 0.2568 - val_mae: 0.3932 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6427 - mae: 0.4797 - val_loss: 43.5108 - val_mae: 4.0061 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5394 - mae: 0.7488 - val_loss: 1.3023 - val_mae: 0.8629 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6733 - mae: 0.6133 - val_loss: 0.6376 - val_mae: 0.6252 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7059 - mae: 1.0020 - val_loss: 1.7357 - val_mae: 1.0107 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6981 - mae: 0.6382 - val_loss: 0.3936 - val_mae: 0.4898 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4516 - mae: 0.5186 - val_loss: 0.5698 - val_mae: 0.5915 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1189 - mae: 0.5949 - val_loss: 0.4158 - val_mae: 0.5029 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5408 - mae: 0.6767 - val_loss: 1.2891 - val_mae: 0.8595 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8991 - mae: 0.6495 - val_loss: 0.4358 - val_mae: 0.5221 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5165 - mae: 0.5443 - val_loss: 0.3711 - val_mae: 0.4746 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8428 - mae: 0.9451 - val_loss: 3.3805 - val_mae: 1.3198 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5509 - mae: 0.8830 - val_loss: 0.8739 - val_mae: 0.7093 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6653 - mae: 0.9920 - val_loss: 1.3134 - val_mae: 0.8521 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9474 - mae: 0.9679 - val_loss: 1.4690 - val_mae: 0.8907 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9919 - mae: 1.0139 - val_loss: 2.5655 - val_mae: 1.1965 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1021 - mae: 1.0093 - val_loss: 1.0950 - val_mae: 0.8185 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.2871 - mae: 1.0118 - val_loss: 2.5196 - val_mae: 1.1984 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4027 - mae: 1.0982 - val_loss: 1.8300 - val_mae: 0.9805 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0824 - mae: 0.7719 - val_loss: 0.8663 - val_mae: 0.6922 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7784 - mae: 0.6560 - val_loss: 0.7004 - val_mae: 0.6209 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6371 - mae: 0.5962 - val_loss: 0.6327 - val_mae: 0.5908 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5323 - mae: 0.5452 - val_loss: 0.5287 - val_mae: 0.5399 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4429 - mae: 0.4988 - val_loss: 0.4150 - val_mae: 0.4835 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3821 - mae: 0.4649 - val_loss: 0.3943 - val_mae: 0.4707 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.25376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3309 - mae: 0.4337 - val_loss: 0.3200 - val_mae: 0.4263 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.25376\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.3028 - mae: 0.4166 - val_loss: 0.4030 - val_mae: 0.4665 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.25376\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2854 - mae: 0.4041 - val_loss: 0.3174 - val_mae: 0.4278 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.25376\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2514 - mae: 0.3805 - val_loss: 0.2665 - val_mae: 0.3894 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.25376 to 0.24658, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2296 - mae: 0.3636 - val_loss: 0.2466 - val_mae: 0.3745 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.24658\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2162 - mae: 0.3542 - val_loss: 0.2545 - val_mae: 0.3851 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.24658 to 0.21458, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.2037 - mae: 0.3438 - val_loss: 0.2146 - val_mae: 0.3498 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.21458 to 0.20780, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1910 - mae: 0.3331 - val_loss: 0.2078 - val_mae: 0.3480 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.20780\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1817 - mae: 0.3261 - val_loss: 0.2117 - val_mae: 0.3480 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.20780 to 0.20315, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1728 - mae: 0.3180 - val_loss: 0.2032 - val_mae: 0.3416 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.20315\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.1635 - mae: 0.3094 - val_loss: 0.2087 - val_mae: 0.3465 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.20315\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1557 - mae: 0.3028 - val_loss: 0.2063 - val_mae: 0.3469 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.20315 to 0.16292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1464 - mae: 0.2933 - val_loss: 0.1629 - val_mae: 0.3072 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.16292 to 0.14744, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1339 - mae: 0.2816 - val_loss: 0.1474 - val_mae: 0.2933 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.14744\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1269 - mae: 0.2738 - val_loss: 0.1636 - val_mae: 0.3090 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.14744 to 0.13592, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1187 - mae: 0.2653 - val_loss: 0.1359 - val_mae: 0.2823 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.13592 to 0.12961, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1123 - mae: 0.2585 - val_loss: 0.1296 - val_mae: 0.2742 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.12961 to 0.12936, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1072 - mae: 0.2523 - val_loss: 0.1294 - val_mae: 0.2767 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.12936 to 0.12662, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1032 - mae: 0.2482 - val_loss: 0.1266 - val_mae: 0.2756 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.12662 to 0.10469, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0990 - mae: 0.2431 - val_loss: 0.1047 - val_mae: 0.2493 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.10469\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0913 - mae: 0.2329 - val_loss: 0.1102 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.10469\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0854 - mae: 0.2261 - val_loss: 0.1147 - val_mae: 0.2609 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.10469 to 0.09153, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0807 - mae: 0.2206 - val_loss: 0.0915 - val_mae: 0.2338 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.09153 to 0.08527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0757 - mae: 0.2138 - val_loss: 0.0853 - val_mae: 0.2265 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.08527 to 0.08292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0722 - mae: 0.2093 - val_loss: 0.0829 - val_mae: 0.2229 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.08292\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0684 - mae: 0.2038 - val_loss: 0.0831 - val_mae: 0.2234 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.08292 to 0.07415, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0659 - mae: 0.2004 - val_loss: 0.0742 - val_mae: 0.2116 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.07415 to 0.06610, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0567 - mae: 0.1865 - val_loss: 0.0661 - val_mae: 0.2000 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.06610 to 0.06596, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0537 - mae: 0.1814 - val_loss: 0.0660 - val_mae: 0.2008 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.06596 to 0.05527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0502 - mae: 0.1757 - val_loss: 0.0553 - val_mae: 0.1827 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.05527\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0474 - mae: 0.1706 - val_loss: 0.0581 - val_mae: 0.1871 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.05527\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0495 - mae: 0.1740 - val_loss: 0.0567 - val_mae: 0.1860 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.05527 to 0.05259, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0439 - mae: 0.1641 - val_loss: 0.0526 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.05259\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0429 - mae: 0.1622 - val_loss: 0.0593 - val_mae: 0.1920 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.05259 to 0.05076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0406 - mae: 0.1582 - val_loss: 0.0508 - val_mae: 0.1756 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.05076 to 0.04652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0386 - mae: 0.1543 - val_loss: 0.0465 - val_mae: 0.1687 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.04652 to 0.04532, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0367 - mae: 0.1503 - val_loss: 0.0453 - val_mae: 0.1662 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.04532 to 0.04027, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0368 - mae: 0.1505 - val_loss: 0.0403 - val_mae: 0.1561 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04027\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0344 - mae: 0.1457 - val_loss: 0.0404 - val_mae: 0.1567 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04027\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0329 - mae: 0.1426 - val_loss: 0.0405 - val_mae: 0.1566 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.04027 to 0.03947, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0318 - mae: 0.1406 - val_loss: 0.0395 - val_mae: 0.1556 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.03947 to 0.03897, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0313 - mae: 0.1391 - val_loss: 0.0390 - val_mae: 0.1532 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.03897 to 0.03860, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0307 - mae: 0.1378 - val_loss: 0.0386 - val_mae: 0.1532 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.03860 to 0.03722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0309 - mae: 0.1379 - val_loss: 0.0372 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.03722 to 0.03675, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0295 - mae: 0.1350 - val_loss: 0.0368 - val_mae: 0.1490 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.03675\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0290 - mae: 0.1338 - val_loss: 0.0374 - val_mae: 0.1519 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.03675 to 0.03102, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0280 - mae: 0.1314 - val_loss: 0.0310 - val_mae: 0.1368 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0273 - mae: 0.1301 - val_loss: 0.0355 - val_mae: 0.1456 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1277 - val_loss: 0.0376 - val_mae: 0.1507 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1267 - val_loss: 0.0342 - val_mae: 0.1439 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0326 - val_mae: 0.1407 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0248 - mae: 0.1239 - val_loss: 0.0330 - val_mae: 0.1406 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1222 - val_loss: 0.0318 - val_mae: 0.1394 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1224 - val_loss: 0.0369 - val_mae: 0.1504 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03102\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0238 - mae: 0.1211 - val_loss: 0.0353 - val_mae: 0.1480 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.03102 to 0.02828, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0235 - mae: 0.1202 - val_loss: 0.0283 - val_mae: 0.1306 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.02828\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0229 - mae: 0.1187 - val_loss: 0.0287 - val_mae: 0.1314 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.02828\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0227 - mae: 0.1184 - val_loss: 0.0322 - val_mae: 0.1385 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.02828\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1171 - val_loss: 0.0322 - val_mae: 0.1390 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.02828\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0221 - mae: 0.1166 - val_loss: 0.0293 - val_mae: 0.1339 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.02828\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1164 - val_loss: 0.0295 - val_mae: 0.1340 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.02828 to 0.02621, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0219 - mae: 0.1158 - val_loss: 0.0262 - val_mae: 0.1253 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.02621\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0218 - mae: 0.1159 - val_loss: 0.0270 - val_mae: 0.1273 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.02621\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0214 - mae: 0.1148 - val_loss: 0.0286 - val_mae: 0.1323 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.02621 to 0.02608, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0219 - mae: 0.1158 - val_loss: 0.0261 - val_mae: 0.1258 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0212 - mae: 0.1139 - val_loss: 0.0314 - val_mae: 0.1387 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1137 - val_loss: 0.0275 - val_mae: 0.1287 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1137 - val_loss: 0.0294 - val_mae: 0.1338 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1134 - val_loss: 0.0268 - val_mae: 0.1275 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0211 - mae: 0.1134 - val_loss: 0.0432 - val_mae: 0.1637 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0206 - mae: 0.1123 - val_loss: 0.0301 - val_mae: 0.1341 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0209 - mae: 0.1132 - val_loss: 0.0270 - val_mae: 0.1272 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0209 - mae: 0.1129 - val_loss: 0.0344 - val_mae: 0.1453 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0208 - mae: 0.1126 - val_loss: 0.0265 - val_mae: 0.1260 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02608\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0203 - mae: 0.1118 - val_loss: 0.0267 - val_mae: 0.1266 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.02608 to 0.02587, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0203 - mae: 0.1117 - val_loss: 0.0259 - val_mae: 0.1251 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.02587 to 0.02555, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0204 - mae: 0.1117 - val_loss: 0.0256 - val_mae: 0.1237 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02555\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1112 - val_loss: 0.0296 - val_mae: 0.1347 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02555\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0206 - mae: 0.1121 - val_loss: 0.0268 - val_mae: 0.1271 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02555\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1113 - val_loss: 0.0268 - val_mae: 0.1274 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02555\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0205 - mae: 0.1119 - val_loss: 0.0261 - val_mae: 0.1249 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.02555 to 0.02442, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0204 - mae: 0.1114 - val_loss: 0.0244 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.02442\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1108 - val_loss: 0.0271 - val_mae: 0.1274 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.02442\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1105 - val_loss: 0.0278 - val_mae: 0.1309 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02442\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1109 - val_loss: 0.0251 - val_mae: 0.1232 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.02442\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1111 - val_loss: 0.0282 - val_mae: 0.1288 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02442\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0205 - mae: 0.1117 - val_loss: 0.0265 - val_mae: 0.1266 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02442\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1104 - val_loss: 0.0260 - val_mae: 0.1244 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.02442 to 0.02367, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1112 - val_loss: 0.0237 - val_mae: 0.1188 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02367\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0210 - mae: 0.1127 - val_loss: 0.0300 - val_mae: 0.1346 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02367\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0197 - mae: 0.1097 - val_loss: 0.0259 - val_mae: 0.1259 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.02367\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0204 - mae: 0.1116 - val_loss: 0.0280 - val_mae: 0.1318 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02367\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1101 - val_loss: 0.0315 - val_mae: 0.1380 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02367\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1110 - val_loss: 0.0268 - val_mae: 0.1281 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.02367 to 0.02339, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0198 - mae: 0.1098 - val_loss: 0.0234 - val_mae: 0.1184 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1108 - val_loss: 0.0327 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1101 - val_loss: 0.0264 - val_mae: 0.1257 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0204 - mae: 0.1110 - val_loss: 0.0252 - val_mae: 0.1224 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1099 - val_loss: 0.0251 - val_mae: 0.1237 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0203 - mae: 0.1104 - val_loss: 0.0286 - val_mae: 0.1314 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1087 - val_loss: 0.0260 - val_mae: 0.1249 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0198 - mae: 0.1093 - val_loss: 0.0237 - val_mae: 0.1190 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0201 - mae: 0.1106 - val_loss: 0.0259 - val_mae: 0.1255 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0196 - mae: 0.1090 - val_loss: 0.0247 - val_mae: 0.1221 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02339\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1099 - val_loss: 0.0251 - val_mae: 0.1227 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.02339 to 0.02095, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1100 - val_loss: 0.0210 - val_mae: 0.1129 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0197 - mae: 0.1094 - val_loss: 0.0236 - val_mae: 0.1194 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1101 - val_loss: 0.0242 - val_mae: 0.1213 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0198 - mae: 0.1095 - val_loss: 0.0272 - val_mae: 0.1258 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0196 - mae: 0.1091 - val_loss: 0.0235 - val_mae: 0.1182 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0199 - mae: 0.1097 - val_loss: 0.0239 - val_mae: 0.1211 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1083 - val_loss: 0.0283 - val_mae: 0.1305 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0197 - mae: 0.1091 - val_loss: 0.0254 - val_mae: 0.1229 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0197 - mae: 0.1097 - val_loss: 0.0257 - val_mae: 0.1256 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0205 - mae: 0.1115 - val_loss: 0.0245 - val_mae: 0.1222 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0195 - mae: 0.1086 - val_loss: 0.0239 - val_mae: 0.1205 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0202 - mae: 0.1096 - val_loss: 0.0243 - val_mae: 0.1218 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0194 - mae: 0.1081 - val_loss: 0.0242 - val_mae: 0.1209 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0200 - mae: 0.1099 - val_loss: 0.0257 - val_mae: 0.1257 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0201 - mae: 0.1104 - val_loss: 0.0355 - val_mae: 0.1454 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02095\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0196 - mae: 0.1090 - val_loss: 0.0285 - val_mae: 0.1316 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02095\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0200 - mae: 0.1100 - val_loss: 0.0253 - val_mae: 0.1239 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02095\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0194 - mae: 0.1084 - val_loss: 0.0237 - val_mae: 0.1197 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02095\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0198 - mae: 0.1094 - val_loss: 0.0237 - val_mae: 0.1193 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02095\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0197 - mae: 0.1090 - val_loss: 0.0249 - val_mae: 0.1199 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02095\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0193 - mae: 0.1081 - val_loss: 0.0217 - val_mae: 0.1143 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.02095 to 0.01084, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0053 - mae: 0.0568 - val_loss: 0.0108 - val_mae: 0.0796 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.01084 to 0.01045, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0498 - val_loss: 0.0105 - val_mae: 0.0783 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.01045 to 0.01014, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0101 - val_mae: 0.0768 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.01014 to 0.01002, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0454 - val_loss: 0.0100 - val_mae: 0.0764 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss improved from 0.01002 to 0.00997, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0100 - val_mae: 0.0763 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.00997\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0101 - val_mae: 0.0767 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.00997\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0424 - val_loss: 0.0101 - val_mae: 0.0765 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.00997 to 0.00982, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0416 - val_loss: 0.0098 - val_mae: 0.0756 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.00982 to 0.00973, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0409 - val_loss: 0.0097 - val_mae: 0.0752 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.00973\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0099 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0398 - val_loss: 0.0100 - val_mae: 0.0761 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0392 - val_loss: 0.0098 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0388 - val_loss: 0.0098 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0383 - val_loss: 0.0097 - val_mae: 0.0752 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0023 - mae: 0.0380 - val_loss: 0.0098 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0376 - val_loss: 0.0097 - val_mae: 0.0750 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0022 - mae: 0.0373 - val_loss: 0.0098 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.00973\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0022 - mae: 0.0370 - val_loss: 0.0099 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.00973\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0098 - val_mae: 0.0753 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0021 - mae: 0.0363 - val_loss: 0.0099 - val_mae: 0.0756 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0358 - val_loss: 0.0098 - val_mae: 0.0754 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.00973\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0020 - mae: 0.0356 - val_loss: 0.0098 - val_mae: 0.0754 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0020 - mae: 0.0354 - val_loss: 0.0099 - val_mae: 0.0755 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.00973\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0350 - val_loss: 0.0099 - val_mae: 0.0757 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.00973\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0019 - mae: 0.0348 - val_loss: 0.0101 - val_mae: 0.0766 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0346 - val_loss: 0.0098 - val_mae: 0.0751 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0098 - val_mae: 0.0751 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.00973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0341 - val_loss: 0.0098 - val_mae: 0.0750 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.00973 to 0.00937, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0288 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss improved from 0.00937 to 0.00936, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0284 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.00936 to 0.00934, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0013 - mae: 0.0282 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0281 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.00934 to 0.00934, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0013 - mae: 0.0280 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0279 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0278 - val_loss: 0.0094 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0278 - val_loss: 0.0094 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0277 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0277 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0276 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0012 - mae: 0.0276 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0275 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0275 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0274 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0274 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0012 - mae: 0.0273 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0273 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0094 - val_mae: 0.0733 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0012 - mae: 0.0272 - val_loss: 0.0094 - val_mae: 0.0732 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0266 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0266 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0094 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0730 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0265 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0730 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.00934\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.00934\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0011 - mae: 0.0264 - val_loss: 0.0093 - val_mae: 0.0731 - learning_rate: 1.0000e-07\n",
      "Epoch 255: early stopping\n",
      "Restoring model weights from the end of the best epoch: 205.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1154 m\n",
      "Median positioning error: 0.1014 m\n",
      "90th percentile error: 0.2086 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7779118,
     "sourceId": 12339875,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9091.409188,
   "end_time": "2025-07-07T11:41:36.872183",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-07T09:10:05.462995",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
