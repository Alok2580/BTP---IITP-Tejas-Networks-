{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9a1c765",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-08T06:44:10.383328Z",
     "iopub.status.busy": "2025-08-08T06:44:10.382966Z",
     "iopub.status.idle": "2025-08-08T06:44:12.144382Z",
     "shell.execute_reply": "2025-08-08T06:44:12.143458Z"
    },
    "papermill": {
     "duration": 1.767206,
     "end_time": "2025-08-08T06:44:12.145935",
     "exception": false,
     "start_time": "2025-08-08T06:44:10.378729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c122341",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T06:44:12.152367Z",
     "iopub.status.busy": "2025-08-08T06:44:12.151571Z",
     "iopub.status.idle": "2025-08-08T06:44:28.570183Z",
     "shell.execute_reply": "2025-08-08T06:44:28.569360Z"
    },
    "papermill": {
     "duration": 16.423101,
     "end_time": "2025-08-08T06:44:28.571836",
     "exception": false,
     "start_time": "2025-08-08T06:44:12.148735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-08 06:44:13.724776: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754635453.910777      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754635453.961767      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0319c882",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T06:44:28.578663Z",
     "iopub.status.busy": "2025-08-08T06:44:28.578105Z",
     "iopub.status.idle": "2025-08-08T06:44:28.583137Z",
     "shell.execute_reply": "2025-08-08T06:44:28.582499Z"
    },
    "papermill": {
     "duration": 0.009561,
     "end_time": "2025-08-08T06:44:28.584313",
     "exception": false,
     "start_time": "2025-08-08T06:44:28.574752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f640b5c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T06:44:28.589767Z",
     "iopub.status.busy": "2025-08-08T06:44:28.589490Z",
     "iopub.status.idle": "2025-08-08T06:44:28.593212Z",
     "shell.execute_reply": "2025-08-08T06:44:28.592591Z"
    },
    "papermill": {
     "duration": 0.007943,
     "end_time": "2025-08-08T06:44:28.594569",
     "exception": false,
     "start_time": "2025-08-08T06:44:28.586626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9a6f09a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T06:44:28.600793Z",
     "iopub.status.busy": "2025-08-08T06:44:28.600482Z",
     "iopub.status.idle": "2025-08-08T08:38:23.745502Z",
     "shell.execute_reply": "2025-08-08T08:38:23.744591Z"
    },
    "papermill": {
     "duration": 6835.150109,
     "end_time": "2025-08-08T08:38:23.746963",
     "exception": false,
     "start_time": "2025-08-08T06:44:28.596854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754635490.429596      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754635501.001167      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754635513.370381      56 service.cc:148] XLA service 0x7a54300025d0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754635513.371347      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754635517.145932      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 18.55762, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 98.8878 - mae: 6.7171 - val_loss: 18.5576 - val_mae: 3.3122 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 18.55762 to 15.18632, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 15.6553 - mae: 3.0348 - val_loss: 15.1863 - val_mae: 2.9774 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 15.18632 to 7.13083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 10.7385 - mae: 2.4938 - val_loss: 7.1308 - val_mae: 2.0809 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.13083 to 5.13091, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 7.0872 - mae: 2.0229 - val_loss: 5.1309 - val_mae: 1.7286 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 5.13091 to 3.73071, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 5.0929 - mae: 1.6961 - val_loss: 3.7307 - val_mae: 1.4927 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 3.73071\n",
      "4375/4375 - 29s - 7ms/step - loss: 4.1905 - mae: 1.4884 - val_loss: 6.3353 - val_mae: 1.9011 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 3.73071 to 1.73898, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 2.7443 - mae: 1.2122 - val_loss: 1.7390 - val_mae: 1.0214 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.73898 to 1.16337, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.1897 - mae: 1.0438 - val_loss: 1.1634 - val_mae: 0.8301 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.16337 to 1.08199, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 2.5483 - mae: 1.0796 - val_loss: 1.0820 - val_mae: 0.8100 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.08199\n",
      "4375/4375 - 29s - 7ms/step - loss: 1.7137 - mae: 0.9472 - val_loss: 2.4664 - val_mae: 1.1595 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 1.08199\n",
      "4375/4375 - 28s - 7ms/step - loss: 2.0382 - mae: 0.9345 - val_loss: 1.2811 - val_mae: 0.8914 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 1.08199 to 0.79034, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 1.3004 - mae: 0.8047 - val_loss: 0.7903 - val_mae: 0.6970 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.79034\n",
      "4375/4375 - 29s - 7ms/step - loss: 2.1225 - mae: 0.9783 - val_loss: 4.1510 - val_mae: 1.3228 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.79034\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2372 - mae: 0.8227 - val_loss: 0.8192 - val_mae: 0.7060 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.79034 to 0.55244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.4968 - mae: 0.8046 - val_loss: 0.5524 - val_mae: 0.5804 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.55244\n",
      "4375/4375 - 29s - 7ms/step - loss: 2.1293 - mae: 0.8708 - val_loss: 0.8944 - val_mae: 0.7302 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.55244\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.6065 - mae: 0.6054 - val_loss: 0.5724 - val_mae: 0.5905 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.55244 to 0.40095, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.1127 - mae: 0.7047 - val_loss: 0.4009 - val_mae: 0.4954 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.40095\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.4118 - mae: 0.7529 - val_loss: 0.5295 - val_mae: 0.5680 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.40095\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.6229 - mae: 0.6025 - val_loss: 0.7845 - val_mae: 0.6702 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.40095\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.5192 - mae: 0.7855 - val_loss: 0.4810 - val_mae: 0.5412 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.40095\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.3053 - mae: 0.8536 - val_loss: 0.9095 - val_mae: 0.7228 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.40095\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2255 - mae: 0.7262 - val_loss: 1.1316 - val_mae: 0.7908 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.40095\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.8314 - mae: 0.6658 - val_loss: 0.6810 - val_mae: 0.6469 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.40095\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.5332 - mae: 0.5565 - val_loss: 0.5832 - val_mae: 0.5894 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.40095 to 0.39964, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.3859 - mae: 0.7697 - val_loss: 0.3996 - val_mae: 0.4949 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1387 - mae: 0.6976 - val_loss: 0.7253 - val_mae: 0.6717 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1524 - mae: 0.7100 - val_loss: 0.4569 - val_mae: 0.5286 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.39964\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4781 - mae: 0.5365 - val_loss: 1.1708 - val_mae: 0.7824 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.39964\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7552 - mae: 0.5926 - val_loss: 0.4364 - val_mae: 0.5175 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.39964\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1233 - mae: 0.6601 - val_loss: 0.8363 - val_mae: 0.6919 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6617 - mae: 0.5913 - val_loss: 0.4611 - val_mae: 0.5312 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8944 - mae: 0.6453 - val_loss: 1.3141 - val_mae: 0.8600 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9532 - mae: 0.7134 - val_loss: 0.6763 - val_mae: 0.6368 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1961 - mae: 0.7767 - val_loss: 0.4792 - val_mae: 0.5409 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7598 - mae: 0.6457 - val_loss: 1.4893 - val_mae: 0.9507 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.0304 - mae: 0.8476 - val_loss: 0.5073 - val_mae: 0.5571 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.39964\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4821 - mae: 0.5408 - val_loss: 0.4208 - val_mae: 0.5107 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.39964 to 0.39100, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9776 - mae: 0.6159 - val_loss: 0.3910 - val_mae: 0.4931 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.39100\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3277 - mae: 0.6896 - val_loss: 0.6531 - val_mae: 0.6315 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.39100\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4723 - mae: 0.5328 - val_loss: 0.4191 - val_mae: 0.5081 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.39100\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8698 - mae: 0.6225 - val_loss: 0.4034 - val_mae: 0.4934 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.39100\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5224 - mae: 0.7193 - val_loss: 0.5584 - val_mae: 0.5830 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.39100\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4763 - mae: 0.5355 - val_loss: 1.0118 - val_mae: 0.7677 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.39100\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.4780 - mae: 0.5374 - val_loss: 0.3917 - val_mae: 0.4832 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.39100\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.0998 - mae: 0.7685 - val_loss: 0.4543 - val_mae: 0.5295 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.39100\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.4444 - mae: 0.5176 - val_loss: 0.4365 - val_mae: 0.5145 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.39100\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.0951 - mae: 0.6633 - val_loss: 0.3983 - val_mae: 0.4968 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.39100\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.8769 - mae: 0.6065 - val_loss: 0.5636 - val_mae: 0.5781 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.39100\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.9454 - mae: 0.6180 - val_loss: 0.4432 - val_mae: 0.5182 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.39100 to 0.34568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.4188 - mae: 0.4994 - val_loss: 0.3457 - val_mae: 0.4597 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.34568\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2690 - mae: 0.6919 - val_loss: 0.4671 - val_mae: 0.5382 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.34568 to 0.30745, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3433 - mae: 0.4582 - val_loss: 0.3074 - val_mae: 0.4371 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.6440 - mae: 0.7455 - val_loss: 0.4949 - val_mae: 0.5476 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3660 - mae: 0.4724 - val_loss: 0.3613 - val_mae: 0.4680 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3742 - mae: 0.4760 - val_loss: 0.4323 - val_mae: 0.5177 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2306 - mae: 0.6609 - val_loss: 0.4038 - val_mae: 0.4985 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.8318 - mae: 0.6044 - val_loss: 0.8844 - val_mae: 0.6508 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.6863 - mae: 0.5555 - val_loss: 9.1851 - val_mae: 2.0302 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.9983 - mae: 0.6454 - val_loss: 0.3483 - val_mae: 0.4630 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.4051 - mae: 0.4870 - val_loss: 1.5042 - val_mae: 0.9556 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.6966 - mae: 0.5771 - val_loss: 0.3768 - val_mae: 0.4835 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.8838 - mae: 0.6231 - val_loss: 0.4064 - val_mae: 0.5020 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.5673 - mae: 0.5360 - val_loss: 0.4160 - val_mae: 0.5025 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.30745\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3358 - mae: 0.4527 - val_loss: 0.3309 - val_mae: 0.4506 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.30745 to 0.30712, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2719 - mae: 0.6787 - val_loss: 0.3071 - val_mae: 0.4363 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.30712\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.8742 - mae: 0.6211 - val_loss: 0.3564 - val_mae: 0.4705 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.30712\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.4893 - mae: 0.5260 - val_loss: 0.5543 - val_mae: 0.5737 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.30712\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.0832 - mae: 0.6577 - val_loss: 0.4045 - val_mae: 0.4970 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.30712 to 0.30484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3829 - mae: 0.4850 - val_loss: 0.3048 - val_mae: 0.4324 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.30484\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2076 - mae: 0.6121 - val_loss: 2.2068 - val_mae: 1.0619 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.30484\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.8298 - mae: 0.6635 - val_loss: 0.3675 - val_mae: 0.4728 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.30484\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3818 - mae: 0.4838 - val_loss: 0.3757 - val_mae: 0.4749 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.30484 to 0.28638, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3832 - mae: 0.4818 - val_loss: 0.2864 - val_mae: 0.4225 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.6190 - mae: 0.5615 - val_loss: 0.4250 - val_mae: 0.5064 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3467 - mae: 0.4605 - val_loss: 0.2930 - val_mae: 0.4238 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2510 - mae: 0.6776 - val_loss: 0.5709 - val_mae: 0.5928 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.7558 - mae: 0.6348 - val_loss: 0.4733 - val_mae: 0.5374 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.1158 - mae: 0.7303 - val_loss: 0.5146 - val_mae: 0.5503 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.8111 - mae: 0.8664 - val_loss: 0.9767 - val_mae: 0.7348 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.8755 - mae: 0.6593 - val_loss: 0.4794 - val_mae: 0.5365 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.4973 - mae: 0.5348 - val_loss: 0.4071 - val_mae: 0.5113 - learning_rate: 0.0100\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.5497 - mae: 0.7351 - val_loss: 0.3679 - val_mae: 0.4698 - learning_rate: 0.0100\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 3.0576 - mae: 0.8726 - val_loss: 0.9918 - val_mae: 0.7679 - learning_rate: 0.0100\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.28638\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1265 - mae: 0.7542 - val_loss: 0.6858 - val_mae: 0.6377 - learning_rate: 0.0100\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.3596 - mae: 0.7640 - val_loss: 0.6780 - val_mae: 0.6405 - learning_rate: 0.0100\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.28638\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4016 - mae: 0.7853 - val_loss: 0.8224 - val_mae: 0.6828 - learning_rate: 0.0100\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.28638\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8425 - mae: 0.6477 - val_loss: 0.6055 - val_mae: 0.6123 - learning_rate: 0.0100\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.28638\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.9298 - mae: 0.5944 - val_loss: 4.0253 - val_mae: 1.5268 - learning_rate: 0.0100\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.28638\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0173 - mae: 0.6960 - val_loss: 0.4054 - val_mae: 0.4927 - learning_rate: 0.0100\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.28638\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9831 - mae: 0.6255 - val_loss: 1.0785 - val_mae: 0.8046 - learning_rate: 0.0100\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.28638\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.4454 - mae: 0.8656 - val_loss: 1.5273 - val_mae: 0.9417 - learning_rate: 0.0100\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.28638\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0001 - mae: 0.7622 - val_loss: 1.4113 - val_mae: 0.9010 - learning_rate: 0.0100\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.28638\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.5171 - mae: 1.0098 - val_loss: 0.6097 - val_mae: 0.6032 - learning_rate: 0.0100\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.28638\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4140 - mae: 0.4996 - val_loss: 0.3567 - val_mae: 0.4684 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.28638 to 0.26115, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3006 - mae: 0.4287 - val_loss: 0.2611 - val_mae: 0.4009 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.26115 to 0.22882, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.2297 - mae: 0.3755 - val_loss: 0.2288 - val_mae: 0.3746 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.22882 to 0.18917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.1901 - mae: 0.3417 - val_loss: 0.1892 - val_mae: 0.3398 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.18917 to 0.16576, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1620 - mae: 0.3159 - val_loss: 0.1658 - val_mae: 0.3182 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.16576 to 0.15630, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1441 - mae: 0.2977 - val_loss: 0.1563 - val_mae: 0.3089 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.15630 to 0.14102, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1330 - mae: 0.2865 - val_loss: 0.1410 - val_mae: 0.2928 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.14102 to 0.13537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1209 - mae: 0.2732 - val_loss: 0.1354 - val_mae: 0.2884 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.13537 to 0.11746, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1088 - mae: 0.2595 - val_loss: 0.1175 - val_mae: 0.2683 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.11746 to 0.11259, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0993 - mae: 0.2478 - val_loss: 0.1126 - val_mae: 0.2614 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.11259 to 0.10948, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0911 - mae: 0.2376 - val_loss: 0.1095 - val_mae: 0.2580 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.10948 to 0.09839, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0852 - mae: 0.2302 - val_loss: 0.0984 - val_mae: 0.2442 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.09839\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0805 - mae: 0.2239 - val_loss: 0.1000 - val_mae: 0.2469 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.09839 to 0.09110, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0773 - mae: 0.2191 - val_loss: 0.0911 - val_mae: 0.2354 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.09110 to 0.08646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0728 - mae: 0.2127 - val_loss: 0.0865 - val_mae: 0.2284 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.08646 to 0.08578, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0698 - mae: 0.2083 - val_loss: 0.0858 - val_mae: 0.2291 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.08578 to 0.08085, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0665 - mae: 0.2032 - val_loss: 0.0808 - val_mae: 0.2210 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.08085\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0646 - mae: 0.2003 - val_loss: 0.0824 - val_mae: 0.2233 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.08085\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0620 - mae: 0.1964 - val_loss: 0.0834 - val_mae: 0.2273 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.08085 to 0.07215, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0592 - mae: 0.1919 - val_loss: 0.0721 - val_mae: 0.2092 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.07215 to 0.07130, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0573 - mae: 0.1886 - val_loss: 0.0713 - val_mae: 0.2078 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.07130 to 0.07001, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0556 - mae: 0.1861 - val_loss: 0.0700 - val_mae: 0.2055 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.07001 to 0.06693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0545 - mae: 0.1842 - val_loss: 0.0669 - val_mae: 0.2011 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.06693\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0525 - mae: 0.1809 - val_loss: 0.0670 - val_mae: 0.2015 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.06693\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0517 - mae: 0.1794 - val_loss: 0.0700 - val_mae: 0.2050 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.06693 to 0.06476, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0509 - mae: 0.1782 - val_loss: 0.0648 - val_mae: 0.1973 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.06476\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0495 - mae: 0.1754 - val_loss: 0.0700 - val_mae: 0.2050 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.06476\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0487 - mae: 0.1742 - val_loss: 0.0670 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.06476\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0478 - mae: 0.1725 - val_loss: 0.0653 - val_mae: 0.1982 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.06476 to 0.06340, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0467 - mae: 0.1707 - val_loss: 0.0634 - val_mae: 0.1952 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.06340 to 0.06256, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0459 - mae: 0.1692 - val_loss: 0.0626 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.06256 to 0.06181, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0451 - mae: 0.1677 - val_loss: 0.0618 - val_mae: 0.1914 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.06181\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0446 - mae: 0.1668 - val_loss: 0.0659 - val_mae: 0.1985 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.06181\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0443 - mae: 0.1658 - val_loss: 0.0619 - val_mae: 0.1918 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.06181 to 0.06159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0431 - mae: 0.1638 - val_loss: 0.0616 - val_mae: 0.1923 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.06159\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0428 - mae: 0.1636 - val_loss: 0.0624 - val_mae: 0.1935 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.06159 to 0.05963, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0418 - mae: 0.1614 - val_loss: 0.0596 - val_mae: 0.1889 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.05963 to 0.05927, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0417 - mae: 0.1613 - val_loss: 0.0593 - val_mae: 0.1889 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.05927\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0412 - mae: 0.1603 - val_loss: 0.0606 - val_mae: 0.1904 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.05927 to 0.05612, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0408 - mae: 0.1595 - val_loss: 0.0561 - val_mae: 0.1836 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.05612\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0403 - mae: 0.1582 - val_loss: 0.0574 - val_mae: 0.1856 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.05612\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0401 - mae: 0.1580 - val_loss: 0.0600 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.05612 to 0.05393, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0396 - mae: 0.1572 - val_loss: 0.0539 - val_mae: 0.1798 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.05393\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0393 - mae: 0.1565 - val_loss: 0.0549 - val_mae: 0.1810 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0383 - mae: 0.1545 - val_loss: 0.0558 - val_mae: 0.1827 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.05393\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0392 - mae: 0.1556 - val_loss: 0.0616 - val_mae: 0.1928 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.05393\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0382 - mae: 0.1543 - val_loss: 0.0617 - val_mae: 0.1937 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.05393\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0390 - mae: 0.1556 - val_loss: 0.0559 - val_mae: 0.1825 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1535 - val_loss: 0.0560 - val_mae: 0.1831 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0375 - mae: 0.1530 - val_loss: 0.0568 - val_mae: 0.1850 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0375 - mae: 0.1527 - val_loss: 0.0555 - val_mae: 0.1833 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0376 - mae: 0.1530 - val_loss: 0.0560 - val_mae: 0.1839 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0371 - mae: 0.1518 - val_loss: 0.0562 - val_mae: 0.1841 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.05393\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0378 - mae: 0.1530 - val_loss: 0.0581 - val_mae: 0.1873 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0373 - mae: 0.1519 - val_loss: 0.0540 - val_mae: 0.1805 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.05393\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0366 - mae: 0.1510 - val_loss: 0.0543 - val_mae: 0.1801 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.05393 to 0.05251, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0363 - mae: 0.1503 - val_loss: 0.0525 - val_mae: 0.1774 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.05251\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0361 - mae: 0.1497 - val_loss: 0.0540 - val_mae: 0.1799 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.05251 to 0.05176, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0358 - mae: 0.1494 - val_loss: 0.0518 - val_mae: 0.1770 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.05176\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0355 - mae: 0.1486 - val_loss: 0.0540 - val_mae: 0.1809 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.05176\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0361 - mae: 0.1496 - val_loss: 0.0545 - val_mae: 0.1815 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.05176\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0356 - mae: 0.1487 - val_loss: 0.0601 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.05176\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0353 - mae: 0.1482 - val_loss: 0.0573 - val_mae: 0.1848 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.05176\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0358 - mae: 0.1489 - val_loss: 0.0530 - val_mae: 0.1780 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.05176\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0354 - mae: 0.1484 - val_loss: 0.0544 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.05176\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0361 - mae: 0.1488 - val_loss: 0.0518 - val_mae: 0.1760 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.05176 to 0.05070, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0350 - mae: 0.1473 - val_loss: 0.0507 - val_mae: 0.1753 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0354 - mae: 0.1482 - val_loss: 0.0544 - val_mae: 0.1811 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0349 - mae: 0.1472 - val_loss: 0.0599 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.05070\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0350 - mae: 0.1474 - val_loss: 0.0577 - val_mae: 0.1867 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0350 - mae: 0.1471 - val_loss: 0.0530 - val_mae: 0.1785 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0364 - mae: 0.1481 - val_loss: 0.0535 - val_mae: 0.1785 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0341 - mae: 0.1451 - val_loss: 0.0533 - val_mae: 0.1798 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0347 - mae: 0.1468 - val_loss: 0.0539 - val_mae: 0.1802 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0345 - mae: 0.1463 - val_loss: 0.0540 - val_mae: 0.1804 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0347 - mae: 0.1467 - val_loss: 0.0538 - val_mae: 0.1790 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0348 - mae: 0.1468 - val_loss: 0.0572 - val_mae: 0.1839 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0342 - mae: 0.1457 - val_loss: 0.0526 - val_mae: 0.1785 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.05070 to 0.04893, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0340 - mae: 0.1453 - val_loss: 0.0489 - val_mae: 0.1710 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.04893\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0348 - mae: 0.1467 - val_loss: 0.0512 - val_mae: 0.1753 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.04893\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0338 - mae: 0.1445 - val_loss: 0.0592 - val_mae: 0.1863 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.04893\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0340 - mae: 0.1449 - val_loss: 0.0685 - val_mae: 0.1988 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss improved from 0.04893 to 0.04758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0372 - mae: 0.1480 - val_loss: 0.0476 - val_mae: 0.1694 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0338 - mae: 0.1444 - val_loss: 0.0511 - val_mae: 0.1754 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.04758\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0352 - mae: 0.1465 - val_loss: 0.0578 - val_mae: 0.1875 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.04758\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0337 - mae: 0.1445 - val_loss: 0.0584 - val_mae: 0.1878 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.04758\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0344 - mae: 0.1463 - val_loss: 0.0525 - val_mae: 0.1765 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0347 - mae: 0.1466 - val_loss: 0.0584 - val_mae: 0.1875 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0350 - mae: 0.1470 - val_loss: 0.0533 - val_mae: 0.1767 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0343 - mae: 0.1455 - val_loss: 0.0482 - val_mae: 0.1700 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0343 - mae: 0.1454 - val_loss: 0.0494 - val_mae: 0.1727 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0344 - mae: 0.1457 - val_loss: 0.0515 - val_mae: 0.1760 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0338 - mae: 0.1445 - val_loss: 0.0509 - val_mae: 0.1742 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0342 - mae: 0.1454 - val_loss: 0.0484 - val_mae: 0.1711 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0341 - mae: 0.1451 - val_loss: 0.0508 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0340 - mae: 0.1450 - val_loss: 0.0477 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.04758\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0341 - mae: 0.1451 - val_loss: 0.0490 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0341 - mae: 0.1448 - val_loss: 0.0610 - val_mae: 0.1920 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0344 - mae: 0.1458 - val_loss: 0.0616 - val_mae: 0.1925 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.04758\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0339 - mae: 0.1445 - val_loss: 0.0512 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0340 - mae: 0.1450 - val_loss: 0.0491 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0339 - mae: 0.1448 - val_loss: 0.0590 - val_mae: 0.1902 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04758\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0334 - mae: 0.1437 - val_loss: 0.0504 - val_mae: 0.1741 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.04758 to 0.03259, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0149 - mae: 0.0961 - val_loss: 0.0326 - val_mae: 0.1388 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.03259 to 0.03196, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0129 - mae: 0.0902 - val_loss: 0.0320 - val_mae: 0.1373 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.03196 to 0.03192, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0122 - mae: 0.0876 - val_loss: 0.0319 - val_mae: 0.1370 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.03192 to 0.03161, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0118 - mae: 0.0861 - val_loss: 0.0316 - val_mae: 0.1360 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss improved from 0.03161 to 0.03151, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0115 - mae: 0.0850 - val_loss: 0.0315 - val_mae: 0.1359 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.03151 to 0.03150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0112 - mae: 0.0840 - val_loss: 0.0315 - val_mae: 0.1356 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.03150\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0110 - mae: 0.0832 - val_loss: 0.0317 - val_mae: 0.1361 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.03150 to 0.03148, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0108 - mae: 0.0825 - val_loss: 0.0315 - val_mae: 0.1354 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0106 - mae: 0.0820 - val_loss: 0.0317 - val_mae: 0.1358 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0105 - mae: 0.0813 - val_loss: 0.0318 - val_mae: 0.1363 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0104 - mae: 0.0809 - val_loss: 0.0318 - val_mae: 0.1360 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0803 - val_loss: 0.0318 - val_mae: 0.1357 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0800 - val_loss: 0.0322 - val_mae: 0.1368 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0797 - val_loss: 0.0321 - val_mae: 0.1362 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0793 - val_loss: 0.0321 - val_mae: 0.1362 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0789 - val_loss: 0.0322 - val_mae: 0.1366 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0785 - val_loss: 0.0325 - val_mae: 0.1370 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0782 - val_loss: 0.0330 - val_mae: 0.1383 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0780 - val_loss: 0.0324 - val_mae: 0.1369 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0323 - val_mae: 0.1362 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0095 - mae: 0.0774 - val_loss: 0.0322 - val_mae: 0.1363 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0095 - mae: 0.0772 - val_loss: 0.0324 - val_mae: 0.1365 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0769 - val_loss: 0.0323 - val_mae: 0.1365 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0093 - mae: 0.0767 - val_loss: 0.0325 - val_mae: 0.1370 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0093 - mae: 0.0764 - val_loss: 0.0326 - val_mae: 0.1368 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0092 - mae: 0.0763 - val_loss: 0.0329 - val_mae: 0.1374 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0080 - mae: 0.0708 - val_loss: 0.0318 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0079 - mae: 0.0702 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0078 - mae: 0.0701 - val_loss: 0.0318 - val_mae: 0.1349 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0078 - mae: 0.0700 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0078 - mae: 0.0699 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0078 - mae: 0.0698 - val_loss: 0.0317 - val_mae: 0.1346 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0078 - mae: 0.0698 - val_loss: 0.0318 - val_mae: 0.1346 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0318 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0696 - val_loss: 0.0318 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0696 - val_loss: 0.0317 - val_mae: 0.1346 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0318 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-05\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0319 - val_mae: 0.1347 - learning_rate: 1.0000e-05\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-05\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0319 - val_mae: 0.1347 - learning_rate: 1.0000e-05\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0687 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0318 - val_mae: 0.1346 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0318 - val_mae: 0.1347 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0319 - val_mae: 0.1348 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0319 - val_mae: 0.1347 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0318 - val_mae: 0.1346 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.03148\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0319 - val_mae: 0.1347 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0319 - val_mae: 0.1347 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.03148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0319 - val_mae: 0.1347 - learning_rate: 1.0000e-06\n",
      "Epoch 255: early stopping\n",
      "Restoring model weights from the end of the best epoch: 205.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.2134 m\n",
      "Median positioning error: 0.1901 m\n",
      "90th percentile error: 0.3788 m\n"
     ]
    },
    {
     "data": {
      "image/png": "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li1bho0bN+LBBx/Exx9/jP/9738AgMTERGRnZzf5cfT169cjMzMTCxYswLZt2/DAAw/g/vvvb9RmcnIy8vLycOjQIXz77be47bbb8Oabb2LIkCE4cuRIk/Xt3LkTR44cwXvvvYdt27bh4osvbvHiYkDtauJNLW6YmJgY8l8oiIuLQ2ZmZkhj+uPp+7r/9u/f7/f+1dXVjbZ5VuIPVnMf11KcpBMRkaV03cC972/C35btBgBcO7Q95l4/UHBWRERqW7NmDR577DE8/fTTeOqppzB8+HDk5uZi3Lhx+OCDD3DTTTchMzMTF198MV577bVGj3/99ddx6aWXIj09vd726OhoZGdne//FxcUhJiam3jbPitf+rF69Gk8//TSefPJJTJs2DV27dkWvXr3w6KOP4u6778a0adNw8OBBAMC///1vvPXWW/jXv/6FP//5zxgyZAhyc3NxySWX4Msvv8SYMWOC6pdbbrkFzz//PM4991x07twZN9xwAyZPntzohQpN05CdnY2cnBz06tULt956K1auXInS0lL86U9/arKdzMxM5OTkYNSoUXjooYfwww8/YPfu2uvgiy++iG7duiEzMxO9evXCm2++6X2cYRh4+OGH0aFDB8TExKBNmza48847vbfX/bh7bm4uAOCyyy6Dpmnevxt+3F3XdcyaNQvt2rVDTEwM+vfvj8WLF3tv37dvHzRNw4cffogxY8YgPj4e/fr1w6pVq7z3afjJCE8bb775JnJzc5GSkoJrrrkGJSU//4xqSUkJrr/+eiQkJCAnJwfPPvssRo8ejbvvvvu0fefp+7r/srKyvLePHj0aU6dOxd13341WrVph/Pjx3k8wfPbZZxg0aBBiYmLwzTffoKqqCnfeeScyMzMRGxuLc845B2vXrvXG8vc4q3GSTkrSNA3x8fFSrMgqG5X6RuZaROdmZfvBtGUYBh5fvAP/XncIAHDPuO6YfXlfvz+1ZkYdoseGSBUqHUuB1mIYBsqrayz/V1mjt/ij+G+99RYSExPx29/+1uftngnXrbfeii+//LLeO5X79u3DV199hVtvvbVFOfjzr3/9C4mJifjNb37TaLX0e+65By6XCx988IG3jh49euCSSy5pFEfTNKSkpPhtJ9CV2IuLixu9GOFLZmYmrrvuOixcuDCod8Xj4uIA1L7j+5///Ad33XUXpk2b5n2HfvLkyVi2bBmA2q8nPPvss3jppZewa9cufPTRRzjzzDN9xvVMNl9//XXk5eXVm3zW9fzzz+Ppp5/GnDlzsHnzZowfPx6//OUvsWvXrnr3e+CBBzB9+nRs3LgR3bt3x7XXXnvad5X37NmDjz76CJ988gk++eQTrFixAo8//rj39mnTpmHlypVYuHAhlixZgq+//hobNmwIuN9O54033kB0dDRWrlyJefPmebffd999ePzxx7F9+3b07dsX9957Lz744AO88cYb2LBhA7p27Yrx48ejoKCgXryGjwsFru5OEc9zsaXGVOobmWsRnZuV7QfaVllVDWb+d5t3gv7kr/riqsHtQxI7GKLHhsILV3f3T6VjKdBaKlxu9H7ocwsyauyHWeMRH93899d27dqFzp07w+Hw/aKox/jx49GmTRu8/vrr3sXX3nzzTbRv3x7nn39+s9s/nR9//BFdunRBTExMo9vatGmD5ORk7/efd+3ahR49egTdRqArsX/77bd499138emnnwYUs1evXigpKcHJkycD+vh3Xl4e5syZg7Zt26JHjx64/fbbcfPNN+OOO+6A0+nEwIED8d1332HOnDkYM2YMDhw4gOzsbIwdOxYOhwMdOnTA0KFDfcZu3bo1gNoXXLKzs/3mMGfOHPzpT3/CNddcAwB44oknsGzZMjz33HOYO3eu937Tp0/HL37xCwDAzJkz0adPH+zevRs9e/b0GVfXdcyfP9/7Swk33ngjli5dikcffRQlJSV444038Pbbb3v3o9dffx1t2rRpss+Ki4uRmJhYb9vIkSPx2Wefef/u1q0bnnzySe/feXl5AIBZs2Zh3LhxAICysjK8+OKLmD9/Pi688EIAwCuvvIIlS5bgH//4B/74xz96H1/3caHC1d0p4hmGgeLiYmkXgBFJpb6RuRbRuVnZfiBtGYaBya+vxb/XHYJNA2Zd0qfJCXqgsc3Il8iDq7v7p9KxFA61tDS3QB9vt9tx0003Yf78+d7Vy9944w3cfPPNpv4muGEY3u//NnU9aW78CRMmIDExEYmJiejTp0+j+2zduhWXXHIJZsyYgQsuuCCgmJ53lpuagLVr1w4JCQlo06YNysrK8MEHHyA6Ohrbt2/HiBEj6t13xIgR2L59OwDgyiuvREVFBTp37owpU6bgP//5T4u+I+10OnHkyJHTtulR9x3knJwcAMCxY8f8xs7Nza33U4Y5OTne++/duxcul6veCwwpKSkBveCSlJSEjRs31vv36quv1rvPoEGDfD528ODB3v/fs2cPXC5XvdodDgeGDh3aqPa6jwuVYPZdvpNOSjIMAy6XC4ZhKPExvFBSqW9krkV0bla2H0hbsz/bgTX7aj9K9sqkwTi/V5bP+zUnthn5ElHTVDqWAq0lzmHHD7PGW5jZzxPBOEfLfo+7e/fu+Oabb+ByuZp8N/2WW27B7Nmz8eWXX8LtduPgwYOYPHlyi9oPJLfq6upGLwQcOXIETqcT3bt39953x44dzWpn3rx5cLlc0DStUR/88MMPOP/883HbbbfhL3/5S8Axd+zYgeTk5CYXZvv666+RnJyMzMzMehPZprRv3x47d+7EF198gSVLluC3v/0tnnrqKaxYsaLJcWypuvE9x8XpfmmgYT6apjXrlwkastls6Nq162nvk5CQENT2pjT3cafD1d2JiEgaq/eexMtf1f7UzCOX9Al4gk5EJBtN0xAfHSXkX0tfCLnuuutQWlqKv//97z5vLyoq8v5/ly5dcO655+K1117D/Pnzcf7556Njx44tav90rrnmGpSWluKll15qdNucOXPgcDhwxRVXAKit48cff8THH3/c6L6eT0T407ZtW3Tt2hVdu3atV8+2bdswZswY3HTTTXj00UcDzvvYsWN45513cOmllzb5KYNOnTqhS5cujSbovXr1wsqVK+ttW7lyJXr37u39Oy4uDhdffDFeeOEFLF++HKtWrcKWLVt8tuNwOE77/fjk5GS0adOmyTZDzfNVi7rfky8uLrbkZ9w8unTp4v3euofL5cLatWtNrb05+E46ERGZpry6Bve+vxlA7SruN56dKzYhIqIINWzYMNx777245557cPjwYVx22WVo06YNdu/ejXnz5uGcc87BXXfd5b3/rbfeiilTpgBAo48WN5fb7cbGjRvrbYuJicHZZ5+Nu+66C/feey8qKytx+eWXo6amBgsWLMDzzz+P5557Du3b135F6qqrrsJ//vMfXHvttfjLX/6CCy64AK1bt8aWLVvw7LPP4ve//z0uvfTSgHPaunUrzjvvPIwfPx7Tpk1Dfn4+gNqP/Xu+4w3UvgCQn58PwzBQVFSEVatW4bHHHkNKSgpmz57d7D754x//iKuuugr9+vXDWWedheXLl+PDDz/EF198AaB2FXW3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8Mknn2DFihV4/PHHvbfPnj0b//znPzFv3jxs27YNf/jDH3DDDTdgxYoVLesMCXCSTkREp1VaVYMrXvwWX+6ofSLw2GVnontWkuCsiIjEKXrxHezrezn29b0cFSvrf1fbtf+I97bj9z3b6LF5N9znvb0h578WeW8r/aT5E41hw4Zh/vz5WLx4MV588UX89NNPGDlypPddyPz8fERHRzdaqCsrKwv5+fkAgPvuuw9RUVHo2rUrPv74Y7z66qvYtWsX3njjDTz44IO4/fbb0blzZ1x11VUoLi4OKK/Zs2fj+uuvx913341u3bph+PDheOGFF/DPf/4TlZWVAcXYtWsX5s2bh8GDByMpKQlz5szBn/70J1xzzTXo0aMHnnjiCfTv39/77vKBAwfQrVs3nHPOOejYsSPOOeccXHvttT5jt27dGgCQkZGB7OxspKenN7pPWVkZXnzxRTz11FO48MIL0bt3b7z88suIi4vDP/7xj3r3ffTRR3Huueeid+/euO+++/Dtt9+ets7U1FT83//9H3r27ImLLroIv/jFL7zfW9+xYwe++OILvPLKKxg2bBgGDhyIV199FRUVFU322ZYtW7wfr/f8u/322+vd57zzzsM999yDLl26oEuXLgBqPzXx97//HcOHD0ePHj1w+PBhLFy4EK+++ipGjhyJfv364a233sLhw4frLb7X8HHx8fFN5uiLruuYP38+zjjjDIwcORI33nijtz+qqqrw2GOP4bXXXsP48ePRuXNn3Hzzzbjhhhvw0ksvNas9mfA76URE5FdxhQs3vbYGP+Q5kZ4QjTlX9sV5PbNEp0VEJJReUg533nEAgFFVXf9Gt+69TS8uafhQuE8WeW9vyCiv/DluRWCTVl88C6EBQN++fTFs2DB07NgR//73v3HrrbcGFCMlJQVvv/229yPoUVFROP/88/HUU0/hrbfewt69e7Fz505MmTIFs2bNarSInC+bNm3C5s2b8dZbb3m3GYYBXdfx008/+V3MrLi4GImJidB1HZWVlTjnnHPw6quvwul04siRIxgxYkS9+48YMQKbNm0CUPtR9XHjxqFnz5644IILcPHFF2P8+PEB9YEve/bsgcvlqtemw+HA0KFDvV8J8PB8+gAAcnJyAADHjh1Dhw4dfMbu2bNnva8Q5OTkYMuWLQCAnTt3IioqCgMHDvTe3rVrV6SlpTWZ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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACZQklEQVR4nOzdd3hUZdrH8e+ZSa9AgIQSeq8iIiIWVBRQERUbouKKuiriYlldXjsWbOuyiuLqIugqoqggFkRAQKQLgiAdAgmQQgLpySSZOe8fJzPJQOjJTEh+n+uaK5kzz5xzT0DyeJ/7uR/DNE0TERERERERERERH7L5OwAREREREREREal9lJQSERERERERERGfU1JKRERERERERER8TkkpERERERERERHxOSWlRERERERERETE55SUEhERERERERERn1NSSkREREREREREfE5JKRERERERERER8TklpURERERERERExOeUlBKRWsUwDJ577rmTft/u3bsxDIOpU6dWekwiIiIi/qT5kYj4i5JSIuJzU6dOxTAMDMPg119/PeJ10zSJj4/HMAyuvvpqP0R46hYtWoRhGHz55Zf+DkVERETOILVhfmQYBp988kmFY/r27YthGHTp0qXC151OJ40bN8YwDObMmVPhmOeee85znYoeKSkplfaZRKRyBPg7ABGpvUJCQpg2bRoXXHCB1/HFixezd+9egoOD/RSZiIiIiH/U5PmR+7PddtttXsd3797NsmXLCAkJOep7f/75Z5KTk2nRogWffvopgwYNOurYSZMmERERccTxOnXqnHLsIlI1lJQSEb+58sormTFjBm+99RYBAWX/HE2bNo2ePXuSnp7ux+hEREREfK8mz4+uvPJKZs+eTXp6OvXr1/ccnzZtGrGxsbRt25ZDhw5V+N5PPvmEs88+mxEjRvB///d/5OXlER4eXuHYG264wev8IlJ9afmeiPjNsGHDyMjIYN68eZ5jRUVFfPnll9x6660VvicvL49HH32U+Ph4goODad++PW+88QamaXqNczgcPPzwwzRo0IDIyEiuueYa9u7dW+E59+3bx1133UVsbCzBwcF07tyZDz/8sPI+aAV27drFjTfeSL169QgLC+O8887j+++/P2Lc22+/TefOnQkLC6Nu3bqcc845TJs2zfN6Tk4OY8aMoUWLFgQHB9OwYUMuv/xy1q5dW6Xxi4iISNWoyfOjIUOGEBwczIwZM7yOT5s2jZtuugm73V7h+woKCpg5cya33HILN910EwUFBXzzzTenFYuIVA9KSomI37Ro0YI+ffrw2WefeY7NmTOHrKwsbrnlliPGm6bJNddcw7/+9S8GDhzIm2++Sfv27fn73//OI4884jX27rvvZsKECVxxxRW88sorBAYGctVVVx1xztTUVM477zzmz5/Pgw8+yL///W/atGnDyJEjmTBhQqV/Zvc1zz//fObOncsDDzzASy+9RGFhIddccw0zZ870jPvggw946KGH6NSpExMmTOD555/nrLPOYuXKlZ4x9913H5MmTWLo0KG8++67PPbYY4SGhrJ58+YqiV1ERESqVk2eH4WFhTFkyBCvz7Z+/Xr+/PPPoybcAGbPnk1ubi633HILcXFx9OvXj08//fSo4w8ePEh6errXIzMz85TjFpEqZIqI+NiUKVNMwFy9erU5ceJEMzIy0szPzzdN0zRvvPFG85JLLjFN0zSbN29uXnXVVZ73zZo1ywTMF1980et8N9xwg2kYhrljxw7TNE1z3bp1JmA+8MADXuNuvfVWEzCfffZZz7GRI0eajRo1MtPT073G3nLLLWZ0dLQnroSEBBMwp0yZcszPtnDhQhMwZ8yYcdQxY8aMMQFzyZIlnmM5OTlmy5YtzRYtWphOp9M0TdMcMmSI2blz52NeLzo62hw1atQxx4iIiEj1V1vmR999951pGIaZmJhomqZp/v3vfzdbtWplmqZpXnzxxRXOfa6++mqzb9++nufvv/++GRAQYKalpXmNe/bZZ02gwkf79u2PGaOI+IcqpUTEr9wl2N999x05OTl89913R71T9sMPP2C323nooYe8jj/66KOYpunZieWHH34AOGLcmDFjvJ6bpslXX33F4MGDMU3T627agAEDyMrKqpJlcD/88APnnnuuVwPTiIgI7r33Xnbv3s2mTZsAqxnn3r17Wb169VHPVadOHVauXMn+/fsrPU4RERHxj5o8P7riiiuoV68e06dPxzRNpk+fzrBhw446PiMjg7lz53qNGTp0KIZh8MUXX1T4nq+++op58+Z5PaZMmXLKMYtI1VGjcxHxqwYNGtC/f3+mTZtGfn4+TqeTG264ocKxe/bsoXHjxkRGRnod79ixo+d191ebzUbr1q29xrVv397r+YEDB8jMzOT999/n/fffr/CaaWlpp/S5jmXPnj307t37iOPlP0eXLl144oknmD9/Pueeey5t2rThiiuu4NZbb6Vv376e97z22muMGDGC+Ph4evbsyZVXXskdd9xBq1atKj1uERER8Y2aPD8KDAzkxhtvZNq0aZx77rkkJSUdc+ne559/TnFxMT169GDHjh2e47179+bTTz9l1KhRR7znoosuUqNzkTOEklIi4ne33nor99xzDykpKQwaNMhn2/W6XC4AbrvtNkaMGFHhmG7duvkklop07NiRrVu38t133/Hjjz/y1Vdf8e677/LMM8/w/PPPA9ad1AsvvJCZM2fy008/8frrr/Pqq6/y9ddfH3OrZBEREaneavL86NZbb+W9997jueeeo3v37nTq1OmoY929o8rflCtv165duhkncgZTUkpE/O66667jr3/9KytWrODzzz8/6rjmzZszf/58cnJyvO4GbtmyxfO6+6vL5WLnzp1ed/+2bt3qdT73zjNOp5P+/ftX5kc6pubNmx8RCxz5OQDCw8O5+eabufnmmykqKuL666/npZdeYuzYsYSEhADQqFEjHnjgAR544AHS0tI4++yzeemll5SUEhEROYPV5PnRBRdcQLNmzVi0aBGvvvrqUcclJCSwbNkyHnzwQS6++GKv11wuF7fffjvTpk3jqaeeqpI4RaTqqaeUiPhdREQEkyZN4rnnnmPw4MFHHXfllVfidDqZOHGi1/F//etfGIbhScK4v7711lte4w7fLcZutzN06FC++uorNm7ceMT1Dhw4cCof57iuvPJKVq1axfLlyz3H8vLyeP/992nRooXnbmFGRobX+4KCgujUqROmaVJcXIzT6SQrK8trTMOGDWncuDEOh6NKYhcRERHfqMnzI8MweOutt3j22We5/fbbjzrOXSX1+OOPc8MNN3g9brrpJi6++OJj7sInItWfKqVEpFo4Wnl4eYMHD+aSSy7hySefZPfu3XTv3p2ffvqJb775hjFjxnh6JJx11lkMGzaMd999l6ysLM4//3wWLFjg1YfA7ZVXXmHhwoX07t2be+65h06dOnHw4EHWrl3L/PnzOXjw4Cl9nq+++spzh/Lwz/mPf/yDzz77jEGDBvHQQw9Rr149PvroIxISEvjqq6+w2az7BVdccQVxcXH07duX2NhYNm/ezMSJE7nqqquIjIwkMzOTpk2bcsMNN9C9e3ciIiKYP38+q1ev5p///OcpxS0iIiLVR02bH5U3ZMgQhgwZcswxn376KWeddRbx8fEVvn7NNdcwevRo1q5dy9lnn+05/uWXXxIREXHE+Msvv5zY2NjTC1xEKpWSUiJyxrDZbMyePZtnnnmGzz//nClTptCiRQtef/11Hn30Ua+xH374IQ0aNODTTz9l1qxZXHrppXz//fdHTGpiY2NZtWoV48aN4+uvv+bdd98lJiaGzp07H7Oc/HimT59e4fF+/fpxwQUXsGzZMp544gnefvttCgsL6datG99++y1XXXWVZ+xf//pXPv30U958801yc3Np2rQpDz30kKdEPSwsjAceeICffvqJr7/+GpfLRZs2bXj33Xe5//77Tzl2EREROXOcSfOjk7F27Vq2bNnC008/fdQxgwcPZvTo0XzyySdeSamjzYMWLlyopJRINWOYpmn6OwgREREREREREald1FNKRERERERERER8TkkpERERERERERHxOSWlRERERERERETE55SUEhERERERERERn1NSSkREREREREREfE5JKREREZEapkWLFhiGccRj1KhR/g5NRERExCPA3wFUBy6Xi/379xMZGYlhGP4OR0RERM4gpmmSk5ND48aNsdmqx/2+1atX43Q6Pc83btzI5Zdfzo033nhC79fcSERERE7Hic6PDNM0TR/GVS3t3buX+Ph4f4chIiIiZ7CkpCSaNm3q7zAqNGbMGL777ju2b99+QkkmzY1ERESkMhxvfqRKKSAyMhKwflhRUVF+jkZERETOJNnZ2cTHx3vmE9VNUVERn3zyCY888shRE1IOhwOHw+F57r5nqbmRiIiInIoTnR8pKQWeCVpUVJQmXiIiInJKqusyt1mzZpGZmcmdd9551DHjx4/n+eefP+K45kYiIiJyOo43P6oejQ9EREREpEpMnjyZQYMG0bhx46OOGTt2LFlZWZ5HUlKSDyMUERGR2kqVUiIiIiI11J49e5g/fz5ff/31MccFBwcTHBzso6hERERELKqUEhEREamhpkyZQsOGDbnqqqv8HYqIiIjIEVQpJSIiNYrT6aS4uNjfYUgNExQUdMztjKsjl8vFlClTGDFiBAEBmvKJiNRWLpeLoqIif4chNUxgYCB2u/20z+PXGcovv/zC66+/zpo1a0hOTmbmzJlce+21ntdN0+TZZ5/lgw8+IDMzk759+zJp0iTatm3rGXPw4EFGjx7Nt99+i81mY+jQofz73/8mIiLCD59IRET8xTRNUlJSyMzM9HcoUgPZbDZatmxJUFCQv0M5YfPnzycxMZG77rrL36GIiIifFBUVkZCQgMvl8ncoUgPVqVOHuLi409rsxa9Jqby8PLp3785dd93F9ddff8Trr732Gm+99RYfffQRLVu25Omnn2bAgAFs2rSJkJAQAIYPH05ycjLz5s2juLiYv/zlL9x7771MmzbN1x9HRET8yJ2QatiwIWFhYdV2JzQ587hcLvbv309ycjLNmjU7Y/5uXXHFFZim6e8wRETET0zTJDk5GbvdTnx8/BlX8SvVl2ma5Ofnk5aWBkCjRo1O+Vx+TUoNGjSIQYMGVfiaaZpMmDCBp556iiFDhgDw8ccfExsby6xZs7jlllvYvHkzP/74I6tXr+acc84B4O233+bKK6/kjTfeOOYuMyIiUnM4nU5PQiomJsbf4UgN1KBBA/bv309JSQmBgYH+DkdEROS4SkpKyM/Pp3HjxoSFhfk7HKlhQkNDAUhLS6Nhw4anvJSv2qZKExISSElJoX///p5j0dHR9O7dm+XLlwOwfPly6tSp40lIAfTv3x+bzcbKlSuPem6Hw0F2drbXQ0REzlzuHlKacElVcS/bczqdfo5ERETkxLh/Z51JS8/lzOKee59OP9dqm5RKSUkBIDY21ut4bGys57WUlBQaNmzo9XpAQAD16tXzjKnI+PHjiY6O9jzi4+MrOXoREfGHM2VZlZx59HdLRETOVPodJlWlMv5uVdukVFUaO3YsWVlZnkdSUpK/QxIRERERERERqVWqbVIqLi4OgNTUVK/jqampntfi4uI8jbXcSkpKOHjwoGdMRYKDg4mKivJ6VJVVCQfp+8rP3DllVZVdQ0RExK1FixZMmDDhhMcvWrQIwzC0a6H41HuLd9L3lZ/59/zt/g5FRERqAc2Pqq9qm5Rq2bIlcXFxLFiwwHMsOzublStX0qdPHwD69OlDZmYma9as8Yz5+eefcblc9O7d2+cxV8RR4mRfZgGp2Q5/hyIiItWIYRjHfDz33HOndN7Vq1dz7733nvD4888/n+TkZKKjo0/peidKkzspL7ugmH2ZBRzKL/J3KCIiUo3U1vlR3bp1KSws9Hpt9erVns9dkQ4dOhAcHFxh66J+/fpV+PO77777quRznA6/7r6Xm5vLjh07PM8TEhJYt24d9erVo1mzZowZM4YXX3yRtm3b0rJlS55++mkaN27MtddeC0DHjh0ZOHAg99xzD++99x7FxcU8+OCD3HLLLdVm5z1b6V8gl0tbMouISJnk5GTP959//jnPPPMMW7du9RyLiIjwfG+aJk6nk4CA4//abtCgwUnFERQUdMzqYpGqEGArnR+Zmh+JiEiZ2jo/ioyMZObMmQwbNsxzbPLkyTRr1ozExMQjxv/6668UFBRwww038NFHH/HEE08cMeaee+5h3LhxXseq46ZAfq2U+u233+jRowc9evQA4JFHHqFHjx4888wzADz++OOMHj2ae++9l169epGbm8uPP/5ISEiI5xyffvopHTp04LLLLuPKK6/kggsu4P333/fL56mIO6mpSZeIiJQXFxfneURHR2MYhuf5li1biIyMZM6cOfTs2ZPg4GB+/fVXdu7cyZAhQ4iNjSUiIoJevXoxf/58r/MeXp5uGAb//e9/ue666wgLC6Nt27bMnj3b8/rhFUxTp06lTp06zJ07l44dOxIREcHAgQO9JoklJSU89NBD1KlTh5iYGJ544glGjBjhuWl0Kg4dOsQdd9xB3bp1CQsLY9CgQWzfXra0a8+ePQwePJi6desSHh5O586d+eGHHzzvHT58OA0aNCA0NJS2bdsyZcqUU45Fqp6tNClVopt2IiJSTm2dH40YMYIPP/zQ87ygoIDp06czYsSICsdPnjyZW2+9ldtvv93rfeWFhYV5/Tzj4uKqtHXRqfJrUqpfv36YpnnEY+rUqYD1F2XcuHGkpKRQWFjI/Pnzadeundc56tWrx7Rp08jJySErK4sPP/zQK3vqb3ZDdwJFRHzNNE3yi0r88jAr8d/7f/zjH7zyyits3ryZbt26kZuby5VXXsmCBQv4/fffGThwIIMHD67wDlp5zz//PDfddBN//PEHV155JcOHD+fgwYNHHZ+fn88bb7zB//73P3755RcSExN57LHHPK+/+uqrfPrpp0yZMoWlS5eSnZ3NrFmzTuuz3nnnnfz222/Mnj2b5cuXY5omV155pWeL4VGjRuFwOPjll1/YsGEDr776quf3/dNPP82mTZuYM2cOmzdvZtKkSdSvX/+04pGqZVcluYiIz2l+5K06zY9uv/12lixZ4on5q6++okWLFpx99tlHjM3JyWHG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IiIiTjoOOXnupJQqpUREfEjzI6BmzY/uuusu+vXrx7///W/CwsKYOnUqAwcOJDY29oixO3fuZPny5Xz99deYpsnDDz/Mnj17aN68+XF/ZlVJSakq5p2UMrGjrJSISJUrzoeXG/vn2v+3H4JO7G7SXXfdxeuvv87ixYvp168fYJWmDx06lOjoaKKjo3nsscc840ePHs3cuXP54osvTmjSNX/+fLZs2cLcuXNp3Nj6ebz88stH9Dl46qmnPN+3aNGCxx57jOnTp/P4448TGhpKREQEAQEBxMXFHfVa06ZNo7CwkI8//thzN23ixIkMHjyYV1991TM5qlu3LhMnTsRut9OhQweuuuoqFixYcEpJqQULFrBhwwYSEhKIj48H4OOPP6Zz586sXr2aXr16kZiYyN///nc6dOgAQNu2bT3vT0xMZOjQoXTt2hWAVq1anXQMcmqUlBIR8QPNj4CaNT/q0aMHrVq14ssvv+T2229n6tSpvPnmm+zateuIsR9++CGDBg2ibt26AAwYMIApU6bw3HPPeY174oknvD47wJw5c7jwwguPGcup0vK9KmYr9xNWXykRESmvQ4cOnH/++Z6y6x07drBkyRJGjhwJgNPp5IUXXqBr167Uq1ePiIgI5s6dS2Ji4gmdf/PmzcTHx3smXAB9+vQ5Ytznn39O3759iYuLIyIigqeeeuqEr1H+Wt27d/cq7+7bty8ul4utW7d6jnXu3Bm73e553qhRI9LS0k7qWuWvGR8f70lIAXTq1Ik6deqwefNmAB555BHuvvtu+vfvzyuvvMLOnTs9Yx966CFefPFF+vbty7PPPntKjVOrs3379nHbbbcRExNDaGgoXbt29Sxd9DftviciIkej+dHJzY/uuusupkyZwuLFi8nLy+PKK688YozT6eSjjz7itttu8xy77bbbmDp1Ki6Xy2vs3//+d9atW+f1OOecc074M58sVUpVsfKVUspJiYj4SGCYdUfOX9c+CSNHjmT06NG88847TJkyhdatW3PxxRcD8Prrr/Pvf/+bCRMm0LVrV8LDwxkzZgxFRUWVFu7y5csZPnw4zz//PAMGDCA6Oprp06fzz3/+s9KuUZ576ZybYRhHTIYq03PPPcett97K999/z5w5c3j22WeZPn061113HXfffTcDBgzg+++/56effmL8+PH885//rNJmnr5y6NAh+vbt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+S6wk+SplNKdQBEREREA7O6bdpofiYiI1FrVuqdUTVHWU8rPgYiIiIhUE7bSu3YlmiCJiIjUWkpK+YAaeYqIiIh4U6WUiIiIKCnlA+7le6aSUiIiIiJAWaWUekqJiIjUXkpK+YCW74mIiIh4s2v3PRERkVpPSSkf8DQ6151AEREREaBs9z3Nj0RERGovJaV8wKZKKREREREvNk+llJ8DEREREb9RUsoH3JMu9ZQSERERsbg3gnG6lJUSERGprZSU8gFDy/dERETEh5577jkMw/B6dOjQwd9heVGllIiIiAT4O4DawLN8T5MuERER8ZHOnTszf/58z/OAgOo17bOX3hrV7nsiIiK1V/WandRQanQuIiIivhYQEEBcXJy/wzgq9/I9l5puioiI1FpavucDZT2l/ByIiIiI1Brbt2+ncePGtGrViuHDh5OYmOjvkLzYbdY01KmklIiISK2lSikfMNw9E5SVEhERER/o3bs3U6dOpX379iQnJ/P8889z4YUXsnHjRiIjI48Y73A4cDgcnufZ2dlVHqNdleQiIiK1npJSPqDleyIiIuJLgwYN8nzfrVs3evfuTfPmzfniiy8YOXLkEePHjx/P888/78sQsZVOkEpUKSUiIlJrafmeD3h6JmjOJSIiIn5Qp04d2rVrx44dOyp8fezYsWRlZXkeSUlJVR6T3bP7niZIIiIitZWSUj5Q1lNKky4RERHxvdzcXHbu3EmjRo0qfD04OJioqCivR1VTo3MRERFRUsoHDPfyPU26RERExAcee+wxFi9ezO7du1m2bBnXXXcddrudYcOG+Ts0D3dSSj03RUREai/1lPIBd6WUclIiIiLiC3v37mXYsGFkZGTQoEEDLrjgAlasWEGDBg38HZqHKqVERERESSkfUKNzERER8aXp06f7O4Tjsml3YhERkVpPy/d8oKynlJ8DEREREakm7Np9T0REpNZTUsoHDM/yPU26REREREDL90RERERJKZ8oW77n3zhEREREqgvP8j2XnwMRERERv1FSygdsqpQSERER8RJg0/xIRESktlNSygdspT9llaeLiIiIWGw2d6WU5kciIiK1lZJSPlDWU8rPgYiIiIhUE3btviciIlLrKSnlA3Yt3xMRERHxYi+dhTqdmh+JiIjUVkpK+YC70bmppJSIiIgIUG75nuZHIiIitZaSUj6g5XsiIiIi3jyV5JogiYiI1FpKSvmAdt8TERER8WZXpZSIiEitp6SUD7iX7+lGoIiIiIjFrt33REREaj0lpXzA3TNBPaVERERELO6klCrJRUREai8lpXzA8FRKadIlIiIiAmXtDUq0+56IiEitpaSUD9jU6FxERETEiyqlREREREkpH7CpUkpERETEi3v3PfWUEhERqb2UlPIBd6WUclIiIiIilrLd9/wciIiIiPiNklI+YOhOoIiIiIgXz/I9zY9ERERqLSWlfEDL90RERES8uXcn1k07ERGR2ktJKR+wq9G5iIiIiBf1lBIRERElpXzAfSfQVKWUiIiICAD20lmoU/MjERGRWktJKR8wtHxPRERExIvdZk1DVSklIiJSeykp5QM2Ld8TERER8eKulNJNOxERkdpLSSkfUKNzEREREW829ZQSERGp9ZSU8gH3pEs5KRERERGLXbvviYiI1HpKSvmA4Vm+p0mXiIiICGj3PREREVFSyifKlu/5Nw4RERGR6sK9O7F23xMREam9qn1Sat++fdx2223ExMQQGhpK165d+e233zyvm6bJM888Q6NGjQgNDaV///5s377djxEfyaZKKREREREvAaVJKZfu2omIiNRa1TopdejQIfr27UtgYCBz5sxh06ZN/POf/6Ru3bqeMa+99hpvvfUW7733HitXriQ8PJwBAwZQWFjox8i9uSulTCWlRERERABVSomIiAgE+DuAY3n11VeJj49nypQpnmMtW7b0fG+aJhMmTOCpp55iyJAhAHz88cfExsYya9YsbrnlFp/HXBFDPRNEREREvLh7Srlcfg5ERERE/KZaV0rNnj2bc845hxtvvJGGDRvSo0cPPvjgA8/rCQkJpKSk0L9/f8+x6OhoevfuzfLly/0RcoXKlu/5ORARERGRakK774mIiEi1Tkrt2rWLSZMm0bZtW+bOncv999/PQw89xEcffQRASkoKALGxsV7vi42N9bxWEYfDQXZ2ttejKtlLf8paviciIiJicd+0K1FSSkREpNaq1kkpl8vF2Wefzcsvv0yPHj249957ueeee3jvvfdO67zjx48nOjra84iPj6+kiCtmqFJKRERE/OiVV17BMAzGjBnj71A83JVS2ghGRESk9qrWSalGjRrRqVMnr2MdO3YkMTERgLi4OABSU1O9xqSmpnpeq8jYsWPJysryPJKSkio5cm/afU9ERET8ZfXq1fznP/+hW7du/g7Fi5bviYiISLVOSvXt25etW7d6Hdu2bRvNmzcHrKbncXFxLFiwwPN6dnY2K1eupE+fPkc9b3BwMFFRUV6PquTefU9zLhEREfGl3Nxchg8fzgcffOC1e3F14KmU0gRJRESk1qrWSamHH36YFStW8PLLL7Njxw6mTZvG+++/z6hRowA8Zegvvvgis2fPZsOGDdxxxx00btyYa6+91r/Bl+OulFJPKREREfGlUaNGcdVVV3ltClMRX/fbhLLd95yaH4mIiNRaAf4O4Fh69erFzJkzGTt2LOPGjaNly5ZMmDCB4cOHe8Y8/vjj5OXlce+995KZmckFF1zAjz/+SEhIiB8j92Z4KqU06RIRERHfmD59OmvXrmX16tXHHTt+/Hief/55H0RVxlZ6a1SNzkVERGqvap2UArj66qu5+uqrj/q6YRiMGzeOcePG+TCqk+PpKeXycyAiIiJSKyQlJfG3v/2NefPmndCNurFjx/LII494nmdnZ1f5RjBaviciIiLVPilVE6jRuYiIiPjSmjVrSEtL4+yzz/Ycczqd/PLLL0ycOBGHw4Hdbve8FhwcTHBwsE9j9DQ61/xIRESk1lJSygfcjc415xIRERFfuOyyy9iwYYPXsb/85S906NCBJ554wish5S92T89Nq++m4e53ICIiIrWGklI+YKiRp4iIiPhQZGQkXbp08ToWHh5OTEzMEcf9xV0pBeB0mQTYlZQSERGpbar17ns1hU2NzkVERES82MonpTRHEhERqZVUKeUDnkaemm+JiIiInyxatMjfIXixG96VUiIiIlL7qFLKB2yengmacImIiIjAkcv3REREpPZRUsoHDC3fExEREfFSPinlcvkxEBEREfEbJaV8wF0ppQmXiIiIiMVr+Z5u3ImIiNRKSkr5gCcppQmXiIiICHBYo3Mt3xMREamVlJTyAfecSzkpERERkTJlm8FokiQiIlIbKSnlA4YqpURERESO4F7CV6JKKRERkVpJSSkfsKnRuYiIiMgRbKUzUZeSUiIiIrXSKSWlkpKS2Lt3r+f5qlWrGDNmDO+//36lBVaTuHsmKCclIiIiR7Nq1SqcTudRX3c4HHzxxRc+jKjqBZRmpdRTSkREpHY6paTUrbfeysKFCwFISUnh8ssvZ9WqVTz55JOMGzeuUgOsCVQpJSIiIsfTp08fMjIyPM+joqLYtWuX53lmZibDhg3zR2hVxj1H0u57IiIitdMpJaU2btzIueeeC8AXX3xBly5dWLZsGZ9++ilTp06tzPhqBHdPKU24RERE5GjMw+YJhz8/2rEzmafRuSqlREREaqVTSkoVFxcTHBwMwPz587nmmmsA6NChA8nJyZUXXQ1hczc6d/k5EBERETmjuW901RTupJRu3ImIiNROp5SU6ty5M++99x5Llixh3rx5DBw4EID9+/cTExNTqQHWBO6dZWra3U0RERGR0+G+cVfi1BxJRESkNgo4lTe9+uqrXHfddbz++uuMGDGC7t27AzB79mzPsj4pY3h6Svk3DhEREaneNm3aREpKCmDdzNqyZQu5ubkApKen+zO0KuFZvqcbdyIiIrXSKSWl+vXrR3p6OtnZ2dStW9dz/N577yUsLKzSgqspPMv3NOESERGRY7jsssu8KquvvvpqwFq2Z5pmzV2+pzt3IiIitdIpJaUKCgowTdOTkNqzZw8zZ86kY8eODBgwoFIDrAlKdztWpZSIiIgcVUJCgr9D8DlVSomIiNRup5SUGjJkCNdffz333XcfmZmZ9O7dm8DAQNLT03nzzTe5//77KzvOM5pNPaVERETkOJo3b37cMRs3bvRBJL7j7rvp1GYwIiIitdIpNTpfu3YtF154IQBffvklsbGx7Nmzh48//pi33nqrUgOsCWyenlJKSomIiMjJycnJ4f333+fcc8/19PGsKWxaviciIlKrnVJSKj8/n8jISAB++uknrr/+emw2G+eddx579uyp1ABrAsPTU8rPgYiIiMgZ45dffmHEiBE0atSIN954g0svvZQVK1b4O6xKVVYppUmSiIhIbXRKSak2bdowa9YskpKSmDt3LldccQUAaWlpREVFVWqANYEanYuIiMiJSElJ4ZVXXqFt27bceOONREVF4XA4mDVrFq+88gq9evXyd4iVytPoXHMkERGRWumUklLPPPMMjz32GC1atODcc8+lT58+gFU11aNHj0oNsCZwL9/TfEtERESOZvDgwbRv354//viDCRMmsH//ft5++21/h1WlPI3OVSklIiJSK51So/MbbriBCy64gOTkZK/eBpdddhnXXXddpQVXU9hUmi4iIiLHMWfOHB566CHuv/9+2rZt6+9wqlZxARzaTUPzABCkOZKIiEgtdUqVUgBxcXH0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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6861.925908,
   "end_time": "2025-08-08T08:38:27.624683",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-08T06:44:05.698775",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
