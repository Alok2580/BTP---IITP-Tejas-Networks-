{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a33ee439",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-16T04:56:22.312645Z",
     "iopub.status.busy": "2025-08-16T04:56:22.312386Z",
     "iopub.status.idle": "2025-08-16T04:56:23.783961Z",
     "shell.execute_reply": "2025-08-16T04:56:23.783184Z"
    },
    "papermill": {
     "duration": 1.476157,
     "end_time": "2025-08-16T04:56:23.785204",
     "exception": false,
     "start_time": "2025-08-16T04:56:22.309047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "32d4b380",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:56:23.790712Z",
     "iopub.status.busy": "2025-08-16T04:56:23.790375Z",
     "iopub.status.idle": "2025-08-16T04:56:37.435162Z",
     "shell.execute_reply": "2025-08-16T04:56:37.434541Z"
    },
    "papermill": {
     "duration": 13.648696,
     "end_time": "2025-08-16T04:56:37.436540",
     "exception": false,
     "start_time": "2025-08-16T04:56:23.787844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-16 04:56:25.310125: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755320185.483551      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755320185.533619      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f1feb7fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:56:37.441801Z",
     "iopub.status.busy": "2025-08-16T04:56:37.441345Z",
     "iopub.status.idle": "2025-08-16T04:56:37.446038Z",
     "shell.execute_reply": "2025-08-16T04:56:37.445358Z"
    },
    "papermill": {
     "duration": 0.008235,
     "end_time": "2025-08-16T04:56:37.447072",
     "exception": false,
     "start_time": "2025-08-16T04:56:37.438837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 8     # 8,16,32,64,128, 256\n",
    "filter_size =9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bf87d6cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:56:37.451472Z",
     "iopub.status.busy": "2025-08-16T04:56:37.451162Z",
     "iopub.status.idle": "2025-08-16T04:56:37.454264Z",
     "shell.execute_reply": "2025-08-16T04:56:37.453619Z"
    },
    "papermill": {
     "duration": 0.006296,
     "end_time": "2025-08-16T04:56:37.455239",
     "exception": false,
     "start_time": "2025-08-16T04:56:37.448943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a8bd265c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T04:56:37.460203Z",
     "iopub.status.busy": "2025-08-16T04:56:37.459745Z",
     "iopub.status.idle": "2025-08-16T07:37:05.981900Z",
     "shell.execute_reply": "2025-08-16T07:37:05.981186Z"
    },
    "papermill": {
     "duration": 9628.525948,
     "end_time": "2025-08-16T07:37:05.982991",
     "exception": false,
     "start_time": "2025-08-16T04:56:37.457043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755320230.122154      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755320239.279976      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755320249.810626      56 service.cc:148] XLA service 0x7c9324016fb0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755320249.811409      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755320253.056294      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 8.85514, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 75.8138 - mae: 5.4491 - val_loss: 8.8551 - val_mae: 2.2865 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 8.85514 to 4.62774, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 7.3564 - mae: 2.0742 - val_loss: 4.6277 - val_mae: 1.6513 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 4.62774 to 3.73067, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 4.4224 - mae: 1.6030 - val_loss: 3.7307 - val_mae: 1.5406 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.73067 to 1.73250, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 3.3933 - mae: 1.3474 - val_loss: 1.7325 - val_mae: 1.0067 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.73250 to 1.49572, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 2.2235 - mae: 1.0630 - val_loss: 1.4957 - val_mae: 0.9474 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.49572 to 0.62641, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.2504 - mae: 0.8440 - val_loss: 0.6264 - val_mae: 0.6181 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.62641\n",
      "4375/4375 - 30s - 7ms/step - loss: 1.4960 - mae: 0.7978 - val_loss: 1.4009 - val_mae: 0.9044 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.62641 to 0.56308, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.7712 - mae: 0.6734 - val_loss: 0.5631 - val_mae: 0.5920 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.56308\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.5941 - mae: 0.6003 - val_loss: 0.7900 - val_mae: 0.7094 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.56308 to 0.52139, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.5019 - mae: 0.8251 - val_loss: 0.5214 - val_mae: 0.5654 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.52139\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.3451 - mae: 0.7654 - val_loss: 0.7093 - val_mae: 0.6557 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.52139 to 0.46253, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.4992 - mae: 0.5533 - val_loss: 0.4625 - val_mae: 0.5264 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.46253\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.3914 - mae: 0.7466 - val_loss: 0.5364 - val_mae: 0.5709 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.46253 to 0.43305, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.4798 - mae: 0.5418 - val_loss: 0.4331 - val_mae: 0.5190 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.43305 to 0.33785, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.5437 - mae: 0.5481 - val_loss: 0.3378 - val_mae: 0.4609 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.33785\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3962 - mae: 0.4894 - val_loss: 0.4265 - val_mae: 0.5082 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.33785\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.0675 - mae: 0.7259 - val_loss: 3.4119 - val_mae: 1.2870 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.33785\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.8629 - mae: 0.8830 - val_loss: 0.9588 - val_mae: 0.7715 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.33785\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.6719 - mae: 0.6319 - val_loss: 0.4373 - val_mae: 0.5126 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.33785\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.5695 - mae: 0.5717 - val_loss: 0.8662 - val_mae: 0.7092 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.33785\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.9745 - mae: 0.6846 - val_loss: 0.4536 - val_mae: 0.5260 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.33785\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.4458 - mae: 0.5208 - val_loss: 0.7966 - val_mae: 0.6924 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.33785\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3822 - mae: 0.4829 - val_loss: 0.5444 - val_mae: 0.5027 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.33785\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.9333 - mae: 0.6344 - val_loss: 0.8115 - val_mae: 0.6844 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.33785 to 0.29297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3988 - mae: 0.4931 - val_loss: 0.2930 - val_mae: 0.4104 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.29297\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.8906 - mae: 0.5922 - val_loss: 0.3914 - val_mae: 0.4870 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.29297\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.0487 - mae: 0.5851 - val_loss: 6.7605 - val_mae: 1.7970 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.29297\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.7235 - mae: 0.6226 - val_loss: 0.3589 - val_mae: 0.4728 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.29297\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.7242 - mae: 0.5772 - val_loss: 0.6772 - val_mae: 0.6520 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.29297\n",
      "4375/4375 - 30s - 7ms/step - loss: 1.1542 - mae: 0.6306 - val_loss: 2.0593 - val_mae: 1.0754 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.29297\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.6123 - mae: 0.5991 - val_loss: 1.9203 - val_mae: 0.9862 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.29297\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.9727 - mae: 0.6546 - val_loss: 0.3448 - val_mae: 0.4643 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss improved from 0.29297 to 0.25816, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3508 - mae: 0.4630 - val_loss: 0.2582 - val_mae: 0.3979 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 1.8284 - mae: 0.6940 - val_loss: 0.7232 - val_mae: 0.6500 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3838 - mae: 0.4807 - val_loss: 0.3476 - val_mae: 0.4633 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.3418 - mae: 0.4551 - val_loss: 0.3271 - val_mae: 0.4530 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.1612 - mae: 0.6306 - val_loss: 0.3331 - val_mae: 0.4489 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.3486 - mae: 0.4612 - val_loss: 0.3382 - val_mae: 0.4577 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 1.1725 - mae: 0.6812 - val_loss: 0.4090 - val_mae: 0.5014 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.8679 - mae: 0.6296 - val_loss: 0.4517 - val_mae: 0.5111 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 1.9918 - mae: 0.6715 - val_loss: 2.0208 - val_mae: 1.0582 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.6429 - mae: 0.6128 - val_loss: 0.5080 - val_mae: 0.5222 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.1828 - mae: 0.6442 - val_loss: 0.9103 - val_mae: 0.7097 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.4923 - mae: 0.5381 - val_loss: 0.3990 - val_mae: 0.4987 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 1.8029 - mae: 0.7549 - val_loss: 0.5774 - val_mae: 0.5975 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.3928 - mae: 0.4893 - val_loss: 0.3300 - val_mae: 0.4496 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.3814 - mae: 0.6849 - val_loss: 0.4614 - val_mae: 0.5338 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.5748 - mae: 0.5384 - val_loss: 0.8005 - val_mae: 0.4801 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 1.6999 - mae: 0.6832 - val_loss: 1.0449 - val_mae: 0.7837 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.6203 - mae: 0.5965 - val_loss: 0.3724 - val_mae: 0.4768 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.25816\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.3611 - mae: 0.4666 - val_loss: 0.4000 - val_mae: 0.4966 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 1.4706 - mae: 0.6885 - val_loss: 0.6941 - val_mae: 0.6737 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.25816\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.3575 - mae: 0.4688 - val_loss: 0.6147 - val_mae: 0.6246 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.25816 to 0.09856, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.1067 - mae: 0.2559 - val_loss: 0.0986 - val_mae: 0.2466 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.09856 to 0.08581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0831 - mae: 0.2273 - val_loss: 0.0858 - val_mae: 0.2305 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.08581 to 0.07484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0719 - mae: 0.2114 - val_loss: 0.0748 - val_mae: 0.2153 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.07484 to 0.06961, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0654 - mae: 0.2012 - val_loss: 0.0696 - val_mae: 0.2073 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.06961 to 0.06914, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0603 - mae: 0.1937 - val_loss: 0.0691 - val_mae: 0.2059 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.06914 to 0.06093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0569 - mae: 0.1879 - val_loss: 0.0609 - val_mae: 0.1931 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.06093\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0540 - mae: 0.1835 - val_loss: 0.0646 - val_mae: 0.1996 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.06093 to 0.05966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0516 - mae: 0.1790 - val_loss: 0.0597 - val_mae: 0.1915 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.05966 to 0.05399, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0495 - mae: 0.1758 - val_loss: 0.0540 - val_mae: 0.1821 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.05399\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0478 - mae: 0.1723 - val_loss: 0.0577 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.05399\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0465 - mae: 0.1701 - val_loss: 0.0550 - val_mae: 0.1837 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.05399\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0449 - mae: 0.1671 - val_loss: 0.0559 - val_mae: 0.1853 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.05399 to 0.05238, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0435 - mae: 0.1645 - val_loss: 0.0524 - val_mae: 0.1792 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.05238 to 0.05138, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0430 - mae: 0.1635 - val_loss: 0.0514 - val_mae: 0.1772 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.05138 to 0.04939, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0421 - mae: 0.1619 - val_loss: 0.0494 - val_mae: 0.1746 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.04939\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0410 - mae: 0.1600 - val_loss: 0.0515 - val_mae: 0.1784 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.04939\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0404 - mae: 0.1586 - val_loss: 0.0510 - val_mae: 0.1768 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.04939 to 0.04929, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0395 - mae: 0.1568 - val_loss: 0.0493 - val_mae: 0.1736 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.04929 to 0.04708, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0386 - mae: 0.1551 - val_loss: 0.0471 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.04708\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0383 - mae: 0.1548 - val_loss: 0.0492 - val_mae: 0.1739 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.04708 to 0.04591, saving model to models/best_model_full.keras\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0376 - mae: 0.1529 - val_loss: 0.0459 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.04591\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0370 - mae: 0.1519 - val_loss: 0.0472 - val_mae: 0.1698 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.04591\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0366 - mae: 0.1510 - val_loss: 0.0502 - val_mae: 0.1760 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.04591\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0362 - mae: 0.1504 - val_loss: 0.0473 - val_mae: 0.1704 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.04591\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0358 - mae: 0.1495 - val_loss: 0.0480 - val_mae: 0.1715 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.04591\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0355 - mae: 0.1488 - val_loss: 0.0479 - val_mae: 0.1717 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.04591\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0351 - mae: 0.1481 - val_loss: 0.0475 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.04591 to 0.04399, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0348 - mae: 0.1474 - val_loss: 0.0440 - val_mae: 0.1635 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04399\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0344 - mae: 0.1462 - val_loss: 0.0459 - val_mae: 0.1669 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.04399 to 0.04335, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0344 - mae: 0.1464 - val_loss: 0.0434 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.04335\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0341 - mae: 0.1458 - val_loss: 0.0478 - val_mae: 0.1710 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04335\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0337 - mae: 0.1454 - val_loss: 0.0472 - val_mae: 0.1700 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04335\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0334 - mae: 0.1443 - val_loss: 0.0536 - val_mae: 0.1816 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.04335 to 0.04268, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0336 - mae: 0.1449 - val_loss: 0.0427 - val_mae: 0.1627 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.04268\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0330 - mae: 0.1434 - val_loss: 0.0486 - val_mae: 0.1730 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04268\n",
      "4375/4375 - 30s - 7ms/step - loss: 0.0329 - mae: 0.1435 - val_loss: 0.0475 - val_mae: 0.1712 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.04268\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0328 - mae: 0.1430 - val_loss: 0.0434 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04268\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0325 - mae: 0.1425 - val_loss: 0.0484 - val_mae: 0.1724 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04268\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0326 - mae: 0.1427 - val_loss: 0.0451 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04268\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0323 - mae: 0.1418 - val_loss: 0.0458 - val_mae: 0.1679 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.04268 to 0.03975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0324 - mae: 0.1421 - val_loss: 0.0398 - val_mae: 0.1565 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0321 - mae: 0.1416 - val_loss: 0.0416 - val_mae: 0.1594 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0320 - mae: 0.1413 - val_loss: 0.0442 - val_mae: 0.1644 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0320 - mae: 0.1414 - val_loss: 0.0419 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0321 - mae: 0.1415 - val_loss: 0.0439 - val_mae: 0.1648 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0320 - mae: 0.1413 - val_loss: 0.0429 - val_mae: 0.1621 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0318 - mae: 0.1407 - val_loss: 0.0472 - val_mae: 0.1701 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0318 - mae: 0.1408 - val_loss: 0.0457 - val_mae: 0.1678 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0314 - mae: 0.1400 - val_loss: 0.0428 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0316 - mae: 0.1402 - val_loss: 0.0417 - val_mae: 0.1603 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0315 - mae: 0.1402 - val_loss: 0.0425 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0317 - mae: 0.1404 - val_loss: 0.0410 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0317 - mae: 0.1405 - val_loss: 0.0422 - val_mae: 0.1599 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0317 - mae: 0.1404 - val_loss: 0.0414 - val_mae: 0.1589 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0315 - mae: 0.1400 - val_loss: 0.0421 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0317 - mae: 0.1406 - val_loss: 0.0437 - val_mae: 0.1645 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0315 - mae: 0.1401 - val_loss: 0.0441 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0314 - mae: 0.1398 - val_loss: 0.0400 - val_mae: 0.1573 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0318 - mae: 0.1403 - val_loss: 0.0432 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0315 - mae: 0.1401 - val_loss: 0.0440 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03975\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0315 - mae: 0.1398 - val_loss: 0.0476 - val_mae: 0.1715 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.03975 to 0.02719, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0160 - mae: 0.1001 - val_loss: 0.0272 - val_mae: 0.1281 - learning_rate: 1.0000e-04\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.02719 to 0.02694, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0146 - mae: 0.0955 - val_loss: 0.0269 - val_mae: 0.1274 - learning_rate: 1.0000e-04\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.02694 to 0.02668, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0141 - mae: 0.0941 - val_loss: 0.0267 - val_mae: 0.1267 - learning_rate: 1.0000e-04\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.02668\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0138 - mae: 0.0929 - val_loss: 0.0268 - val_mae: 0.1272 - learning_rate: 1.0000e-04\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.02668 to 0.02645, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0135 - mae: 0.0921 - val_loss: 0.0265 - val_mae: 0.1259 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0133 - mae: 0.0916 - val_loss: 0.0268 - val_mae: 0.1270 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0132 - mae: 0.0909 - val_loss: 0.0269 - val_mae: 0.1271 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0130 - mae: 0.0904 - val_loss: 0.0266 - val_mae: 0.1266 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0129 - mae: 0.0900 - val_loss: 0.0268 - val_mae: 0.1266 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0128 - mae: 0.0895 - val_loss: 0.0267 - val_mae: 0.1265 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0127 - mae: 0.0892 - val_loss: 0.0265 - val_mae: 0.1261 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0126 - mae: 0.0889 - val_loss: 0.0267 - val_mae: 0.1266 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02645\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0125 - mae: 0.0885 - val_loss: 0.0267 - val_mae: 0.1265 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.02645 to 0.02634, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0124 - mae: 0.0883 - val_loss: 0.0263 - val_mae: 0.1258 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0123 - mae: 0.0880 - val_loss: 0.0266 - val_mae: 0.1261 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0123 - mae: 0.0877 - val_loss: 0.0264 - val_mae: 0.1258 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0122 - mae: 0.0874 - val_loss: 0.0266 - val_mae: 0.1260 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0121 - mae: 0.0873 - val_loss: 0.0265 - val_mae: 0.1263 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0120 - mae: 0.0870 - val_loss: 0.0269 - val_mae: 0.1271 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0120 - mae: 0.0868 - val_loss: 0.0264 - val_mae: 0.1258 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0119 - mae: 0.0865 - val_loss: 0.0265 - val_mae: 0.1262 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0119 - mae: 0.0863 - val_loss: 0.0267 - val_mae: 0.1264 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0118 - mae: 0.0862 - val_loss: 0.0269 - val_mae: 0.1267 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0118 - mae: 0.0860 - val_loss: 0.0266 - val_mae: 0.1259 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02634\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0117 - mae: 0.0859 - val_loss: 0.0266 - val_mae: 0.1262 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss improved from 0.02634 to 0.02633, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0117 - mae: 0.0857 - val_loss: 0.0263 - val_mae: 0.1255 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02633\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0116 - mae: 0.0854 - val_loss: 0.0266 - val_mae: 0.1261 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02633\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0116 - mae: 0.0851 - val_loss: 0.0266 - val_mae: 0.1263 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02633\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0115 - mae: 0.0850 - val_loss: 0.0266 - val_mae: 0.1261 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02633\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0115 - mae: 0.0849 - val_loss: 0.0269 - val_mae: 0.1269 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02633\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0115 - mae: 0.0848 - val_loss: 0.0266 - val_mae: 0.1261 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02633\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0114 - mae: 0.0845 - val_loss: 0.0266 - val_mae: 0.1260 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02633\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0113 - mae: 0.0844 - val_loss: 0.0267 - val_mae: 0.1263 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02633\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0113 - mae: 0.0843 - val_loss: 0.0267 - val_mae: 0.1263 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.02633 to 0.02592, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0101 - mae: 0.0794 - val_loss: 0.0259 - val_mae: 0.1242 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.02592 to 0.02589, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0100 - mae: 0.0790 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.02589 to 0.02587, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0789 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02587\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0099 - mae: 0.0788 - val_loss: 0.0259 - val_mae: 0.1242 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02587\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0259 - val_mae: 0.1242 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.02587 to 0.02586, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.02586 to 0.02584, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0259 - val_mae: 0.1242 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0259 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0259 - val_mae: 0.1242 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0099 - mae: 0.0785 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0785 - val_loss: 0.0259 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0785 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02584\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0259 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02584\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0097 - mae: 0.0777 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.02584 to 0.02583, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0097 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02583\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.02583 to 0.02582, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.02582 to 0.02582, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02582\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss improved from 0.02582 to 0.02581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.02581 to 0.02581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.02581 to 0.02581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.02581 to 0.02581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.02581\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.02581\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss improved from 0.02581 to 0.02580, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.02580\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.02580\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.02580\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.02580\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.02580\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.02580\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.02580\n",
      "4375/4375 - 32s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02580\n",
      "4375/4375 - 31s - 7ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0258 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 308: early stopping\n",
      "Restoring model weights from the end of the best epoch: 258.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1953 m\n",
      "Median positioning error: 0.1749 m\n",
      "90th percentile error: 0.3468 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeXxcVd0/8M+dyWRr9nRJ99KFltINii207BRairIpoqhAVQQERcrzKLhQwAdREEShisgqyk9kV6mFUlrWQqFlK93ovtA0zTaTNMlkMvf8/pjOkEkmbSaZs8yZz/v16gtyb+ac7/ece8+Zk5k54wghBIiIiIiIiIhIO4/uAIiIiIiIiIgogot0IiIiIiIiIkNwkU5ERERERERkCC7SiYiIiIiIiAzBRToRERERERGRIbhIJyIiIiIiIjIEF+lEREREREREhuAinYiIiIiIiMgQXKQTERERERERGYKLdCIiIsX27t2Lr3zlKygvL4fjOLj77rt1hxRz6aWXYsSIEd363ZtuugmO40iNZ/ny5XAcB8uXL5daDxERkSm4SCciorSzefNmXH755Rg5ciRyc3NRVFSEmTNn4ve//z2am5tjvzdixAg4jgPHceDxeFBSUoKJEyfie9/7Ht55552EZUd/v+O/ioqKlMV/7bXX4sUXX8QNN9yAxx57DHPmzOnyd9vH4PF4MGjQIJxxxhnKFq1NTU246aabMnKR/Mgjj3R5PTiOg7ffflt3iEREZCFHCCF0B0FERNRdL7zwAi644ALk5OTg4osvxoQJE9Da2oo33ngDTz/9NC699FLcf//9ACKL9NLSUlx33XUAgIaGBqxbtw5PPvkkKisrce211+Kuu+6KK99xHJx++um4+OKL447n5eXhy1/+ckpyqKiowKxZs/C3v/3tkL/bPh4hBLZu3Yo//vGPqKqqwgsvvIAzzzwzJTFFhUIhuK6LnJwcAEB1dTX69euHBQsW4Kabbor73ba2NrS1tSE3NzelMbTnui5aW1uRnZ0Nj0ftawuPPPII5s2bh1tuuQWHHXZYp/Nz5sxB3759lcZERET2y9IdABERUXdt3boVX/va1zB8+HC88sorGDhwYOzcVVddhU2bNuGFF16Ie8zgwYPxzW9+M+7Yb37zG1x00UX43e9+hzFjxuDKK6+MO3/44Yd3ekwqVVVVoaSkpNu/3zGe8847D5MmTcLdd9+d8kW6z+fr9u9mZWUhK0vuUwmPxyP1jwDdceaZZ+KYY45J6jFtbW1wXRfZ2dmdzu3fvx99+vTpcTxCCLS0tCAvL6/HZRARkbn4dnciIkobt99+OxobG/Hggw/GLdCjRo8ejWuuueaQ5eTl5eGxxx5DWVkZbr31VqTqTWVbtmzBBRdcgLKyMuTn5+PYY4+N+6NB9O3TQggsXLgw9rbpZE2cOBF9+/bF1q1bY8deeeUVnHDCCejTpw9KSkpwzjnnYN26dXGPa2howI9+9COMGDECOTk56N+/P04//XSsXr069jvtP5O+bds29OvXDwBw8803x+KNvqKe6DPpbW1t+OUvf4lRo0YhJycHI0aMwE9/+lMEg8G43xsxYgS++MUv4o033sC0adOQm5uLkSNH4q9//Wvc7yX6TPrJJ5+MCRMmYO3atTjllFOQn5+PwYMH4/bbb+/UVtu3b8fZZ5+NPn36oH///rGPGqTyc+7btm2D4zj47W9/i7vvvjuW+9q1a2NttHbtWlx00UUoLS3F8ccf36O2evHFF3HMMccgLy8Pf/7zn1MSOxERmYevpBMRUdr497//jZEjR2LGjBm9LqugoADnnXceHnzwQaxduxZHHnlk7FxLSwuqq6vjfr+wsDD2FvBE9u7dixkzZqCpqQk//OEPUV5ejkcffRRnn302nnrqKZx33nk48cQT8dhjj+Fb3/pWwrfUd1ddXR3q6uowevRoAMDLL7+MM888EyNHjsRNN92E5uZm3HPPPZg5cyZWr14dW3RfccUVeOqpp3D11Vdj/PjxqKmpwRtvvIF169bh6KOP7lRPv3798Kc//QlXXnklzjvvPJx//vkAgEmTJnUZ23e/+108+uij+MpXvoLrrrsO77zzDm677TasW7cOzz77bNzvbtq0CV/5ylfwne98B5dccgkeeughXHrppZg6dWpcf3TVBnPmzMH555+Pr371q3jqqafwk5/8BBMnToy9u2D//v049dRTsWfPHlxzzTWoqKjA448/jmXLlnW7rQHA7/d3uh4cx0F5eXncsYcffhgtLS343ve+h5ycHJSVlcXOXXDBBRgzZgx+9atfxf4olExbbdiwAV//+tdx+eWX47LLLsPYsWOTyoGIiNKIICIiSgN+v18AEOecc063HzN8+HBx1llndXn+d7/7nQAgnn/++dgxAAn/Pfzwwwet60c/+pEAIF5//fXYsYaGBnHYYYeJESNGiHA4HFfHVVdd1a0cAIjvfOc7Yt++faKqqkq888474rTTThMAxJ133imEEGLKlCmif//+oqamJva4Dz/8UHg8HnHxxRfHjhUXFx+y3ksuuUQMHz489vO+ffsEALFgwYJOv7tgwQLR/qnEBx98IACI7373u3G/9z//8z8CgHjllVdix4YPHy4AiNdeey12rKqqSuTk5IjrrrsudmzZsmUCgFi2bFns2EknnSQAiL/+9a+xY8FgUFRUVIgvf/nLsWN33nmnACCee+652LHm5mYxbty4TmUm8vDDD3d5PeTk5MR+b+vWrQKAKCoqElVVVQnb6Otf/3rc8Z601eLFiw8aLxER2YFvdyciorQQCAQARF7RTpWCggIAkbeBt3fOOedgyZIlcf9mz5590LIWLVqEadOmxd7KHC3/e9/7HrZt24a1a9f2OM4HH3wQ/fr1Q//+/TF9+nS8+eabmD9/Pn70ox9hz549+OCDD3DppZfGvXI7adIknH766Vi0aFHsWElJCd555x189tlnPY7lYKJ1zZ8/P+54dOO+jvsFjB8/HieccELs5379+mHs2LHYsmXLIesqKCiI+5x+dnY2pk2bFvfYxYsXY/DgwTj77LNjx3Jzc3HZZZclkRWwcOHCTtfDf//7306/9+Uvfzn28YCOrrjiirifk22rww477JDXIBER2YFvdyciorRQVFQEoPOCujcaGxsBdF74DxkyBLNmzUqqrO3bt2P69Omdjh9xxBGx8xMmTOhRnOeccw6uvvpqOI6DwsJCHHnkkbGNx7Zv3w4ACd/+fMQRR+DFF1+MbVR2++2345JLLsHQoUMxdepUzJ07FxdffDFGjhzZo7g62r59OzweT+xt+FEVFRUoKSmJxRo1bNiwTmWUlpairq7ukHUNGTKk0+fhS0tL8dFHH8XFM2rUqE6/1zG+Q5k2bVq3No5LtAN8V+eSbauDlU1ERHbhK+lERJQWioqKMGjQIKxZsyZlZUbLSnbRplr0jwannXYapk2b1uOdwb/61a9iy5YtuOeeezBo0CDccccdOPLIIxO+Ktwb3d0Mz+v1JjwuurGRX28eK8vBdlvv6lx324o7uRMRZQ4u0omIKG188YtfxObNm7FixYpel9XY2Ihnn30WQ4cOjb3a3RvDhw/Hhg0bOh1fv3597LwM0XK7qrtv375xi/qBAwfi+9//Pp577jls3boV5eXluPXWW7ssP5nd54cPHw7XdfHpp5/GHd+7dy/q6+ultcHB4tm8eXOnhfumTZuUxpGIaW1FRETm4CKdiIjSxo9//GP06dMH3/3ud7F3795O5zdv3ozf//73hyynubkZ3/rWt1BbW4uf/exnPfoatI7mzp2LlStXxv0BYf/+/bj//vsxYsQIjB8/vtd1JDJw4EBMmTIFjz76KOrr62PH16xZg5deeglz584FAITDYfj9/rjH9u/fH4MGDer0lV/t5efnA0Bc2V2J1nX33XfHHb/rrrsAAGedddYhy0il2bNnY/fu3fjXv/4VO9bS0oK//OUvSuNIxLS2IiIic/Az6URElDZGjRqFxx9/HBdeeCGOOOIIXHzxxZgwYQJaW1vx1ltv4cknn8Sll14a95jdu3fjb3/7G4DIq+dr167Fk08+icrKSlx33XW4/PLLUxLb9ddfj//3//4fzjzzTPzwhz9EWVkZHn30UWzduhVPP/00PB55fxe/4447cOaZZ+K4447Dd77zndhXsBUXF8e+07yhoQFDhgzBV77yFUyePBkFBQV4+eWX8e677+LOO+/ssuy8vDyMHz8eTzzxBA4//HCUlZVhwoQJCT9fP3nyZFxyySW4//77UV9fj5NOOgkrV67Eo48+inPPPRennHKKrCZI6PLLL8e9996Lr3/967jmmmswcOBA/P3vf0dubi6A7r9L4L///W/sHRHtzZgxo8ef5zetrYiIyBxcpBMRUVo5++yz8dFHH+GOO+7A888/jz/96U/IycnBpEmTcOedd3baufuDDz7At771rdima0OHDsWXvvQlfPe738W0adNSFteAAQPw1ltv4Sc/+QnuuecetLS0YNKkSfj3v/8t/VXRWbNmYfHixViwYAFuvPFG+Hw+nHTSSfjNb34T23AsPz8f3//+9/HSSy/hmWeegeu6GD16NP74xz/iyiuvPGj5DzzwAH7wgx/g2muvRWtrKxYsWNDlJngPPPAARo4ciUceeQTPPvssKioqcMMNN2DBggUpz/tQCgoK8Morr+AHP/gBfv/736OgoAAXX3wxZsyYgS9/+cuxxfqh3HjjjQmPP/zww73adM+ktiIiInM4QucOK0RERESK3X333bj22muxa9cuDB48WHc4REREcbhIJyIi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13bt2oVOnTrBbref8X5jx45FmzZtMG/ePO/ma2+++SZycnJw0UUXNbn9M/npp5/QuXNnxMbGNvhdmzZtkJKS4v38865du9C9e/eg2wh0J/ZvvvkG7777Lj777LOAYvbs2RMlJSU4depUQG//zsvLw6xZs9C2bVt0794dd999N26//Xbcc889cDgcGDBgAL799lvMmjULo0aNwsGDB5GdnY3Ro0fDbrejffv2GDJkiM/YLVu2BFDzhEt2drbfHGbNmoU//OEPuPHGGwEATz75JJYvX47Zs2djzpw53vtNnToVl156KQBg+vTp6N27N3bv3o0ePXy/Q07XdcyfP9/7TQm33norli1bhsceewwlJSV444038O9//9t7HM2bNw9t2jT+t0JxcTGSkpLq3Hbeeefh888/9/7ctWtXPPXUU96f8/LyAAAzZszAmDFjAABlZWV48cUXMX/+fFxyySUAgFdeeQVLlizBa6+9ht///vfex9d+XKhwd3eKeIZhoLi4WNoNYERSqW9krkV0bla2bxgG/rHkRzy/rOYZ+GmX98IvBrZr5FGBxw51HaLHhsILd3f3T6VzKRxqaW5ugT4+KioKt912G+bPn+/dvfyNN97A7bffbup3ghuG4f3875lybWo/GIaBcePGISkpCUlJSejdu3eD+2zduhVXXnklpk2bhosvvjigmJ5XlhtbgLVr1w6JiYlo06YNysrKsGDBAsTExGD79u0YMWJEnfuOGDEC27dvBwBcd911qKioQKdOnTBp0iT897//bdZnpB0OB44ePXrGNj1qv4LcunVrAMDx48f9xs7Nza3zVYatW7f23n/v3r1wuVx1nmBITU0N6AmX5ORkbNq0qc5/r776ap37DBw40OdjBw0a5P33nj174HK56tRut9sxZMiQBrXXflyoBHPs8pV0UpJhGHC5XDAMQ4m34YWSSn0jcy2ic7Oy/XfWH8SsZTWvoE8Z0w0TR3QMWWwz6hA9NkSqUOlcCrSWeHsUfpwx1sLMfl4Ixtub933c3bp1w6pVq+ByuRp9Nf2OO+7AzJkz8eWXX8LtduPQoUOYOHFis9oPJDen09ngiYCjR4/C4XCgW7du3vvu2LGjSe3MnTsXLpcLmqY16IMff/wRF110Ee666y78+c9/Djjmjh07kJKS0ujGbF9//TVSUlKQlZVVZyHbmJycHOzcuRNL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yJEAGr7dvaqqCvfeey+ysrIQHx+Pc889F+vXr/f+3vNW7mXLlmHQoEFISEjA8OHDsXPnTu996r/dfeLEibj55pvxzDPPoHXr1sjMzMRvf/tbuFwu733y8vJw6aWXIj4+Hh07dsS///1v5ObmYvbs2X77G2h4LNQ/HnJzc/HXv/4VEyZMQEpKCu666y7v288XLlyIXr16ITY2FgcPHkRhYSEmTJiA9PR0JCQk4JJLLsGuXbu8sfw9rjH13+7u6Z8333wTubm5SE1NxY033oiSkhLvfXRdx8yZM9GxY0fEx8ejb9+++OCDDxptS5Rgri9cpBMRRRi3buCxz7bjo01HAQA3D22PhZNHIDs1TnBmREQUKrt27UKbNm3QqVMn3HzzzXUWShs2bIDL5cLo0aO9t/Xo0QPt27fHmjVrAAB9+/bFl19+ierqaixZsgR9+vQBADz11FMYOXIkBg0aFHROe/bswbhx43Dttddiy5YtePfdd7Fq1Sq/m0j7Ex8fD13XUV1djeeffx7PPPMMZs2ahS1btmDs2LG44oorvAvHF154AQsXLsS7776LrVu34q233kJubq7PuOvWrQMALF26FHl5efjwww993u/BBx/EggULMH/+fHz77bfo0qULxo4di4KCgjr3e/jhh/HMM8/gu+++Q3R0NO64444z1vX1119jz549WL58Od544w3Mnz+/ztvsJ0yYgKNHj2LFihVYsGABXn755Sa97d+XWbNmoW/fvvj+++/xl7/8BQBQXl6OJ598Eq+++iq2bduGrKws3H777fjuu++wcOFCrFmzBoZhYPz48XWeTPD1uKbYs2cPPvroI3z66af49NNPsXLlSjzxxBPe38+cORP/+te/MHfuXGzbtg2/+93vcMstt2DlypXN6wwJ8O3uREQRZPfxUtz/7vfYesQBAJh5zdm4aUh7wVkREYWXohffQdGL7wEAWr34F8SP+Pkrgl0HjuLI5TWLzsTx56HlE7+r89i8W/6Iqi01n73N3VJ3Eej4zyIUzHwVANDi8fuQdNkFTcpv6NChmD9/Prp37468vDxMnz4d5513HrZu3Yrk5GTk5+cjJiamwUZdrVq1Qn5+PgDgj3/8I+655x506dIFHTp0wKuvvopdu3bhjTfewJo1a3D33Xfjf//7HwYNGoRXXnnF71vCa5s5cyZuvvlm3H///QCArl27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ITY2luXLl5vTX3jhBd544w1OnjxJ8+bNef7559mwYQOrV6/m8OHDNGjQgG7duuV7nGLe9coiIyODRYsWsWbNGn766ScuXbrElClTzJ+vXbuWGTNmMHfuXE6ePMm8efN45ZVXWL16ddkawY7IcHchhEPSZRu4dDODfWdvcOFGOut/vUymPudRP81rann90WY0reG49z0JIYSwnq9iUvgqJucK54tDqhHZ6N8O8dUb2Ux48xoA97RwZ3x/f4t1X3r/OmcuZwHw5bxQi8+270/jk2+SARj7hB+dWnqUumze3t60b9+eOXPmEBERQVBQEJ9//jn79++nQYMGAMTHxwNYXE01vTd9NmzYMH7//XeaNm1KtWrVWL9+Pbdu3WLGjBns3r2bl19+mS+++IL69evzySefmIfRF2XZsmW0bNmSefPmmdM++eQTatWqxenTp2nYsGGxeVy9epVFixYRGhpKeHg4I0eOZMiQIYwePRrI6cj+8ssvLFq0iC5dunDp0iWCg4OJjo5GpVJRr1492rVrV2DepqHvvr6+RQ69XrRoEdOmTePJJ58kOzub+fPns3v3bpYuXcq7775rXm7KlCk89NBDQM6V8qZNm3L27FkaN25cYL5Go5GVK1ea78seOHAgMTExzJ07l9TUVFavXs26det44IEHgJwfE2rUqFFsmyUnJ+cbrn/vvffy3Xffmd83bNiQBQsWmN+brljPnj2brl27ApCens7777/PqlWrzPMOrFixgp07d/Lxxx8zdepU8/q51ysrvV7P8uXLqV+/PgBjx45l9uzZ5s9nzpzJ4sWLefTRRwGoW7cuJ06c4IMPPmDw4MHlim1r0kkXDkmlUpmfMyksOVLb5K2Lwajw64VE9py+zroDl0jK0Fss3zDQi+H31KV/21pWr7+t27ky41szljXytvW2EcJRONKxVNq6pN82ciPJAIA+23IIq9GomD9LyzDmWzc5zWD+PK/MrH/X1WX9m29pZxBfs2YNw4YNIzQ0FLVaTatWrXjqqac4dOhQifNwcXHh3XffNT/DW6VSMWzYMMaPH89vv/3G5s2bOXr0KAsWLGD8+PFs2LCh2DyPHj3Krl27Cry/+9y5czRs2LDQutasWRNFUcjIyKBFixZs2LABjUbDyZMnLSZ+A+jYsSNvvfUWAE888QRLly6lfv36dOvWjZ49e/LII4+U+t5q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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACArUlEQVR4nO3dd3hUZdrH8d+ZSe8QIAkSmnQQRBCM2EEBFVGwIQquqK8KuIiVtaGrgrqrrFJcXSTrCqKoIBZAQMFCEUEUpSg1ICTUdNJmzvvHZCaZFAjJJCcJ3891nSszp809hyCP97mf+ximaZoCAAAAAAAAapDN6gAAAAAAAABw+iEpBQAAAAAAgBpHUgoAAAAAAAA1jqQUAAAAAAAAahxJKQAAAAAAANQ4klIAAAAAAACocSSlAAAAAAAAUONISgEAAAAAAKDGkZQCAAAAAABAjSMpBaBeMgxDEydOPOXjdu/eLcMwlJiY6POYAAAAahPGSwCsRlIKQLVJTEyUYRgyDEPfffddqe2maSo+Pl6GYejqq6+2IMLKW7FihQzD0Icffmh1KAAAoA47HcZLhmHo3XffLXOfPn36yDAMdenSpcztDodDTZs2lWEYWrRoUZn7TJw40fM5ZS3Jyck++04AfMvP6gAA1H9BQUGaM2eOLrjgAq/1K1eu1L59+xQYGGhRZAAAALVDfR4vub/brbfe6rV+9+7dWrVqlYKCgso99quvvtKBAwfUsmVLzZ49WwMHDix33xkzZigsLKzU+qioqErHDqB6kZQCUO2uvPJKzZs3T6+99pr8/Ir+szNnzhz16NFDhw8ftjA6AAAA69Xn8dKVV16phQsX6vDhw2rUqJFn/Zw5cxQTE6O2bdvq2LFjZR777rvv6pxzztHIkSP1t7/9TVlZWQoNDS1z3+uvv97r/ABqP6bvAah2w4YN05EjR7R06VLPury8PH344Ye65ZZbyjwmKytLDz74oOLj4xUYGKj27dvrH//4h0zT9NovNzdXDzzwgBo3bqzw8HBdc8012rdvX5nn/PPPP3XHHXcoJiZGgYGB6ty5s95++23ffdEy7Ny5UzfccIMaNmyokJAQnXfeefr8889L7ff666+rc+fOCgkJUYMGDdSzZ0/NmTPHsz0jI0Pjxo1Ty5YtFRgYqCZNmujyyy/Xhg0bqjV+AABQM+rzeGnw4MEKDAzUvHnzvNbPmTNHN954o+x2e5nHHT9+XPPnz9fNN9+sG2+8UcePH9cnn3xSpVgA1C4kpQBUu5YtWyohIUHvvfeeZ92iRYuUlpamm2++udT+pmnqmmuu0auvvqoBAwbolVdeUfv27fXwww9r/PjxXvveeeedmjJliq644gpNnjxZ/v7+uuqqq0qdMyUlReedd56WLVumMWPG6F//+pfatGmjUaNGacqUKT7/zu7PPP/887VkyRLdd999ev7555WTk6NrrrlG8+fP9+z31ltv6f7771enTp00ZcoUPfPMMzr77LO1du1azz733HOPZsyYoaFDh2r69Ol66KGHFBwcrC1btlRL7AAAoGbV5/FSSEiIBg8e7PXdfv75Z/3222/lJtwkaeHChcrMzNTNN9+s2NhYXXLJJZo9e3a5+x89elSHDx/2WlJTUysdN4AaYAJANZk1a5YpyVy3bp05depUMzw83MzOzjZN0zRvuOEG89JLLzVN0zRbtGhhXnXVVZ7jFixYYEoyn3vuOa/zXX/99aZhGOb27dtN0zTNjRs3mpLM++67z2u/W265xZRkPv300551o0aNMuPi4szDhw977XvzzTebkZGRnrh27dplSjJnzZp1wu/29ddfm5LMefPmlbvPuHHjTEnmt99+61mXkZFhtmrVymzZsqXpcDhM0zTNwYMHm507dz7h50VGRpqjR48+4T4AAKDuOV3GS5999plpGIaZlJRkmqZpPvzww2br1q1N0zTNiy++uMyx0NVXX2326dPH8/7NN980/fz8zIMHD3rt9/TTT5uSylzat29/whgBWItKKQA1wl1y/dlnnykjI0OfffZZuXfGvvjiC9ntdt1///1e6x988EGZpul58soXX3whSaX2GzdunNd70zT10UcfadCgQTJN0+vuWf/+/ZWWllYt0+C++OIL9erVy6thaVhYmO6++27t3r1bmzdvluRqvrlv3z6tW7eu3HNFRUVp7dq12r9/v8/jBAAAtUN9Hi9dccUVatiwoebOnSvTNDV37lwNGzas3P2PHDmiJUuWeO0zdOhQGYahDz74oMxjPvroIy1dutRrmTVrVqVjBlD9aHQOoEY0btxY/fr105w5c5SdnS2Hw6Hrr7++zH337Nmjpk2bKjw83Gt9x44dPdvdP202m84880yv/dq3b+/1/tChQ0pNTdWbb76pN998s8zPPHjwYKW+14ns2bNHvXv3LrW++Pfo0qWLHn30US1btky9evVSmzZtdMUVV+iWW25Rnz59PMe89NJLGjlypOLj49WjRw9deeWVGjFihFq3bu3zuAEAgDXq83jJ399fN9xwg+bMmaNevXpp7969J5y69/777ys/P1/du3fX9u3bPet79+6t2bNna/To0aWOueiii2h0DtQxJKUA1JhbbrlFd911l5KTkzVw4MAaezyv0+mUJN16660aOXJkmft07dq1RmIpS8eOHbVt2zZ99tlnWrx4sT766CNNnz5dTz31lJ555hlJrjunF154oebPn68vv/xSL7/8sl588UV9/PHHJ3w0MgAAqFvq83jplltu0RtvvKGJEyeqW7du6tSpU7n7untHFb9JV9zOnTu5OQfUAySlANSY6667Tv/3f/+nNWvW6P333y93vxYtWmjZsmXKyMjwuvu3detWz3b3T6fTqR07dnjd7du2bZvX+dxPmnE4HOrXr58vv9IJtWjRolQsUunvIUmhoaG66aabdNNNNykvL09DhgzR888/rwkTJigoKEiSFBcXp/vuu0/33XefDh48qHPOOUfPP/88SSkAAOqR+jxeuuCCC9S8eXOtWLFCL774Yrn77dq1S6tWrdKYMWN08cUXe21zOp267bbbNGfOHD3xxBPVEieAmkNPKQA1JiwsTDNmzNDEiRM1aNCgcve78sor5XA4NHXqVK/1r776qgzD8CRh3D9fe+01r/1KPh3Gbrdr6NCh+uijj/Trr7+W+rxDhw5V5uuc1JVXXqkffvhBq1ev9qzLysrSm2++qZYtW3ruDh45csTruICAAHXq1EmmaSo/P18Oh0NpaWle+zRp0kRNmzZVbm5utcQOAACsUZ/HS4Zh6LXXXtPTTz+t2267rdz93FVSjzzyiK6//nqv5cYbb9TFF198wqfwAag7qJQCUKPKKwcvbtCgQbr00kv1+OOPa/fu3erWrZu+/PJLffLJJxo3bpynJ8LZZ5+tYcOGafr06UpLS9P555+v5cuXe/UdcJs8ebK+/vpr9e7dW3fddZc6deqko0ePasOGDVq2bJmOHj1aqe/z0Ucfee5Ilvyejz32mN577z0NHDhQ999/vxo2bKj//ve/2rVrlz766CPZbK77AldccYViY2PVp08fxcTEaMuWLZo6daquuuoqhYeHKzU1Vc2aNdP111+v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OA4AOJ0dz3eo01NLLPnszc/2V0iAb/45ffbZZ3X55Zd73jds2FDdunXzvP/73/+u+fPna+HChRozZky557n99ts95d8vvPCCXnvtNf3www8aMGBAmfvn5+frjTfe0JlnnilJGjNmjFe59+uvv64JEybouuuukyRNnTrVU7VUGX/88YcWLlyo77//Xueff74kafbs2YqPj9eCBQt0ww03KCkpSUOHDtVZZ50lSWrdurXn+KSkJHXv3l09e/aU5Lr7idqN6XsAYD3GS95q03ipSZMmGjhwoBITE/XUU0/p7bff1h133FHmvnPnzlXbtm3VuXNnSdLNN9+smTNn6sILL/Tab/r06frPf/7jte7f//63hg8fXqGYagqVUlXkLkfnzh8AoKrcSRa3zMxMPfTQQ+rYsaOioqIUFhamLVu2nPTOX9euXT2vQ0NDFRERoYMHD5a7f0hIiGeAJUlxcXGe/dPS0pSSkqJevXp5ttvtdvXo0eOUvltxW7ZskZ+fn3r37u1ZFx0drfbt22vLli2SpPvvv1/PPfec+vTpo6efflq//PKLZ997771Xc+fO1dlnn61HHnlEq1atqnQsqBnum3hM3wMAVFV9HS/dcccdSkxM1M6dO7V69epyk0dvv/22br31Vs/7W2+9VfPmzVNGRobXfsOHD9fGjRu9lmuuuabC8dQUKqWqyn3nj4fvAYBlgv3t2vxsf8s+21dCQ0O93j/00ENaunSp/vGPf6hNmzYKDg7W9ddfr7y8vBOex9/f3+u9YRhynuAfqrL2t/pmy5133qn+/fvr888/15dffqlJkybpn//8p8aOHauBAwdqz549+uKLL7R06VL17dtXo0eP1j/+8Q9LY0b57LQ7AADLMV7yVtvGSwMHDtTdd9+tUaNGadCgQYqOji61z+bNm7VmzRr98MMPXs3NHQ6H5s6dq7vuusuzLjIyUm3atPFZfNWFSqkq8lRKWRsGAJzWDMNQSICfJUt5j+n1he+//1633367rrvuOp111lmKjY3V7t27q+3zyhIZGamYmBitW7fOs87hcGjDhg2VPmfHjh1VUFCgtWvXetYdOXJE27ZtU6dOnTzr4uPjdc899+jjjz/Wgw8+qLfeesuzrXHjxho5cqTeffddTZkyRW+++Wal40H148EwAGA9xkvVxxfjJT8/P40YMUIrVqwod+rezJkzddFF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5v41XVnuHi85nNX6MQCAOo7xUsXHS35+frrlllv09ttve9bt27dPK1as0C233FLmMTNnztStt96qW2+9VTNnzixzn/DwcK/K69jYWIWGhp4wlqrwq7Yzn4JZs2apSZMmuuqqqzzrevToIX9/fy1fvlxDhw6VJG3btk1JSUlKSEiwKtRSDJ6+BwDWM00pP9uaz/YPKfrH4AT8/Pw0YsQIJSYm6vHHH/dM/543b54cDoeGDRumzMxM9ejRQ48++qgiIiL0+eef67bbbtOZZ56pXr16nfQznE6nhgwZopiYGK1du1ZpaWle/RTcwsPDlZiYqKZNm2rTpk266667FB4erkceeUQ33XSTfv31Vy1evFjLli2TJEVGRpY6R1ZWlvr376+EhAStW7dOBw8e1J133qkxY8Z4DSS//vprxcXF6euvv9b27dt100036eyzz9Zdd9110u9T1vdzJ6RWrlypgoICjR49WjfddJNWrFghSRo+fLi6d++uGTNmyG63a+PGjfL395ckjR49Wnl5efrmm28UGhqqzZs3Kyws7JTjqI2KTxPo2rWrevfurRYtWuiDDz7QqFGjSu0/YcIEjR8/3vM+PT29WhNTPK0YAGoBxkuS6td46Y477tAll1yif/3rXwoJCVFiYqIGDBigmJiYUvvu2LFDq1ev1scffyzTNPXAAw9oz549atGixUmvWXWyPCnldDo1a9YsjRw5Un5+ReFERkZq1KhRGj9+vBo2bKiIiAiNHTtWCQkJOu+88yyM2JunUsriOADgtJafLb1Qtenflfa3/VJAxe4e3XHHHXr55Ze1cuVKXXLJJZJcN2aGDh3qqVh56KGHPPuPHTtWS5Ys0QcffFChQdayZcu0detWLVmyxDMd/oUXXijV1+CJJ57wvG7ZsqUeeughzZ07V4888oiCg4MVFhbm6U9Unjlz5ignJ0fvvPOO5+7Z1KlTNWjQIL344ouewVCDBg00depU2e12dejQQVdddZWWL19eqaTU8uXLtWnTJu3atcuTQHnnnXfUuXNnrVu3Tueee66SkpL08MMPe54817ZtW8/xSUlJGjp0qM466yxJUuvWrU85hroiKipK7dq10/bt28vcHhgYWKNTMZm+BwC1AOMlSfVrvNS9e3e1bt1aH374oW677TYlJibqlVde0c6dO0vt+/bbb2vgwIFq0KCBJKl///6aNWuWJk6c6LXfo48+6vXdJWnRokW68MILTxhLZVk+fW/ZsmVKSkrSHXfcUWrbq6++qquvvlpDhw7VRRddpNjYWH388ccWRFk+d7LXSadzAMBJdOjQQeeff76nzHr79u369ttvPZUsDodDf//733XWWWepYcOGCgsL05IlS07YG6i4LVu2KD4+3qs/Y1nVxe+//7769Omj2NhYhYWF6YknnqjwZxT/rG7dunmVc/fp00dOp1Pbtm3zrOvcubPsdrvnfVxcnA4ePHhKn1X8M+Pj470qejp16qSoqCht2bJFkjR+/Hjdeeed6tevnyZPnqwdO3Z49r3//vv13HPPqU+fPnr66acr1Si1rsjMzNSOHTsUFxdndSiSmL4HAKg4xkunNl664447NGvWLK1cuVJZWVm68sorS+3jcDj03//+V7feeqtn3a233qrExEQ5nd7/OD/88MPauHGj19KzZ88Kf+dTZXml1BVXXFFuKXdQUJCmTZumadOm1XBUFcfT9wCgFvAPcd2Bs+qzT8GoUaM0duxYTZs2TbNmzdKZZ56piy++WJL08ssv61//+pemTJmis846S6GhoRo3bpzy8vJ8Fu7q1as1fPhwPfPMM+rfv78iIyM1d+5c/fOf//TZZxTnnjrnZhhGqcGPL02cOFG33HKLPv/8cy1atEhPP/205s6dq+uuu0533nmn+vfvr88//1xffvmlJk2apH/+85/V2ryzpjz00EMaNGiQWrRoof379+vpp5+W3W7XsGHDrA5NEtP3AKBWYLxUYXVpvDR8+HA98sgjmjhxom677TavGWhuS5Ys0Z9//qmbbrrJa73D4dDy5ct1+eWXe9Y1atRIbdq0qcS3qBzLK6XqOs8gy9owAOD0ZhiuknArlgr0RyjuxhtvlM1m05w5c/TOO+/ojjvu8Nzg+P777zV48GDdeuut6tatm1q3bq3ff/+9wufu2LGj9u7dqwMHDnjWrVmzxmufVatWqUWLFnr88cfVs2dPtW3bVnv27PHaJyAgQA6H46Sf9fPPPysrK8uz7vvvv5fNZlP79u0rHPOpcH+/4k/W3bx5s1JTU9WpUyfPunbt2umBBx7Ql19+qSFDhmjWrFmebfHx8brnnnv08ccf68EHH9Rbb71VLbHWtH379mnYsGFq3769brzxRkVHR2vNmjVq3Lix1aFJKqqUYvoeAFiI8ZKk+jdeatiwoa655hqtXLmyzBlokqvB+c0331yqAurmm28ut+F5TbG8UqquK3r6HoMsAMDJhYWF6aabbtKECROUnp6u22+/3bOtbdu2+vDDD7Vq1So1aNBAr7zyilJSUrwSLifSr18/tWvXTiNHjtTLL7+s9PR0Pf744177tG3bVklJSZo7d67OPfdcff7555o/f77XPi1bttSuXbu0ceNGNWvWTOHh4aX6Dw0fPlxPP/20Ro4cqYkTJ+rQoUMaO3asbrvttjKba54Kh8OhjRs3eq0LDAxUv379dNZZZ2n48OGaMmWKCgoKdN999+niiy9Wz549dfz4cT388MO6/vrr1apVK+3bt0/r1q3zPDBl3LhxGjhwoNq1a6djx47p66+/VseOHasUa20xd+5cq0M4Ic/0PYZLAIAKYLx0ahITEzV9+nRFR0eX2nbo0CF9+umnWrhwobp06eK1bcSIEbruuut09OhRNWzYUJKUkZGh5ORkr/1CQkIUERHhs3iLo1Kqitz5Xu78AQAqatSoUTp27Jj69+/v1c/giSee0DnnnKP+/fvrkksuUWxsrK699toKn9dms2n+/Pk6fvy4evXqpTvvvFPPP/+81z7XXHONHnjgAY0ZM0Znn322Vq1apSeffNJrn6FDh2rAgAG69NJL1bhx4zIfsxwSEqIlS5bo6NGjOvfcc3X99derb9++mjp16qldjDJkZmaqe/fuXsugQYNkGIY++eQTNWjQQBdddJH69eun1q1b6/3335ck2e12HTlyRCNGjFC7du104403auDAgXrmmWckuZJdo0ePVseOHTVgwAC1a9dO06dPr3K8ODl3ZTnjJQBARTFeqrjg4OAyE1KSPE3W+/btW2pb3759FRwcrHfffdez7qmnnlJcXJzX8sgjj/g03uIMs56X+KSnpysyMlJpaWnVktl78IOf9dGGfZowsIP+7+IzfX5+AIC3nJwc7dq1S61atVJQUJDV4aCeOtHvWXWPLaxQ3d/pf6t368lPftOVZ8Vq+vAePj8/AKA0xkyobr4YL1EpVUWep+/V69QeAABA5Rmep+8xYAIAAEVISlVRUaNzBlkAAABlsfG0YgAAUAaSUlVU1Ojc4kAAAABqKXvhiLOed40AAACniKRUFXmm73HrDwAAoExM3wMAAGUhKVVF7kEWQywAAICyMX0PAACUhaRUFfGIYwCw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sxWWSjnJSgEAgEKVSkoNHjxYQ4YM0T333KPU1FT17t1b/v7+Onz4sF555RXde++9Pgnu1Vdflc1m09ChQ5Wbm6v+/ftr+vTpPjm3T3nK0a0NAwAA1A0tWrQ46T6//vprDURScwym7wEAgBIq1eh8w4YNuvDCCyVJH374oWJiYrRnzx698847eu211yodzIoVKzRlyhTP+6CgIE2bNk1Hjx5VVlaWPv744xP2k7KKp0cCWSkAAFAFGRkZevPNN9WrVy9Pz876gul7AACgpEolpbKzsxUeHi5J+vLLLzVkyBDZbDadd9552rNnj08DrAts9aznAwAAqFnffPONRo4cqbi4OP3jH//QZZddpjVr1lgdlk/ZPEkpslIAAMClUkmpNm3aaMGCBdq7d6+WLFmiK664QpLrccQRERE+DbAuKGp0ziALAABUTHJysiZPnqy2bdvqhhtuUEREhHJzc7VgwQJNnjxZ5557rtUh+hTT9wAAQEmVSko99dRTeuihh9SyZUv16tXL8zS8L7/8Ut27d/dpgHWB+84fYywAAFARgwYNUvv27fXLL79oypQp2r9/v15//XWrw6pWdhvT9wAAgLdKNTq//vrrdcEFF+jAgQNe/Q769u2r6667zmfB1RXc+QMAAKdi0aJFuv/++3Xvvfeqbdu2VodTIzzT98hKAQCAQpWqlJKk2NhYde/eXfv379e+ffskSb169VKHDh18FlxdYdC4EwAAnILvvvtOGRkZ6tGjh3r37q2pU6fq8OHDVodVrWzcxAMAACVUKinldDr17LPPKjIyUi1atFCLFi0UFRWlv//973I6nb6OsdazefqcM8gCAAAnd9555+mtt97SgQMH9H//93+aO3eumjZtKqfTqaVLlyojI8PqEH3OZqPROQAA8FappNTjjz+uqVOnavLkyfrpp5/0008/6YUXXtDrr7+uJ5980tcx1npUSgEAgMoIDQ3VHXfcoe+++06bNm3Sgw8+qMmTJ6tJkya65pprrA7Pp9zT9xyn3/1LAABQjkolpf773//qP//5j+6991517dpVXbt21X333ae33npLiYmJPg6x9qMcHQAAVFX79u310ksvad++fZo7d67npld94R4vmYyXAABAoUo1Oj969GiZvaM6dOigo0ePVjmousbg6XsAAOAU3HHHHSfdJzo6ugYiqTmeRucMmAAAQKFKJaW6deumqVOn6rXXXvNaP3XqVHXt2tUngdUl7vuYDLIAAEBFJCYmqkWLFurevXu5lUP1r1KqcPoewyUAAFCoUkmpl156SVdddZWWLVumhIQESdLq1au1d+9effHFFz4NsC6wUSkFAABOwb333qv33ntPu3bt0l/+8hfdeuutatiwodVhVStbYdMIpu8BAAC3SvWUuvjii/X777/ruuuuU2pqqlJTUzVkyBD99ttv+t///ufrGGu9oh4J1sYBAADqhmnTpunAgQN65JFH9Omnnyo+Pl433nijlixZUm+TNkzfAwAAJVWqUkqSmjZtqueff95r3c8//6yZM2fqzTffrHJgdYnBIAsAAJyiwMBADRs2TMOGDdOePXuUmJio++67TwUFBfrtt98UFhZmdYg+VfT0PcZLAADApVKVUvDmbvnAEAsAAFSGzWaTYRgyTVMOh8PqcKpFUaWUxYEAAIBag6SUD7iTUlRKAQCAisrNzdV7772nyy+/XO3atdOmTZs0depUJSUl1bsqKUmy01MKAACUUOnpeyhS1OicQRYAADi5++67T3PnzlV8fLzuuOMOvffee2rUqJHVYVUrg+l7AACghFNKSg0ZMuSE21NTU6sSS53F0/cAAMCpeOONN9S8eXO1bt1aK1eu1MqVK8vc7+OPP67hyKoP0/cAAEBJp5SUioyMPOn2ESNGVCmguqhw9h6DLAAAUCEjRozwVA6dLpi+BwAASjqlpNSsWbOqK446zdPonEEWAACogMTERKtDqHGe6XuMlwAAQCEanfsA5egAAAAn5hkvOS0OBAAA1BokpXyASikAAIATs3tu4jFeAgAALiSlfMDT6NziOAAAAGorW+FNPJJSAADAjaSUDzHIAgAAKJtBuwMAAFACSSkfoKcUAADAidltTN8DAADeSEr5gI1HHAMAAJyQKydlysldPAAAUIiklA8YKuwpxRgLAACgtPdv0zn/66Brbd9TWQ4AADwsTUrNmDFDXbt2VUREhCIiIpSQkKBFixZ5tufk5Gj06NGKjo5WWFiYhg4dqpSUFAsjLpu7cadJq3MAAIDSTKdsjlyFGjlM3wMAAB6WJqWaNWumyZMna/369frxxx912WWXafDgwfrtt98kSQ888IA+/fRTzZs3TytXrtT+/fs1ZMgQK0Muk6dxp9PiQAAAAGqjgDBJUqiOM30PAAB4+Fn5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AwcOeJbvvvvOs+2BBx7Qp59+qnnz5mnlypXav3+/hgwZYmG01snKylK3bt00bdq0Mre/9NJLeu211/TGG29o7dq1Cg0NVf/+/ZWTk+PZZ/jw4frtt9+0dOlSffbZZ/rmm290991319RXsMzJrp0kDRgwwOv38L333vPafrpeu5UrV2r06NFas2aNli5dqvz8fF1xxRXKysry7HOyv6cOh0NXXXWV8vLytGrVKv33v/9VYmKinnrqKSu+Uo2pyLWTpLvuusvrd++ll17ybDtdr12zZs00efJkrV+/Xj/++KMuu+wyDR48WL/99pskfufqE8ZLFcd4qWIYL1Ue46XKY7xUeYyXqqbej5lMVFqvXr3M0aNHe947HA6zadOm5qRJkyyMqvZ5+umnzW7dupW5LTU11fT39zfnzZvnWbdlyxZTkrl69eoairB2kmTOnz/f897pdJqxsbHmyy+/7FmXmppqBgYGmu+9955pmqa5efNmU5K5bt06zz6LFi0yDcMw//zzzxqL3Wolr51pmubIkSPNwYMHl3sM167IwYMHTUnmypUrTdOs2N/TL774wrTZbGZycrJnnxkzZpgRERFmbm5uzX4BC5W8dqZpmhdffLH517/+tdxjuHZFGjRoYP7nP//hd66eYbxUMYyXKofxUuUxXqoaxkuVx3ip6urTmIlKqUrKy8vT+vXr1a9fP886m82mfv36afXq1RZGVjv98ccfatq0qVq3bq3hw4crKSlJkrR+/Xrl5+d7XccOHTqoefPmXMcSdu3apeTkZK9rFRkZqd69e3uu1erVqxUVFaWePXt69unXr59sNpvWrl1b4zHXNitWrFCTJk3Uvn173XvvvTpy5IhnG9euSFpamiSpYcOGkir293T16tU666yzFBMT49mnf//+Sk9P99zFOR2UvHZus2fPVqNGjdSlSxdNmDBB2dnZnm1cO9cdvLlz5yorK0sJCQn8ztUjjJdODeOlqmO8VHWMlyqG8VLlMV6qvPo4ZvKzOoC66vDhw3I4HF5/sJIUExOjrVu3WhRV7dS7d28lJiaqffv2OnDggJ555hldeOGF+vXXX5WcnKyAgABFRUV5HRMTE6Pk5GRrAq6l3NejrN8597bk5GQ1adLEa7ufn58aNmx42l/PAQMGaMiQIWrVqpV27Nihv/3tbxo4cKBWr14tu93OtSvkdDo1btw49enTR126dJGkCv09TU5OLvN3073tdFDWtZOkW265RS1atFDTpk31yy+/6NFHH9W2bdv08ccfSzq9r92mTZuUkJCgnJwchYWFaf78+erUqZM2btzI71w9wXip4hgv+QbjpaphvFQxjJcqj/FS5dTnMRNJKVS7gQMHel537dpVvXv3VosWLfTBBx8oODjYwshwOrn55ps9r8866yx17dpVZ555plasWKG+fftaGFntMnr0aP36669efUxQMeVdu+J9Ns466yzFxcWpb9++2rFjh84888yaDrNWad++vTZu3Ki0tDR9+OGHGjlypFauXGl1WIAlGC+hNmC8VDGMlyqP8VLl1OcxE9P3KqlRo0ay2+2lutqnpKQoNjbWoqjqhqioKLVr107bt29XbGys8vLylJqa6rUP17E09/U40e9cbGxsqcaxBQUFOnr0KNezhNatW6tRo0bavn27JK6dJI0ZM0afffaZvv76azVr1syzviJ/T2NjY8v83XRvq+/Ku3Zl6d27tyR5/e6drtcuICBAbdq0UY8ePTRp0iR169ZN//rXv/idq0cYL1Ue46XKYbzkW4yXSmO8VHmMlyqvPo+ZSEpVUkBAgHr06KHly5d71jmdTi1fvlwJCQkWRlb7ZWZmaseOHYqLi1OPHj3k7+/vdR23bdumpKQkrmMJrVq1UmxsrNe1Sk9P19q1az3XKiEhQampqVq/fr1nn6+++kpOp9PzH3a47Nu3T0eOHFFcXJyk0/vamaapMWPGaP78+frqq6/UqlUrr+0V+XuakJCgTZs2eQ1Uly5dqoiICHXq1KlmvogFTnbtyrJx40ZJ8vrdOx2vXVmcTqdyc3P5natHGC9VHuOlymG85FuMl4owXqo8xku+V6/GTNb2Wa/b5s6dawYGBpqJiYnm5s2bzbvvvtuMiory6moP03zwwQfNFStWmLt27TK///57s1+/fmajRo3MgwcPmqZpmvfcc4/ZvHlz86uvvjJ//PFHMyEhwUxISLA4amtkZGSYP/30k/nTTz+ZksxXXnnF/Omnn8w9e/aYpmmakydPNqOiosxPPvnE/OWXX8zBgwebrVq1Mo8fP+45x4ABA8zu3buba9euNb/77juzbdu25rBhw6z6SjXmRNcuIyPDfOihh8zVq1ebu3btMpctW2aec845Ztu2bc2cnBzPOU7Xa3fvvfeakZGR5ooV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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9651.630837,
   "end_time": "2025-08-16T07:37:09.920169",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-16T04:56:18.289332",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
