{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6e9a9e06",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-03T16:38:32.628977Z",
     "iopub.status.busy": "2025-08-03T16:38:32.628677Z",
     "iopub.status.idle": "2025-08-03T16:38:34.026370Z",
     "shell.execute_reply": "2025-08-03T16:38:34.025683Z"
    },
    "papermill": {
     "duration": 1.402517,
     "end_time": "2025-08-03T16:38:34.027694",
     "exception": false,
     "start_time": "2025-08-03T16:38:32.625177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1cb8233a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:38:34.032864Z",
     "iopub.status.busy": "2025-08-03T16:38:34.032527Z",
     "iopub.status.idle": "2025-08-03T16:38:48.307426Z",
     "shell.execute_reply": "2025-08-03T16:38:48.306751Z"
    },
    "papermill": {
     "duration": 14.278827,
     "end_time": "2025-08-03T16:38:48.308853",
     "exception": false,
     "start_time": "2025-08-03T16:38:34.030026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-03 16:38:35.501629: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754239115.688970      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754239115.745957      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3015ecab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:38:48.314332Z",
     "iopub.status.busy": "2025-08-03T16:38:48.313619Z",
     "iopub.status.idle": "2025-08-03T16:38:48.318042Z",
     "shell.execute_reply": "2025-08-03T16:38:48.317369Z"
    },
    "papermill": {
     "duration": 0.007942,
     "end_time": "2025-08-03T16:38:48.319066",
     "exception": false,
     "start_time": "2025-08-03T16:38:48.311124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 7   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0a7ca273",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:38:48.323567Z",
     "iopub.status.busy": "2025-08-03T16:38:48.323361Z",
     "iopub.status.idle": "2025-08-03T16:38:48.326554Z",
     "shell.execute_reply": "2025-08-03T16:38:48.325905Z"
    },
    "papermill": {
     "duration": 0.006528,
     "end_time": "2025-08-03T16:38:48.327569",
     "exception": false,
     "start_time": "2025-08-03T16:38:48.321041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d24bec98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T16:38:48.332637Z",
     "iopub.status.busy": "2025-08-03T16:38:48.332428Z",
     "iopub.status.idle": "2025-08-03T18:57:44.186006Z",
     "shell.execute_reply": "2025-08-03T18:57:44.185192Z"
    },
    "papermill": {
     "duration": 8335.857858,
     "end_time": "2025-08-03T18:57:44.187411",
     "exception": false,
     "start_time": "2025-08-03T16:38:48.329553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754239151.407920      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754239160.672578      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">64,768</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">64,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m64,768\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m64,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">657,418</span> (2.51 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m657,418\u001b[0m (2.51 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">656,902</span> (2.51 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m656,902\u001b[0m (2.51 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754239171.317697      58 service.cc:148] XLA service 0x7ff4f4018280 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754239171.318377      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754239174.770271      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 35.01644, saving model to models/best_model_full.keras\n",
      "4375/4375 - 48s - 11ms/step - loss: 126.5562 - mae: 8.0833 - val_loss: 35.0164 - val_mae: 4.5715 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 35.01644 to 14.30867, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 30.0014 - mae: 4.1593 - val_loss: 14.3087 - val_mae: 2.9014 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 14.30867 to 6.36579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 10.9115 - mae: 2.4755 - val_loss: 6.3658 - val_mae: 1.9622 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 6.36579 to 2.49641, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 5.3499 - mae: 1.6443 - val_loss: 2.4964 - val_mae: 1.2346 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.49641 to 2.00471, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0073 - mae: 1.0736 - val_loss: 2.0047 - val_mae: 1.0994 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 2.00471\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.5002 - mae: 1.2576 - val_loss: 2.0320 - val_mae: 1.1011 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 2.00471\n",
      "4375/4375 - 35s - 8ms/step - loss: 10.0189 - mae: 1.9896 - val_loss: 3.5861 - val_mae: 1.4116 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 2.00471\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.8626 - mae: 1.3343 - val_loss: 4.4373 - val_mae: 1.4407 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 2.00471 to 1.12275, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1451 - mae: 1.1634 - val_loss: 1.1227 - val_mae: 0.8253 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.12275\n",
      "4375/4375 - 34s - 8ms/step - loss: 14.2623 - mae: 2.3627 - val_loss: 5.2876 - val_mae: 1.7144 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 1.12275\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.7501 - mae: 1.5672 - val_loss: 2.2887 - val_mae: 1.1634 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 1.12275\n",
      "4375/4375 - 35s - 8ms/step - loss: 5.7479 - mae: 1.6356 - val_loss: 14.2020 - val_mae: 2.9161 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 1.12275 to 1.01758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6878 - mae: 1.2096 - val_loss: 1.0176 - val_mae: 0.7919 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8588 - mae: 0.9508 - val_loss: 1.6729 - val_mae: 0.9828 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5036 - mae: 0.9119 - val_loss: 2.0226 - val_mae: 1.0750 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.5102 - mae: 0.9874 - val_loss: 2.9439 - val_mae: 1.2571 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.9773 - mae: 1.1514 - val_loss: 1.0556 - val_mae: 0.7899 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 15.4692 - mae: 2.3164 - val_loss: 54.6581 - val_mae: 5.6543 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 1.01758\n",
      "4375/4375 - 34s - 8ms/step - loss: 6.3897 - mae: 1.7332 - val_loss: 7.7780 - val_mae: 2.0063 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 1.01758\n",
      "4375/4375 - 34s - 8ms/step - loss: 6.2678 - mae: 1.6043 - val_loss: 3.0423 - val_mae: 1.1621 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 7.6921 - mae: 1.7667 - val_loss: 19.2879 - val_mae: 3.1539 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.1280 - mae: 1.6986 - val_loss: 8.0402 - val_mae: 1.9923 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 22.1561 - mae: 2.7805 - val_loss: 21.2705 - val_mae: 3.4299 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 7.0483 - mae: 1.9111 - val_loss: 4.0754 - val_mae: 1.4693 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.9736 - mae: 1.2492 - val_loss: 9.1419 - val_mae: 2.2840 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 1.01758\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6374 - mae: 1.1326 - val_loss: 1.1093 - val_mae: 0.7908 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 1.01758 to 0.53614, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5567 - mae: 0.8335 - val_loss: 0.5361 - val_mae: 0.5582 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.5094 - mae: 0.9149 - val_loss: 1.0426 - val_mae: 0.6904 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.53614\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.2441 - mae: 0.8344 - val_loss: 9.9131 - val_mae: 2.4545 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0255 - mae: 0.7521 - val_loss: 0.5584 - val_mae: 0.5847 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.6262 - mae: 1.1143 - val_loss: 3.3458 - val_mae: 1.3251 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0043 - mae: 0.9910 - val_loss: 2.5679 - val_mae: 1.1760 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 5.6610 - mae: 1.5608 - val_loss: 8.9692 - val_mae: 2.2288 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3495 - mae: 1.0854 - val_loss: 1.4440 - val_mae: 0.9134 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.9851 - mae: 1.1943 - val_loss: 4.2214 - val_mae: 1.4918 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2580 - mae: 0.8096 - val_loss: 0.9554 - val_mae: 0.7518 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8554 - mae: 0.8061 - val_loss: 0.5924 - val_mae: 0.6024 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.53614\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2620 - mae: 0.8652 - val_loss: 1.0600 - val_mae: 0.7961 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.53614 to 0.50985, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7460 - mae: 0.6338 - val_loss: 0.5098 - val_mae: 0.5645 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.50985\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8758 - mae: 0.9735 - val_loss: 0.7925 - val_mae: 0.6849 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.50985\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9980 - mae: 0.7041 - val_loss: 10.9309 - val_mae: 2.2942 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.50985\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8944 - mae: 0.9155 - val_loss: 0.5972 - val_mae: 0.6007 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.50985\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8876 - mae: 0.6276 - val_loss: 16.6390 - val_mae: 2.9849 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.50985\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8198 - mae: 0.8638 - val_loss: 0.5528 - val_mae: 0.5804 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.50985 to 0.40262, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5397 - mae: 0.5662 - val_loss: 0.4026 - val_mae: 0.4926 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.40262\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.5374 - mae: 1.1867 - val_loss: 1.4676 - val_mae: 0.9254 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.40262\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1019 - mae: 1.0039 - val_loss: 1.3110 - val_mae: 0.8492 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.40262\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9842 - mae: 0.7383 - val_loss: 0.7884 - val_mae: 0.6823 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.40262\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8418 - mae: 0.8565 - val_loss: 0.5108 - val_mae: 0.5610 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.40262\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9055 - mae: 0.8510 - val_loss: 6.1124 - val_mae: 1.7883 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.40262\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4220 - mae: 0.8277 - val_loss: 0.7605 - val_mae: 0.6703 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.40262\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9333 - mae: 0.8540 - val_loss: 0.9445 - val_mae: 0.7371 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.40262 to 0.36484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5394 - mae: 0.5708 - val_loss: 0.3648 - val_mae: 0.4728 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.36484\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.3687 - mae: 0.8753 - val_loss: 2.7805 - val_mae: 1.2124 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.36484\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9953 - mae: 0.9488 - val_loss: 1.2898 - val_mae: 0.8112 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.36484\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7416 - mae: 0.6436 - val_loss: 0.4473 - val_mae: 0.5182 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.36484 to 0.35698, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4365 - mae: 0.5106 - val_loss: 0.3570 - val_mae: 0.4702 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.1140 - mae: 1.2645 - val_loss: 3.9297 - val_mae: 1.3682 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3201 - mae: 0.8157 - val_loss: 0.5306 - val_mae: 0.5692 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8475 - mae: 0.8371 - val_loss: 17.6929 - val_mae: 2.5459 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8902 - mae: 0.9325 - val_loss: 1.0145 - val_mae: 0.7807 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3696 - mae: 0.7736 - val_loss: 48.3093 - val_mae: 3.8506 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4902 - mae: 0.8216 - val_loss: 0.6995 - val_mae: 0.6411 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6969 - mae: 0.8034 - val_loss: 0.6378 - val_mae: 0.6231 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4876 - mae: 0.9104 - val_loss: 0.5369 - val_mae: 0.5695 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8509 - mae: 0.6733 - val_loss: 0.6234 - val_mae: 0.6158 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0246 - mae: 0.7998 - val_loss: 0.7047 - val_mae: 0.6553 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5267 - mae: 0.5589 - val_loss: 2.9220 - val_mae: 1.0969 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3064 - mae: 0.9006 - val_loss: 1.1725 - val_mae: 0.7957 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3535 - mae: 0.9811 - val_loss: 0.9413 - val_mae: 0.7095 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7138 - mae: 0.6161 - val_loss: 0.6956 - val_mae: 0.6468 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6271 - mae: 0.7649 - val_loss: 0.5498 - val_mae: 0.5802 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4154 - mae: 0.5003 - val_loss: 0.4768 - val_mae: 0.5389 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.5192 - mae: 1.0656 - val_loss: 1.0148 - val_mae: 0.7712 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7313 - mae: 0.9300 - val_loss: 1.3462 - val_mae: 0.8577 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6864 - mae: 0.6319 - val_loss: 0.8103 - val_mae: 0.5950 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.35698\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8463 - mae: 0.8781 - val_loss: 0.7613 - val_mae: 0.6732 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.35698 to 0.30655, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3952 - mae: 0.4858 - val_loss: 0.3065 - val_mae: 0.4325 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.30655 to 0.21656, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2516 - mae: 0.3925 - val_loss: 0.2166 - val_mae: 0.3652 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.21656 to 0.16817, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1812 - mae: 0.3343 - val_loss: 0.1682 - val_mae: 0.3225 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.16817 to 0.13505, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1427 - mae: 0.2968 - val_loss: 0.1350 - val_mae: 0.2878 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.13505 to 0.11990, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1195 - mae: 0.2721 - val_loss: 0.1199 - val_mae: 0.2717 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.11990 to 0.11142, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1049 - mae: 0.2555 - val_loss: 0.1114 - val_mae: 0.2616 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.11142 to 0.10733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0959 - mae: 0.2443 - val_loss: 0.1073 - val_mae: 0.2562 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.10733 to 0.09866, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0880 - mae: 0.2339 - val_loss: 0.0987 - val_mae: 0.2461 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.09866 to 0.09136, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0812 - mae: 0.2250 - val_loss: 0.0914 - val_mae: 0.2371 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.09136\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0757 - mae: 0.2172 - val_loss: 0.0925 - val_mae: 0.2397 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.09136 to 0.08316, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0735 - mae: 0.2137 - val_loss: 0.0832 - val_mae: 0.2251 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.08316\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0676 - mae: 0.2052 - val_loss: 0.0861 - val_mae: 0.2302 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.08316 to 0.07695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0631 - mae: 0.1982 - val_loss: 0.0770 - val_mae: 0.2166 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.07695 to 0.07338, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0603 - mae: 0.1941 - val_loss: 0.0734 - val_mae: 0.2110 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.07338 to 0.06646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0566 - mae: 0.1878 - val_loss: 0.0665 - val_mae: 0.2007 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.06646 to 0.06586, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0536 - mae: 0.1829 - val_loss: 0.0659 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.06586 to 0.06376, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0511 - mae: 0.1789 - val_loss: 0.0638 - val_mae: 0.1970 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.06376\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0491 - mae: 0.1751 - val_loss: 0.0641 - val_mae: 0.1975 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.06376 to 0.06251, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0470 - mae: 0.1711 - val_loss: 0.0625 - val_mae: 0.1962 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.06251 to 0.05761, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0454 - mae: 0.1684 - val_loss: 0.0576 - val_mae: 0.1871 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.05761\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0434 - mae: 0.1645 - val_loss: 0.0601 - val_mae: 0.1911 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.05761\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0428 - mae: 0.1635 - val_loss: 0.0632 - val_mae: 0.1968 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.05761 to 0.05693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0409 - mae: 0.1598 - val_loss: 0.0569 - val_mae: 0.1857 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.05693 to 0.05636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0399 - mae: 0.1580 - val_loss: 0.0564 - val_mae: 0.1850 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.05636 to 0.05297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0384 - mae: 0.1550 - val_loss: 0.0530 - val_mae: 0.1793 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.05297\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0371 - mae: 0.1524 - val_loss: 0.0550 - val_mae: 0.1827 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.05297 to 0.05255, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0365 - mae: 0.1510 - val_loss: 0.0526 - val_mae: 0.1788 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.05255 to 0.05092, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0353 - mae: 0.1487 - val_loss: 0.0509 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.05092 to 0.05079, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0353 - mae: 0.1484 - val_loss: 0.0508 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.05079 to 0.05074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0337 - mae: 0.1449 - val_loss: 0.0507 - val_mae: 0.1757 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.05074 to 0.04764, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0333 - mae: 0.1442 - val_loss: 0.0476 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04764\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0322 - mae: 0.1418 - val_loss: 0.0518 - val_mae: 0.1778 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04764\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0315 - mae: 0.1404 - val_loss: 0.0492 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.04764 to 0.04599, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0313 - mae: 0.1401 - val_loss: 0.0460 - val_mae: 0.1660 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.04599 to 0.04526, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0300 - mae: 0.1368 - val_loss: 0.0453 - val_mae: 0.1651 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.04526\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0296 - mae: 0.1360 - val_loss: 0.0560 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.04526 to 0.04363, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0291 - mae: 0.1348 - val_loss: 0.0436 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.04363 to 0.04295, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0283 - mae: 0.1327 - val_loss: 0.0430 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.04295\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0283 - mae: 0.1329 - val_loss: 0.0430 - val_mae: 0.1607 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.04295\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0277 - mae: 0.1314 - val_loss: 0.0434 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.04295\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0271 - mae: 0.1304 - val_loss: 0.0487 - val_mae: 0.1710 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.04295 to 0.04247, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0269 - mae: 0.1295 - val_loss: 0.0425 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.04247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0262 - mae: 0.1277 - val_loss: 0.0481 - val_mae: 0.1708 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.04247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0261 - mae: 0.1272 - val_loss: 0.0431 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.04247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0260 - mae: 0.1270 - val_loss: 0.0440 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.04247\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1261 - val_loss: 0.0430 - val_mae: 0.1613 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.04247 to 0.04104, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1250 - val_loss: 0.0410 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.04104 to 0.04070, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1247 - val_loss: 0.0407 - val_mae: 0.1567 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.04070\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1239 - val_loss: 0.0422 - val_mae: 0.1594 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.04070\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1231 - val_loss: 0.0424 - val_mae: 0.1597 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.04070\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0246 - mae: 0.1237 - val_loss: 0.0418 - val_mae: 0.1591 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.04070\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0243 - mae: 0.1228 - val_loss: 0.0447 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.04070 to 0.04035, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1232 - val_loss: 0.0403 - val_mae: 0.1565 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.04035\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1228 - val_loss: 0.0415 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.04035\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0241 - mae: 0.1222 - val_loss: 0.0408 - val_mae: 0.1567 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.04035\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0242 - mae: 0.1225 - val_loss: 0.0423 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.04035 to 0.04008, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0240 - mae: 0.1221 - val_loss: 0.0401 - val_mae: 0.1566 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.04008\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0243 - mae: 0.1227 - val_loss: 0.0420 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.04008\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0236 - mae: 0.1209 - val_loss: 0.0401 - val_mae: 0.1556 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.04008 to 0.03738, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0241 - mae: 0.1222 - val_loss: 0.0374 - val_mae: 0.1506 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0236 - mae: 0.1209 - val_loss: 0.0384 - val_mae: 0.1524 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0243 - mae: 0.1226 - val_loss: 0.0389 - val_mae: 0.1538 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0241 - mae: 0.1222 - val_loss: 0.0415 - val_mae: 0.1584 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1231 - val_loss: 0.0466 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1220 - val_loss: 0.0503 - val_mae: 0.1745 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1234 - val_loss: 0.0388 - val_mae: 0.1527 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0249 - mae: 0.1242 - val_loss: 0.0471 - val_mae: 0.1699 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0244 - mae: 0.1230 - val_loss: 0.0431 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1226 - val_loss: 0.0386 - val_mae: 0.1519 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1219 - val_loss: 0.0437 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0240 - mae: 0.1215 - val_loss: 0.0396 - val_mae: 0.1543 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0238 - mae: 0.1215 - val_loss: 0.0393 - val_mae: 0.1543 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0246 - mae: 0.1231 - val_loss: 0.0390 - val_mae: 0.1535 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1244 - val_loss: 0.0417 - val_mae: 0.1588 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1226 - val_loss: 0.0400 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0246 - mae: 0.1231 - val_loss: 0.0432 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.03738\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0247 - mae: 0.1238 - val_loss: 0.0426 - val_mae: 0.1613 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1238 - val_loss: 0.0381 - val_mae: 0.1512 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1222 - val_loss: 0.0406 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.03738\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1229 - val_loss: 0.0409 - val_mae: 0.1576 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.03738 to 0.02599, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0098 - mae: 0.0779 - val_loss: 0.0260 - val_mae: 0.1239 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.02599 to 0.02503, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0081 - mae: 0.0712 - val_loss: 0.0250 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02503\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0074 - mae: 0.0684 - val_loss: 0.0250 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.02503 to 0.02468, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0070 - mae: 0.0665 - val_loss: 0.0247 - val_mae: 0.1201 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.02468 to 0.02466, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0067 - mae: 0.0651 - val_loss: 0.0247 - val_mae: 0.1201 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.02466 to 0.02440, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0065 - mae: 0.0639 - val_loss: 0.0244 - val_mae: 0.1193 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02440\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0063 - mae: 0.0629 - val_loss: 0.0251 - val_mae: 0.1215 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02440\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0061 - mae: 0.0619 - val_loss: 0.0245 - val_mae: 0.1194 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02440\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0059 - mae: 0.0612 - val_loss: 0.0244 - val_mae: 0.1196 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02440\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0605 - val_loss: 0.0249 - val_mae: 0.1206 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02440\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0057 - mae: 0.0599 - val_loss: 0.0246 - val_mae: 0.1199 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.02440 to 0.02439, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0592 - val_loss: 0.0244 - val_mae: 0.1194 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0245 - val_mae: 0.1192 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0246 - val_mae: 0.1198 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02439\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0246 - val_mae: 0.1200 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0052 - mae: 0.0572 - val_loss: 0.0246 - val_mae: 0.1199 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02439\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0051 - mae: 0.0568 - val_loss: 0.0246 - val_mae: 0.1195 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0050 - mae: 0.0564 - val_loss: 0.0246 - val_mae: 0.1196 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02439\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0050 - mae: 0.0560 - val_loss: 0.0250 - val_mae: 0.1204 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0049 - mae: 0.0556 - val_loss: 0.0248 - val_mae: 0.1199 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0048 - mae: 0.0552 - val_loss: 0.0249 - val_mae: 0.1201 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0048 - mae: 0.0549 - val_loss: 0.0248 - val_mae: 0.1198 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0047 - mae: 0.0545 - val_loss: 0.0248 - val_mae: 0.1197 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0047 - mae: 0.0543 - val_loss: 0.0247 - val_mae: 0.1196 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02439\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0538 - val_loss: 0.0247 - val_mae: 0.1195 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02439\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0045 - mae: 0.0536 - val_loss: 0.0246 - val_mae: 0.1194 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.02439 to 0.02420, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0484 - val_loss: 0.0242 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0477 - val_loss: 0.0242 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0476 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0036 - mae: 0.0474 - val_loss: 0.0242 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.02420 to 0.02420, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0036 - mae: 0.0474 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0036 - mae: 0.0472 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0472 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0471 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0469 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0469 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0468 - val_loss: 0.0243 - val_mae: 0.1182 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0467 - val_loss: 0.0242 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0467 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0242 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0243 - val_mae: 0.1182 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0466 - val_loss: 0.0242 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0035 - mae: 0.0465 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0464 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0459 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0458 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0457 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0034 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0457 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0242 - val_mae: 0.1180 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02420\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1180 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02420\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0033 - mae: 0.0456 - val_loss: 0.0243 - val_mae: 0.1181 - learning_rate: 1.0000e-07\n",
      "Epoch 239: early stopping\n",
      "Restoring model weights from the end of the best epoch: 189.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1863 m\n",
      "Median positioning error: 0.1631 m\n",
      "90th percentile error: 0.3358 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8359.176514,
   "end_time": "2025-08-03T18:57:47.707924",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-03T16:38:28.531410",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
