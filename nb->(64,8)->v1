{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7135fcd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-22T07:42:59.012019Z",
     "iopub.status.busy": "2025-08-22T07:42:59.011724Z",
     "iopub.status.idle": "2025-08-22T07:43:00.620938Z",
     "shell.execute_reply": "2025-08-22T07:43:00.620015Z"
    },
    "papermill": {
     "duration": 1.614242,
     "end_time": "2025-08-22T07:43:00.622383",
     "exception": false,
     "start_time": "2025-08-22T07:42:59.008141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b44fbbb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T07:43:00.627483Z",
     "iopub.status.busy": "2025-08-22T07:43:00.627172Z",
     "iopub.status.idle": "2025-08-22T07:43:16.695555Z",
     "shell.execute_reply": "2025-08-22T07:43:16.694820Z"
    },
    "papermill": {
     "duration": 16.072289,
     "end_time": "2025-08-22T07:43:16.697060",
     "exception": false,
     "start_time": "2025-08-22T07:43:00.624771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-22 07:43:02.509152: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755848582.731169      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755848582.801860      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "671555a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T07:43:16.702927Z",
     "iopub.status.busy": "2025-08-22T07:43:16.702461Z",
     "iopub.status.idle": "2025-08-22T07:43:16.707369Z",
     "shell.execute_reply": "2025-08-22T07:43:16.706720Z"
    },
    "papermill": {
     "duration": 0.00886,
     "end_time": "2025-08-22T07:43:16.708471",
     "exception": false,
     "start_time": "2025-08-22T07:43:16.699611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128    #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =7    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128   #256,512,1025,2048,4096\n",
    "transformer_layers = 1   #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16      # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                    # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0520747c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T07:43:16.713697Z",
     "iopub.status.busy": "2025-08-22T07:43:16.713240Z",
     "iopub.status.idle": "2025-08-22T07:43:16.716834Z",
     "shell.execute_reply": "2025-08-22T07:43:16.716239Z"
    },
    "papermill": {
     "duration": 0.007444,
     "end_time": "2025-08-22T07:43:16.718041",
     "exception": false,
     "start_time": "2025-08-22T07:43:16.710597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "555989c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-22T07:43:16.723251Z",
     "iopub.status.busy": "2025-08-22T07:43:16.723051Z",
     "iopub.status.idle": "2025-08-22T09:57:43.402870Z",
     "shell.execute_reply": "2025-08-22T09:57:43.402089Z"
    },
    "papermill": {
     "duration": 8066.683972,
     "end_time": "2025-08-22T09:57:43.404055",
     "exception": false,
     "start_time": "2025-08-22T07:43:16.720083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755848627.085204      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755848636.391113      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">99,584</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        \u001b[38;5;34m99,584\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">164,746</span> (643.54 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m164,746\u001b[0m (643.54 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">164,486</span> (642.52 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m164,486\u001b[0m (642.52 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755848647.006372      56 service.cc:148] XLA service 0x7e8764016040 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755848647.007348      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755848650.142010      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 11.36319, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 66.1461 - mae: 5.4849 - val_loss: 11.3632 - val_mae: 2.6196 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 11.36319 to 6.64232, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 9.8712 - mae: 2.4290 - val_loss: 6.6423 - val_mae: 2.0102 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 6.64232 to 2.62923, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 5.2674 - mae: 1.7453 - val_loss: 2.6292 - val_mae: 1.2468 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 2.62923 to 2.14725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.8105 - mae: 1.2891 - val_loss: 2.1473 - val_mae: 1.1293 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.14725 to 1.52533, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.0560 - mae: 1.0947 - val_loss: 1.5253 - val_mae: 0.9672 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.52533\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7806 - mae: 0.9896 - val_loss: 1.5517 - val_mae: 0.9943 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.52533 to 1.32004, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6682 - mae: 0.9829 - val_loss: 1.3200 - val_mae: 0.8899 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.32004\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9473 - mae: 1.0417 - val_loss: 1.6989 - val_mae: 1.0281 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.32004 to 1.18839, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.2008 - mae: 1.0306 - val_loss: 1.1884 - val_mae: 0.8478 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.18839\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2736 - mae: 0.8547 - val_loss: 2.3955 - val_mae: 1.1986 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 1.18839\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0498 - mae: 0.7805 - val_loss: 1.7295 - val_mae: 1.0308 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 1.18839 to 0.97801, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7608 - mae: 0.9159 - val_loss: 0.9780 - val_mae: 0.7375 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.97801 to 0.86710, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0409 - mae: 0.7645 - val_loss: 0.8671 - val_mae: 0.7241 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.86710\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9139 - mae: 0.7163 - val_loss: 10.4210 - val_mae: 2.1742 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.86710\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3268 - mae: 0.8228 - val_loss: 0.9679 - val_mae: 0.7625 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.86710\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9817 - mae: 0.7232 - val_loss: 3.0975 - val_mae: 1.3085 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.86710 to 0.77929, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8757 - mae: 0.9125 - val_loss: 0.7793 - val_mae: 0.6850 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.77929 to 0.66858, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7577 - mae: 0.6742 - val_loss: 0.6686 - val_mae: 0.6387 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.66858\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7795 - mae: 0.6829 - val_loss: 0.7960 - val_mae: 0.6856 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.66858\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3005 - mae: 0.8121 - val_loss: 0.8767 - val_mae: 0.7372 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.66858\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.2266 - mae: 0.9926 - val_loss: 1.0113 - val_mae: 0.7808 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.66858\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2665 - mae: 0.8199 - val_loss: 0.7238 - val_mae: 0.6637 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.66858 to 0.58249, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9430 - mae: 0.7105 - val_loss: 0.5825 - val_mae: 0.5995 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss improved from 0.58249 to 0.55749, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5945 - mae: 0.5970 - val_loss: 0.5575 - val_mae: 0.5813 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.55749 to 0.53714, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5269 - mae: 0.7709 - val_loss: 0.5371 - val_mae: 0.5696 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.53714\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6636 - mae: 0.6125 - val_loss: 0.5560 - val_mae: 0.5770 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.53714\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8023 - mae: 0.6606 - val_loss: 0.5989 - val_mae: 0.6183 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss improved from 0.53714 to 0.46123, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7118 - mae: 0.6206 - val_loss: 0.4612 - val_mae: 0.5309 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.46123\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2783 - mae: 0.7660 - val_loss: 0.5441 - val_mae: 0.5693 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 0.46123 to 0.44836, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8875 - mae: 0.6725 - val_loss: 0.4484 - val_mae: 0.5181 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1034 - mae: 0.6568 - val_loss: 1.7623 - val_mae: 1.0103 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7479 - mae: 0.6566 - val_loss: 0.5756 - val_mae: 0.5831 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9472 - mae: 0.7098 - val_loss: 0.6352 - val_mae: 0.6142 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.0286 - mae: 0.9525 - val_loss: 2.5274 - val_mae: 1.1910 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0961 - mae: 0.7791 - val_loss: 0.6969 - val_mae: 0.6504 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2445 - mae: 0.7546 - val_loss: 0.7118 - val_mae: 0.6631 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3401 - mae: 0.7947 - val_loss: 0.8938 - val_mae: 0.6645 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4604 - mae: 0.8359 - val_loss: 0.9756 - val_mae: 0.7425 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8624 - mae: 0.7019 - val_loss: 0.5631 - val_mae: 0.5982 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3580 - mae: 0.7772 - val_loss: 1.0829 - val_mae: 0.7927 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7668 - mae: 0.6400 - val_loss: 0.4803 - val_mae: 0.5421 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6093 - mae: 0.7417 - val_loss: 1.4554 - val_mae: 0.9298 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7359 - mae: 0.6526 - val_loss: 0.6663 - val_mae: 0.6332 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8317 - mae: 0.6689 - val_loss: 0.4598 - val_mae: 0.5222 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6606 - mae: 0.8556 - val_loss: 1.1340 - val_mae: 0.8101 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8772 - mae: 0.6718 - val_loss: 0.7826 - val_mae: 0.6853 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4719 - mae: 0.7936 - val_loss: 0.5639 - val_mae: 0.5852 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6113 - mae: 0.6044 - val_loss: 0.6778 - val_mae: 0.6391 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4348 - mae: 0.7794 - val_loss: 0.4632 - val_mae: 0.5303 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.44836\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3616 - mae: 0.7477 - val_loss: 0.5933 - val_mae: 0.6032 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.44836 to 0.37005, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4184 - mae: 0.5021 - val_loss: 0.3701 - val_mae: 0.4749 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.37005 to 0.24897, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2918 - mae: 0.4209 - val_loss: 0.2490 - val_mae: 0.3890 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.24897 to 0.19027, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2193 - mae: 0.3660 - val_loss: 0.1903 - val_mae: 0.3401 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.19027 to 0.18299, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1810 - mae: 0.3330 - val_loss: 0.1830 - val_mae: 0.3344 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.18299 to 0.15138, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1572 - mae: 0.3111 - val_loss: 0.1514 - val_mae: 0.3026 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.15138 to 0.14004, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1388 - mae: 0.2923 - val_loss: 0.1400 - val_mae: 0.2919 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.14004 to 0.13831, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1272 - mae: 0.2797 - val_loss: 0.1383 - val_mae: 0.2913 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.13831 to 0.12029, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1163 - mae: 0.2673 - val_loss: 0.1203 - val_mae: 0.2684 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.12029 to 0.10824, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1070 - mae: 0.2567 - val_loss: 0.1082 - val_mae: 0.2562 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.10824 to 0.10348, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1009 - mae: 0.2490 - val_loss: 0.1035 - val_mae: 0.2501 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.10348 to 0.10172, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0953 - mae: 0.2424 - val_loss: 0.1017 - val_mae: 0.2488 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.10172 to 0.10095, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0900 - mae: 0.2355 - val_loss: 0.1009 - val_mae: 0.2469 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.10095 to 0.09713, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0860 - mae: 0.2304 - val_loss: 0.0971 - val_mae: 0.2426 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.09713 to 0.08749, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0818 - mae: 0.2250 - val_loss: 0.0875 - val_mae: 0.2302 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.08749 to 0.08511, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0797 - mae: 0.2220 - val_loss: 0.0851 - val_mae: 0.2287 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.08511\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0776 - mae: 0.2191 - val_loss: 0.0867 - val_mae: 0.2302 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.08511\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0758 - mae: 0.2165 - val_loss: 0.0950 - val_mae: 0.2401 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.08511 to 0.07878, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0725 - mae: 0.2119 - val_loss: 0.0788 - val_mae: 0.2171 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.07878 to 0.07695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0697 - mae: 0.2073 - val_loss: 0.0769 - val_mae: 0.2161 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.07695\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0679 - mae: 0.2052 - val_loss: 0.0777 - val_mae: 0.2172 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.07695\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0655 - mae: 0.2014 - val_loss: 0.0832 - val_mae: 0.2250 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.07695 to 0.07688, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0641 - mae: 0.1992 - val_loss: 0.0769 - val_mae: 0.2177 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.07688 to 0.07417, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0619 - mae: 0.1959 - val_loss: 0.0742 - val_mae: 0.2125 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.07417 to 0.06987, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0611 - mae: 0.1944 - val_loss: 0.0699 - val_mae: 0.2054 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.06987\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0591 - mae: 0.1913 - val_loss: 0.0711 - val_mae: 0.2076 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.06987\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0584 - mae: 0.1902 - val_loss: 0.0722 - val_mae: 0.2078 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.06987 to 0.06700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0579 - mae: 0.1892 - val_loss: 0.0670 - val_mae: 0.1973 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.06700 to 0.06596, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0564 - mae: 0.1871 - val_loss: 0.0660 - val_mae: 0.1996 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.06596\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0553 - mae: 0.1851 - val_loss: 0.0696 - val_mae: 0.2040 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.06596\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0543 - mae: 0.1836 - val_loss: 0.0696 - val_mae: 0.2038 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.06596 to 0.06285, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0533 - mae: 0.1817 - val_loss: 0.0629 - val_mae: 0.1922 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.06285 to 0.06104, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0529 - mae: 0.1809 - val_loss: 0.0610 - val_mae: 0.1897 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.06104\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0526 - mae: 0.1803 - val_loss: 0.0653 - val_mae: 0.1934 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.06104 to 0.05995, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0515 - mae: 0.1787 - val_loss: 0.0600 - val_mae: 0.1875 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.05995\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0505 - mae: 0.1766 - val_loss: 0.0641 - val_mae: 0.1945 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.05995\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0499 - mae: 0.1757 - val_loss: 0.0627 - val_mae: 0.1875 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.05995\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0491 - mae: 0.1744 - val_loss: 0.0620 - val_mae: 0.1913 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.05995\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0487 - mae: 0.1735 - val_loss: 0.0621 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.05995 to 0.05957, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0477 - mae: 0.1720 - val_loss: 0.0596 - val_mae: 0.1841 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.05957 to 0.05698, saving model to models/best_model_full.keras\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0474 - mae: 0.1714 - val_loss: 0.0570 - val_mae: 0.1808 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.05698\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0470 - mae: 0.1707 - val_loss: 0.0657 - val_mae: 0.1983 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.05698\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0473 - mae: 0.1712 - val_loss: 0.0590 - val_mae: 0.1887 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.05698 to 0.05664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0459 - mae: 0.1688 - val_loss: 0.0566 - val_mae: 0.1838 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.05664 to 0.05625, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0467 - mae: 0.1694 - val_loss: 0.0563 - val_mae: 0.1861 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.05625 to 0.05581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0452 - mae: 0.1673 - val_loss: 0.0558 - val_mae: 0.1843 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.05581\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0454 - mae: 0.1676 - val_loss: 0.0601 - val_mae: 0.1906 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.05581\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0446 - mae: 0.1661 - val_loss: 0.0561 - val_mae: 0.1846 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.05581 to 0.05518, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0444 - mae: 0.1659 - val_loss: 0.0552 - val_mae: 0.1829 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.05518\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0437 - mae: 0.1645 - val_loss: 0.0631 - val_mae: 0.1952 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.05518\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0434 - mae: 0.1640 - val_loss: 0.0628 - val_mae: 0.1945 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.05518 to 0.05312, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0435 - mae: 0.1640 - val_loss: 0.0531 - val_mae: 0.1787 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.05312 to 0.05091, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0430 - mae: 0.1631 - val_loss: 0.0509 - val_mae: 0.1749 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.05091\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0424 - mae: 0.1620 - val_loss: 0.0574 - val_mae: 0.1859 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.05091\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0427 - mae: 0.1626 - val_loss: 0.0518 - val_mae: 0.1775 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.05091\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0419 - mae: 0.1611 - val_loss: 0.0593 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.05091\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0425 - mae: 0.1620 - val_loss: 0.0519 - val_mae: 0.1773 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.05091 to 0.05042, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0417 - mae: 0.1606 - val_loss: 0.0504 - val_mae: 0.1748 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0412 - mae: 0.1595 - val_loss: 0.0599 - val_mae: 0.1917 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.05042\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0416 - mae: 0.1603 - val_loss: 0.0514 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0415 - mae: 0.1603 - val_loss: 0.0539 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.05042\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0411 - mae: 0.1594 - val_loss: 0.0585 - val_mae: 0.1887 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0405 - mae: 0.1582 - val_loss: 0.0525 - val_mae: 0.1774 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.05042\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0408 - mae: 0.1587 - val_loss: 0.0516 - val_mae: 0.1766 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0404 - mae: 0.1582 - val_loss: 0.0605 - val_mae: 0.1918 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0400 - mae: 0.1573 - val_loss: 0.0535 - val_mae: 0.1793 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.05042\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0401 - mae: 0.1575 - val_loss: 0.0529 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0401 - mae: 0.1576 - val_loss: 0.0571 - val_mae: 0.1847 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0405 - mae: 0.1578 - val_loss: 0.0571 - val_mae: 0.1841 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0403 - mae: 0.1576 - val_loss: 0.0548 - val_mae: 0.1823 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0397 - mae: 0.1564 - val_loss: 0.0505 - val_mae: 0.1757 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.05042\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0394 - mae: 0.1560 - val_loss: 0.0554 - val_mae: 0.1834 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0396 - mae: 0.1564 - val_loss: 0.0515 - val_mae: 0.1766 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.05042\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0387 - mae: 0.1545 - val_loss: 0.0540 - val_mae: 0.1813 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.05042 to 0.04813, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0389 - mae: 0.1553 - val_loss: 0.0481 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.04813 to 0.04784, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0386 - mae: 0.1544 - val_loss: 0.0478 - val_mae: 0.1706 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.04784\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0392 - mae: 0.1555 - val_loss: 0.0489 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.04784\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0394 - mae: 0.1560 - val_loss: 0.0491 - val_mae: 0.1719 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.04784\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0392 - mae: 0.1557 - val_loss: 0.0488 - val_mae: 0.1718 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.04784\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0391 - mae: 0.1549 - val_loss: 0.0488 - val_mae: 0.1720 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.04784\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0386 - mae: 0.1544 - val_loss: 0.0505 - val_mae: 0.1750 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.04784\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0390 - mae: 0.1550 - val_loss: 0.0531 - val_mae: 0.1795 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.04784\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0390 - mae: 0.1550 - val_loss: 0.0569 - val_mae: 0.1878 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.04784\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0387 - mae: 0.1546 - val_loss: 0.0521 - val_mae: 0.1780 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.04784 to 0.04696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0384 - mae: 0.1543 - val_loss: 0.0470 - val_mae: 0.1685 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.04696\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0384 - mae: 0.1539 - val_loss: 0.0517 - val_mae: 0.1767 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.04696\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0389 - mae: 0.1546 - val_loss: 0.0515 - val_mae: 0.1771 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.04696\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0379 - mae: 0.1529 - val_loss: 0.0471 - val_mae: 0.1693 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.04696 to 0.04527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0386 - mae: 0.1542 - val_loss: 0.0453 - val_mae: 0.1648 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0383 - mae: 0.1538 - val_loss: 0.0496 - val_mae: 0.1723 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.04527\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0388 - mae: 0.1543 - val_loss: 0.0536 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0392 - mae: 0.1555 - val_loss: 0.0464 - val_mae: 0.1679 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0387 - mae: 0.1542 - val_loss: 0.0518 - val_mae: 0.1785 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0387 - mae: 0.1544 - val_loss: 0.0519 - val_mae: 0.1766 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0386 - mae: 0.1544 - val_loss: 0.0529 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0413 - mae: 0.1561 - val_loss: 0.0467 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0373 - mae: 0.1513 - val_loss: 0.0491 - val_mae: 0.1734 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0390 - mae: 0.1548 - val_loss: 0.0517 - val_mae: 0.1756 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0381 - mae: 0.1536 - val_loss: 0.0474 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0384 - mae: 0.1538 - val_loss: 0.0492 - val_mae: 0.1724 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0386 - mae: 0.1538 - val_loss: 0.0538 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.04527\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0384 - mae: 0.1521 - val_loss: 0.0464 - val_mae: 0.1670 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.04527 to 0.04418, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0381 - mae: 0.1529 - val_loss: 0.0442 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0379 - mae: 0.1529 - val_loss: 0.0508 - val_mae: 0.1744 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0382 - mae: 0.1532 - val_loss: 0.0443 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0379 - mae: 0.1528 - val_loss: 0.0511 - val_mae: 0.1754 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0377 - mae: 0.1524 - val_loss: 0.0519 - val_mae: 0.1781 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1526 - val_loss: 0.0472 - val_mae: 0.1680 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0380 - mae: 0.1526 - val_loss: 0.0523 - val_mae: 0.1768 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0382 - mae: 0.1531 - val_loss: 0.0453 - val_mae: 0.1656 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0380 - mae: 0.1528 - val_loss: 0.0501 - val_mae: 0.1747 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0380 - mae: 0.1531 - val_loss: 0.0461 - val_mae: 0.1662 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0372 - mae: 0.1512 - val_loss: 0.0508 - val_mae: 0.1764 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1524 - val_loss: 0.0449 - val_mae: 0.1644 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1523 - val_loss: 0.0499 - val_mae: 0.1704 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0379 - mae: 0.1526 - val_loss: 0.0566 - val_mae: 0.1849 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.04418\n",
      "4375/4375 - 24s - 6ms/step - loss: 0.0378 - mae: 0.1523 - val_loss: 0.0463 - val_mae: 0.1680 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0377 - mae: 0.1521 - val_loss: 0.0495 - val_mae: 0.1714 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0382 - mae: 0.1530 - val_loss: 0.0526 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0381 - mae: 0.1530 - val_loss: 0.0479 - val_mae: 0.1699 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0377 - mae: 0.1521 - val_loss: 0.0506 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0373 - mae: 0.1516 - val_loss: 0.0505 - val_mae: 0.1731 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.04418\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0375 - mae: 0.1520 - val_loss: 0.0488 - val_mae: 0.1716 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.04418 to 0.02709, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0160 - mae: 0.0995 - val_loss: 0.0271 - val_mae: 0.1260 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.02709 to 0.02624, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0138 - mae: 0.0929 - val_loss: 0.0262 - val_mae: 0.1239 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.02624 to 0.02582, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0131 - mae: 0.0904 - val_loss: 0.0258 - val_mae: 0.1231 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.02582 to 0.02576, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0126 - mae: 0.0889 - val_loss: 0.0258 - val_mae: 0.1227 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss improved from 0.02576 to 0.02575, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0123 - mae: 0.0876 - val_loss: 0.0258 - val_mae: 0.1228 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02575\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0120 - mae: 0.0866 - val_loss: 0.0264 - val_mae: 0.1240 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02575\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0118 - mae: 0.0859 - val_loss: 0.0261 - val_mae: 0.1233 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.02575 to 0.02523, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0116 - mae: 0.0853 - val_loss: 0.0252 - val_mae: 0.1214 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02523\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0114 - mae: 0.0846 - val_loss: 0.0257 - val_mae: 0.1225 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02523\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0113 - mae: 0.0840 - val_loss: 0.0255 - val_mae: 0.1220 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02523\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0112 - mae: 0.0836 - val_loss: 0.0257 - val_mae: 0.1225 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02523\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0110 - mae: 0.0831 - val_loss: 0.0253 - val_mae: 0.1210 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.02523 to 0.02512, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0109 - mae: 0.0825 - val_loss: 0.0251 - val_mae: 0.1205 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02512\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0108 - mae: 0.0823 - val_loss: 0.0255 - val_mae: 0.1218 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02512\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0107 - mae: 0.0819 - val_loss: 0.0255 - val_mae: 0.1218 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02512\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0106 - mae: 0.0816 - val_loss: 0.0253 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.02512 to 0.02498, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0105 - mae: 0.0812 - val_loss: 0.0250 - val_mae: 0.1202 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02498\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0105 - mae: 0.0809 - val_loss: 0.0254 - val_mae: 0.1212 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02498\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0104 - mae: 0.0805 - val_loss: 0.0254 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02498\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0103 - mae: 0.0804 - val_loss: 0.0251 - val_mae: 0.1207 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02498\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0102 - mae: 0.0800 - val_loss: 0.0254 - val_mae: 0.1211 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02498\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0798 - val_loss: 0.0252 - val_mae: 0.1206 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02498\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0101 - mae: 0.0796 - val_loss: 0.0254 - val_mae: 0.1210 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02498\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0100 - mae: 0.0792 - val_loss: 0.0252 - val_mae: 0.1205 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.02498 to 0.02493, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0100 - mae: 0.0790 - val_loss: 0.0249 - val_mae: 0.1197 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02493\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0788 - val_loss: 0.0254 - val_mae: 0.1211 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02493\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0255 - val_mae: 0.1216 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02493\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0785 - val_loss: 0.0252 - val_mae: 0.1209 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02493\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0782 - val_loss: 0.0251 - val_mae: 0.1203 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss improved from 0.02493 to 0.02490, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0097 - mae: 0.0780 - val_loss: 0.0249 - val_mae: 0.1198 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02490\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0097 - mae: 0.0777 - val_loss: 0.0256 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02490\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0253 - val_mae: 0.1207 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02490\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0254 - val_mae: 0.1208 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02490\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0095 - mae: 0.0773 - val_loss: 0.0252 - val_mae: 0.1205 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02490\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0095 - mae: 0.0770 - val_loss: 0.0254 - val_mae: 0.1209 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.02490\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0094 - mae: 0.0768 - val_loss: 0.0252 - val_mae: 0.1206 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02490\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0094 - mae: 0.0767 - val_loss: 0.0250 - val_mae: 0.1201 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.02490 to 0.02415, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0708 - val_loss: 0.0241 - val_mae: 0.1176 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.02415 to 0.02414, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0701 - val_loss: 0.0241 - val_mae: 0.1175 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.02414 to 0.02411, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0699 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0699 - val_loss: 0.0241 - val_mae: 0.1175 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0698 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0241 - val_mae: 0.1175 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0696 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0696 - val_loss: 0.0242 - val_mae: 0.1175 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0695 - val_loss: 0.0241 - val_mae: 0.1175 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0695 - val_loss: 0.0242 - val_mae: 0.1176 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0242 - val_mae: 0.1175 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.02411 to 0.02409, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0241 - val_mae: 0.1173 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.02409\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0242 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02409\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0242 - val_mae: 0.1175 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02409\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.02409\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.02409\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02409\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss improved from 0.02409 to 0.02407, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss improved from 0.02407 to 0.02406, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1173 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.02406\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.02406\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.02406\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss improved from 0.02406 to 0.02405, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.02405\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.02405\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss improved from 0.02405 to 0.02405, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.02405 to 0.02404, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.02404\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.02404\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.02404\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.02404\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.02404\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.02404\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.02404\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0682 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-07\n",
      "Epoch 321: early stopping\n",
      "Restoring model weights from the end of the best epoch: 271.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1846 m\n",
      "Median positioning error: 0.1616 m\n",
      "90th percentile error: 0.3324 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8092.302967,
   "end_time": "2025-08-22T09:57:46.828162",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-22T07:42:54.525195",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
