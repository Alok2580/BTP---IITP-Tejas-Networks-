{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "40c8e6e6",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T14:25:01.014042Z",
     "iopub.status.busy": "2025-07-30T14:25:01.013828Z",
     "iopub.status.idle": "2025-07-30T14:25:02.402037Z",
     "shell.execute_reply": "2025-07-30T14:25:02.401256Z"
    },
    "papermill": {
     "duration": 1.392579,
     "end_time": "2025-07-30T14:25:02.403221",
     "exception": false,
     "start_time": "2025-07-30T14:25:01.010642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba32a24e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:25:02.408860Z",
     "iopub.status.busy": "2025-07-30T14:25:02.408367Z",
     "iopub.status.idle": "2025-07-30T14:25:16.816653Z",
     "shell.execute_reply": "2025-07-30T14:25:16.816012Z"
    },
    "papermill": {
     "duration": 14.412489,
     "end_time": "2025-07-30T14:25:16.818117",
     "exception": false,
     "start_time": "2025-07-30T14:25:02.405628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-30 14:25:04.309840: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753885504.499681      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753885504.567786      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "67775fae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:25:16.823363Z",
     "iopub.status.busy": "2025-07-30T14:25:16.822935Z",
     "iopub.status.idle": "2025-07-30T14:25:16.827387Z",
     "shell.execute_reply": "2025-07-30T14:25:16.826684Z"
    },
    "papermill": {
     "duration": 0.008104,
     "end_time": "2025-07-30T14:25:16.828429",
     "exception": false,
     "start_time": "2025-07-30T14:25:16.820325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 7   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad2d2a32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:25:16.833020Z",
     "iopub.status.busy": "2025-07-30T14:25:16.832604Z",
     "iopub.status.idle": "2025-07-30T14:25:16.835630Z",
     "shell.execute_reply": "2025-07-30T14:25:16.835100Z"
    },
    "papermill": {
     "duration": 0.0063,
     "end_time": "2025-07-30T14:25:16.836671",
     "exception": false,
     "start_time": "2025-07-30T14:25:16.830371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d050fd29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:25:16.841592Z",
     "iopub.status.busy": "2025-07-30T14:25:16.841391Z",
     "iopub.status.idle": "2025-07-30T16:13:52.363648Z",
     "shell.execute_reply": "2025-07-30T16:13:52.362910Z"
    },
    "papermill": {
     "duration": 6515.52657,
     "end_time": "2025-07-30T16:13:52.365047",
     "exception": false,
     "start_time": "2025-07-30T14:25:16.838477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753885537.798492      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753885547.020157      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,642</span> (772.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m197,642\u001b[0m (772.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,382</span> (771.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m197,382\u001b[0m (771.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753885557.524480      56 service.cc:148] XLA service 0x79ccb4015b60 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753885557.525174      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753885560.715995      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 44.72629, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 166.7551 - mae: 9.5062 - val_loss: 44.7263 - val_mae: 5.1655 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 44.72629 to 9.59725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 22.7401 - mae: 3.6047 - val_loss: 9.5973 - val_mae: 2.3966 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 9.59725 to 3.41334, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 6.4711 - mae: 1.9338 - val_loss: 3.4133 - val_mae: 1.4089 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.41334 to 2.07907, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.9824 - mae: 1.2990 - val_loss: 2.0791 - val_mae: 1.1363 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 2.07907\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.3731 - mae: 1.0788 - val_loss: 2.7163 - val_mae: 1.2188 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.07907 to 0.84053, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.0825 - mae: 0.9815 - val_loss: 0.8405 - val_mae: 0.7127 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.84053 to 0.74609, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4551 - mae: 0.8238 - val_loss: 0.7461 - val_mae: 0.6675 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.74609\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7145 - mae: 0.6593 - val_loss: 0.7629 - val_mae: 0.6576 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.74609 to 0.68476, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2323 - mae: 0.7565 - val_loss: 0.6848 - val_mae: 0.6490 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.68476 to 0.53000, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1785 - mae: 0.7371 - val_loss: 0.5300 - val_mae: 0.5677 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.53000\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5598 - mae: 0.5832 - val_loss: 0.7436 - val_mae: 0.6714 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.53000\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2702 - mae: 0.7120 - val_loss: 3.3929 - val_mae: 1.3147 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.53000 to 0.34275, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7022 - mae: 0.6309 - val_loss: 0.3427 - val_mae: 0.4595 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0277 - mae: 0.6434 - val_loss: 0.4832 - val_mae: 0.5411 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4595 - mae: 0.5292 - val_loss: 0.5034 - val_mae: 0.5562 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.7763 - mae: 0.9572 - val_loss: 0.7603 - val_mae: 0.6746 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6522 - mae: 0.6178 - val_loss: 0.5555 - val_mae: 0.5823 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8211 - mae: 0.8436 - val_loss: 0.5918 - val_mae: 0.5972 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9553 - mae: 0.6662 - val_loss: 0.6184 - val_mae: 0.6110 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3445 - mae: 0.7615 - val_loss: 0.5330 - val_mae: 0.5700 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0412 - mae: 0.7033 - val_loss: 0.6687 - val_mae: 0.6469 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9388 - mae: 0.6632 - val_loss: 1.7890 - val_mae: 0.9936 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.1968 - mae: 0.8409 - val_loss: 1.4926 - val_mae: 0.9318 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5575 - mae: 0.8005 - val_loss: 4.6801 - val_mae: 1.4958 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0460 - mae: 0.7296 - val_loss: 0.4886 - val_mae: 0.5538 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9833 - mae: 0.7938 - val_loss: 1.0226 - val_mae: 0.7650 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6139 - mae: 0.6065 - val_loss: 0.6469 - val_mae: 0.6230 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9171 - mae: 0.6600 - val_loss: 0.4176 - val_mae: 0.5043 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4703 - mae: 0.5307 - val_loss: 0.4722 - val_mae: 0.5366 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8881 - mae: 0.8094 - val_loss: 0.5802 - val_mae: 0.5997 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.34275\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3521 - mae: 0.7189 - val_loss: 4.0578 - val_mae: 1.4782 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3535 - mae: 0.7824 - val_loss: 0.7447 - val_mae: 0.6633 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.34275\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6023 - mae: 0.5997 - val_loss: 0.4121 - val_mae: 0.5015 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss improved from 0.34275 to 0.19076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2118 - mae: 0.3592 - val_loss: 0.1908 - val_mae: 0.3399 - learning_rate: 1.0000e-03\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss improved from 0.19076 to 0.15556, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1626 - mae: 0.3164 - val_loss: 0.1556 - val_mae: 0.3078 - learning_rate: 1.0000e-03\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.15556 to 0.13812, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1344 - mae: 0.2885 - val_loss: 0.1381 - val_mae: 0.2901 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss improved from 0.13812 to 0.12462, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1174 - mae: 0.2694 - val_loss: 0.1246 - val_mae: 0.2766 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss improved from 0.12462 to 0.10930, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1057 - mae: 0.2558 - val_loss: 0.1093 - val_mae: 0.2578 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.10930 to 0.10153, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0959 - mae: 0.2441 - val_loss: 0.1015 - val_mae: 0.2487 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.10153 to 0.09731, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0883 - mae: 0.2342 - val_loss: 0.0973 - val_mae: 0.2441 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.09731 to 0.09200, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0817 - mae: 0.2249 - val_loss: 0.0920 - val_mae: 0.2374 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.09200 to 0.08579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0764 - mae: 0.2179 - val_loss: 0.0858 - val_mae: 0.2282 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.08579 to 0.08083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0720 - mae: 0.2113 - val_loss: 0.0808 - val_mae: 0.2212 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.08083\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0689 - mae: 0.2067 - val_loss: 0.0832 - val_mae: 0.2257 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.08083 to 0.07822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0654 - mae: 0.2016 - val_loss: 0.0782 - val_mae: 0.2177 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.07822 to 0.07399, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0624 - mae: 0.1967 - val_loss: 0.0740 - val_mae: 0.2122 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.07399\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0597 - mae: 0.1927 - val_loss: 0.0754 - val_mae: 0.2150 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.07399 to 0.07042, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0573 - mae: 0.1888 - val_loss: 0.0704 - val_mae: 0.2068 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.07042 to 0.06879, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0548 - mae: 0.1846 - val_loss: 0.0688 - val_mae: 0.2036 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.06879 to 0.06501, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0529 - mae: 0.1815 - val_loss: 0.0650 - val_mae: 0.1994 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.06501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0525 - mae: 0.1809 - val_loss: 0.0655 - val_mae: 0.2001 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.06501 to 0.06123, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0515 - mae: 0.1790 - val_loss: 0.0612 - val_mae: 0.1929 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.06123 to 0.05991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0489 - mae: 0.1745 - val_loss: 0.0599 - val_mae: 0.1902 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.05991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0473 - mae: 0.1714 - val_loss: 0.0664 - val_mae: 0.2014 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.05991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0463 - mae: 0.1696 - val_loss: 0.0610 - val_mae: 0.1919 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.05991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0449 - mae: 0.1672 - val_loss: 0.0666 - val_mae: 0.2026 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.05991 to 0.05693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0438 - mae: 0.1649 - val_loss: 0.0569 - val_mae: 0.1856 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.05693\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0432 - mae: 0.1640 - val_loss: 0.0603 - val_mae: 0.1921 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.05693 to 0.05070, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0420 - mae: 0.1617 - val_loss: 0.0507 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.05070\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0415 - mae: 0.1607 - val_loss: 0.0533 - val_mae: 0.1804 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0407 - mae: 0.1596 - val_loss: 0.0533 - val_mae: 0.1801 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0406 - mae: 0.1584 - val_loss: 0.0536 - val_mae: 0.1814 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.05070\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0391 - mae: 0.1560 - val_loss: 0.0530 - val_mae: 0.1795 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.05070\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0389 - mae: 0.1557 - val_loss: 0.0524 - val_mae: 0.1778 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.05070\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0380 - mae: 0.1540 - val_loss: 0.0523 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.05070 to 0.05015, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1532 - val_loss: 0.0502 - val_mae: 0.1750 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.05015\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0372 - mae: 0.1521 - val_loss: 0.0525 - val_mae: 0.1776 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.05015\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0368 - mae: 0.1514 - val_loss: 0.0512 - val_mae: 0.1766 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.05015\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0361 - mae: 0.1501 - val_loss: 0.0525 - val_mae: 0.1782 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.05015 to 0.04787, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0361 - mae: 0.1500 - val_loss: 0.0479 - val_mae: 0.1703 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.04787\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0360 - mae: 0.1493 - val_loss: 0.0556 - val_mae: 0.1837 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.04787\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0354 - mae: 0.1485 - val_loss: 0.0536 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.04787 to 0.04683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0351 - mae: 0.1481 - val_loss: 0.0468 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.04683\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0346 - mae: 0.1467 - val_loss: 0.0520 - val_mae: 0.1777 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.04683\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0342 - mae: 0.1460 - val_loss: 0.0483 - val_mae: 0.1713 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.04683\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0340 - mae: 0.1457 - val_loss: 0.0512 - val_mae: 0.1764 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.04683\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0338 - mae: 0.1448 - val_loss: 0.0474 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.04683\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0335 - mae: 0.1445 - val_loss: 0.0489 - val_mae: 0.1712 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.04683\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0334 - mae: 0.1440 - val_loss: 0.0480 - val_mae: 0.1701 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.04683\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0471 - val_mae: 0.1680 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.04683 to 0.04663, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0333 - mae: 0.1440 - val_loss: 0.0466 - val_mae: 0.1673 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04663\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0332 - mae: 0.1433 - val_loss: 0.0570 - val_mae: 0.1856 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.04663 to 0.04542, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0454 - val_mae: 0.1653 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.04542\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0327 - mae: 0.1429 - val_loss: 0.0510 - val_mae: 0.1750 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04542\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0331 - mae: 0.1432 - val_loss: 0.0457 - val_mae: 0.1661 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04542\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0327 - mae: 0.1428 - val_loss: 0.0481 - val_mae: 0.1707 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.04542\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0328 - mae: 0.1424 - val_loss: 0.0455 - val_mae: 0.1663 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.04542\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0324 - mae: 0.1420 - val_loss: 0.0486 - val_mae: 0.1718 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04542\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0323 - mae: 0.1417 - val_loss: 0.0485 - val_mae: 0.1712 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.04542\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0324 - mae: 0.1419 - val_loss: 0.0455 - val_mae: 0.1664 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04542\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0321 - mae: 0.1409 - val_loss: 0.0459 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04542\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0324 - mae: 0.1417 - val_loss: 0.0479 - val_mae: 0.1682 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04542\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0315 - mae: 0.1398 - val_loss: 0.0522 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.04542 to 0.04486, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0322 - mae: 0.1415 - val_loss: 0.0449 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04486\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0321 - mae: 0.1414 - val_loss: 0.0468 - val_mae: 0.1685 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04486\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1404 - val_loss: 0.0498 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04486\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0316 - mae: 0.1400 - val_loss: 0.0491 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.04486 to 0.04407, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1404 - val_loss: 0.0441 - val_mae: 0.1632 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04407\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0320 - mae: 0.1411 - val_loss: 0.0485 - val_mae: 0.1714 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0315 - mae: 0.1400 - val_loss: 0.0461 - val_mae: 0.1654 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0312 - mae: 0.1394 - val_loss: 0.0473 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.04407\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0315 - mae: 0.1398 - val_loss: 0.0469 - val_mae: 0.1689 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0320 - mae: 0.1408 - val_loss: 0.0511 - val_mae: 0.1769 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04407\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0315 - mae: 0.1398 - val_loss: 0.0488 - val_mae: 0.1732 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0314 - mae: 0.1396 - val_loss: 0.0547 - val_mae: 0.1798 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.04407\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0319 - mae: 0.1404 - val_loss: 0.0473 - val_mae: 0.1699 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0316 - mae: 0.1399 - val_loss: 0.0462 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0319 - mae: 0.1405 - val_loss: 0.0506 - val_mae: 0.1765 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0318 - mae: 0.1404 - val_loss: 0.0473 - val_mae: 0.1689 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0318 - mae: 0.1403 - val_loss: 0.0445 - val_mae: 0.1639 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.04407\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0317 - mae: 0.1404 - val_loss: 0.0456 - val_mae: 0.1655 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0321 - mae: 0.1412 - val_loss: 0.0453 - val_mae: 0.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0322 - mae: 0.1411 - val_loss: 0.0460 - val_mae: 0.1671 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0315 - mae: 0.1396 - val_loss: 0.0458 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0319 - mae: 0.1406 - val_loss: 0.0472 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0322 - mae: 0.1411 - val_loss: 0.0488 - val_mae: 0.1723 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.04407\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0317 - mae: 0.1401 - val_loss: 0.0497 - val_mae: 0.1732 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.04407\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0320 - mae: 0.1405 - val_loss: 0.0495 - val_mae: 0.1703 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.04407 to 0.02940, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0144 - mae: 0.0943 - val_loss: 0.0294 - val_mae: 0.1312 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.02940 to 0.02899, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0124 - mae: 0.0883 - val_loss: 0.0290 - val_mae: 0.1304 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.02899\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0118 - mae: 0.0860 - val_loss: 0.0292 - val_mae: 0.1309 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.02899 to 0.02876, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0114 - mae: 0.0845 - val_loss: 0.0288 - val_mae: 0.1291 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.02876 to 0.02864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0111 - mae: 0.0836 - val_loss: 0.0286 - val_mae: 0.1294 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.02864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0109 - mae: 0.0827 - val_loss: 0.0289 - val_mae: 0.1296 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.02864 to 0.02846, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0107 - mae: 0.0821 - val_loss: 0.0285 - val_mae: 0.1283 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.02846\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0105 - mae: 0.0814 - val_loss: 0.0286 - val_mae: 0.1291 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.02846\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0103 - mae: 0.0806 - val_loss: 0.0289 - val_mae: 0.1294 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.02846\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0102 - mae: 0.0803 - val_loss: 0.0288 - val_mae: 0.1292 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.02846\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0798 - val_loss: 0.0287 - val_mae: 0.1287 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.02846\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0100 - mae: 0.0795 - val_loss: 0.0288 - val_mae: 0.1287 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.02846\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0100 - mae: 0.0792 - val_loss: 0.0286 - val_mae: 0.1284 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.02846 to 0.02845, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0285 - val_mae: 0.1284 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02845\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0289 - val_mae: 0.1292 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02845\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0097 - mae: 0.0780 - val_loss: 0.0289 - val_mae: 0.1293 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.02845\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0778 - val_loss: 0.0286 - val_mae: 0.1288 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02845\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0288 - val_mae: 0.1290 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0095 - mae: 0.0773 - val_loss: 0.0285 - val_mae: 0.1283 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0771 - val_loss: 0.0287 - val_mae: 0.1289 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0769 - val_loss: 0.0287 - val_mae: 0.1289 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02845\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0093 - mae: 0.0766 - val_loss: 0.0288 - val_mae: 0.1294 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0093 - mae: 0.0764 - val_loss: 0.0292 - val_mae: 0.1298 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0092 - mae: 0.0761 - val_loss: 0.0286 - val_mae: 0.1284 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0091 - mae: 0.0759 - val_loss: 0.0286 - val_mae: 0.1288 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0091 - mae: 0.0756 - val_loss: 0.0296 - val_mae: 0.1307 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02845\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0091 - mae: 0.0756 - val_loss: 0.0289 - val_mae: 0.1295 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.02845 to 0.02812, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0079 - mae: 0.0703 - val_loss: 0.0281 - val_mae: 0.1272 - learning_rate: 1.0000e-05\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.02812 to 0.02811, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0281 - val_mae: 0.1272 - learning_rate: 1.0000e-05\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.02811 to 0.02807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0696 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0695 - val_loss: 0.0281 - val_mae: 0.1272 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02807\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0281 - val_mae: 0.1270 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0281 - val_mae: 0.1270 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02807 to 0.02807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0281 - val_mae: 0.1270 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0281 - val_mae: 0.1270 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02807\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0281 - val_mae: 0.1272 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02807\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0690 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0690 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0690 - val_loss: 0.0281 - val_mae: 0.1272 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0281 - val_mae: 0.1270 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0281 - val_mae: 0.1270 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02807\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0281 - val_mae: 0.1271 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.02807 to 0.02805, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0683 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.02805 to 0.02804, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02804\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.02804 to 0.02803, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02803\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02803\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1270 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02803\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02803\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02803\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02803\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss improved from 0.02803 to 0.02802, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1268 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02802\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02802\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.02802\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.02802\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0281 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.02802\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.02802\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0280 - val_mae: 0.1269 - learning_rate: 1.0000e-07\n",
      "Epoch 252: early stopping\n",
      "Restoring model weights from the end of the best epoch: 202.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.2004 m\n",
      "Median positioning error: 0.1769 m\n",
      "90th percentile error: 0.3580 m\n"
     ]
    },
    {
     "data": {
      "image/png": "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nsHs2bPRpk0bAMA111yD//73v7j++uvxj3/8AxdccAGaN2+OTZs24emnn8af//xnXH755QHntHnzZpx33nkYM2YMJk+ejLy8PAA1l/17vuMN1LwBkJeXB8MwUFhYiJUrV+LRRx9FSkoKZsyY0eg++etf/4prrrkGvXv3xtlnn41ly5bh448/xuLFiwHUrKLudrsxaNAgxMfH46233kJcXJzfN01ycnKwZMkSDB06FDExMUhLS/PZ5tSpU9GxY0f06dMHr7/+OtavX4958+Y1uo6GJCUl4eabb8Zf//pXpKeno0WLFpg6dSpsNltACzZ6xuVULVq0COorGAkJCbjzzju9ObRt2xZPPPEEysrKTFsUsbGET9LnzJmDJ598Enl5eejduzf+/e9/+10MYcuWLXjooYewZs0a7Nu3D08//XSDS/ZTZNI0DYmJiWF/+Z0ZVOobmWsRnZsZ7S/aegR//XAjAGBAuzT84+Ie6NMmFYZhmFarGXWIHhsiVai0L8leSyALngXi8ccfR//+/TFnzhy88MIL0HUdHTt2xG9+8xvcfPPNtR571VVXYeLEibDb7bjyyitD0n5JSQn69u1b67aOHTti165dmD17Ns4880w8//zzmDp1Kux2O/r164dPPvkEl1xyiffxmqbh7bffxksvvYTXXnsNjzzyCKKiotC5c2eMHz8eY8b4/zqCr3788MMPcezYMbz11lt46623vLe3a9cOe/fu9f7tdDqRnZ0NTdOQnJyMrl27Yvz48Zg0adJpV5RvyOWXX45nnnkGM2fOxIEDB9C+fXu8/vrrGDFiBICaReAee+wxTJ48GW63G2eeeSY+++wzv5fXz5o1C5MnT8bLL7+MVq1a1arBY9KkSSgqKsI999yDo0ePokePHpg/fz46d+7c6DoC8dRTT+GOO+7AxRdfjOTkZNx77704cOAAYmNjT/s8T9/XlZube9oF8nx57LHHoOs6brrpJhQXF2PAgAH46quvfL6ZEWrBHF80Q+AKGe+99x7Gjx+PF154AYMGDcLs2bPxwQcfYMeOHT5XR1y9ejXef/999O/fH3/5y1/wt7/9LehJutPpREpKCo4fP97gd0eIiKjmHey53+/Fv77YBrdu4Df9W+OJq3rBFuGXt7tcLixYsADjxo0z/XuBJE7//g8jN7cI2dkpWLPmYdHpkIUqKirwyy+/oH37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164dOI7D/v37+eHRarUaY8aMgb+/P7p3744mTZrghx9+0JlX+/btMXLkSPTv3x/16tXDggULSi3DMAx+++032Nvbo2PHjggPD0fDhg2xbds2g9ZTJpNhz549uHz5MoKCgvD5559jxowZAFDmvd0aq1evhpubm9br/fff17sMUqkUhw4dQlpaGtq0aYO+ffuia9euWLZsmd55CYVCDB06FJs3b9Z7XV1+/vnnSk2iRwghhFQWw3EcZ+xCEEIIIaTu2Lx5M/9sdysrK2MXR28pKSkICAjAxYsX0aBBgyrn888//+C1117DzZs3IZfLa7CEhBBCXmY0uzshhBBCyrVx40Y0bNgQHh4euHLlCqZNm4Z+/frVyQ46ALi6umLt2rV48OBBtTrpycnJ2LhxI3XQCSGE1Ci6kk4IIYSQci1YsAA//PADUlJS4Obmht69e2POnDmQSqXGLhohhBBidqiTTgghhBBCCCGEmAiaOI4QQgghhBBCCDER1EknhBBCCCGEEEJMBHXSCSGEEEIIIYQQE0GddEIIIYQQQgghxERQJ50QQgghhBBCCDER1EknhBBCCCGEEEJMBHXSCSGEEEIIIYQQE0GddEIIIYQQQgghxERQJ50QQgghhBBCCDER/w+sYrcSWS/G3wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6538.518112,
   "end_time": "2025-07-30T16:13:55.480131",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T14:24:56.962019",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
