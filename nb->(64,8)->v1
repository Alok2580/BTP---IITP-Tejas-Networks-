{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e892b04",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-15T04:43:17.788979Z",
     "iopub.status.busy": "2025-08-15T04:43:17.788721Z",
     "iopub.status.idle": "2025-08-15T04:43:19.190970Z",
     "shell.execute_reply": "2025-08-15T04:43:19.190125Z"
    },
    "papermill": {
     "duration": 1.40715,
     "end_time": "2025-08-15T04:43:19.192426",
     "exception": false,
     "start_time": "2025-08-15T04:43:17.785276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1f5341e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:43:19.198059Z",
     "iopub.status.busy": "2025-08-15T04:43:19.197713Z",
     "iopub.status.idle": "2025-08-15T04:43:33.664888Z",
     "shell.execute_reply": "2025-08-15T04:43:33.664248Z"
    },
    "papermill": {
     "duration": 14.471244,
     "end_time": "2025-08-15T04:43:33.666268",
     "exception": false,
     "start_time": "2025-08-15T04:43:19.195024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-15 04:43:21.052351: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755233001.263155      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755233001.325640      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3789c595",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:43:33.671562Z",
     "iopub.status.busy": "2025-08-15T04:43:33.671106Z",
     "iopub.status.idle": "2025-08-15T04:43:33.675391Z",
     "shell.execute_reply": "2025-08-15T04:43:33.674871Z"
    },
    "papermill": {
     "duration": 0.007936,
     "end_time": "2025-08-15T04:43:33.676482",
     "exception": false,
     "start_time": "2025-08-15T04:43:33.668546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =5    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b6376ae4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:43:33.680856Z",
     "iopub.status.busy": "2025-08-15T04:43:33.680665Z",
     "iopub.status.idle": "2025-08-15T04:43:33.683989Z",
     "shell.execute_reply": "2025-08-15T04:43:33.683326Z"
    },
    "papermill": {
     "duration": 0.006659,
     "end_time": "2025-08-15T04:43:33.685010",
     "exception": false,
     "start_time": "2025-08-15T04:43:33.678351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a88bff61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-15T04:43:33.689833Z",
     "iopub.status.busy": "2025-08-15T04:43:33.689638Z",
     "iopub.status.idle": "2025-08-15T06:44:08.345597Z",
     "shell.execute_reply": "2025-08-15T06:44:08.344721Z"
    },
    "papermill": {
     "duration": 7234.6601,
     "end_time": "2025-08-15T06:44:08.346941",
     "exception": false,
     "start_time": "2025-08-15T04:43:33.686841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755233033.717970      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755233042.993640      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">23,168</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,256</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m23,168\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,256\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">188,682</span> (737.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m188,682\u001b[0m (737.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">188,422</span> (736.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m188,422\u001b[0m (736.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755233053.507238      56 service.cc:148] XLA service 0x7c75d8017860 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755233053.508028      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755233056.684715      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 15.42074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 101.4918 - mae: 6.5759 - val_loss: 15.4207 - val_mae: 3.0584 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 15.42074 to 7.17342, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 10.9861 - mae: 2.5497 - val_loss: 7.1734 - val_mae: 2.0813 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 7.17342 to 3.54819, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 5.8304 - mae: 1.8429 - val_loss: 3.5482 - val_mae: 1.4660 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 3.54819\n",
      "4375/4375 - 25s - 6ms/step - loss: 5.9244 - mae: 1.7130 - val_loss: 9.6558 - val_mae: 2.3283 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 3.54819\n",
      "4375/4375 - 25s - 6ms/step - loss: 3.8594 - mae: 1.4591 - val_loss: 5.1156 - val_mae: 1.6753 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 3.54819 to 1.38771, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.7289 - mae: 1.2185 - val_loss: 1.3877 - val_mae: 0.9051 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 1.38771\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.8129 - mae: 1.1550 - val_loss: 2.6099 - val_mae: 1.2417 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.38771\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.0311 - mae: 1.0132 - val_loss: 1.9103 - val_mae: 1.0410 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.38771 to 0.95900, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3081 - mae: 0.8662 - val_loss: 0.9590 - val_mae: 0.7631 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.95900 to 0.73235, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7245 - mae: 0.8954 - val_loss: 0.7323 - val_mae: 0.6656 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4413 - mae: 0.8728 - val_loss: 0.9029 - val_mae: 0.7310 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6247 - mae: 0.8818 - val_loss: 0.9901 - val_mae: 0.7890 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6165 - mae: 0.8368 - val_loss: 1.4209 - val_mae: 0.9020 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3813 - mae: 0.8511 - val_loss: 1.0818 - val_mae: 0.8098 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.7274 - mae: 1.1387 - val_loss: 2.0314 - val_mae: 1.0357 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7180 - mae: 0.9582 - val_loss: 4.0663 - val_mae: 1.4040 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.9314 - mae: 1.1819 - val_loss: 1.4954 - val_mae: 0.9460 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5271 - mae: 0.8967 - val_loss: 0.7682 - val_mae: 0.6891 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.73235\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.2137 - mae: 0.9579 - val_loss: 1.1446 - val_mae: 0.8276 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.73235\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5401 - mae: 0.8338 - val_loss: 0.9691 - val_mae: 0.7667 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.73235 to 0.60636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0697 - mae: 0.7338 - val_loss: 0.6064 - val_mae: 0.6037 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.60636\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6149 - mae: 0.8389 - val_loss: 0.9395 - val_mae: 0.7538 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.60636\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7772 - mae: 0.6732 - val_loss: 0.9932 - val_mae: 0.7599 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.60636\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5789 - mae: 0.8598 - val_loss: 0.9923 - val_mae: 0.7712 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.60636\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8704 - mae: 0.9235 - val_loss: 1.0693 - val_mae: 0.8003 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.60636\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7270 - mae: 0.6492 - val_loss: 1.0112 - val_mae: 0.7713 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.60636 to 0.54805, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5780 - mae: 0.7737 - val_loss: 0.5480 - val_mae: 0.5758 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2310 - mae: 0.7392 - val_loss: 0.7247 - val_mae: 0.6690 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6745 - mae: 0.6333 - val_loss: 0.5851 - val_mae: 0.5912 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1069 - mae: 0.7400 - val_loss: 0.7457 - val_mae: 0.6623 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7865 - mae: 0.8910 - val_loss: 1.6394 - val_mae: 0.9904 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.3569 - mae: 1.0965 - val_loss: 1.3492 - val_mae: 0.8402 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.7185 - mae: 1.0038 - val_loss: 3.7025 - val_mae: 1.4215 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2680 - mae: 0.8365 - val_loss: 0.9293 - val_mae: 0.7384 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8408 - mae: 0.8818 - val_loss: 0.9203 - val_mae: 0.7369 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6165 - mae: 0.8527 - val_loss: 1.2411 - val_mae: 0.8212 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5206 - mae: 0.8461 - val_loss: 6.7347 - val_mae: 1.6081 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.3705 - mae: 1.0011 - val_loss: 1.0184 - val_mae: 0.7564 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.7045 - mae: 1.0378 - val_loss: 1.5716 - val_mae: 0.9461 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8992 - mae: 0.9210 - val_loss: 1.0477 - val_mae: 0.7875 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1816 - mae: 0.7814 - val_loss: 0.8143 - val_mae: 0.6928 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3181 - mae: 0.8055 - val_loss: 0.5722 - val_mae: 0.5860 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8605 - mae: 0.8369 - val_loss: 0.8610 - val_mae: 0.7202 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7891 - mae: 0.6684 - val_loss: 8.2637 - val_mae: 1.7177 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5550 - mae: 0.8120 - val_loss: 0.6843 - val_mae: 0.6596 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9556 - mae: 0.6663 - val_loss: 1.9537 - val_mae: 1.0529 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8780 - mae: 0.8114 - val_loss: 1.4266 - val_mae: 0.8906 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.54805\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8077 - mae: 0.6738 - val_loss: 0.6908 - val_mae: 0.6286 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.54805 to 0.39861, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4753 - mae: 0.5305 - val_loss: 0.3986 - val_mae: 0.4836 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.39861 to 0.29818, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3183 - mae: 0.4374 - val_loss: 0.2982 - val_mae: 0.4206 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.29818 to 0.23065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2452 - mae: 0.3857 - val_loss: 0.2307 - val_mae: 0.3714 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.23065 to 0.20551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2052 - mae: 0.3531 - val_loss: 0.2055 - val_mae: 0.3506 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.20551 to 0.19461, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1801 - mae: 0.3312 - val_loss: 0.1946 - val_mae: 0.3400 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.19461 to 0.17042, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1664 - mae: 0.3157 - val_loss: 0.1704 - val_mae: 0.3192 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.17042 to 0.16758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1481 - mae: 0.3012 - val_loss: 0.1676 - val_mae: 0.3138 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.16758 to 0.15556, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1389 - mae: 0.2915 - val_loss: 0.1556 - val_mae: 0.3064 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.15556 to 0.14362, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1302 - mae: 0.2828 - val_loss: 0.1436 - val_mae: 0.2923 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.14362 to 0.13481, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.1247 - mae: 0.2767 - val_loss: 0.1348 - val_mae: 0.2848 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.13481\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1170 - mae: 0.2678 - val_loss: 0.1356 - val_mae: 0.2856 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.13481 to 0.12324, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1114 - mae: 0.2615 - val_loss: 0.1232 - val_mae: 0.2720 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.12324 to 0.12308, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.1071 - mae: 0.2568 - val_loss: 0.1231 - val_mae: 0.2709 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.12308\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.1019 - mae: 0.2504 - val_loss: 0.1246 - val_mae: 0.2731 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.12308\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0987 - mae: 0.2466 - val_loss: 0.1290 - val_mae: 0.2794 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.12308 to 0.11606, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0942 - mae: 0.2411 - val_loss: 0.1161 - val_mae: 0.2635 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.11606 to 0.10855, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0914 - mae: 0.2373 - val_loss: 0.1085 - val_mae: 0.2545 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.10855\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0882 - mae: 0.2334 - val_loss: 0.1141 - val_mae: 0.2601 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.10855 to 0.10798, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0856 - mae: 0.2297 - val_loss: 0.1080 - val_mae: 0.2537 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.10798\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0833 - mae: 0.2267 - val_loss: 0.1080 - val_mae: 0.2531 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.10798 to 0.09841, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0812 - mae: 0.2240 - val_loss: 0.0984 - val_mae: 0.2430 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.09841\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0785 - mae: 0.2200 - val_loss: 0.1016 - val_mae: 0.2469 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.09841\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0773 - mae: 0.2183 - val_loss: 0.0992 - val_mae: 0.2422 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.09841\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0750 - mae: 0.2152 - val_loss: 0.1003 - val_mae: 0.2469 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.09841\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0734 - mae: 0.2130 - val_loss: 0.1059 - val_mae: 0.2372 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.09841\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0734 - mae: 0.2118 - val_loss: 0.0998 - val_mae: 0.2327 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.09841\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0699 - mae: 0.2078 - val_loss: 0.1264 - val_mae: 0.2354 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.09841 to 0.08557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0698 - mae: 0.2072 - val_loss: 0.0856 - val_mae: 0.2268 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.08557\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0680 - mae: 0.2050 - val_loss: 0.0898 - val_mae: 0.2316 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.08557\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0675 - mae: 0.2041 - val_loss: 0.0876 - val_mae: 0.2277 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.08557 to 0.08443, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0661 - mae: 0.2021 - val_loss: 0.0844 - val_mae: 0.2239 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.08443\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0653 - mae: 0.2011 - val_loss: 0.0847 - val_mae: 0.2249 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.08443\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0641 - mae: 0.1993 - val_loss: 0.0869 - val_mae: 0.2273 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.08443\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0630 - mae: 0.1976 - val_loss: 0.0848 - val_mae: 0.2235 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.08443 to 0.08065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0620 - mae: 0.1959 - val_loss: 0.0806 - val_mae: 0.2183 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.08065\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0612 - mae: 0.1946 - val_loss: 0.0953 - val_mae: 0.2267 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.08065\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0608 - mae: 0.1941 - val_loss: 0.0817 - val_mae: 0.2208 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.08065\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0604 - mae: 0.1934 - val_loss: 0.0812 - val_mae: 0.2175 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.08065\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0620 - mae: 0.1939 - val_loss: 0.0829 - val_mae: 0.2200 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.08065\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0591 - mae: 0.1911 - val_loss: 0.0897 - val_mae: 0.2221 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.08065\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0582 - mae: 0.1900 - val_loss: 0.0811 - val_mae: 0.2177 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.08065 to 0.07981, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0579 - mae: 0.1892 - val_loss: 0.0798 - val_mae: 0.2154 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.07981\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0570 - mae: 0.1878 - val_loss: 0.0867 - val_mae: 0.2240 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.07981\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0571 - mae: 0.1879 - val_loss: 0.0833 - val_mae: 0.2205 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.07981\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0562 - mae: 0.1863 - val_loss: 0.0808 - val_mae: 0.2184 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.07981\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0568 - mae: 0.1871 - val_loss: 0.1166 - val_mae: 0.2192 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.07981\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0571 - mae: 0.1846 - val_loss: 0.0811 - val_mae: 0.2182 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.07981\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0559 - mae: 0.1858 - val_loss: 0.0918 - val_mae: 0.2336 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.07981\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0553 - mae: 0.1850 - val_loss: 0.0812 - val_mae: 0.2192 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.07981 to 0.07649, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0553 - mae: 0.1847 - val_loss: 0.0765 - val_mae: 0.2097 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.07649 to 0.07639, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0550 - mae: 0.1847 - val_loss: 0.0764 - val_mae: 0.2121 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.07639\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0544 - mae: 0.1835 - val_loss: 0.0862 - val_mae: 0.2256 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.07639 to 0.07637, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0547 - mae: 0.1840 - val_loss: 0.0764 - val_mae: 0.2122 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.07637\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0542 - mae: 0.1829 - val_loss: 0.0851 - val_mae: 0.2237 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.07637\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0540 - mae: 0.1821 - val_loss: 0.0928 - val_mae: 0.2146 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.07637\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0537 - mae: 0.1824 - val_loss: 0.0846 - val_mae: 0.2178 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.07637\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0535 - mae: 0.1813 - val_loss: 0.0870 - val_mae: 0.2288 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.07637\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0532 - mae: 0.1811 - val_loss: 0.0773 - val_mae: 0.2139 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.07637\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0528 - mae: 0.1804 - val_loss: 0.0843 - val_mae: 0.2199 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.07637\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0536 - mae: 0.1819 - val_loss: 0.0792 - val_mae: 0.2166 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.07637 to 0.07587, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0526 - mae: 0.1803 - val_loss: 0.0759 - val_mae: 0.2102 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.07587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0524 - mae: 0.1799 - val_loss: 0.0763 - val_mae: 0.2103 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.07587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0521 - mae: 0.1795 - val_loss: 0.0782 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.07587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0524 - mae: 0.1799 - val_loss: 0.0778 - val_mae: 0.2120 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.07587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0519 - mae: 0.1792 - val_loss: 0.0787 - val_mae: 0.2109 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.07587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0519 - mae: 0.1787 - val_loss: 0.0765 - val_mae: 0.2096 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.07587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0519 - mae: 0.1789 - val_loss: 0.0812 - val_mae: 0.2187 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.07587\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0516 - mae: 0.1781 - val_loss: 0.0769 - val_mae: 0.2115 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.07587 to 0.07529, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0514 - mae: 0.1780 - val_loss: 0.0753 - val_mae: 0.2108 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.07529\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0528 - mae: 0.1795 - val_loss: 0.0755 - val_mae: 0.2095 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.07529\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0513 - mae: 0.1778 - val_loss: 0.0789 - val_mae: 0.2163 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.07529\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0511 - mae: 0.1776 - val_loss: 0.0823 - val_mae: 0.2216 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.07529 to 0.07205, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0513 - mae: 0.1779 - val_loss: 0.0720 - val_mae: 0.2065 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.07205\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0514 - mae: 0.1780 - val_loss: 0.0762 - val_mae: 0.2095 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.07205\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0508 - mae: 0.1771 - val_loss: 0.0747 - val_mae: 0.2124 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.07205\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0507 - mae: 0.1770 - val_loss: 0.0723 - val_mae: 0.2056 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.07205\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0507 - mae: 0.1767 - val_loss: 0.0765 - val_mae: 0.2126 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.07205\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0514 - mae: 0.1779 - val_loss: 0.0724 - val_mae: 0.2047 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.07205\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0506 - mae: 0.1764 - val_loss: 0.0749 - val_mae: 0.2082 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.07205\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0504 - mae: 0.1765 - val_loss: 0.0750 - val_mae: 0.2116 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.07205 to 0.07010, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0508 - mae: 0.1765 - val_loss: 0.0701 - val_mae: 0.2029 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.07010\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0504 - mae: 0.1764 - val_loss: 0.0767 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.07010\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0506 - mae: 0.1763 - val_loss: 0.0714 - val_mae: 0.2057 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.07010 to 0.06767, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0510 - mae: 0.1768 - val_loss: 0.0677 - val_mae: 0.1990 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0505 - mae: 0.1764 - val_loss: 0.0744 - val_mae: 0.2106 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0498 - mae: 0.1754 - val_loss: 0.0794 - val_mae: 0.2176 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.06767\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0502 - mae: 0.1761 - val_loss: 0.0757 - val_mae: 0.2113 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.06767\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0497 - mae: 0.1753 - val_loss: 0.0715 - val_mae: 0.2055 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.06767\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0509 - mae: 0.1765 - val_loss: 0.0688 - val_mae: 0.2004 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0500 - mae: 0.1756 - val_loss: 0.0769 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.06767\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0496 - mae: 0.1749 - val_loss: 0.0704 - val_mae: 0.2031 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0498 - mae: 0.1754 - val_loss: 0.0740 - val_mae: 0.2069 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0501 - mae: 0.1754 - val_loss: 0.0788 - val_mae: 0.2124 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 7ms/step - loss: 0.0504 - mae: 0.1759 - val_loss: 0.0757 - val_mae: 0.2110 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.06767\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0497 - mae: 0.1750 - val_loss: 0.0762 - val_mae: 0.2107 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.06767\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0501 - mae: 0.1753 - val_loss: 0.0883 - val_mae: 0.2302 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.06767\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0496 - mae: 0.1748 - val_loss: 0.0712 - val_mae: 0.2035 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0495 - mae: 0.1742 - val_loss: 0.0734 - val_mae: 0.2079 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0494 - mae: 0.1744 - val_loss: 0.0751 - val_mae: 0.2129 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.06767\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0496 - mae: 0.1745 - val_loss: 0.0761 - val_mae: 0.2050 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0491 - mae: 0.1743 - val_loss: 0.0778 - val_mae: 0.2117 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0504 - mae: 0.1752 - val_loss: 0.0781 - val_mae: 0.2069 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.06767\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0484 - mae: 0.1726 - val_loss: 0.0843 - val_mae: 0.2262 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.06767 to 0.06680, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0502 - mae: 0.1745 - val_loss: 0.0668 - val_mae: 0.1997 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.06680\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0495 - mae: 0.1749 - val_loss: 0.0742 - val_mae: 0.2091 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.06680\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0503 - mae: 0.1757 - val_loss: 0.0710 - val_mae: 0.2042 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.06680\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0496 - mae: 0.1744 - val_loss: 0.0716 - val_mae: 0.2056 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.06680\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0494 - mae: 0.1743 - val_loss: 0.0858 - val_mae: 0.2275 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.06680\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0499 - mae: 0.1752 - val_loss: 0.0772 - val_mae: 0.2146 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.06680\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0496 - mae: 0.1747 - val_loss: 0.0674 - val_mae: 0.1995 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.06680\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0499 - mae: 0.1742 - val_loss: 0.0670 - val_mae: 0.1973 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.06680\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0485 - mae: 0.1732 - val_loss: 0.0784 - val_mae: 0.2160 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.06680\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0491 - mae: 0.1739 - val_loss: 0.0701 - val_mae: 0.2020 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.06680\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0495 - mae: 0.1740 - val_loss: 0.0697 - val_mae: 0.2013 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.06680\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0488 - mae: 0.1731 - val_loss: 0.0758 - val_mae: 0.2112 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.06680\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0493 - mae: 0.1736 - val_loss: 0.0711 - val_mae: 0.2053 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.06680\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0494 - mae: 0.1732 - val_loss: 0.0774 - val_mae: 0.2134 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss improved from 0.06680 to 0.06373, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0492 - mae: 0.1737 - val_loss: 0.0637 - val_mae: 0.1930 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.06373\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0491 - mae: 0.1736 - val_loss: 0.0696 - val_mae: 0.2020 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0494 - mae: 0.1740 - val_loss: 0.0732 - val_mae: 0.2064 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0490 - mae: 0.1737 - val_loss: 0.0673 - val_mae: 0.1999 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0499 - mae: 0.1745 - val_loss: 0.0726 - val_mae: 0.2072 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0479 - mae: 0.1715 - val_loss: 0.0755 - val_mae: 0.2102 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0488 - mae: 0.1733 - val_loss: 0.0729 - val_mae: 0.2087 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0490 - mae: 0.1736 - val_loss: 0.0730 - val_mae: 0.2077 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0491 - mae: 0.1734 - val_loss: 0.0685 - val_mae: 0.2010 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0487 - mae: 0.1734 - val_loss: 0.0731 - val_mae: 0.2050 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.06373\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0484 - mae: 0.1724 - val_loss: 0.0742 - val_mae: 0.2100 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0489 - mae: 0.1729 - val_loss: 0.0715 - val_mae: 0.2078 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0480 - mae: 0.1716 - val_loss: 0.0710 - val_mae: 0.2050 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0479 - mae: 0.1717 - val_loss: 0.0711 - val_mae: 0.2060 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0482 - mae: 0.1721 - val_loss: 0.0673 - val_mae: 0.1999 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0485 - mae: 0.1723 - val_loss: 0.0728 - val_mae: 0.2091 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.06373\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0478 - mae: 0.1717 - val_loss: 0.0869 - val_mae: 0.2201 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0487 - mae: 0.1733 - val_loss: 0.0716 - val_mae: 0.2060 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0472 - mae: 0.1702 - val_loss: 0.0741 - val_mae: 0.2104 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0490 - mae: 0.1715 - val_loss: 0.0701 - val_mae: 0.2038 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.06373\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0457 - mae: 0.1680 - val_loss: 0.0687 - val_mae: 0.2015 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss improved from 0.06373 to 0.04242, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0221 - mae: 0.1169 - val_loss: 0.0424 - val_mae: 0.1563 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss improved from 0.04242 to 0.04160, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0190 - mae: 0.1090 - val_loss: 0.0416 - val_mae: 0.1544 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss improved from 0.04160 to 0.04109, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0180 - mae: 0.1060 - val_loss: 0.0411 - val_mae: 0.1534 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.04109\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0174 - mae: 0.1043 - val_loss: 0.0412 - val_mae: 0.1534 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.04109\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0169 - mae: 0.1027 - val_loss: 0.0412 - val_mae: 0.1536 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.04109 to 0.04100, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0165 - mae: 0.1018 - val_loss: 0.0410 - val_mae: 0.1530 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.04100 to 0.04063, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0163 - mae: 0.1008 - val_loss: 0.0406 - val_mae: 0.1523 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0160 - mae: 0.1000 - val_loss: 0.0409 - val_mae: 0.1526 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0158 - mae: 0.0993 - val_loss: 0.0411 - val_mae: 0.1531 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0156 - mae: 0.0987 - val_loss: 0.0410 - val_mae: 0.1527 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0154 - mae: 0.0979 - val_loss: 0.0410 - val_mae: 0.1530 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0152 - mae: 0.0975 - val_loss: 0.0407 - val_mae: 0.1520 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0151 - mae: 0.0970 - val_loss: 0.0409 - val_mae: 0.1525 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0149 - mae: 0.0965 - val_loss: 0.0413 - val_mae: 0.1530 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0148 - mae: 0.0962 - val_loss: 0.0416 - val_mae: 0.1535 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0146 - mae: 0.0957 - val_loss: 0.0408 - val_mae: 0.1519 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0146 - mae: 0.0955 - val_loss: 0.0409 - val_mae: 0.1520 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0144 - mae: 0.0949 - val_loss: 0.0409 - val_mae: 0.1517 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0143 - mae: 0.0947 - val_loss: 0.0409 - val_mae: 0.1520 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0142 - mae: 0.0944 - val_loss: 0.0411 - val_mae: 0.1523 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0142 - mae: 0.0941 - val_loss: 0.0415 - val_mae: 0.1530 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0140 - mae: 0.0937 - val_loss: 0.0413 - val_mae: 0.1525 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0140 - mae: 0.0935 - val_loss: 0.0412 - val_mae: 0.1524 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0139 - mae: 0.0933 - val_loss: 0.0416 - val_mae: 0.1526 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0138 - mae: 0.0930 - val_loss: 0.0414 - val_mae: 0.1524 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.04063\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0137 - mae: 0.0926 - val_loss: 0.0415 - val_mae: 0.1526 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.04063\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0137 - mae: 0.0926 - val_loss: 0.0417 - val_mae: 0.1528 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.04063 to 0.04022, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0120 - mae: 0.0863 - val_loss: 0.0402 - val_mae: 0.1497 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss improved from 0.04022 to 0.04021, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0118 - mae: 0.0856 - val_loss: 0.0402 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.04021 to 0.04017, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0117 - mae: 0.0853 - val_loss: 0.0402 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.04017 to 0.04008, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0117 - mae: 0.0852 - val_loss: 0.0401 - val_mae: 0.1494 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0117 - mae: 0.0851 - val_loss: 0.0402 - val_mae: 0.1497 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0116 - mae: 0.0851 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0116 - mae: 0.0850 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0116 - mae: 0.0849 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0116 - mae: 0.0849 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0116 - mae: 0.0849 - val_loss: 0.0403 - val_mae: 0.1497 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0116 - mae: 0.0848 - val_loss: 0.0402 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0116 - mae: 0.0848 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0847 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0847 - val_loss: 0.0402 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0847 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0115 - mae: 0.0846 - val_loss: 0.0403 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0846 - val_loss: 0.0402 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0845 - val_loss: 0.0403 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0845 - val_loss: 0.0402 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0845 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0844 - val_loss: 0.0402 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0844 - val_loss: 0.0402 - val_mae: 0.1495 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0115 - mae: 0.0844 - val_loss: 0.0403 - val_mae: 0.1497 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0114 - mae: 0.0843 - val_loss: 0.0403 - val_mae: 0.1496 - learning_rate: 1.0000e-05\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0113 - mae: 0.0837 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0836 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0835 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-06\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.04008\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.04008\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0112 - mae: 0.0834 - val_loss: 0.0401 - val_mae: 0.1493 - learning_rate: 1.0000e-07\n",
      "Epoch 267: early stopping\n",
      "Restoring model weights from the end of the best epoch: 217.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.2352 m\n",
      "Median positioning error: 0.2037 m\n",
      "90th percentile error: 0.4265 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeXhbxdk28PtIlhd5txPH2ci+kg0SEvatgQTTslNa2gZoS4FCSwnv10IXAvSltLRQWkhLF7ayvKUFylLSQAhbA4FAAoSQjeyr43iTvMqyznx/KBKWLceWrTkzGt2/68oFPkeaeZ6Zc2Y0ljyyhBACRERERERERKScS3UARERERERERBTGRToRERERERGRJrhIJyIiIiIiItIEF+lEREREREREmuAinYiIiIiIiEgTXKQTERERERERaYKLdCIiIiIiIiJNcJFOREREREREpAku0omIiIiIiIg0wUU6ERGRww4cOICLLroIpaWlsCwL9957r+qQoi6//HKMHDmyV4+99dZbYVmW1HjeeOMNWJaFN954Q2o9REREuuAinYiIUs7WrVtx1VVXYfTo0cjOzkZBQQFOOOEE/O53v0NLS0v0cSNHjoRlWbAsCy6XC0VFRZg6dSq+853v4L333otbduTxnf+Vl5cnLf4bbrgBL7/8Mm6++WY89thjmD9/freP7RiDy+XCkCFDcOaZZzq2aG1ubsatt96alovkRx55pNvrwbIsvPvuu6pDJCIiA1lCCKE6CCIiot566aWXcPHFFyMrKwsLFizAlClT0NbWhhUrVuCZZ57B5Zdfjj//+c8Awov04uJi3HjjjQCAhoYGbNiwAf/85z9RWVmJG264Affcc09M+ZZl4YwzzsCCBQtijufk5ODCCy9MSg7l5eWYO3cuHn/88R4f2zEeIQS2b9+OP/zhD6iqqsJLL72Es846KykxRQSDQdi2jaysLABAdXU1Bg4ciEWLFuHWW2+NeWx7ezva29uRnZ2d1Bg6sm0bbW1tyMzMhMvl7HsLjzzyCK644grcfvvtGDVqVJfz8+fPx4ABAxyNiYiIzJehOgAiIqLe2r59O77yla9gxIgReO211zB48ODouWuvvRZbtmzBSy+9FPOcoUOH4utf/3rMsV/96le49NJL8dvf/hbjxo3DNddcE3N+/PjxXZ6TTFVVVSgqKur14zvHc/7552PatGm49957k75I93g8vX5sRkYGMjLkvpRwuVxSfwnQG2eddRZmzZqV0HPa29th2zYyMzO7nGtqakJubm6f4xFCoLW1FTk5OX0ug4iI9MWPuxMRUcq466670NjYiAcffDBmgR4xduxYXH/99T2Wk5OTg8ceewwlJSW44447kKwPlW3btg0XX3wxSkpK4PV6ceyxx8b80iDy8WkhBBYvXhz92HSipk6digEDBmD79u3RY6+99hpOOukk5ObmoqioCOeeey42bNgQ87yGhgb84Ac/wMiRI5GVlYWysjKcccYZWLNmTfQxHf8mfceOHRg4cCAA4LbbbovGG3lHPd7fpLe3t+PnP/85xowZg6ysLIwcORI//vGPEQgEYh43cuRIfPGLX8SKFSswe/ZsZGdnY/To0fjb3/4W87h4f5N+6qmnYsqUKVi/fj1OO+00eL1eDB06FHfddVeXttq5cyfOOecc5ObmoqysLPqnBsn8O/cdO3bAsiz85je/wb333hvNff369dE2Wr9+PS699FIUFxfjxBNP7FNbvfzyy5g1axZycnLwpz/9KSmxExGRfvhOOhERpYwXX3wRo0ePxvHHH9/vsvLy8nD++efjwQcfxPr163HkkUdGz7W2tqK6ujrm8fn5+dGPgMdz4MABHH/88Whubsb3v/99lJaW4tFHH8U555yDp59+Gueffz5OPvlkPPbYY/jGN74R9yP1vVVXV4e6ujqMHTsWAPDqq6/irLPOwujRo3HrrbeipaUF9913H0444QSsWbMmuui++uqr8fTTT+O6667D5MmTUVNTgxUrVmDDhg04+uiju9QzcOBA/PGPf8Q111yD888/HxdccAEAYNq0ad3G9u1vfxuPPvooLrroItx444147733cOedd2LDhg3417/+FfPYLVu24KKLLsK3vvUtXHbZZXjooYdw+eWXY+bMmTH90V0bzJ8/HxdccAG+/OUv4+mnn8aPfvQjTJ06NfrpgqamJpx++unYv38/rr/+epSXl+PJJ5/E66+/3uu2BgCfz9flerAsC6WlpTHHHn74YbS2tuI73/kOsrKyUFJSEj138cUXY9y4cfjFL34R/aVQIm21adMmfPWrX8VVV12FK6+8EhMmTEgoByIiSiGCiIgoBfh8PgFAnHvuub1+zogRI8TZZ5/d7fnf/va3AoB4/vnno8cAxP338MMPH7auH/zgBwKA+O9//xs91tDQIEaNGiVGjhwpQqFQTB3XXnttr3IAIL71rW+JgwcPiqqqKvHee++JL3zhCwKAuPvuu4UQQsyYMUOUlZWJmpqa6PM+/vhj4XK5xIIFC6LHCgsLe6z3sssuEyNGjIj+fPDgQQFALFq0qMtjFy1aJDq+lPjoo48EAPHtb3875nH/8z//IwCI1157LXpsxIgRAoB46623oseqqqpEVlaWuPHGG6PHXn/9dQFAvP7669Fjp5xyigAg/va3v0WPBQIBUV5eLi688MLosbvvvlsAEM8991z0WEtLi5g4cWKXMuN5+OGHu70esrKyoo/bvn27ACAKCgpEVVVV3Db66le/GnO8L221dOnSw8ZLRERm4MfdiYgoJfj9fgDhd7STJS8vD0D4Y+AdnXvuuVi2bFnMv3nz5h22rCVLlmD27NnRjzJHyv/Od76DHTt2YP369X2O88EHH8TAgQNRVlaGOXPm4O2338bChQvxgx/8APv378dHH32Eyy+/POad22nTpuGMM87AkiVLoseKiorw3nvvYd++fX2O5XAidS1cuDDmeGTjvs77BUyePBknnXRS9OeBAwdiwoQJ2LZtW4915eXlxfydfmZmJmbPnh3z3KVLl2Lo0KE455xzoseys7Nx5ZVXJpAVsHjx4i7Xw3/+858uj7vwwgujfx7Q2dVXXx3zc6JtNWrUqB6vQSIiMgM/7k5ERCmhoKAAQNcFdX80NjYC6LrwHzZsGObOnZtQWTt37sScOXO6HJ80aVL0/JQpU/oU57nnnovrrrsOlmUhPz8fRx55ZHTjsZ07dwJA3I8/T5o0CS+//HJ0o7K77roLl112GYYPH46ZM2eioqICCxYswOjRo/sUV2c7d+6Ey+WKfgw/ory8HEVFRdFYI4444oguZRQXF6Ourq7HuoYNG9bl7+GLi4uxdu3amHjGjBnT5XGd4+vJ7Nmze7VxXLwd4Ls7l2hbHa5sIiIyC99JJyKilFBQUIAhQ4Zg3bp1SSszUlaiizanRX5p8IUvfAGzZ8/u887gX/7yl7Ft2zbcd999GDJkCH7961/jyCOPjPuucH/0djM8t9sd97joxUZ+/XmuLIfbbb27c71tK+7kTkSUPrhIJyKilPHFL34RW7duxcqVK/tdVmNjI/71r39h+PDh0Xe7+2PEiBHYtGlTl+MbN26MnpchUm53dQ8YMCBmUT948GB897vfxXPPPYft27ejtLQUd9xxR7flJ7L7/IgRI2DbNj777LOY4wcOHEB9fb20NjhcPFu3bu2ycN+yZYujccSjW1sREZE+uEgnIqKU8cMf/hC5ubn49re/jQMHDnQ5v3XrVvzud7/rsZyWlhZ84xvfQG1tLX7yk5/06WvQOquoqMCqVatifoHQ1NSEP//5zxg5ciQmT57c7zriGTx4MGbMmIFHH30U9fX10ePr1q3DK6+8goqKCgBAKBSCz+eLeW5ZWRmGDBnS5Su/OvJ6vQAQU3Z3InXde++9McfvueceAMDZZ5/dYxnJNG/ePOzduxcvvPBC9Fhrayv+8pe/OBpHPLq1FRER6YN/k05ERCljzJgxePLJJ3HJJZdg0qRJWLBgAaZMmYK2tja88847+Oc//4nLL7885jl79+7F448/DiD87vn69evxz3/+E5WVlbjxxhtx1VVXJSW2m266Cf/3f/+Hs846C9///vdRUlKCRx99FNu3b8czzzwDl0ve78V//etf46yzzsJxxx2Hb33rW9GvYCssLIx+p3lDQwOGDRuGiy66CNOnT0deXh5effVVvP/++7j77ru7LTsnJweTJ0/GU089hfHjx6OkpARTpkyJ+/f106dPx2WXXYY///nPqK+vxymnnIJVq1bh0UcfxXnnnYfTTjtNVhPEddVVV+H+++/HV7/6VVx//fUYPHgwnnjiCWRnZwPo/acE/vOf/0Q/EdHR8ccf3+e/59etrYiISB9cpBMRUUo555xzsHbtWvz617/G888/jz/+8Y/IysrCtGnTcPfdd3fZufujjz7CN77xjeima8OHD8eXvvQlfPvb38bs2bOTFtegQYPwzjvv4Ec/+hHuu+8+tLa2Ytq0aXjxxRelvys6d+5cLF26FIsWLcItt9wCj8eDU045Bb/61a+iG455vV5897vfxSuvvIJnn30Wtm1j7Nix+MMf/oBrrrnmsOX/9a9/xfe+9z3ccMMNaGtrw6JFi7rdBO+vf/0rRo8ejUceeQT/+te/UF5ejptvvhmLFi1Ket49ycvLw2uvvYbvfe97+N3vfoe8vDwsWLAAxx9/PC688MLoYr0nt9xyS9zjDz/8cL823dOprYiISB+WULnDChEREZHD7r33Xtxwww3Ys2cPhg4dqjocIiKiGFykExERkbFaWlpidkZvbW3F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xET07t270WO+//57XHLJJZg+fTrOO++8gGJ6PlluagLWrl07JCQkoE2bNigvL8f777+P6OhobNu2DcOHD6/32OHDh2Pbtm0AgCuuuAKVlZXo1KkTJk+ejH//+98t+o600+nEoUOHTtqmx4mfIOfk5AAAjhw54jd2Xl5evZ8yzMnJ8T5+z549cLlc9d5gSElJCegNl6SkJGzatKnefy+99FK9xwwcONDncwcNGuT99+7du+FyuerV7nA4MGTIkEa1n/i8UAlm2+Un6aQkwzDgcrlgGIYSl+GFkkp9I3MtonOzsn2z2jrirMJji+t+B/22kZ1xz5juIYkvemyIVKHSvhRoLXEOO36YOcbCzH6dCMY5WvZ73N26dcOqVavgcrma/DT9xhtvxKxZs/D555/D7XbjwIEDmDRpUovaDyS3mpqaRm8EHDp0CE6nE926dfM+9scff2xWO/Pnz4fL5YKmaY364IcffsA555yDm2++GX/+858Djvnjjz8iOTm5yYXZvvzySyQnJyMzM7PeRLYpubm52L59O5YuXYolS5bgtttuwxNPPIGVK1c2OY4tdWJ8z35xsl8aaJiPpmnN+mWChmw2G7p06XLSxyQkJAR1e1Oa+7yT4eruREQU1o6UVmHSwvU47KxGXnosbhvZKewnAUQU/jRNQ3x0lJD/WnoM/O1vf4uysjI8++yzPu8vLi72/rtz584466yz8Morr2DhwoU455xz0KFDhxa1fzJXXXUVysrK8Pzzzze6b/bs2XA4HLj88ssB1NWxY8cOfPTRR40e67kiwp+2bduiS5cu6NKlS716tm7dilGjRuH666/Hww8/HHDeR44cwdtvv43x48c3eZVBx44d0blz50YT9J49e2L16tX1blu9ejV69erl/TsuLg4XXXQRnnnmGaxYsQJr1qzBd99957Mdh8Nx0u/HJycno02bNk22GWqer1qc+D35kpISS37GzaNz587e7617uFwurF+/3tTam4OfpBMRkVSOOKtw06vfYOshJ9LiHZh7WXf+zBoRUQsNHToU9957L+6++24cPHgQl156Kdq0aYNdu3Zh/vz5GDFiBO68807v42+66SZMnjwZABpdWtxcbrcbmzZtqndbTEwMTj/9dNx555249957UVVVhcsuuwy1tbV4/fXX8fTTT2Pu3LnIzc0FAFx55ZX497//jauvvhp//vOfcd5556F169b47rvv8NRTT+EPf/gDxo8fH3BO33//Pc4++2yMGTMGU6dORUFBAYC6y/493/EG6t4AKCgogGEYKC4uxpo1a/DII48gJSUFs2bNanaf3HPPPbjyyivRt29fnHbaaVixYgU++OADLF26FEDdKuputxtDhw5FfHw8Xn/9dcTFxfl90yQvLw/Lli3D8OHDERMTg7S0NJ9tTp8+HZ07d0a/fv2wYMECbNq0CW+88Uaz62hKUlISrr/+etxzzz1IT09HZmYmpk+fDpvNFtCCjZ5xOVFmZmZQX8FISEjArbfe6s2hffv2ePzxx1FRUWHaoojNJfxVz7x58/DEE0+goKAAffv2xd///ne/iyFs3boVDz74IDZs2ICffvoJTz31VJNL9lNk0jQNiYmJ/OTNB5X6RuZaROdmZfuhbGvXkVJc+9I6FDirkBgThXd/fzrapThCWofosSFShUr7kuy1BLLgWSAee+wxDBw4EPPmzcP8+fOh6zo6d+6M3/zmN7j++uvrPfbyyy/HlClTYLfbcdlll4Wk/bKyMvTv37/ebZ07d8auXbswd+5cnHrqqXjuuecwffp02O12DBgwAB9++CEuuugi7+M1TcObb76JF154Aa+88goefvhhREVFoWvXrpg4cSLGjPH/dQRf/fjee+/h6NGjeP311/H66697b+/QoQP27dvn/dvpdCInJweapiE5ORndu3fHxIkTcccdd5x0RfmmjB8/Hk8//TRmz56NAwcOoGPHjliwYAFGjhwJoG4RuEcffRRTp06F2+3Gqaeeiv/85z9+L6+fM2cOpk6dihdffBFt27atV4PHHXfcgZKSEtx99904cuQIevXqhUWLFqFr167NriMQTz75JG655RZceOGFSE5Oxr333osDBw4gNjb2pM/z9H1D+fn5J10gz5dHH30Uuq7juuuuQ2lpKQYNGoTPPvvM55sZoRbM8UUzBK6Q8c4772DixImYP38+hg4dirlz5+Ldd9/F9u3bfa6OuH79evzrX//CwIED8cc//hF/+tOfgp6kO51OpKSk4NixY01+d4SIiKzzY4ETv33xaxSW16Bz6wQ8NaEf+rRLFZ2WXy6XC59++inGjRtn+vcCSZyBAx9Cfn4JcnJSsGHDQ6LTIQtVVVVh79696NixY5OTCNmMHDkS/fr18/5+diTLy8vDXXfdJf0He7quw+l0Ijk52dQF+mRSXl6Otm3bYs6cOdJ9kt1cJztueOahJSUlSE5OPmkcoVvAk08+icmTJ2PSpEno1asX5s+fj/j4eLzyyis+Hz948GA88cQTuOqqq3z+RAORh2EYKCoqknqVVlFU6huZaxGdm5Xth6Ktw84qTFqwHoXlNTi1bQrevWUY+rRLNaUO0WND4YWru/un0r4kcy2BrHjuy7PPPovExES/3102u33RbT3yyCNITEzE/v37Qx7bw8q+UcG3336Lt956C7t378bGjRtxzTXXAIDP37xXUVis7l5TU4MNGzbg/vvv995ms9kwevRorFmzJmTtVFdXo7q62vu30+kEUPcJiMvlClk7JBdd11FdXe1zldBIp1LfyFyL6NysbL+lbZVX12LSgvXIL6lCp1YJWHD9ACRFa3C5XKbUEaqYnnMIzyWqM7z/51jXJ/o4F0q+avGs9q7rekhWqG4Jz8+TBfoi/7XXXkNlZSUAoH379i3OP9j2ZWjr5ptvxm9+8xsAdb8ffmLcUE/UQxHT83zPNqciXdcxe/ZsbN++HdHR0RgwYABWrlyJ9PR0ZWrWdd37axENv15RU1MTcBxhk/Rjx47B7XYjKyur3u1ZWVnN/lkFX2bNmoUZM2Y0un358uWIj48PWTtERBQ8lw68vN2GbcU2JEYZuCa3BKuXLxGdVlCWLAmvfCk4VVVV3v9/+umngrMhK0VFRSE7OxtlZWVBvbiWQVJSkncV8aqqKu92HEmioqLqfX3W80Gd7EpLS0WnYJrOnTtj2bJljW4Pl7EJRE1NDSorK/HFF180+j37ioqKgOMIXzjObPfffz+mTp3q/dvpdCI3NxejRo3id9IVpus6ioqKkJaWFvbv7oeaSn0jcy2ic7Oy/ea2VV5di1vf3IRtxYWIddjwyg2D0L99akhim5FvQy6XC0uWLMG5557L76QrbMaMjQBqEBsbi3HjxolORyqij3Oh5KuWqqoqHDhwAImJicK/k+52u0O2eJzs7ZvZlhmxQxXTMAyUlpYiKSlJ2gUMqWlVVVWIi4vDmWee2ei4ceLPHDZF2CS9VatWsNvtOHz4cL3bDx8+HPQqfScTExPj8/vrDoeDL6oUZhgG0tPT4XCEdlVoFajUNzLXIjo3K9tvTlsVNbX43Wvf4pufipAQbccrNwzGkE6N3zg1o45Qx+T5RHWa9/8c5/pEH+dCyVctbrcbmqbBZrMJfRPCMAzY7XZomibsfGJV+2a2ZUbsUMb0XO7t2eYoPHl+Us7Xa4Po6OjA44Q6sUBFR0dj4MCB9S550HUdy5Ytw+mnny4qLVKEpmmIjo4O+xcNZlCpb2SuRXRuVrYfbFu6bmDqO5vxzU9FSI6Nwuu/G4qhPibozYltRr4U2TybCTeXxlTal2SuxTNpE3k+sap9M9syI7bosaHwEsx2IvRtGs9v+L366qvYtm0bbr31VpSXl2PSpEkAgIkTJ9ZbWK6mpgabNm3Cpk2bUFNTg4MHD2LTpk3YtWuXqBJIUrqu4/jx48osQhFKKvWNzLWIzs3K9oNpq6TChYmvrMPirQWIttuwYNJg9G/v/7dJzahD9NhQeOHq7v6ptC/JXIvoFcTDdXV3K2KLHhsKL8EcX4R+J33ChAk4evQoHnzwQRQUFKBfv35YvHixdzG5/fv317vc49ChQ+jfv7/379mzZ2P27Nk466yzsGLFCqvTJ8nxgOmfSn0jcy2ic7Oy/UDaKqlw4Yrnv8KOw2WIddjw2OV9MLBDekhiB0v02BCpQqV9SeZaROcm2/lEptiix4bUJHzhuClTpmDKlCk+72s48c7Ly+OOQEQUpp5augM7DpchMykGr944BD1zkkWnRERERCQdrkpARESmKq1y4aFFW7Hwq30AgDlX9uUEnYhIQfv27YOmadi0aROAug/cNE0LalVrq2mahg8//PCkj7nhhhswfvz4kLb70EMPoV+/fiGNGU4abhsLFy5Eamqq0Jxkwkk6KUnTNKSmpnIhDx9U6huZaxGdm5Xtn6ytXUdKMXbul94J+u9GdMQZXVuHJHZziR4bIlWotC/JXktUVHAXvz700EPeFcc9//Xo0aPeY6qqqnD77bcjIyMDiYmJuPzyy+v96lJhYSEuuugiJCUlYciQIfj222/rPf/222/HnDlz6t2Wm5uL/Px8nHLKKUFW+KuGtS5cuNBbg81mQ7t27TBp0iQcOXKkxbEBID8/H+effz6Axm8yeDz99NNYuHBhwDEDMW3aNJ+/GR5qvrYFX9uDaBMmTMCOHTtEp2GqYI4vwi93JzIDV9v0T6W+kbkW0bnJsBrvriOluP6V9ThYXInc9DjMvOQUjOwW+AT9ZLHNyJfIF67u7p9K+5LMtWiaBsMwgs6td+/eWLp0qffvhpPJP/7xj/jkk0/w7rvvIiUlBVOmTMFll12G1atXAwAefvhhlJaWYuPGjXj22Wdx880345tvvgEArF27Fl9//TWeeeaZejHtdnuLfkrZX63JycnYvn07dF3H5s2bMWnSJBw6dAifffZZi2MHkm9KSkpQMQORmJiIxMTEoJ/XHA23BeDkby7U1NQ0+rmwE3+SMBiBPi8uLg5xcXFBxQ43YbO6O5FZdF1HYWGhlKu0iqZS38hci+jcrGy/YVubDhTjmpfW4oJnVuFgcSU6tUrAR7ePwKjumUG/kDGjDtFjQ+GFq7v7p9K+JHMtzV1BPCoqCtnZ2d7/WrVq5b2vpKQEL7/8Mp588kmcffbZGDhwIBYsWICvvvoKa9euBQBs27YNV111Fbp27Yobb7wR27ZtAwC4XC7ccsstmD9/Pux2e702/X0SfaJVq1bhjDPOQFxcHHJzc3HHHXegvLz8pLVqmobs7Gy0adMG559/Pu644w4sXboUlZWV0HUdM2fORLt27RATE+NdiNqjpqYGU6ZMQU5ODuLi4tChQwfMmjWrXmzP5e4dO3YEAPTv3x+apmHkyJEAGl/uXl1djTvuuAOZmZmIi4vDiBEjsH79eu/9nku5ly1bhkGDBiE+Ph7Dhg3D9u3bvY9peLn7pEmTcM0112DOnDnIyclBRkYGbr/9drhcLu9j8vPzccEFFyAuLg4dO3bEm2++iby8PMydO9dvfwONt4WG20NeXh7++te/YuLEiUhOTsbNN9/svfx80aJF6NWrF2JiYrB//34UFRVh4sSJSEtLQ3x8PM4//3zs3LnTG8vf85rS8HJ3T/+89tpryMvLQ0pKCq666iqUlpZ6H6PrOmbNmoWOHTsiLi4Offv2xXvvvddkW6IEc3zhJJ2IiEKi1q3j78t24sr5a7B613FU1+oY0jEd7906DOkJ0U0HICKikNm5cyfatGmDTp064Zprrqk3UdqwYQNcLhdGjx7tva1Hjx5o37491qxZAwDo27cvPv/8c9TW1mLJkiXo06cPAODxxx/HyJEjMWjQoKBz2r17N8aOHYvLL78cW7ZswTvvvINVq1b5XUTan7i4OOi6jtraWjz99NOYM2cOZs+ejS1btmDMmDG4+OKLvRPHZ555BosWLcI777yD77//Hq+//jry8vJ8xl23bh0AYOnSpcjPz8cHH3zg83H33nsv3n//fSxcuBBff/01unTpgjFjxqCwsLDe4x544AHMmTMH33zzDaKionDjjTeetK4vv/wSu3fvxvLly/Hqq69i4cKF9S6znzhxIg4dOoQVK1bg/fffxwsvvNCsy/59mT17Nvr27Ytvv/0Wf/nLXwAAFRUVeOyxx/DSSy9h69atyMzMxA033IBvvvkGixYtwpo1a2AYBsaNG1fvzQRfz2uO3bt348MPP8THH3+Mjz/+GCtXrsSjjz7qvX/WrFn45z//ifnz52Pr1q344x//iGuvvRYrV65sWWdIgJe7ExFRixmGgQc+3Ip3N/wMABjdMwvTxnRD96wkKS8fJSJqieLn3kbxc/8CAGQ99xfEDf/1J4JdPx3CwYvqJp0J485A60f/WO+5+dfeh+otdd+9zdtSfxLofOtTFM56CQDQ6pE7kXjhWc3Kb+jQoVi4cCG6d++O/Px8zJgxA2eccQa+//57JCUloaCgANHR0Y0W6srKykJBQQEA4L777sOtt96KLl26oEOHDnjppZewc+dOvPrqq1izZg1uueUW/O9//8OgQYPw4osv+r0k/ESzZs3CNddcg7vuugsA0LVrVzzzzDM466yz8NxzzyEmJqbJGDt37sT8+fMxaNAgJCUlYfbs2fjTn/6Eq666CgDw2GOPYfny5Zg7dy7mzZuH/fv3o2vXrhgxYgTcbjc6d+7s97zUunXdV7IyMjL8XgZfXl6O5557DgsXLsT555+P2tpavPDCC1iyZAlefvll3HPPPd7HPvzwwzjrrLO8/XnBBRegqqoKsbGxPmOnpqbi73//OxwOB3r06IELLrgAy5Ytw+TJk/Hjjz9i6dKlWL9+vfcNkpdeegldu3Ztss++++67RpfWX3vttZg/f77377PPPht333239+8vv/wSLpcLzz77LPr27Qugru8XLVqE1atXY9iwYQCAN954A7m5ufjwww9xxRVXAECj5zWXrutYuHAhkpKSAADXXXcdli1bhocffhjV1dV45JFHsHTpUpx++ukAgE6dOmHVqlV4/vnnvf0erjhJJyKiFtmW78TUd77H9iMVsGnAY5f3wW8GtuPknIiUpZdWwJ1/FABgVNfUv9Ote+/TS0obPhXu48Xe+xsyKqp+jVtZ1ez8PAuhAUCfPn0wdOhQdOjQAf/6179w0003BRQjJSUFb775pvcS9KioKJxzzjl44okn8MYbb2DPnj3Yvn07Jk+ejJkzZzZaRM6XzZs3Y8uWLXjjjTe8txmGAV3XsXfvXr+LmZWUlCAxMRG6rqOqqgojRozASy+9BKfTiUOHDmH48OH1Hj98+HBs3rwZQN2l6ueeey569OiB8847DxdddBHGjBkTUB/4snv3brhcrnptOhwODBkyxPuVAA/P1QcAkJOTAwA4cuQI2rdv7zN2jx496n2FICcnB9999x0AYPv27YiKisKAAQO893fp0gVpaWlN5ty9e3csWrSo3m3JyfV/ZcXXlRHR0dH1ati2bRuioqIwdOhQ720ZGRno3r17vdobPq+58vLyvBN0oK4/PFcO7Nq1CxUVFTj33HPrPaempgb9+/dHuOMknZRks9mQnp4e9OIWkUClvpG5FtG5WdG+rhuYt3wXnvl8J1xuA5oG/HX8KbhiUG7I2jCjDtFjQ+GFC8f5p9K+FGwttqR42HPqPnXVYhp8ncdu895nS0lq+FTYM1K99zekxcf+Gjeu7tNWTdMQFRXVojc+U1NT0a1bN+zatQtA3WJpNTU1KC4urvdp+uHDhxt9guxp3/Od4UsuuQSXXXYZxo8fD4fDgSuuuAIPPvhgQHmUlZXh97//Pe64445G97Vv395vrUlJSdi4cSNsNpv3u+UA4HQ6m2xzwIAB2Lt3L/773/9iyZIlmDBhAkaPHh2S7y43NTYOh6PeY4GTfy/5xMd7nhOKdRKio6PRpUuXkz4mISGh0W1xcXHN2u6a+7yGTtYfZWVlAIBPPvkEbdu2rfe4QK7IECGYYyUn6aQkz7uynp+ZoF+p1Dcy1yI6N7Pbr6514/Y3NmLptrp3tEd2a4UHLuiFrlmNX5C2hBl1iB4bCi9cOM4/lfalYGtJvfUqpN56lc/7HB3aNLqM/UQ5rz/q977kq8ch+epxjXLz/L+5/VxWVobdu3fjuuuuAwAMHDgQDocDy5Ytw+WXXw6g7pPa/fv3ey8dPrH9o0ePYubMmVi1ahWAuhW7Pd9BdrlccLvdAeUxYMAA/PDDD34njP5qtdlsPp+TnJyMNm3aYPXq1fUub169ejWGDBlS73FXXnklrrzySvzmN7/B+eefj8LCQqSnp9eL51nR/GT1dO7cGdHR0Vi9erX3E/GamhqsX7/eexm/Gbp3747a2lp8++23GDhwIIC6T5OLiopMa7Ohnj17ora2Fl9//bX3cvfjx49j+/bt6NWrl2V5AKi3KF24XNoezOKPnKSTkgzDQHFxMdLT08P+hUOoqdQ3MtciOjcz26+sceMPb32LpduOICbKhr9e0htnd4xHenrjd+Fbyow6RI8NkSpU2pdkr8VzuXmgpk2bhosuuggdOnTAoUOHMH36dNjtdlx99dUA6i5lv+mmmzB16lSkp6cjOTkZf/jDH3D66afjtNNOaxTvzjvvxNSpU72fWA4fPhyvvfYazjvvPLzwwguNLjf3509/+hNOO+00TJkyBb/73e+QkJCAH374AUuWLME//vGPZtV6zz33YPr06ejcuTP69euHBQsWYNOmTd5L6p988knk5OSgX79+0HUd7777LrKzsxt9Hx+Ad7X2xYsXo127doiNjW30XfuEhATceuutuOeee5CWloY2bdrgqaeeQkVFRcBfJWiOHj16YPTo0bj55pvx3HPPweFw4O677w7oU+va2lrvWgMemqYhKysrqBy6du2KSy65BJMnT8bzzz+PpKQk3HfffWjbti0uueSSoGtqiaSkJEybNg1//OMfoes6RowYgZKSEqxevRrJycm4/vrrLc0nEJykExGRKVxuHVe9sAabfy5BTJQNC24YjNM6pTda0ZaIiMT5+eefcfXVV+P48eNo3bo1RowYgbVr13oXRgOAp556CjabDZdffjmqq6sxZswYPPvss41iffbZZ9i9ezdef/11721TpkzBN998g6FDh2LIkCGYPn16QHn16dMHK1euxAMPPIAzzjgDhmGgc+fOmDBhQrNrveOOO1BSUoK7774bR44cQa9evbBo0SLvgmpJSUl4/PHHsXPnTtjtdgwePBiffvqpz0uPo6Ki8Mwzz2DmzJl48MEHccYZZ2DFihWNHvfoo49C13VMnDgRpaWlGDRoED777LOAvh/eEv/85z9x00034cwzz0R2djZmzZqFrVu3+l2IzmPr1q3e78R7xMTEoKoq+HUPFixYgDvvvBMXXnghampqcOaZZ+LTTz9tdGm6Ff7617+idevWmDVrFvbs2YPU1FQMGDAA//d//2d5LqGmGcH+6GKYczqdSElJwbFjx5CRkSE6HTKJ5/dOVfmuXCip1Dcy1yI6NzPad7l1/OXD7/H2+gNIionC8xMHYljnVqbWakbsUMV0uVz49NNPMW7cOCEvTsgaAwY8hIKCEmRnp2DjxodEpyMV0ce5UPJVS1VVFfbu3YuOHTs2OQky04kLt4m6Msuq9s1sy4zYoYyp6zqcTieSk5MD3p9+/vln5ObmYunSpTjnnHNa1D6FxsmOG8XFxUhLS0NJSUmjhfsa4ifppCwZL1eThUp9I3MtonMLZfvHy6rxf//+Dp9tPQwAmDm+N4Z1bmVKWw2ZEVv02BCpQqV9SeZaROdmZfs8n/j3+eefo6ysDKeeeiry8/Nx7733Ii8vD2eeeaZlOZA1OEknJdlsNl4p4YdKfSNzLaJzC2X7a/ccx33vb8G+4xWw2zQ8c1V/XNDn18vmzKzVjNiix4bCC1d390+lfUnmWjwriEdC+2a2ZUZsq8fG5XLh//7v/7Bnzx4kJSVh2LBheOONN3g1V5jg6u4U8QzDgMvlgsPhEP7us2xU6huZaxGdWyjaP1JahT+9twXLt9f9Zm+7tDg8fVV/DOxQ/zt3ZtZqRmzRY0Phhau7+6fSviRzLYZheFc7F3U+sap9M9syI7bVYzNmzJgW/cY7iRXMt8zD+wtERH4YhgGn0xnUzhApVOobmWsRnVtL299/vAK/eW4Nlm8/iiibhmtPa48Pbx/eaIIeirZOxozYoseGSBUq7Uuy1xLoT5yp0L6ZbZkRW/TYUPjg6u5ERNRs3+wrxG1vbMSR0mq0T4/HKzcMRpfMRNFpEREREUUETtKJiAgAUF5diyc+245X1+yDYQDds5Lw2k1DkJksblVjIiIiokjDSTopSdM02O126b5XJgOV+kbmWkTnFmz7+SWVmPD8WuwvrAAAXDGwHf58YS+kxDW9GI2ZtZoRW/TYEKlCpX1J9lpE58XV3a2NSWoKZlvhJJ2UpGka0tIaf3eW1OobmWsRnVsw7de6ddz51ibsL6xA29Q4zLrsVJzZrbUpbQXLjNiix4bCC1d390+lfUnmWri6u7yxRY8NhZdgJulcOI6UZBgGqqqqpF0ARiSV+kbmWkTnFmj71bVuPPSfrVi3rxCJMVF443dDg5qgB9NWc5gRW/TYUHjh6u7+qbQvyVyLYRjQdV3o+cSq9s1sy4zYoseGwgtXd6eIZxgGysrKeND0QaW+kbkW0bkF0v5Hmw5ixGPL8fra/QCARy47FXmtEkxpq7nMiC16bIhUodK+JHstolcQN7v9G264AePHj/e2NWrUKNx1110hbydUdTz00EPo16/fSWPu27cPmqZh06ZNIWnTQ9M0fPjhhyGNGU5GjhxZb9vIy8vD3LlzheUTDE7SiYjIL8Mw8M81+/DHdzbhaGk1spJj8Per++Pivm1Ep0ZERCFy8OBBXHvttcjIyEBcXBxOPfVUfPPNN/Ues23bNlx88cVISUlBQkICBg8ejP379580bnFxMW6//Xbk5OQgJiYG3bp1w6effuq9/4033kBubi7S0tIwderUes/dt28funXrBqfTWe/2p59+GgsXLmxZwQ3k5eV5f788ISEBAwcOxHvvvReS2NOmTcOyZcu8f0+aNMn7JoNHbm4u8vPzccopp4SkTY/8/Hycf/75IY3pi6fvGv739ttvm952MNavX4+bb75ZdBohxy9REBFFkJ2HS/HgR1uxZs9xAMDVQ3Ix4+JTEB3F92yJiFRRVFSE4cOHY9SoUfjvf/+L1q1bY+fOnfW+d797926MGDECN910E2bMmIHk5GRs3boVsbH+f9GjpqYG5557LjIzM/Hee++hbdu2+Omnn5CamgoAOHbsGH73u99h4cKF6NSpEy644AKcffbZuPDCCwEAt912Gx599FEkJyfXi5uSkgIguE8aAzFz5kxMnjwZTqcTs2fPxjXXXIP27dtj+PDhLYqbmJiIxMTEk+Zrt9uRnZ3donZ8MSOmPwsWLMDYsWPr3eYZ64bcbjc0TYPNVv/1RE1NDaKjo4NuO9DntW4d3Ff0wgVflZGSNE2Dw+Hgips+qNQ3MtciOreG7et63afnlz/3FdbsOY6YKBsevLAXHh5/aosn6GbWakZs0WNDpAqV9iXZawk2r8ceewy5ublYsGABhgwZgo4dO+K8885D586dvY954IEHMG7cODz++OPo378/OnfujIsvvhiZmZl+23/llVdQWFiIDz/8EMOHD0deXh7OOuss9O3bFwCwZ88epKSkYMKECRg8eDBGjRqFbdu2AQDeeustOBwOXHbZZY3in3i5u69aq6urMW3aNLRt2xYJCQkYOnQoVqxY0WQ/JCUlITs7G926dcO8efMQFxeH//znPwCA7777DmeffTbi4uKQkZGBm2++GWVlZd7nrlixAkOGDEFCQgJSU1MxfPhw/PTTTwDqX+7+17/+Fa+++io++ugj76fNK1as8Hm5+8qVKzFkyBDExMQgJycH9913H2pra733X3jhhbjzzjtx7733Ij09HdnZ2XjooYcajYXncndPGx988AFG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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7257.825472,
   "end_time": "2025-08-15T06:44:11.522998",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-15T04:43:13.697526",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
