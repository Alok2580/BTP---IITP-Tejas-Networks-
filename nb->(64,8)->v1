{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "85b994c8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-19T10:04:44.840214Z",
     "iopub.status.busy": "2025-08-19T10:04:44.839882Z",
     "iopub.status.idle": "2025-08-19T10:04:46.319580Z",
     "shell.execute_reply": "2025-08-19T10:04:46.318702Z"
    },
    "papermill": {
     "duration": 1.485305,
     "end_time": "2025-08-19T10:04:46.320893",
     "exception": false,
     "start_time": "2025-08-19T10:04:44.835588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "eb5a2b54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T10:04:46.326217Z",
     "iopub.status.busy": "2025-08-19T10:04:46.325874Z",
     "iopub.status.idle": "2025-08-19T10:05:00.832873Z",
     "shell.execute_reply": "2025-08-19T10:05:00.832242Z"
    },
    "papermill": {
     "duration": 14.511037,
     "end_time": "2025-08-19T10:05:00.834478",
     "exception": false,
     "start_time": "2025-08-19T10:04:46.323441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-19 10:04:47.905354: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755597888.094054      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755597888.148387      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4ca49a9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T10:05:00.840618Z",
     "iopub.status.busy": "2025-08-19T10:05:00.839680Z",
     "iopub.status.idle": "2025-08-19T10:05:00.845491Z",
     "shell.execute_reply": "2025-08-19T10:05:00.844726Z"
    },
    "papermill": {
     "duration": 0.009828,
     "end_time": "2025-08-19T10:05:00.846676",
     "exception": false,
     "start_time": "2025-08-19T10:05:00.836848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128    #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =9    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1   #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16      # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                    # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "117348df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T10:05:00.851589Z",
     "iopub.status.busy": "2025-08-19T10:05:00.850999Z",
     "iopub.status.idle": "2025-08-19T10:05:00.854268Z",
     "shell.execute_reply": "2025-08-19T10:05:00.853658Z"
    },
    "papermill": {
     "duration": 0.006577,
     "end_time": "2025-08-19T10:05:00.855275",
     "exception": false,
     "start_time": "2025-08-19T10:05:00.848698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9fc4008c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T10:05:00.860371Z",
     "iopub.status.busy": "2025-08-19T10:05:00.859999Z",
     "iopub.status.idle": "2025-08-19T11:50:31.815405Z",
     "shell.execute_reply": "2025-08-19T11:50:31.814710Z"
    },
    "papermill": {
     "duration": 6330.959513,
     "end_time": "2025-08-19T11:50:31.816654",
     "exception": false,
     "start_time": "2025-08-19T10:05:00.857141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755597922.410268      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755597931.987584      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">198,272</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m198,272\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">272,394</span> (1.04 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m272,394\u001b[0m (1.04 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">272,134</span> (1.04 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m272,134\u001b[0m (1.04 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755597942.881193      56 service.cc:148] XLA service 0x7c7edc016760 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755597942.882160      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755597946.275755      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 17.38656, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 60.5801 - mae: 5.1182 - val_loss: 17.3866 - val_mae: 3.3161 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 17.38656 to 13.21077, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 8.8280 - mae: 2.2967 - val_loss: 13.2108 - val_mae: 2.8376 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 13.21077 to 4.10412, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 5.9510 - mae: 1.8617 - val_loss: 4.1041 - val_mae: 1.5767 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 4.10412 to 3.26244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 3.7465 - mae: 1.4924 - val_loss: 3.2624 - val_mae: 1.3840 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 3.26244 to 2.65596, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 3.0987 - mae: 1.3035 - val_loss: 2.6560 - val_mae: 1.2627 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.65596 to 1.88389, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5135 - mae: 0.9511 - val_loss: 1.8839 - val_mae: 1.0285 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.88389 to 0.83754, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.6745 - mae: 0.9533 - val_loss: 0.8375 - val_mae: 0.7169 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.83754 to 0.82607, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.6824 - mae: 0.9039 - val_loss: 0.8261 - val_mae: 0.7050 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.82607 to 0.68412, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0954 - mae: 0.8028 - val_loss: 0.6841 - val_mae: 0.6484 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.68412 to 0.61840, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.9840 - mae: 0.8913 - val_loss: 0.6184 - val_mae: 0.6122 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.61840\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5139 - mae: 0.7974 - val_loss: 1.0944 - val_mae: 0.8027 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.61840 to 0.49901, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6633 - mae: 0.6318 - val_loss: 0.4990 - val_mae: 0.5534 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.49901\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0814 - mae: 0.7118 - val_loss: 0.7475 - val_mae: 0.6677 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.49901 to 0.36122, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8957 - mae: 0.6277 - val_loss: 0.3612 - val_mae: 0.4621 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4733 - mae: 0.6826 - val_loss: 0.9126 - val_mae: 0.7535 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7575 - mae: 0.6436 - val_loss: 0.6030 - val_mae: 0.6145 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4723 - mae: 0.5341 - val_loss: 0.4135 - val_mae: 0.5105 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7635 - mae: 0.5813 - val_loss: 0.3885 - val_mae: 0.4906 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4061 - mae: 0.7208 - val_loss: 0.4281 - val_mae: 0.5100 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0953 - mae: 0.6659 - val_loss: 0.4275 - val_mae: 0.5215 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0288 - mae: 0.6643 - val_loss: 0.5623 - val_mae: 0.5826 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8567 - mae: 0.6255 - val_loss: 0.6127 - val_mae: 0.6085 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9558 - mae: 0.6775 - val_loss: 0.5803 - val_mae: 0.5966 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4809 - mae: 0.5332 - val_loss: 0.4873 - val_mae: 0.5435 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0018 - mae: 0.6297 - val_loss: 0.4642 - val_mae: 0.5366 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9743 - mae: 0.6439 - val_loss: 0.3795 - val_mae: 0.4822 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.36122\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3065 - mae: 0.6776 - val_loss: 0.6301 - val_mae: 0.6158 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss improved from 0.36122 to 0.28683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4423 - mae: 0.5128 - val_loss: 0.2868 - val_mae: 0.4154 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1501 - mae: 0.6659 - val_loss: 0.3340 - val_mae: 0.4503 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5308 - mae: 0.7206 - val_loss: 2.3830 - val_mae: 1.1641 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1052 - mae: 0.6873 - val_loss: 0.8016 - val_mae: 0.6897 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4734 - mae: 0.5328 - val_loss: 0.6868 - val_mae: 0.6383 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3466 - mae: 0.7666 - val_loss: 0.5965 - val_mae: 0.5941 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5735 - mae: 0.5767 - val_loss: 0.4706 - val_mae: 0.5222 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4415 - mae: 0.7626 - val_loss: 0.4568 - val_mae: 0.5231 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0937 - mae: 0.6767 - val_loss: 0.4342 - val_mae: 0.5146 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.28683\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.5482 - mae: 0.7033 - val_loss: 0.9113 - val_mae: 0.7275 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5137 - mae: 0.5520 - val_loss: 0.6138 - val_mae: 0.6102 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1701 - mae: 0.6934 - val_loss: 0.3740 - val_mae: 0.4811 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.0439 - mae: 0.6453 - val_loss: 0.3830 - val_mae: 0.4806 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.28683\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.3759 - mae: 0.4768 - val_loss: 0.4574 - val_mae: 0.5198 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.28683\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.9525 - mae: 0.7695 - val_loss: 0.3800 - val_mae: 0.4684 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8160 - mae: 0.6001 - val_loss: 0.4064 - val_mae: 0.5079 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3633 - mae: 0.6805 - val_loss: 0.9927 - val_mae: 0.7676 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4725 - mae: 0.5255 - val_loss: 0.5937 - val_mae: 0.5857 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4241 - mae: 0.5000 - val_loss: 0.3444 - val_mae: 0.4549 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.28683\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.5895 - mae: 0.6923 - val_loss: 0.3248 - val_mae: 0.4499 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.28683\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3889 - mae: 0.4828 - val_loss: 0.3276 - val_mae: 0.4488 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.28683 to 0.09666, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.1094 - mae: 0.2569 - val_loss: 0.0967 - val_mae: 0.2412 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.09666 to 0.07916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0818 - mae: 0.2232 - val_loss: 0.0792 - val_mae: 0.2192 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.07916 to 0.07139, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0688 - mae: 0.2050 - val_loss: 0.0714 - val_mae: 0.2092 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.07139 to 0.06329, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0620 - mae: 0.1948 - val_loss: 0.0633 - val_mae: 0.1952 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.06329 to 0.05894, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0561 - mae: 0.1856 - val_loss: 0.0589 - val_mae: 0.1890 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.05894\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0523 - mae: 0.1792 - val_loss: 0.0611 - val_mae: 0.1936 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.05894 to 0.05207, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0494 - mae: 0.1746 - val_loss: 0.0521 - val_mae: 0.1766 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.05207\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0479 - mae: 0.1698 - val_loss: 0.0568 - val_mae: 0.1858 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.05207\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0438 - mae: 0.1645 - val_loss: 0.0554 - val_mae: 0.1834 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.05207 to 0.04916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0429 - mae: 0.1628 - val_loss: 0.0492 - val_mae: 0.1715 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.04916 to 0.04756, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0418 - mae: 0.1604 - val_loss: 0.0476 - val_mae: 0.1690 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.04756\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0402 - mae: 0.1576 - val_loss: 0.0506 - val_mae: 0.1744 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.04756\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0387 - mae: 0.1547 - val_loss: 0.0484 - val_mae: 0.1711 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.04756 to 0.04725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0378 - mae: 0.1529 - val_loss: 0.0472 - val_mae: 0.1695 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.04725\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0373 - mae: 0.1517 - val_loss: 0.0487 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.04725 to 0.04543, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0368 - mae: 0.1508 - val_loss: 0.0454 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.04543 to 0.04312, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0355 - mae: 0.1482 - val_loss: 0.0431 - val_mae: 0.1611 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.04312 to 0.04236, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0348 - mae: 0.1466 - val_loss: 0.0424 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.04236\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0340 - mae: 0.1449 - val_loss: 0.0460 - val_mae: 0.1673 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.04236\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0334 - mae: 0.1437 - val_loss: 0.0440 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.04236 to 0.04194, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0326 - mae: 0.1420 - val_loss: 0.0419 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.04194\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0325 - mae: 0.1417 - val_loss: 0.0426 - val_mae: 0.1599 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.04194\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0319 - mae: 0.1406 - val_loss: 0.0426 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.04194 to 0.03871, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0314 - mae: 0.1395 - val_loss: 0.0387 - val_mae: 0.1530 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.03871\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0311 - mae: 0.1388 - val_loss: 0.0428 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.03871\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0307 - mae: 0.1377 - val_loss: 0.0419 - val_mae: 0.1590 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.03871\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0303 - mae: 0.1368 - val_loss: 0.0433 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03871\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0302 - mae: 0.1364 - val_loss: 0.0414 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.03871\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0297 - mae: 0.1354 - val_loss: 0.0402 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03871\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0295 - mae: 0.1349 - val_loss: 0.0390 - val_mae: 0.1524 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.03871\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0296 - mae: 0.1351 - val_loss: 0.0402 - val_mae: 0.1542 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03871\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0291 - mae: 0.1342 - val_loss: 0.0388 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.03871\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0298 - mae: 0.1348 - val_loss: 0.0394 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.03871 to 0.03758, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0285 - mae: 0.1326 - val_loss: 0.0376 - val_mae: 0.1496 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.03758\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0288 - mae: 0.1336 - val_loss: 0.0379 - val_mae: 0.1508 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.03758\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0288 - mae: 0.1333 - val_loss: 0.0400 - val_mae: 0.1539 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.03758\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0287 - mae: 0.1332 - val_loss: 0.0409 - val_mae: 0.1557 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.03758\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0285 - mae: 0.1329 - val_loss: 0.0413 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.03758\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0285 - mae: 0.1325 - val_loss: 0.0414 - val_mae: 0.1573 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.03758\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0285 - mae: 0.1329 - val_loss: 0.0416 - val_mae: 0.1564 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.03758\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0281 - mae: 0.1317 - val_loss: 0.0390 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.03758 to 0.03733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0282 - mae: 0.1320 - val_loss: 0.0373 - val_mae: 0.1485 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0284 - mae: 0.1325 - val_loss: 0.0386 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0297 - mae: 0.1337 - val_loss: 0.0400 - val_mae: 0.1548 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0281 - mae: 0.1317 - val_loss: 0.0407 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0284 - mae: 0.1324 - val_loss: 0.0376 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0283 - mae: 0.1322 - val_loss: 0.0413 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0280 - mae: 0.1315 - val_loss: 0.0377 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0281 - mae: 0.1315 - val_loss: 0.0390 - val_mae: 0.1518 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0281 - mae: 0.1316 - val_loss: 0.0374 - val_mae: 0.1498 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0282 - mae: 0.1319 - val_loss: 0.0443 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0282 - mae: 0.1318 - val_loss: 0.0472 - val_mae: 0.1681 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0280 - mae: 0.1316 - val_loss: 0.0379 - val_mae: 0.1503 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0282 - mae: 0.1320 - val_loss: 0.0389 - val_mae: 0.1522 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03733\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0284 - mae: 0.1322 - val_loss: 0.0387 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.03733 to 0.03622, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0279 - mae: 0.1312 - val_loss: 0.0362 - val_mae: 0.1471 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03622\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0280 - mae: 0.1312 - val_loss: 0.0399 - val_mae: 0.1543 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03622\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0284 - mae: 0.1323 - val_loss: 0.0395 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03622\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0281 - mae: 0.1318 - val_loss: 0.0432 - val_mae: 0.1621 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03622\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0281 - mae: 0.1316 - val_loss: 0.0410 - val_mae: 0.1562 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.03622 to 0.03528, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0284 - mae: 0.1322 - val_loss: 0.0353 - val_mae: 0.1449 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03528\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0283 - mae: 0.1320 - val_loss: 0.0356 - val_mae: 0.1464 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03528\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0284 - mae: 0.1325 - val_loss: 0.0378 - val_mae: 0.1511 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03528\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0280 - mae: 0.1312 - val_loss: 0.0377 - val_mae: 0.1510 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03528\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0294 - mae: 0.1334 - val_loss: 0.0437 - val_mae: 0.1622 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03528\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0280 - mae: 0.1311 - val_loss: 0.0463 - val_mae: 0.1695 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03528\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0286 - mae: 0.1325 - val_loss: 0.0412 - val_mae: 0.1585 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.03528 to 0.03496, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0285 - mae: 0.1325 - val_loss: 0.0350 - val_mae: 0.1456 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03496\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0284 - mae: 0.1322 - val_loss: 0.0379 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03496\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0285 - mae: 0.1324 - val_loss: 0.0445 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0287 - mae: 0.1328 - val_loss: 0.0386 - val_mae: 0.1521 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03496\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0284 - mae: 0.1320 - val_loss: 0.0401 - val_mae: 0.1561 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03496\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0289 - mae: 0.1333 - val_loss: 0.0419 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0287 - mae: 0.1324 - val_loss: 0.0385 - val_mae: 0.1507 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0285 - mae: 0.1320 - val_loss: 0.0422 - val_mae: 0.1591 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0289 - mae: 0.1331 - val_loss: 0.0459 - val_mae: 0.1658 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0287 - mae: 0.1325 - val_loss: 0.0375 - val_mae: 0.1491 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0287 - mae: 0.1327 - val_loss: 0.0397 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0289 - mae: 0.1332 - val_loss: 0.0402 - val_mae: 0.1549 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0287 - mae: 0.1330 - val_loss: 0.0416 - val_mae: 0.1581 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0286 - mae: 0.1329 - val_loss: 0.0381 - val_mae: 0.1511 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0292 - mae: 0.1338 - val_loss: 0.0423 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03496\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0291 - mae: 0.1337 - val_loss: 0.0375 - val_mae: 0.1486 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03496\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0289 - mae: 0.1328 - val_loss: 0.0377 - val_mae: 0.1508 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0292 - mae: 0.1337 - val_loss: 0.0402 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0290 - mae: 0.1334 - val_loss: 0.0373 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03496\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0290 - mae: 0.1333 - val_loss: 0.0396 - val_mae: 0.1525 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03496\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0295 - mae: 0.1341 - val_loss: 0.0397 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.03496 to 0.02163, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0118 - mae: 0.0853 - val_loss: 0.0216 - val_mae: 0.1125 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.02163 to 0.02105, saving model to models/best_model_full.keras\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0211 - val_mae: 0.1106 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.02105 to 0.02071, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0094 - mae: 0.0765 - val_loss: 0.0207 - val_mae: 0.1098 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02071\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0090 - mae: 0.0750 - val_loss: 0.0211 - val_mae: 0.1108 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02071\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0087 - mae: 0.0740 - val_loss: 0.0209 - val_mae: 0.1102 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02071\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0085 - mae: 0.0730 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.02071 to 0.02047, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0723 - val_loss: 0.0205 - val_mae: 0.1087 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02047\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0082 - mae: 0.0717 - val_loss: 0.0205 - val_mae: 0.1087 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02047\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0205 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02047\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0080 - mae: 0.0706 - val_loss: 0.0206 - val_mae: 0.1091 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02047\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0079 - mae: 0.0702 - val_loss: 0.0205 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02047\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0078 - mae: 0.0699 - val_loss: 0.0205 - val_mae: 0.1085 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.02047 to 0.02030, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0203 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02030\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0076 - mae: 0.0692 - val_loss: 0.0206 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0206 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0209 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02030\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0206 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0073 - mae: 0.0678 - val_loss: 0.0205 - val_mae: 0.1085 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0205 - val_mae: 0.1084 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02030\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0072 - mae: 0.0674 - val_loss: 0.0205 - val_mae: 0.1082 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02030\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0072 - mae: 0.0671 - val_loss: 0.0209 - val_mae: 0.1093 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02030\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0071 - mae: 0.0668 - val_loss: 0.0205 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0208 - val_mae: 0.1091 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0070 - mae: 0.0665 - val_loss: 0.0206 - val_mae: 0.1082 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0208 - val_mae: 0.1088 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0070 - mae: 0.0660 - val_loss: 0.0205 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0069 - mae: 0.0658 - val_loss: 0.0207 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0206 - val_mae: 0.1087 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0068 - mae: 0.0654 - val_loss: 0.0209 - val_mae: 0.1086 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0068 - mae: 0.0652 - val_loss: 0.0206 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0068 - mae: 0.0651 - val_loss: 0.0207 - val_mae: 0.1084 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0067 - mae: 0.0650 - val_loss: 0.0207 - val_mae: 0.1084 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02030\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0067 - mae: 0.0647 - val_loss: 0.0208 - val_mae: 0.1085 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.02030 to 0.01999, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0057 - mae: 0.0595 - val_loss: 0.0200 - val_mae: 0.1061 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss improved from 0.01999 to 0.01991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0056 - mae: 0.0589 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01991\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0199 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.01991 to 0.01990, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0587 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.01990 to 0.01990, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0586 - val_loss: 0.0199 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01990\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0586 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01990\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0585 - val_loss: 0.0199 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01990\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0585 - val_loss: 0.0199 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01990\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0199 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.01990 to 0.01988, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01988\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0200 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0199 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0055 - mae: 0.0583 - val_loss: 0.0199 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0583 - val_loss: 0.0200 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0199 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0200 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0200 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0200 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0199 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0200 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0200 - val_mae: 0.1059 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0200 - val_mae: 0.1058 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0573 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0573 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1057 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0572 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01988\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0199 - val_mae: 0.1056 - learning_rate: 1.0000e-07\n",
      "Epoch 229: early stopping\n",
      "Restoring model weights from the end of the best epoch: 179.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1665 m\n",
      "Median positioning error: 0.1453 m\n",
      "90th percentile error: 0.3037 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6354.559267,
   "end_time": "2025-08-19T11:50:35.183614",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-19T10:04:40.624347",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
