{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f0463d4a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-02T16:35:33.356411Z",
     "iopub.status.busy": "2025-08-02T16:35:33.356166Z",
     "iopub.status.idle": "2025-08-02T16:35:34.772054Z",
     "shell.execute_reply": "2025-08-02T16:35:34.771134Z"
    },
    "papermill": {
     "duration": 1.420999,
     "end_time": "2025-08-02T16:35:34.773488",
     "exception": false,
     "start_time": "2025-08-02T16:35:33.352489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "70881e8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:35:34.779084Z",
     "iopub.status.busy": "2025-08-02T16:35:34.778779Z",
     "iopub.status.idle": "2025-08-02T16:35:49.484426Z",
     "shell.execute_reply": "2025-08-02T16:35:49.483721Z"
    },
    "papermill": {
     "duration": 14.70968,
     "end_time": "2025-08-02T16:35:49.485852",
     "exception": false,
     "start_time": "2025-08-02T16:35:34.776172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-02 16:35:36.690343: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754152536.893166      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754152536.965895      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d88669f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:35:49.491553Z",
     "iopub.status.busy": "2025-08-02T16:35:49.490839Z",
     "iopub.status.idle": "2025-08-02T16:35:49.498369Z",
     "shell.execute_reply": "2025-08-02T16:35:49.497575Z"
    },
    "papermill": {
     "duration": 0.011601,
     "end_time": "2025-08-02T16:35:49.499673",
     "exception": false,
     "start_time": "2025-08-02T16:35:49.488072",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a598d30f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:35:49.505115Z",
     "iopub.status.busy": "2025-08-02T16:35:49.504899Z",
     "iopub.status.idle": "2025-08-02T16:35:49.508290Z",
     "shell.execute_reply": "2025-08-02T16:35:49.507670Z"
    },
    "papermill": {
     "duration": 0.007546,
     "end_time": "2025-08-02T16:35:49.509256",
     "exception": false,
     "start_time": "2025-08-02T16:35:49.501710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9d8dd84e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-02T16:35:49.514396Z",
     "iopub.status.busy": "2025-08-02T16:35:49.514159Z",
     "iopub.status.idle": "2025-08-02T17:57:49.269929Z",
     "shell.execute_reply": "2025-08-02T17:57:49.269064Z"
    },
    "papermill": {
     "duration": 4919.760042,
     "end_time": "2025-08-02T17:57:49.271230",
     "exception": false,
     "start_time": "2025-08-02T16:35:49.511188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754152577.768161      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754152587.268314      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754152598.240292      57 service.cc:148] XLA service 0x78fd20007c30 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754152598.241049      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754152601.659050      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 16.81249, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 111.1190 - mae: 7.2327 - val_loss: 16.8125 - val_mae: 3.1541 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 16.81249 to 6.86045, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 11.4263 - mae: 2.5977 - val_loss: 6.8604 - val_mae: 2.0270 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 6.86045 to 4.55514, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 6.7151 - mae: 1.9681 - val_loss: 4.5551 - val_mae: 1.6618 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 4.55514\n",
      "4375/4375 - 26s - 6ms/step - loss: 4.0053 - mae: 1.5348 - val_loss: 4.9389 - val_mae: 1.7663 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 4.55514\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.9381 - mae: 1.2603 - val_loss: 6.5804 - val_mae: 2.0309 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 4.55514 to 1.57348, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.2186 - mae: 1.1188 - val_loss: 1.5735 - val_mae: 0.9544 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.57348 to 1.41045, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 3.6851 - mae: 1.2948 - val_loss: 1.4105 - val_mae: 0.9182 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.41045 to 1.10306, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.2588 - mae: 1.0350 - val_loss: 1.1031 - val_mae: 0.8161 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.10306 to 0.80527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7231 - mae: 0.9511 - val_loss: 0.8053 - val_mae: 0.7028 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.80527\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.9045 - mae: 1.1124 - val_loss: 0.9614 - val_mae: 0.7618 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.80527\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6515 - mae: 0.9185 - val_loss: 17.2481 - val_mae: 2.9986 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.80527 to 0.75737, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3620 - mae: 0.8856 - val_loss: 0.7574 - val_mae: 0.6784 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.75737\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4056 - mae: 0.8404 - val_loss: 1.5368 - val_mae: 0.9573 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.75737 to 0.72715, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9159 - mae: 0.7277 - val_loss: 0.7272 - val_mae: 0.6548 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.72715 to 0.62221, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5867 - mae: 0.8115 - val_loss: 0.6222 - val_mae: 0.6167 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.62221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6806 - mae: 0.6359 - val_loss: 0.6700 - val_mae: 0.6486 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.62221 to 0.45307, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7253 - mae: 0.6421 - val_loss: 0.4531 - val_mae: 0.5250 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.45307 to 0.39617, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7504 - mae: 0.6187 - val_loss: 0.3962 - val_mae: 0.4908 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7388 - mae: 0.7959 - val_loss: 1.2375 - val_mae: 0.8480 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7446 - mae: 0.6634 - val_loss: 0.4770 - val_mae: 0.5318 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7153 - mae: 0.6115 - val_loss: 0.5291 - val_mae: 0.5766 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1882 - mae: 0.7079 - val_loss: 0.4571 - val_mae: 0.5324 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8786 - mae: 0.6701 - val_loss: 0.5953 - val_mae: 0.6126 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6124 - mae: 0.6068 - val_loss: 0.5847 - val_mae: 0.6016 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0960 - mae: 0.7320 - val_loss: 0.5415 - val_mae: 0.5772 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7968 - mae: 0.6468 - val_loss: 0.6523 - val_mae: 0.6459 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1916 - mae: 0.7574 - val_loss: 0.6460 - val_mae: 0.6248 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6644 - mae: 0.8041 - val_loss: 0.7713 - val_mae: 0.6681 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.3145 - mae: 0.9228 - val_loss: 0.7356 - val_mae: 0.6665 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6461 - mae: 0.6260 - val_loss: 0.5774 - val_mae: 0.5842 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8400 - mae: 0.6659 - val_loss: 0.5993 - val_mae: 0.6045 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9580 - mae: 0.6577 - val_loss: 0.4092 - val_mae: 0.4970 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.2219 - mae: 0.9793 - val_loss: 2.2806 - val_mae: 1.1598 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4263 - mae: 0.8876 - val_loss: 1.2450 - val_mae: 0.8571 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4879 - mae: 0.8523 - val_loss: 0.6935 - val_mae: 0.6446 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9733 - mae: 0.6925 - val_loss: 0.5668 - val_mae: 0.5985 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6776 - mae: 0.7304 - val_loss: 1.3205 - val_mae: 0.8789 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.39617\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6760 - mae: 0.6067 - val_loss: 0.4656 - val_mae: 0.5369 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.39617 to 0.19282, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2056 - mae: 0.3538 - val_loss: 0.1928 - val_mae: 0.3416 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.19282 to 0.15672, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1657 - mae: 0.3185 - val_loss: 0.1567 - val_mae: 0.3076 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.15672 to 0.14082, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1381 - mae: 0.2909 - val_loss: 0.1408 - val_mae: 0.2922 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.14082 to 0.12577, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1203 - mae: 0.2721 - val_loss: 0.1258 - val_mae: 0.2762 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.12577 to 0.11905, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1092 - mae: 0.2593 - val_loss: 0.1191 - val_mae: 0.2685 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.11905 to 0.11248, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1006 - mae: 0.2492 - val_loss: 0.1125 - val_mae: 0.2614 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.11248 to 0.10652, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0932 - mae: 0.2395 - val_loss: 0.1065 - val_mae: 0.2538 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.10652 to 0.09981, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0875 - mae: 0.2326 - val_loss: 0.0998 - val_mae: 0.2456 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.09981\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0818 - mae: 0.2246 - val_loss: 0.1003 - val_mae: 0.2465 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.09981 to 0.09168, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0767 - mae: 0.2177 - val_loss: 0.0917 - val_mae: 0.2351 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.09168\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0726 - mae: 0.2122 - val_loss: 0.0951 - val_mae: 0.2410 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.09168 to 0.08427, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0689 - mae: 0.2066 - val_loss: 0.0843 - val_mae: 0.2249 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.08427 to 0.07933, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0659 - mae: 0.2020 - val_loss: 0.0793 - val_mae: 0.2185 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.07933 to 0.07904, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0632 - mae: 0.1980 - val_loss: 0.0790 - val_mae: 0.2180 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.07904\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0604 - mae: 0.1934 - val_loss: 0.0809 - val_mae: 0.2214 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.07904 to 0.07274, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0587 - mae: 0.1908 - val_loss: 0.0727 - val_mae: 0.2088 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.07274\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0575 - mae: 0.1885 - val_loss: 0.0765 - val_mae: 0.2141 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.07274\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0556 - mae: 0.1855 - val_loss: 0.0762 - val_mae: 0.2130 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.07274\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0544 - mae: 0.1838 - val_loss: 0.0764 - val_mae: 0.2155 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.07274 to 0.07028, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0526 - mae: 0.1805 - val_loss: 0.0703 - val_mae: 0.2056 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.07028\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0519 - mae: 0.1793 - val_loss: 0.0704 - val_mae: 0.2057 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.07028\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0503 - mae: 0.1766 - val_loss: 0.0712 - val_mae: 0.2064 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.07028 to 0.06681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0493 - mae: 0.1747 - val_loss: 0.0668 - val_mae: 0.2006 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.06681\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0481 - mae: 0.1729 - val_loss: 0.0686 - val_mae: 0.2026 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.06681\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0472 - mae: 0.1714 - val_loss: 0.0717 - val_mae: 0.2066 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.06681\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0461 - mae: 0.1693 - val_loss: 0.0684 - val_mae: 0.2032 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.06681 to 0.06528, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0460 - mae: 0.1680 - val_loss: 0.0653 - val_mae: 0.1982 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.06528 to 0.06268, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0445 - mae: 0.1664 - val_loss: 0.0627 - val_mae: 0.1942 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.06268\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0437 - mae: 0.1648 - val_loss: 0.0633 - val_mae: 0.1936 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.06268\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0435 - mae: 0.1641 - val_loss: 0.0653 - val_mae: 0.1970 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.06268\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0428 - mae: 0.1629 - val_loss: 0.0667 - val_mae: 0.1995 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.06268\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0424 - mae: 0.1621 - val_loss: 0.0646 - val_mae: 0.1962 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.06268\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0417 - mae: 0.1610 - val_loss: 0.0640 - val_mae: 0.1945 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.06268\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0413 - mae: 0.1600 - val_loss: 0.0659 - val_mae: 0.1981 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.06268\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0410 - mae: 0.1593 - val_loss: 0.0630 - val_mae: 0.1928 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.06268 to 0.06049, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0407 - mae: 0.1586 - val_loss: 0.0605 - val_mae: 0.1899 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.06049\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0404 - mae: 0.1578 - val_loss: 0.0630 - val_mae: 0.1933 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.06049\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0397 - mae: 0.1569 - val_loss: 0.0634 - val_mae: 0.1948 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.06049\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0395 - mae: 0.1566 - val_loss: 0.0610 - val_mae: 0.1907 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.06049\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0388 - mae: 0.1555 - val_loss: 0.0625 - val_mae: 0.1922 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.06049\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0390 - mae: 0.1555 - val_loss: 0.0644 - val_mae: 0.1959 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.06049\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0388 - mae: 0.1551 - val_loss: 0.0628 - val_mae: 0.1937 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.06049 to 0.05752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0385 - mae: 0.1543 - val_loss: 0.0575 - val_mae: 0.1854 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.05752\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0384 - mae: 0.1542 - val_loss: 0.0600 - val_mae: 0.1899 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.05752\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0387 - mae: 0.1548 - val_loss: 0.0622 - val_mae: 0.1932 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.05752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0376 - mae: 0.1527 - val_loss: 0.0611 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.05752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0379 - mae: 0.1534 - val_loss: 0.0626 - val_mae: 0.1931 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.05752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0376 - mae: 0.1526 - val_loss: 0.0589 - val_mae: 0.1882 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.05752\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0374 - mae: 0.1522 - val_loss: 0.0598 - val_mae: 0.1885 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.05752 to 0.05724, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0376 - mae: 0.1527 - val_loss: 0.0572 - val_mae: 0.1847 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0372 - mae: 0.1517 - val_loss: 0.0629 - val_mae: 0.1937 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0371 - mae: 0.1515 - val_loss: 0.0638 - val_mae: 0.1938 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0367 - mae: 0.1509 - val_loss: 0.0624 - val_mae: 0.1922 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.05724 to 0.05634, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0368 - mae: 0.1510 - val_loss: 0.0563 - val_mae: 0.1831 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.05634 to 0.05377, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0368 - mae: 0.1507 - val_loss: 0.0538 - val_mae: 0.1791 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0366 - mae: 0.1506 - val_loss: 0.0593 - val_mae: 0.1890 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0365 - mae: 0.1504 - val_loss: 0.0564 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0362 - mae: 0.1498 - val_loss: 0.0633 - val_mae: 0.1953 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0367 - mae: 0.1506 - val_loss: 0.0561 - val_mae: 0.1827 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0359 - mae: 0.1492 - val_loss: 0.0549 - val_mae: 0.1799 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0362 - mae: 0.1498 - val_loss: 0.0607 - val_mae: 0.1891 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0366 - mae: 0.1504 - val_loss: 0.0584 - val_mae: 0.1862 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0360 - mae: 0.1491 - val_loss: 0.0604 - val_mae: 0.1900 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0361 - mae: 0.1491 - val_loss: 0.0621 - val_mae: 0.1926 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0360 - mae: 0.1493 - val_loss: 0.0584 - val_mae: 0.1880 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0357 - mae: 0.1487 - val_loss: 0.0576 - val_mae: 0.1856 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0359 - mae: 0.1490 - val_loss: 0.0545 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0359 - mae: 0.1492 - val_loss: 0.0582 - val_mae: 0.1871 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0361 - mae: 0.1493 - val_loss: 0.0637 - val_mae: 0.1958 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0358 - mae: 0.1484 - val_loss: 0.0555 - val_mae: 0.1820 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0355 - mae: 0.1481 - val_loss: 0.0550 - val_mae: 0.1809 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0358 - mae: 0.1488 - val_loss: 0.0657 - val_mae: 0.1978 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0356 - mae: 0.1486 - val_loss: 0.0615 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0358 - mae: 0.1488 - val_loss: 0.0628 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.05377\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0358 - mae: 0.1488 - val_loss: 0.0573 - val_mae: 0.1861 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.05377 to 0.03821, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0169 - mae: 0.1020 - val_loss: 0.0382 - val_mae: 0.1484 - learning_rate: 1.0000e-04\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.03821 to 0.03769, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0145 - mae: 0.0951 - val_loss: 0.0377 - val_mae: 0.1474 - learning_rate: 1.0000e-04\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.03769 to 0.03703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0136 - mae: 0.0925 - val_loss: 0.0370 - val_mae: 0.1460 - learning_rate: 1.0000e-04\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03703\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0131 - mae: 0.0908 - val_loss: 0.0371 - val_mae: 0.1458 - learning_rate: 1.0000e-04\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03703\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0128 - mae: 0.0895 - val_loss: 0.0372 - val_mae: 0.1461 - learning_rate: 1.0000e-04\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.03703 to 0.03703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0125 - mae: 0.0884 - val_loss: 0.0370 - val_mae: 0.1455 - learning_rate: 1.0000e-04\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.03703 to 0.03678, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0123 - mae: 0.0877 - val_loss: 0.0368 - val_mae: 0.1450 - learning_rate: 1.0000e-04\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.03678 to 0.03668, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0120 - mae: 0.0869 - val_loss: 0.0367 - val_mae: 0.1447 - learning_rate: 1.0000e-04\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0119 - mae: 0.0864 - val_loss: 0.0368 - val_mae: 0.1449 - learning_rate: 1.0000e-04\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0118 - mae: 0.0859 - val_loss: 0.0369 - val_mae: 0.1450 - learning_rate: 1.0000e-04\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0116 - mae: 0.0853 - val_loss: 0.0373 - val_mae: 0.1462 - learning_rate: 1.0000e-04\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0115 - mae: 0.0849 - val_loss: 0.0372 - val_mae: 0.1456 - learning_rate: 1.0000e-04\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03668\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0114 - mae: 0.0844 - val_loss: 0.0369 - val_mae: 0.1450 - learning_rate: 1.0000e-04\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0112 - mae: 0.0840 - val_loss: 0.0370 - val_mae: 0.1450 - learning_rate: 1.0000e-04\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0112 - mae: 0.0837 - val_loss: 0.0370 - val_mae: 0.1450 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0111 - mae: 0.0835 - val_loss: 0.0373 - val_mae: 0.1458 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0110 - mae: 0.0830 - val_loss: 0.0369 - val_mae: 0.1449 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0109 - mae: 0.0826 - val_loss: 0.0371 - val_mae: 0.1453 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0108 - mae: 0.0824 - val_loss: 0.0373 - val_mae: 0.1459 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0107 - mae: 0.0821 - val_loss: 0.0375 - val_mae: 0.1460 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03668\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0107 - mae: 0.0819 - val_loss: 0.0376 - val_mae: 0.1458 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03668\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0106 - mae: 0.0816 - val_loss: 0.0372 - val_mae: 0.1450 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03668\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0105 - mae: 0.0813 - val_loss: 0.0376 - val_mae: 0.1462 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0105 - mae: 0.0811 - val_loss: 0.0375 - val_mae: 0.1457 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0105 - mae: 0.0809 - val_loss: 0.0374 - val_mae: 0.1455 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0104 - mae: 0.0806 - val_loss: 0.0373 - val_mae: 0.1454 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03668\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0103 - mae: 0.0804 - val_loss: 0.0375 - val_mae: 0.1456 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.03668 to 0.03661, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0090 - mae: 0.0749 - val_loss: 0.0366 - val_mae: 0.1437 - learning_rate: 1.0000e-05\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.03661 to 0.03655, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0089 - mae: 0.0743 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-05\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0088 - mae: 0.0742 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0088 - mae: 0.0740 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-05\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0088 - mae: 0.0740 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0088 - mae: 0.0739 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-05\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0088 - mae: 0.0739 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-05\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0088 - mae: 0.0738 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0087 - mae: 0.0738 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0737 - val_loss: 0.0366 - val_mae: 0.1437 - learning_rate: 1.0000e-05\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0737 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-05\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0367 - val_mae: 0.1437 - learning_rate: 1.0000e-05\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0087 - mae: 0.0734 - val_loss: 0.0366 - val_mae: 0.1436 - learning_rate: 1.0000e-05\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0086 - mae: 0.0734 - val_loss: 0.0367 - val_mae: 0.1437 - learning_rate: 1.0000e-05\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0086 - mae: 0.0733 - val_loss: 0.0367 - val_mae: 0.1437 - learning_rate: 1.0000e-05\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0728 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0727 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-06\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-06\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-06\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-06\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-06\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-06\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-06\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0085 - mae: 0.0726 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-06\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-07\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-07\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-07\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-07\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-07\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-07\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-07\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-07\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1435 - learning_rate: 1.0000e-07\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.03655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-07\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.03655\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0366 - val_mae: 0.1434 - learning_rate: 1.0000e-07\n",
      "Epoch 192: early stopping\n",
      "Restoring model weights from the end of the best epoch: 142.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.2268 m\n",
      "Median positioning error: 0.1979 m\n",
      "90th percentile error: 0.4091 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4942.937131,
   "end_time": "2025-08-02T17:57:52.183347",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-02T16:35:29.246216",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
