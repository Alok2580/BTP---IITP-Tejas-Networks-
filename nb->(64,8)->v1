{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c590c0be",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-12T04:52:26.696800Z",
     "iopub.status.busy": "2025-08-12T04:52:26.696498Z",
     "iopub.status.idle": "2025-08-12T04:52:28.395762Z",
     "shell.execute_reply": "2025-08-12T04:52:28.394835Z"
    },
    "papermill": {
     "duration": 1.704626,
     "end_time": "2025-08-12T04:52:28.397362",
     "exception": false,
     "start_time": "2025-08-12T04:52:26.692736",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f4068c01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:52:28.403315Z",
     "iopub.status.busy": "2025-08-12T04:52:28.402901Z",
     "iopub.status.idle": "2025-08-12T04:52:44.134149Z",
     "shell.execute_reply": "2025-08-12T04:52:44.133466Z"
    },
    "papermill": {
     "duration": 15.735639,
     "end_time": "2025-08-12T04:52:44.135708",
     "exception": false,
     "start_time": "2025-08-12T04:52:28.400069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 04:52:30.056280: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754974350.249529      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754974350.309886      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98143ad7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:52:44.142109Z",
     "iopub.status.busy": "2025-08-12T04:52:44.141243Z",
     "iopub.status.idle": "2025-08-12T04:52:44.145853Z",
     "shell.execute_reply": "2025-08-12T04:52:44.145310Z"
    },
    "papermill": {
     "duration": 0.008658,
     "end_time": "2025-08-12T04:52:44.146952",
     "exception": false,
     "start_time": "2025-08-12T04:52:44.138294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =9    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "392da144",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:52:44.152151Z",
     "iopub.status.busy": "2025-08-12T04:52:44.151755Z",
     "iopub.status.idle": "2025-08-12T04:52:44.155007Z",
     "shell.execute_reply": "2025-08-12T04:52:44.154468Z"
    },
    "papermill": {
     "duration": 0.006975,
     "end_time": "2025-08-12T04:52:44.156126",
     "exception": false,
     "start_time": "2025-08-12T04:52:44.149151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "846c7d87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T04:52:44.161461Z",
     "iopub.status.busy": "2025-08-12T04:52:44.161253Z",
     "iopub.status.idle": "2025-08-12T06:43:33.949002Z",
     "shell.execute_reply": "2025-08-12T06:43:33.948102Z"
    },
    "papermill": {
     "duration": 6649.792445,
     "end_time": "2025-08-12T06:43:33.950541",
     "exception": false,
     "start_time": "2025-08-12T04:52:44.158096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754974388.073217      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754974398.202782      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754974410.434688      59 service.cc:148] XLA service 0x7cd7d0017a70 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754974410.435357      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754974414.032501      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 30.53684, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 143.6424 - mae: 8.7321 - val_loss: 30.5368 - val_mae: 4.2828 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 30.53684 to 12.70105, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 15.4050 - mae: 2.9583 - val_loss: 12.7010 - val_mae: 2.7167 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 12.70105 to 7.05958, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 13.6300 - mae: 2.6998 - val_loss: 7.0596 - val_mae: 2.0433 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 7.05958 to 2.15313, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 4.3974 - mae: 1.5751 - val_loss: 2.1531 - val_mae: 1.1505 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.15313 to 1.23381, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.6664 - mae: 1.1821 - val_loss: 1.2338 - val_mae: 0.8655 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.23381 to 1.16891, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.9519 - mae: 0.9977 - val_loss: 1.1689 - val_mae: 0.8521 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.16891 to 0.79245, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5385 - mae: 0.8659 - val_loss: 0.7925 - val_mae: 0.7106 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.79245\n",
      "4375/4375 - 27s - 6ms/step - loss: 3.9446 - mae: 1.2392 - val_loss: 1.2370 - val_mae: 0.8681 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.79245\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.8297 - mae: 0.9277 - val_loss: 3.1524 - val_mae: 1.3695 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.79245 to 0.74448, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9366 - mae: 0.7397 - val_loss: 0.7445 - val_mae: 0.6634 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.74448 to 0.72616, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.6669 - mae: 0.8459 - val_loss: 0.7262 - val_mae: 0.6683 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.72616 to 0.66993, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1980 - mae: 0.7763 - val_loss: 0.6699 - val_mae: 0.6402 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.66993 to 0.59110, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2686 - mae: 0.7684 - val_loss: 0.5911 - val_mae: 0.5886 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.59110\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3728 - mae: 0.7671 - val_loss: 0.6886 - val_mae: 0.6497 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.59110\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6396 - mae: 0.6189 - val_loss: 0.6565 - val_mae: 0.6172 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.59110\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6055 - mae: 0.5953 - val_loss: 0.6358 - val_mae: 0.6288 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.59110 to 0.42970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5518 - mae: 0.5559 - val_loss: 0.4297 - val_mae: 0.5197 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.42970\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.8048 - mae: 0.8489 - val_loss: 0.6159 - val_mae: 0.6102 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.42970\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5784 - mae: 0.5889 - val_loss: 0.5882 - val_mae: 0.5696 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.42970 to 0.41632, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8286 - mae: 0.6307 - val_loss: 0.4163 - val_mae: 0.5063 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.41632\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1733 - mae: 0.7231 - val_loss: 0.5007 - val_mae: 0.5538 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.41632\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8420 - mae: 0.6596 - val_loss: 0.6966 - val_mae: 0.6493 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.41632\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4636 - mae: 0.5306 - val_loss: 0.4766 - val_mae: 0.5367 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.41632\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1814 - mae: 0.6885 - val_loss: 0.5284 - val_mae: 0.5687 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.41632\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4194 - mae: 0.5015 - val_loss: 1.0654 - val_mae: 0.8038 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.41632 to 0.37917, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7723 - mae: 0.6089 - val_loss: 0.3792 - val_mae: 0.4834 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.37917 to 0.37730, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1066 - mae: 0.6705 - val_loss: 0.3773 - val_mae: 0.4768 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.37730\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4453 - mae: 0.7111 - val_loss: 1.1575 - val_mae: 0.8231 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.37730\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6705 - mae: 0.6184 - val_loss: 0.4131 - val_mae: 0.5025 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.37730\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2484 - mae: 0.6925 - val_loss: 0.5115 - val_mae: 0.5575 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.37730\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4617 - mae: 0.5290 - val_loss: 0.4521 - val_mae: 0.5136 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.37730\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.0468 - mae: 0.8701 - val_loss: 0.5738 - val_mae: 0.5889 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.37730\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9966 - mae: 0.6645 - val_loss: 3.6796 - val_mae: 1.3609 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.37730\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7329 - mae: 0.6442 - val_loss: 0.5017 - val_mae: 0.5539 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss improved from 0.37730 to 0.37009, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7878 - mae: 0.6350 - val_loss: 0.3701 - val_mae: 0.4770 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.37009\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2544 - mae: 0.6799 - val_loss: 0.5765 - val_mae: 0.6031 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.37009\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4128 - mae: 0.7446 - val_loss: 0.5151 - val_mae: 0.5591 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.37009\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4739 - mae: 0.5371 - val_loss: 0.4677 - val_mae: 0.5385 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.37009\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3377 - mae: 0.7452 - val_loss: 0.4771 - val_mae: 0.5415 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.37009\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4155 - mae: 0.5033 - val_loss: 0.3937 - val_mae: 0.4987 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.37009\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3312 - mae: 0.7326 - val_loss: 0.5004 - val_mae: 0.5534 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.37009\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4332 - mae: 0.5128 - val_loss: 0.9280 - val_mae: 0.7329 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.37009 to 0.35129, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2260 - mae: 0.6861 - val_loss: 0.3513 - val_mae: 0.4655 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.35129\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0824 - mae: 0.7084 - val_loss: 1.0563 - val_mae: 0.7903 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.35129\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3935 - mae: 0.7843 - val_loss: 0.7616 - val_mae: 0.6700 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.35129\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.5754 - mae: 0.8510 - val_loss: 0.6502 - val_mae: 0.6248 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.35129\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8647 - mae: 0.6612 - val_loss: 3.1419 - val_mae: 1.3209 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.35129\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.7152 - mae: 0.6390 - val_loss: 0.5888 - val_mae: 0.5922 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.35129\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.9704 - mae: 0.8214 - val_loss: 1.3167 - val_mae: 0.8847 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.35129\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7916 - mae: 0.6744 - val_loss: 0.5496 - val_mae: 0.5721 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.35129\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6710 - mae: 0.6115 - val_loss: 0.4296 - val_mae: 0.5069 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.35129\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.1682 - mae: 0.8454 - val_loss: 0.4905 - val_mae: 0.5404 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.35129\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4292 - mae: 0.5107 - val_loss: 0.5360 - val_mae: 0.5800 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.35129\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2620 - mae: 0.7359 - val_loss: 0.4271 - val_mae: 0.5127 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.35129 to 0.31159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4174 - mae: 0.5059 - val_loss: 0.3116 - val_mae: 0.4362 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.31159\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9838 - mae: 0.6254 - val_loss: 0.5866 - val_mae: 0.5886 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.31159\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8180 - mae: 0.6022 - val_loss: 0.5274 - val_mae: 0.5610 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.31159\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5904 - mae: 0.5811 - val_loss: 0.5866 - val_mae: 0.5829 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.31159\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8391 - mae: 0.7614 - val_loss: 0.6341 - val_mae: 0.6247 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.31159 to 0.31157, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4237 - mae: 0.5084 - val_loss: 0.3116 - val_mae: 0.4386 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.9730 - mae: 0.7761 - val_loss: 0.9294 - val_mae: 0.7539 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6315 - mae: 0.5883 - val_loss: 0.3694 - val_mae: 0.4799 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3961 - mae: 0.4914 - val_loss: 0.4315 - val_mae: 0.5158 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.31157\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7934 - mae: 0.7635 - val_loss: 0.5726 - val_mae: 0.6052 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6081 - mae: 0.5667 - val_loss: 0.4668 - val_mae: 0.5296 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7804 - mae: 0.8024 - val_loss: 0.6462 - val_mae: 0.6251 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.31157\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9342 - mae: 0.5872 - val_loss: 7.3566 - val_mae: 1.9490 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7600 - mae: 0.6415 - val_loss: 0.7683 - val_mae: 0.6761 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.31157\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2849 - mae: 0.7388 - val_loss: 0.5784 - val_mae: 0.5941 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3749 - mae: 0.7171 - val_loss: 0.5269 - val_mae: 0.5620 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1293 - mae: 0.6800 - val_loss: 1.4577 - val_mae: 0.8905 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.0312 - mae: 0.8407 - val_loss: 1.7041 - val_mae: 0.9939 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9407 - mae: 0.7192 - val_loss: 0.5865 - val_mae: 0.5919 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1312 - mae: 0.7566 - val_loss: 0.9565 - val_mae: 0.7732 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4754 - mae: 0.8335 - val_loss: 0.6357 - val_mae: 0.6214 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.31157\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3951 - mae: 0.4859 - val_loss: 0.3591 - val_mae: 0.4643 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.31157 to 0.28493, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3033 - mae: 0.4290 - val_loss: 0.2849 - val_mae: 0.4165 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.28493 to 0.24645, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2528 - mae: 0.3928 - val_loss: 0.2464 - val_mae: 0.3884 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.24645 to 0.24449, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2209 - mae: 0.3672 - val_loss: 0.2445 - val_mae: 0.3846 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.24449 to 0.19950, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1999 - mae: 0.3495 - val_loss: 0.1995 - val_mae: 0.3495 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.19950 to 0.19682, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1760 - mae: 0.3288 - val_loss: 0.1968 - val_mae: 0.3474 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.19682 to 0.17417, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1578 - mae: 0.3114 - val_loss: 0.1742 - val_mae: 0.3268 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.17417 to 0.15860, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1432 - mae: 0.2969 - val_loss: 0.1586 - val_mae: 0.3122 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.15860 to 0.14267, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1320 - mae: 0.2860 - val_loss: 0.1427 - val_mae: 0.2952 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.14267\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1247 - mae: 0.2776 - val_loss: 0.1481 - val_mae: 0.3021 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.14267 to 0.12932, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1168 - mae: 0.2689 - val_loss: 0.1293 - val_mae: 0.2808 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.12932 to 0.12475, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1100 - mae: 0.2610 - val_loss: 0.1247 - val_mae: 0.2759 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.12475 to 0.11532, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1061 - mae: 0.2563 - val_loss: 0.1153 - val_mae: 0.2653 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.11532 to 0.11481, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0992 - mae: 0.2482 - val_loss: 0.1148 - val_mae: 0.2637 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.11481 to 0.10711, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0958 - mae: 0.2436 - val_loss: 0.1071 - val_mae: 0.2559 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.10711\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0923 - mae: 0.2391 - val_loss: 0.1086 - val_mae: 0.2571 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.10711 to 0.10482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0876 - mae: 0.2331 - val_loss: 0.1048 - val_mae: 0.2517 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.10482 to 0.09589, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0844 - mae: 0.2287 - val_loss: 0.0959 - val_mae: 0.2416 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.09589\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0809 - mae: 0.2241 - val_loss: 0.1020 - val_mae: 0.2489 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.09589\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0783 - mae: 0.2203 - val_loss: 0.1011 - val_mae: 0.2477 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.09589 to 0.08907, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0760 - mae: 0.2170 - val_loss: 0.0891 - val_mae: 0.2321 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.08907\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0739 - mae: 0.2142 - val_loss: 0.0955 - val_mae: 0.2420 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.08907 to 0.08621, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0714 - mae: 0.2105 - val_loss: 0.0862 - val_mae: 0.2296 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.08621\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0697 - mae: 0.2082 - val_loss: 0.0877 - val_mae: 0.2310 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.08621\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0671 - mae: 0.2040 - val_loss: 0.0900 - val_mae: 0.2340 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.08621 to 0.07947, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0657 - mae: 0.2021 - val_loss: 0.0795 - val_mae: 0.2197 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.07947 to 0.07884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0639 - mae: 0.1991 - val_loss: 0.0788 - val_mae: 0.2185 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.07884\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0618 - mae: 0.1959 - val_loss: 0.0865 - val_mae: 0.2310 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.07884 to 0.07313, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0598 - mae: 0.1928 - val_loss: 0.0731 - val_mae: 0.2096 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.07313 to 0.07154, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0585 - mae: 0.1905 - val_loss: 0.0715 - val_mae: 0.2073 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.07154 to 0.07078, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0573 - mae: 0.1890 - val_loss: 0.0708 - val_mae: 0.2057 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.07078 to 0.07016, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0557 - mae: 0.1858 - val_loss: 0.0702 - val_mae: 0.2063 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.07016\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0543 - mae: 0.1836 - val_loss: 0.0728 - val_mae: 0.2106 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.07016\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0534 - mae: 0.1821 - val_loss: 0.0704 - val_mae: 0.2063 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.07016 to 0.06938, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0523 - mae: 0.1803 - val_loss: 0.0694 - val_mae: 0.2053 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.06938 to 0.06829, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0514 - mae: 0.1786 - val_loss: 0.0683 - val_mae: 0.2038 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.06829\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0501 - mae: 0.1764 - val_loss: 0.0694 - val_mae: 0.2050 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.06829 to 0.06717, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0490 - mae: 0.1747 - val_loss: 0.0672 - val_mae: 0.2006 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.06717 to 0.06533, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0486 - mae: 0.1734 - val_loss: 0.0653 - val_mae: 0.1984 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.06533 to 0.06390, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0477 - mae: 0.1722 - val_loss: 0.0639 - val_mae: 0.1955 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.06390\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0473 - mae: 0.1717 - val_loss: 0.0645 - val_mae: 0.1968 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.06390 to 0.06380, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0465 - mae: 0.1699 - val_loss: 0.0638 - val_mae: 0.1958 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.06380\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0460 - mae: 0.1690 - val_loss: 0.0704 - val_mae: 0.2073 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.06380\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0456 - mae: 0.1684 - val_loss: 0.0645 - val_mae: 0.1975 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.06380 to 0.06108, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0451 - mae: 0.1673 - val_loss: 0.0611 - val_mae: 0.1923 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.06108\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0448 - mae: 0.1667 - val_loss: 0.0630 - val_mae: 0.1939 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.06108\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0443 - mae: 0.1658 - val_loss: 0.0612 - val_mae: 0.1913 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.06108\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0437 - mae: 0.1645 - val_loss: 0.0627 - val_mae: 0.1948 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.06108 to 0.06105, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0436 - mae: 0.1646 - val_loss: 0.0611 - val_mae: 0.1918 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.06105\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0430 - mae: 0.1635 - val_loss: 0.0615 - val_mae: 0.1929 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.06105 to 0.06036, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0427 - mae: 0.1629 - val_loss: 0.0604 - val_mae: 0.1906 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.06036\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0426 - mae: 0.1625 - val_loss: 0.0622 - val_mae: 0.1934 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.06036\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0423 - mae: 0.1619 - val_loss: 0.0632 - val_mae: 0.1952 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.06036 to 0.06026, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0420 - mae: 0.1613 - val_loss: 0.0603 - val_mae: 0.1904 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.06026 to 0.05898, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0415 - mae: 0.1608 - val_loss: 0.0590 - val_mae: 0.1865 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.05898\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0423 - mae: 0.1597 - val_loss: 0.0642 - val_mae: 0.1971 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.05898\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0413 - mae: 0.1603 - val_loss: 0.0611 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.05898 to 0.05657, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0408 - mae: 0.1592 - val_loss: 0.0566 - val_mae: 0.1846 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.05657\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0406 - mae: 0.1586 - val_loss: 0.0578 - val_mae: 0.1863 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0412 - mae: 0.1598 - val_loss: 0.0608 - val_mae: 0.1920 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0405 - mae: 0.1586 - val_loss: 0.0625 - val_mae: 0.1949 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0408 - mae: 0.1592 - val_loss: 0.0606 - val_mae: 0.1901 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.05657\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0402 - mae: 0.1580 - val_loss: 0.0588 - val_mae: 0.1873 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0404 - mae: 0.1581 - val_loss: 0.0579 - val_mae: 0.1853 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0402 - mae: 0.1576 - val_loss: 0.0601 - val_mae: 0.1901 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.05657\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0401 - mae: 0.1575 - val_loss: 0.0603 - val_mae: 0.1897 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0400 - mae: 0.1572 - val_loss: 0.0669 - val_mae: 0.1981 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0396 - mae: 0.1566 - val_loss: 0.0605 - val_mae: 0.1910 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0393 - mae: 0.1559 - val_loss: 0.0589 - val_mae: 0.1884 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.05657\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0396 - mae: 0.1566 - val_loss: 0.0587 - val_mae: 0.1879 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.05657 to 0.05623, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0395 - mae: 0.1564 - val_loss: 0.0562 - val_mae: 0.1836 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.05623 to 0.05540, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0389 - mae: 0.1552 - val_loss: 0.0554 - val_mae: 0.1817 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.05540\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0394 - mae: 0.1559 - val_loss: 0.0573 - val_mae: 0.1854 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.05540 to 0.05419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0390 - mae: 0.1552 - val_loss: 0.0542 - val_mae: 0.1801 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.05419\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0385 - mae: 0.1546 - val_loss: 0.0588 - val_mae: 0.1879 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.05419\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0387 - mae: 0.1546 - val_loss: 0.0563 - val_mae: 0.1829 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.05419\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0389 - mae: 0.1549 - val_loss: 0.0557 - val_mae: 0.1833 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.05419\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0385 - mae: 0.1543 - val_loss: 0.0588 - val_mae: 0.1889 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.05419 to 0.05382, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0387 - mae: 0.1546 - val_loss: 0.0538 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0385 - mae: 0.1545 - val_loss: 0.0559 - val_mae: 0.1833 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.05382\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0381 - mae: 0.1537 - val_loss: 0.0562 - val_mae: 0.1837 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0380 - mae: 0.1534 - val_loss: 0.0559 - val_mae: 0.1825 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.05382\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0384 - mae: 0.1539 - val_loss: 0.0584 - val_mae: 0.1864 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.05382\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0381 - mae: 0.1535 - val_loss: 0.0539 - val_mae: 0.1792 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0381 - mae: 0.1536 - val_loss: 0.0572 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.05382\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0382 - mae: 0.1534 - val_loss: 0.0572 - val_mae: 0.1863 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0379 - mae: 0.1529 - val_loss: 0.0582 - val_mae: 0.1867 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0379 - mae: 0.1531 - val_loss: 0.0644 - val_mae: 0.1981 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0379 - mae: 0.1528 - val_loss: 0.0578 - val_mae: 0.1870 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0379 - mae: 0.1528 - val_loss: 0.0555 - val_mae: 0.1823 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.05382\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0380 - mae: 0.1534 - val_loss: 0.0599 - val_mae: 0.1898 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.05382 to 0.05278, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0378 - mae: 0.1530 - val_loss: 0.0528 - val_mae: 0.1772 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.05278\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0377 - mae: 0.1525 - val_loss: 0.0559 - val_mae: 0.1831 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.05278\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0378 - mae: 0.1527 - val_loss: 0.0539 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.05278 to 0.05150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0374 - mae: 0.1520 - val_loss: 0.0515 - val_mae: 0.1753 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.05150\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0374 - mae: 0.1520 - val_loss: 0.0725 - val_mae: 0.2068 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0379 - mae: 0.1525 - val_loss: 0.0582 - val_mae: 0.1862 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0378 - mae: 0.1525 - val_loss: 0.0558 - val_mae: 0.1824 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0374 - mae: 0.1516 - val_loss: 0.0535 - val_mae: 0.1792 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0371 - mae: 0.1515 - val_loss: 0.0635 - val_mae: 0.1960 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0376 - mae: 0.1523 - val_loss: 0.0548 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0373 - mae: 0.1518 - val_loss: 0.0550 - val_mae: 0.1835 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0375 - mae: 0.1520 - val_loss: 0.0584 - val_mae: 0.1859 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0370 - mae: 0.1512 - val_loss: 0.0597 - val_mae: 0.1899 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0371 - mae: 0.1514 - val_loss: 0.0574 - val_mae: 0.1847 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0373 - mae: 0.1514 - val_loss: 0.0560 - val_mae: 0.1826 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0369 - mae: 0.1511 - val_loss: 0.0569 - val_mae: 0.1835 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0367 - mae: 0.1506 - val_loss: 0.0565 - val_mae: 0.1850 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0367 - mae: 0.1507 - val_loss: 0.0552 - val_mae: 0.1821 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0369 - mae: 0.1509 - val_loss: 0.0562 - val_mae: 0.1829 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0370 - mae: 0.1508 - val_loss: 0.0555 - val_mae: 0.1824 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0365 - mae: 0.1501 - val_loss: 0.0583 - val_mae: 0.1859 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.05150\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0373 - mae: 0.1516 - val_loss: 0.0537 - val_mae: 0.1795 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.05150\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0365 - mae: 0.1502 - val_loss: 0.0526 - val_mae: 0.1778 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.05150\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0369 - mae: 0.1511 - val_loss: 0.0575 - val_mae: 0.1869 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.05150 to 0.03480, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0165 - mae: 0.1010 - val_loss: 0.0348 - val_mae: 0.1433 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.03480 to 0.03446, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0140 - mae: 0.0938 - val_loss: 0.0345 - val_mae: 0.1425 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.03446 to 0.03396, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0132 - mae: 0.0911 - val_loss: 0.0340 - val_mae: 0.1415 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.03396\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0127 - mae: 0.0894 - val_loss: 0.0342 - val_mae: 0.1416 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.03396 to 0.03389, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0123 - mae: 0.0881 - val_loss: 0.0339 - val_mae: 0.1410 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0120 - mae: 0.0870 - val_loss: 0.0343 - val_mae: 0.1417 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0118 - mae: 0.0862 - val_loss: 0.0341 - val_mae: 0.1413 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0116 - mae: 0.0855 - val_loss: 0.0342 - val_mae: 0.1414 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0115 - mae: 0.0849 - val_loss: 0.0343 - val_mae: 0.1414 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0113 - mae: 0.0844 - val_loss: 0.0343 - val_mae: 0.1414 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0111 - mae: 0.0836 - val_loss: 0.0344 - val_mae: 0.1414 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0110 - mae: 0.0832 - val_loss: 0.0347 - val_mae: 0.1422 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0109 - mae: 0.0829 - val_loss: 0.0342 - val_mae: 0.1411 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0108 - mae: 0.0823 - val_loss: 0.0344 - val_mae: 0.1412 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0107 - mae: 0.0820 - val_loss: 0.0344 - val_mae: 0.1412 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0106 - mae: 0.0816 - val_loss: 0.0351 - val_mae: 0.1432 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0105 - mae: 0.0812 - val_loss: 0.0347 - val_mae: 0.1421 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0104 - mae: 0.0810 - val_loss: 0.0348 - val_mae: 0.1420 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0104 - mae: 0.0807 - val_loss: 0.0348 - val_mae: 0.1419 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0103 - mae: 0.0804 - val_loss: 0.0348 - val_mae: 0.1418 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0102 - mae: 0.0800 - val_loss: 0.0351 - val_mae: 0.1422 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0101 - mae: 0.0798 - val_loss: 0.0349 - val_mae: 0.1420 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.03389\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0795 - val_loss: 0.0350 - val_mae: 0.1421 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0087 - mae: 0.0738 - val_loss: 0.0340 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0086 - mae: 0.0732 - val_loss: 0.0340 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0085 - mae: 0.0731 - val_loss: 0.0340 - val_mae: 0.1397 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0085 - mae: 0.0730 - val_loss: 0.0340 - val_mae: 0.1397 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0085 - mae: 0.0729 - val_loss: 0.0340 - val_mae: 0.1398 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0085 - mae: 0.0728 - val_loss: 0.0341 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0085 - mae: 0.0727 - val_loss: 0.0341 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0727 - val_loss: 0.0341 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0084 - mae: 0.0726 - val_loss: 0.0340 - val_mae: 0.1398 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0726 - val_loss: 0.0340 - val_mae: 0.1397 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0341 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0340 - val_mae: 0.1398 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0341 - val_mae: 0.1398 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0724 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0724 - val_loss: 0.0341 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0724 - val_loss: 0.0341 - val_mae: 0.1398 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0084 - mae: 0.0723 - val_loss: 0.0341 - val_mae: 0.1399 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0084 - mae: 0.0723 - val_loss: 0.0342 - val_mae: 0.1400 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0083 - mae: 0.0722 - val_loss: 0.0341 - val_mae: 0.1398 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0083 - mae: 0.0722 - val_loss: 0.0341 - val_mae: 0.1398 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0716 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0715 - val_loss: 0.0340 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0715 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.03389\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0340 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.03389\n",
      "4375/4375 - 28s - 7ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0341 - val_mae: 0.1397 - learning_rate: 1.0000e-06\n",
      "Epoch 245: early stopping\n",
      "Restoring model weights from the end of the best epoch: 195.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.2222 m\n",
      "Median positioning error: 0.1996 m\n",
      "90th percentile error: 0.3949 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6675.76404,
   "end_time": "2025-08-12T06:43:37.990469",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-12T04:52:22.226429",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
