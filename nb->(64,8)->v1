{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b520cce3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-08T13:43:25.949062Z",
     "iopub.status.busy": "2025-08-08T13:43:25.948806Z",
     "iopub.status.idle": "2025-08-08T13:43:27.359079Z",
     "shell.execute_reply": "2025-08-08T13:43:27.358251Z"
    },
    "papermill": {
     "duration": 1.415153,
     "end_time": "2025-08-08T13:43:27.360542",
     "exception": false,
     "start_time": "2025-08-08T13:43:25.945389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9e83637a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:43:27.366247Z",
     "iopub.status.busy": "2025-08-08T13:43:27.365919Z",
     "iopub.status.idle": "2025-08-08T13:43:41.693109Z",
     "shell.execute_reply": "2025-08-08T13:43:41.692499Z"
    },
    "papermill": {
     "duration": 14.331437,
     "end_time": "2025-08-08T13:43:41.694590",
     "exception": false,
     "start_time": "2025-08-08T13:43:27.363153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-08 13:43:28.941467: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754660609.137257      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754660609.192020      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "59ed7234",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:43:41.699804Z",
     "iopub.status.busy": "2025-08-08T13:43:41.699390Z",
     "iopub.status.idle": "2025-08-08T13:43:41.703792Z",
     "shell.execute_reply": "2025-08-08T13:43:41.703312Z"
    },
    "papermill": {
     "duration": 0.007968,
     "end_time": "2025-08-08T13:43:41.704775",
     "exception": false,
     "start_time": "2025-08-08T13:43:41.696807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size =7    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5461052f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:43:41.709653Z",
     "iopub.status.busy": "2025-08-08T13:43:41.708881Z",
     "iopub.status.idle": "2025-08-08T13:43:41.712068Z",
     "shell.execute_reply": "2025-08-08T13:43:41.711581Z"
    },
    "papermill": {
     "duration": 0.006446,
     "end_time": "2025-08-08T13:43:41.713069",
     "exception": false,
     "start_time": "2025-08-08T13:43:41.706623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a9a3f136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T13:43:41.717963Z",
     "iopub.status.busy": "2025-08-08T13:43:41.717756Z",
     "iopub.status.idle": "2025-08-08T16:20:56.546162Z",
     "shell.execute_reply": "2025-08-08T16:20:56.545562Z"
    },
    "papermill": {
     "duration": 9434.832585,
     "end_time": "2025-08-08T16:20:56.547502",
     "exception": false,
     "start_time": "2025-08-08T13:43:41.714917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754660645.760158      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754660655.190633      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,642</span> (772.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m197,642\u001b[0m (772.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,382</span> (771.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m197,382\u001b[0m (771.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754660665.739481      57 service.cc:148] XLA service 0x7b22d0017d40 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754660665.740320      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754660669.086186      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 12.23191, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 97.9782 - mae: 6.3091 - val_loss: 12.2319 - val_mae: 2.6600 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 12.23191 to 3.87636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 6.0386 - mae: 1.8885 - val_loss: 3.8764 - val_mae: 1.5292 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 3.87636\n",
      "4375/4375 - 43s - 10ms/step - loss: 4.8532 - mae: 1.6763 - val_loss: 4.6484 - val_mae: 1.6863 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.87636 to 1.56166, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 2.3815 - mae: 1.1856 - val_loss: 1.5617 - val_mae: 0.9724 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.56166\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.1881 - mae: 1.0642 - val_loss: 1.7171 - val_mae: 1.0092 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.56166 to 0.93686, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 1.0061 - mae: 0.7792 - val_loss: 0.9369 - val_mae: 0.7404 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.93686 to 0.67599, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.9411 - mae: 0.7260 - val_loss: 0.6760 - val_mae: 0.6405 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.67599\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6733 - mae: 0.6261 - val_loss: 0.7784 - val_mae: 0.6841 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.67599 to 0.48681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.1213 - mae: 0.7539 - val_loss: 0.4868 - val_mae: 0.5465 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.48681\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.0927 - mae: 0.6638 - val_loss: 1.3738 - val_mae: 0.9060 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.48681\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6956 - mae: 0.6439 - val_loss: 0.5137 - val_mae: 0.5617 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.48681\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9510 - mae: 0.6541 - val_loss: 0.8740 - val_mae: 0.7284 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.48681 to 0.48065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.5483 - mae: 0.5776 - val_loss: 0.4807 - val_mae: 0.5505 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.48065 to 0.42795, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.1956 - mae: 0.7058 - val_loss: 0.4279 - val_mae: 0.5124 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.42795\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4758 - mae: 0.5399 - val_loss: 0.5413 - val_mae: 0.5703 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.42795\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.6507 - mae: 0.5967 - val_loss: 0.4897 - val_mae: 0.5513 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.42795\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4535 - mae: 0.5238 - val_loss: 0.5453 - val_mae: 0.5888 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.42795 to 0.37954, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3761 - mae: 0.4783 - val_loss: 0.3795 - val_mae: 0.4839 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.37954\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.5798 - mae: 0.5437 - val_loss: 0.6227 - val_mae: 0.5688 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.37954\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3500 - mae: 0.4614 - val_loss: 0.6029 - val_mae: 0.6026 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.37954\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9832 - mae: 0.6392 - val_loss: 0.4315 - val_mae: 0.5144 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss improved from 0.37954 to 0.33111, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3685 - mae: 0.4766 - val_loss: 0.3311 - val_mae: 0.4583 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.33111\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5363 - mae: 0.5379 - val_loss: 0.4005 - val_mae: 0.5072 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.33111\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3379 - mae: 0.4541 - val_loss: 0.3701 - val_mae: 0.4825 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.33111\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3929 - mae: 0.4873 - val_loss: 0.4752 - val_mae: 0.4545 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.33111 to 0.23486, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3394 - mae: 0.4544 - val_loss: 0.2349 - val_mae: 0.3746 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.23486\n",
      "4375/4375 - 43s - 10ms/step - loss: 1.1776 - mae: 0.6429 - val_loss: 0.4864 - val_mae: 0.4654 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3430 - mae: 0.4582 - val_loss: 0.3209 - val_mae: 0.4444 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.2050 - mae: 0.6355 - val_loss: 0.6049 - val_mae: 0.6237 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3470 - mae: 0.4590 - val_loss: 0.3811 - val_mae: 0.4860 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9661 - mae: 0.6354 - val_loss: 0.5824 - val_mae: 0.5935 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4159 - mae: 0.5038 - val_loss: 0.8564 - val_mae: 0.4742 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.23486\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.9296 - mae: 0.6219 - val_loss: 0.3906 - val_mae: 0.4888 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.23486\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3677 - mae: 0.4749 - val_loss: 0.8847 - val_mae: 0.6494 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.2683 - mae: 0.7287 - val_loss: 0.7563 - val_mae: 0.5711 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.23486\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.5819 - mae: 0.5592 - val_loss: 0.5224 - val_mae: 0.5594 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.6173 - mae: 0.7277 - val_loss: 1.6498 - val_mae: 0.9285 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.23486\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.7045 - mae: 0.6462 - val_loss: 0.5668 - val_mae: 0.5911 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6521 - mae: 0.5833 - val_loss: 0.3217 - val_mae: 0.4433 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.8300 - mae: 0.7464 - val_loss: 0.7740 - val_mae: 0.6240 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4625 - mae: 0.5306 - val_loss: 0.4581 - val_mae: 0.5213 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.23486\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.6616 - mae: 0.5960 - val_loss: 0.4543 - val_mae: 0.5303 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4039 - mae: 0.4953 - val_loss: 0.5864 - val_mae: 0.6013 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3787 - mae: 0.4779 - val_loss: 0.4816 - val_mae: 0.5443 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.23486\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3593 - mae: 0.4661 - val_loss: 0.6249 - val_mae: 0.6208 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.23486\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3633 - mae: 0.4672 - val_loss: 0.2890 - val_mae: 0.4198 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.23486 to 0.09040, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0978 - mae: 0.2452 - val_loss: 0.0904 - val_mae: 0.2362 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.09040 to 0.08309, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0789 - mae: 0.2206 - val_loss: 0.0831 - val_mae: 0.2274 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.08309 to 0.07008, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0702 - mae: 0.2084 - val_loss: 0.0701 - val_mae: 0.2077 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.07008 to 0.06725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0642 - mae: 0.1993 - val_loss: 0.0673 - val_mae: 0.2039 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.06725\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0609 - mae: 0.1943 - val_loss: 0.0688 - val_mae: 0.2054 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.06725 to 0.06522, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0582 - mae: 0.1900 - val_loss: 0.0652 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.06522 to 0.06486, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0557 - mae: 0.1860 - val_loss: 0.0649 - val_mae: 0.2013 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.06486 to 0.06171, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0537 - mae: 0.1824 - val_loss: 0.0617 - val_mae: 0.1947 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.06171 to 0.05722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0520 - mae: 0.1796 - val_loss: 0.0572 - val_mae: 0.1876 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.05722\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0503 - mae: 0.1768 - val_loss: 0.0704 - val_mae: 0.1837 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.05722 to 0.05299, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0487 - mae: 0.1736 - val_loss: 0.0530 - val_mae: 0.1804 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.05299\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0475 - mae: 0.1718 - val_loss: 0.0544 - val_mae: 0.1827 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.05299 to 0.05266, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0465 - mae: 0.1699 - val_loss: 0.0527 - val_mae: 0.1802 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.05266\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0455 - mae: 0.1681 - val_loss: 0.0558 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.05266\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0446 - mae: 0.1663 - val_loss: 0.0572 - val_mae: 0.1884 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.05266\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0435 - mae: 0.1642 - val_loss: 0.0548 - val_mae: 0.1829 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.05266\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0429 - mae: 0.1635 - val_loss: 0.0528 - val_mae: 0.1799 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.05266\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0425 - mae: 0.1624 - val_loss: 0.0540 - val_mae: 0.1825 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.05266\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0417 - mae: 0.1610 - val_loss: 0.0545 - val_mae: 0.1837 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.05266 to 0.04727, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0412 - mae: 0.1600 - val_loss: 0.0473 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.04727\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0404 - mae: 0.1583 - val_loss: 0.0485 - val_mae: 0.1716 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.04727\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0398 - mae: 0.1574 - val_loss: 0.0528 - val_mae: 0.1814 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.04727\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0397 - mae: 0.1571 - val_loss: 0.0500 - val_mae: 0.1748 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.04727\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0390 - mae: 0.1558 - val_loss: 0.0504 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.04727\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0387 - mae: 0.1551 - val_loss: 0.0522 - val_mae: 0.1793 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.04727\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0385 - mae: 0.1548 - val_loss: 0.0482 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.04727 to 0.04630, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0381 - mae: 0.1536 - val_loss: 0.0463 - val_mae: 0.1677 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.04630\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0376 - mae: 0.1526 - val_loss: 0.0507 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.04630 to 0.04389, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0371 - mae: 0.1518 - val_loss: 0.0439 - val_mae: 0.1635 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.04389\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0368 - mae: 0.1513 - val_loss: 0.0525 - val_mae: 0.1802 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.04389\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0365 - mae: 0.1507 - val_loss: 0.0501 - val_mae: 0.1758 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.04389\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0364 - mae: 0.1504 - val_loss: 0.0480 - val_mae: 0.1722 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.04389 to 0.04336, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0361 - mae: 0.1498 - val_loss: 0.0434 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.04336\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0360 - mae: 0.1497 - val_loss: 0.0484 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.04336\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0356 - mae: 0.1489 - val_loss: 0.0459 - val_mae: 0.1670 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04336\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0354 - mae: 0.1484 - val_loss: 0.0467 - val_mae: 0.1675 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.04336\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0353 - mae: 0.1482 - val_loss: 0.0457 - val_mae: 0.1671 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.04336\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0351 - mae: 0.1478 - val_loss: 0.0443 - val_mae: 0.1635 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.04336 to 0.04187, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0349 - mae: 0.1473 - val_loss: 0.0419 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0349 - mae: 0.1474 - val_loss: 0.0504 - val_mae: 0.1754 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0345 - mae: 0.1463 - val_loss: 0.0442 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0347 - mae: 0.1468 - val_loss: 0.0448 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04187\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0343 - mae: 0.1461 - val_loss: 0.0458 - val_mae: 0.1671 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0340 - mae: 0.1454 - val_loss: 0.0485 - val_mae: 0.1713 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0340 - mae: 0.1454 - val_loss: 0.0432 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0341 - mae: 0.1455 - val_loss: 0.0460 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0341 - mae: 0.1458 - val_loss: 0.0458 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0337 - mae: 0.1449 - val_loss: 0.0441 - val_mae: 0.1631 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0339 - mae: 0.1452 - val_loss: 0.0463 - val_mae: 0.1673 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0336 - mae: 0.1444 - val_loss: 0.0422 - val_mae: 0.1601 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0336 - mae: 0.1444 - val_loss: 0.0420 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0338 - mae: 0.1451 - val_loss: 0.0505 - val_mae: 0.1751 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0335 - mae: 0.1443 - val_loss: 0.0493 - val_mae: 0.1745 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0334 - mae: 0.1441 - val_loss: 0.0446 - val_mae: 0.1655 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0333 - mae: 0.1441 - val_loss: 0.0429 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0335 - mae: 0.1444 - val_loss: 0.0469 - val_mae: 0.1694 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0332 - mae: 0.1435 - val_loss: 0.0469 - val_mae: 0.1702 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04187\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0330 - mae: 0.1432 - val_loss: 0.0486 - val_mae: 0.1716 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.04187 to 0.04078, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0333 - mae: 0.1441 - val_loss: 0.0408 - val_mae: 0.1574 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.04078\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0334 - mae: 0.1436 - val_loss: 0.0425 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04078\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0442 - val_mae: 0.1640 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04078\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0332 - mae: 0.1436 - val_loss: 0.0411 - val_mae: 0.1588 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04078\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0329 - mae: 0.1434 - val_loss: 0.0430 - val_mae: 0.1620 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04078\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0329 - mae: 0.1429 - val_loss: 0.0427 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.04078 to 0.04066, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0330 - mae: 0.1433 - val_loss: 0.0407 - val_mae: 0.1569 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.04066\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0436 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.04066\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0328 - mae: 0.1429 - val_loss: 0.0483 - val_mae: 0.1717 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.04066\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0329 - mae: 0.1431 - val_loss: 0.0501 - val_mae: 0.1749 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.04066\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0332 - mae: 0.1436 - val_loss: 0.0421 - val_mae: 0.1597 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss improved from 0.04066 to 0.04003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0326 - mae: 0.1420 - val_loss: 0.0400 - val_mae: 0.1561 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0329 - mae: 0.1430 - val_loss: 0.0506 - val_mae: 0.1753 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0329 - mae: 0.1430 - val_loss: 0.0425 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0330 - mae: 0.1430 - val_loss: 0.0433 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0328 - mae: 0.1427 - val_loss: 0.0464 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0329 - mae: 0.1429 - val_loss: 0.0445 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0327 - mae: 0.1425 - val_loss: 0.0452 - val_mae: 0.1669 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0326 - mae: 0.1422 - val_loss: 0.0432 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0329 - mae: 0.1430 - val_loss: 0.0469 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0329 - mae: 0.1429 - val_loss: 0.0458 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0330 - mae: 0.1430 - val_loss: 0.0476 - val_mae: 0.1717 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0332 - mae: 0.1433 - val_loss: 0.0443 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0331 - mae: 0.1431 - val_loss: 0.0451 - val_mae: 0.1659 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.04003\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0331 - mae: 0.1432 - val_loss: 0.0462 - val_mae: 0.1676 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0329 - mae: 0.1427 - val_loss: 0.0402 - val_mae: 0.1564 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0330 - mae: 0.1430 - val_loss: 0.0549 - val_mae: 0.1847 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0330 - mae: 0.1430 - val_loss: 0.0420 - val_mae: 0.1607 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0329 - mae: 0.1431 - val_loss: 0.0477 - val_mae: 0.1711 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0331 - mae: 0.1433 - val_loss: 0.0448 - val_mae: 0.1646 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0328 - mae: 0.1428 - val_loss: 0.0407 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.04003\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0330 - mae: 0.1430 - val_loss: 0.0424 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.04003 to 0.02715, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0157 - mae: 0.0988 - val_loss: 0.0271 - val_mae: 0.1277 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.02715 to 0.02667, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0140 - mae: 0.0936 - val_loss: 0.0267 - val_mae: 0.1268 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.02667 to 0.02607, saving model to models/best_model_full.keras\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0133 - mae: 0.0916 - val_loss: 0.0261 - val_mae: 0.1252 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02607\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0130 - mae: 0.0902 - val_loss: 0.0261 - val_mae: 0.1253 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02607\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0127 - mae: 0.0892 - val_loss: 0.0262 - val_mae: 0.1255 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.02607 to 0.02591, saving model to models/best_model_full.keras\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0124 - mae: 0.0883 - val_loss: 0.0259 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.02591 to 0.02589, saving model to models/best_model_full.keras\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0122 - mae: 0.0876 - val_loss: 0.0259 - val_mae: 0.1248 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.02589 to 0.02581, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0121 - mae: 0.0871 - val_loss: 0.0258 - val_mae: 0.1244 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0119 - mae: 0.0865 - val_loss: 0.0261 - val_mae: 0.1251 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0118 - mae: 0.0860 - val_loss: 0.0258 - val_mae: 0.1244 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0117 - mae: 0.0857 - val_loss: 0.0260 - val_mae: 0.1244 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0115 - mae: 0.0852 - val_loss: 0.0259 - val_mae: 0.1245 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02581\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0115 - mae: 0.0848 - val_loss: 0.0260 - val_mae: 0.1249 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0113 - mae: 0.0843 - val_loss: 0.0263 - val_mae: 0.1251 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0112 - mae: 0.0841 - val_loss: 0.0264 - val_mae: 0.1257 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0111 - mae: 0.0836 - val_loss: 0.0262 - val_mae: 0.1251 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0111 - mae: 0.0832 - val_loss: 0.0260 - val_mae: 0.1241 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0110 - mae: 0.0830 - val_loss: 0.0259 - val_mae: 0.1243 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0109 - mae: 0.0827 - val_loss: 0.0262 - val_mae: 0.1250 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0108 - mae: 0.0824 - val_loss: 0.0262 - val_mae: 0.1249 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0107 - mae: 0.0821 - val_loss: 0.0264 - val_mae: 0.1254 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0107 - mae: 0.0819 - val_loss: 0.0261 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0106 - mae: 0.0816 - val_loss: 0.0260 - val_mae: 0.1245 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0106 - mae: 0.0814 - val_loss: 0.0265 - val_mae: 0.1258 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0105 - mae: 0.0812 - val_loss: 0.0262 - val_mae: 0.1252 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02581\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0104 - mae: 0.0809 - val_loss: 0.0270 - val_mae: 0.1274 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.02581 to 0.02530, saving model to models/best_model_full.keras\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0092 - mae: 0.0757 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-05\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0091 - mae: 0.0752 - val_loss: 0.0253 - val_mae: 0.1228 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0090 - mae: 0.0751 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0090 - mae: 0.0750 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0090 - mae: 0.0750 - val_loss: 0.0254 - val_mae: 0.1229 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0090 - mae: 0.0748 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0090 - mae: 0.0748 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0090 - mae: 0.0748 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0747 - val_loss: 0.0254 - val_mae: 0.1229 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0747 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0746 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0089 - mae: 0.0746 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0746 - val_loss: 0.0254 - val_mae: 0.1229 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0745 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0745 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0745 - val_loss: 0.0255 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0089 - mae: 0.0744 - val_loss: 0.0255 - val_mae: 0.1231 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0089 - mae: 0.0744 - val_loss: 0.0254 - val_mae: 0.1229 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0089 - mae: 0.0744 - val_loss: 0.0254 - val_mae: 0.1229 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0089 - mae: 0.0743 - val_loss: 0.0255 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0088 - mae: 0.0743 - val_loss: 0.0255 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0087 - mae: 0.0738 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0737 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1228 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0253 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02530\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0087 - mae: 0.0735 - val_loss: 0.0254 - val_mae: 0.1227 - learning_rate: 1.0000e-07\n",
      "Epoch 213: early stopping\n",
      "Restoring model weights from the end of the best epoch: 163.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 6ms/step\n",
      "Mean positioning error: 0.1931 m\n",
      "Median positioning error: 0.1720 m\n",
      "90th percentile error: 0.3485 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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3bt3q0uXLqdsL3kerVu31hNPPKHFixerc+fOaty4sa699lrdeeed6tatm+s1r776qoYOHaqkpCR16NBBffv21ZAhQ9SoUaNKjxsAAHhHdc6P/P39deutt2rWrFnq3Lmz9u7de9qlex999JEKCgrUvn177dy507W9S5cumjlzpkaMGHHKa6644goanQPnCYpSAHzuzjvv1P3336/U1FT16dPHa7frdTgckqTBgwdr6NChpY5p27atV2IpTYsWLbR9+3Z9+eWXWrBggT799FO9/fbbGjdunJ577jlJziupl19+uebOnatvv/1Wr732ml555RV99tlnp71VMgAAqNqqc3505513atq0aRo/frzatWunli1bljm2uHdUyYtyJf35559cjAPOYxSlAPjcTTfdpL///e9as2aNPvroozLH1a9fX4sXL1ZWVpbb1cDffvvNtb/4V4fDoT/++MPt6t/27dvdjld85xm73a6ePXtW5imdVv369U+JRTr1PCQpNDRUt99+u26//Xbl5+fr5ptv1osvvqixY8cqKChIkpSQkKDhw4dr+PDhSktL08UXX6wXX3yRohQAAOex6pwfXXbZZapXr56WLVumV155pcxxKSkpWrVqlUaOHKkrr7zSbZ/D4dBdd92lWbNm6emnn/ZInAA8j55SAHwuLCxMU6dO1fjx49WvX78yx/Xt21d2u11Tpkxx2/7Pf/5ThmG4ijDFv06ePNlt3Ml3i7FarRowYIA+/fRTbdmy5ZT3O3ToUEVO54z69u2rdevWafXq1a5tOTk5euedd9SgQQPX1cIjR464vS4gIEAtW7aUaZoqKCiQ3W5XRkaG25jY2FglJibKZrN5JHYAAOAd1Tk/MgxDkydP1rPPPqu77rqrzHHFs6Qef/xx3XLLLW6P2267TVdeeeVp78IHoOpjphSAKqGs6eEl9evXT1dddZWeeuop7dq1S+3atdO3336rzz//XKNHj3b1SLjooot0xx136O2331ZGRoYuvfRSLVmyxK0PQbGXX35ZS5cuVZcuXXT//ferZcuWOnr0qDZs2KDFixfr6NGjFTqfTz/91HWF8uTzfPLJJ/Xhhx+qT58+euihhxQTE6P3339fKSkp+vTTT2WxOK8XXHvttYqPj1e3bt0UFxenbdu2acqUKbruuusUHh6u9PR01a1bV7fccovatWunsLAwLV68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mj4OBABQpRw4cMD180cffaRx48Zp+/btrm0lL7CYpim73S4/vzP/tV2nTp2ziiMgIOC0NwcBPMFalGA7SJAAACXU1PwoPDxcc+fO1R133OHaNn36dNWrV0979uw5ZfzKlSuVm5urW265Re+//76eeOKJU8bcf//9mjBhgtu2qnhToCrb6Ly6KC5qknQBAEqKj493PSIjI2UYhuv5b7/9pvDwcH3zzTfq0KGDAgMDtXLlSv3xxx/q37+/4uLiFBYWpk6dOmnx4sVuxz15erphGPrPf/6jm266SSEhIWrSpInmz5/v2n/yDKbk5GRFRUVp4cKFatGihcLCwtS7d2+3JLGwsFAPPfSQoqKiVKtWLT3xxBMaOnSoq+djRRw7dkxDhgxRdHS0QkJC1KdPH+3YcWJp1+7du9WvXz9FR0crNDRUrVq10tdff+167aBBg1SnTh0FBwerSZMmmjFjRoVjgedZii7a2R3kRwCAE2pqfjR06FC99957rue5ubmaPXu2hg4dWur46dOn684779Rdd93l9rqSQkJC3D7P+Ph4RUREnDEWb6Mo5WEWrgQCgNeZpqnj+YU+eZiV+Of9k08+qZdfflnbtm1T27ZtlZ2drb59+2rJkiX6+eef1bt3b/Xr16/UK2glPffcc7rtttv0yy+/qG/fvho0aJCOHj1a5vjjx4/r9ddf13//+1+tWLFCe/bs0aOPPura/8orr2jmzJmaMWOGfvjhB2VmZmrevHnndK533323fvzxR82fP1+rV6+WaZrq27ev6xbDI0aMkM1m04oVK7R582a98sorrqulzzzzjLZu3apvvvlG27Zt09SpU1W7du1zigeexUwpAPA+8iN3VSk/uuuuu/T999+7Yv7000/VoEEDXXzxxaeMzcrK0pw5czR48GBdc801ysjI0Pfff1+u96mKWL7nYSeKUj4OBABqkNwCu1qOW+iT9946oZdCAirnr9cJEybommuucT2PiYlRu3btXM+ff/55zZ07V/Pnz9fIkSPLPM7dd9/tmg7+0ksvafLkyVq3bp169+5d6viCggJNmzZNF154oSRp5MiRbtO/33zzTY0dO1Y33XSTJGnKlCmuWUsVsWPHDs2fP18//PCDLr30UknOG5kkJSVp3rx5uvXWW7Vnzx4NGDBAbdq0kSQ1atTI9fo9e/aoffv26tixoyTn1VBUbcyU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vCZNmqRBgwb5OjRJJZbvkSABAFCjsXzPw07cfY+kCwAAeM/111+v66+/3tdhlMrK3YkBAICYKeVxxdPTuRIIAPCE7t27a/To0a7nDRo00KRJk077GsMwNG/evHN+78o6Dmoe7r4HAPAk8qPzB0UpDyuenm6akklhCgBQpF+/furdu3ep+77//nsZhqFffvnlrI+7fv16DRs27FzDczN+/HhddNFFp2w/cOCA+vTpU6nvdbLk5GRFRUV59D3gfdx9DwBQGvKj8klOTpZhGGrRosUp++bMmSPDMNSgQYNT9uXm5iomJka1a9eWzWY7ZX+DBg1kGMYpj5dfftkTpyGJopTHFS/fk+grBQA44d5779WiRYu0b9++U/bNmDFDHTt2VNu2bc/6uHXq1FFISEhlhHhG8fHxXr1jG6oPK+0NAAClID8qv9DQUKWlpWn16tVu26dPn6569eqV+ppPP/1UrVq1UvPmzcuczTVhwgQdOHDA7TFq1KjKDt+FopSHWU7UpEi8AAAu119/verUqaPk5GS37dnZ2ZozZ47uvfdeHTlyRHfccYcuuOAChYSEqE2bNvrwww9Pe9yTp6fv2LFDV1xxhYKCgtSyZUstWrTolNc88cQTatq0qUJCQtSoUSM988wzKigokOS8Evfcc89p06ZNrqtlxTGfPD198+bNuvrqqxUcHKxatWpp2LBhys7Odu2/++67deONN+r1119XQkKCatWqpREjRrjeqyL27Nmj/v37KywsTBEREbrtttt08OBB1/5NmzbpqquuUnh4uCIiItShQwf9+OOPkqTdu3erX79+io6OVmhoqFq1aqWvv/66wrGg/IrvTsxMKQBASeRH5c+P/Pz8dOedd+q9995zbdu3b5+WLVumO++8s9TXTJ8+XYMHD9bgwYM1ffr0UseEh4crPj7e7REaGnraWM4Fjc49zCgxU8pumnzgAOANpikVHPfNe/uHSCX+7C+Ln5+fhgwZouTkZD311FOuvy/mzJkju92uO+64Q9nZ2erQoYOeeOIJRURE6KuvvtJdd92lCy+8UJ07dz7jezgcDt18882Ki4vT2rVrlZGR4dZfoVh4eLiSk5OVmJiozZs36/7771d4eLgef/xx3X777dqyZYsWLFigxYsXS5IiIyNPOUZOTo569eqlrl27av369UpLS9N9992nkSNHuiWWS5cuVUJCgpYuXaqdO3fq9ttv10UXXaT777//jOdT2vkVF6SWL1+uwsJCjRgxQrfffruWLVsmSRo0aJDat2+vqVOnymq1auPGjfL395ckjRgxQvn5+VqxYoVCQ0O1detWhYWFnXUcOHvFM6XouQkAXkR+JKl65Uf33HOPunfvrn/9618KCQlRcnKyevfurbi4uFPG/vHHH1q9erU+++wzmaaphx9+WLt371b9+vXP+Jl5EjUSD7NaWL4HAF5XcFx6KdE37/3/9ksB5buadM899+i1117T8uXL1b17d0nOqekDBgxQZGSkIiMj9eijj7rGjxo1SgsXLtTHH39crqRr8eLF+u2337Rw4UIlJjo/j5deeumUPgdPP/206+cGDRro0Ucf1ezZs/X4448rODhYYWFh8vPzU3x8fJnvNWvWLOXl5emDDz5wXU2bMmWK+vXrp1deecWVHEVHR2vKlCmyWq1q3ry5rrvuOi1ZsqRCRaklS5Zo8+bNSklJUVJSkiTpgw8+UKtWrbR+/Xp16tRJe/bs0WOPPabmzZtLkpo0aeJ6/Z49ezRgwAC1adNGktSoUaOzjgEVQ6NzAPAB8iNJ1Ss/at++vRo1aqRPPvlEd911l5KTk/XGG2/ozz//PGXse++9pz59+ig6OlqS1KtXL82YMUPjx493G/fEE0+4nbskffPNN7r88stPG0tFsXzPw1i+BwAoS/PmzXXppZe6pl3v3LlT33//ve69915Jkt1u1/PPP682bdooJiZGYWFhWrhwofbs2VOu42/btk1JSUmuhEuSunbtesq4jz76SN26dVN8fLzCwsL09NNPl/s9Sr5Xu3bt3KZ3d+vWTQ6HQ9u3b3dta9WqlaxWq+t5QkKC0tLSzuq9Sr5nUlKSqyAlSS1btlRUVJS2bdsmSRozZozuu+8+9ezZUy+//LL++OMP19iHHnpIL7zwgrp166Znn322Qo1TUTGuRufkRgCAk5AfnV1+dM8992jGjBlavny5cnJy1Ldv31PG2O12vf/++xo8eLBr2+DBg5WcnCyHw+E29rHHHtPGjRvdHh07diz3OZ8tZkp5WMlG51wMBAAv8Q9xXpHz1XufhXvvvVejRo3SW2+9pRkzZujCCy/UlVdeKUl67bXX9K9//UuTJk1SmzZtFBoaqtGjRys/P7/Swl29erUGDRqk5557Tr169VJkZKRmz56tf/zjH5X2HiUVL50rZhjGKclQZRo/frzuvPNOffXVV/rmm2/07LPPavbs2brpppt03333qVevXvrqq6/07bffauLEifrHP/7h0WaecHI1OvfcVw8AOBn5UbmdT/nRoEGD9Pjjj2v8+PG666675Od3apln4cKF+uuvv3T77be7bbfb7VqyZImuueYa17batWurcePGFTiLimGmlIeVXDZLM08A8BLDcE4R98WjHP0SSrrttttksVg0a9YsffDBB7rnnntc/RN++OEH9e/fX4MHD1a7du3UqFEj/f777+U+dosWLbR3714dOHDAtW3NmjVuY1atWqX69evrqaeeUseOHdWkSRPt3r3bbUxAQIDsdvsZ32vTpk3Kyclxbfvhhx9ksVjUrFmzcsd8NorPb+/eva5tW7duVXp6ulq2bOna1rRpUz388MP69ttvdfPNN2vGjBmufUlJSXrggQf02Wef6ZFHHtG7777rkVjhrnj5HrkRAHgR+ZGk6pcfxcTE6IYbbtDy5ct1zz33lDpm+vTpGjhw4CkzoAYOHFhmw3NvoSjlYVajZE8pEi8AgLuwsDDdfvvtGjt2rA4cOKC7777bta9JkyZatGiRVq1apW3btunvf/+7253lzqRnz55q2rSphg4dqk2bNun777/XU0895TamSZMm2rNnj2bPnq0//vhDkydP1ty5c93GNGjQQCkpKdq4caMOHz4sm812ynsNGjRIQUFBGjp0qLZs2aKlS5dq1KhRuuuuu0pttnk27Hb7KUnUtm3b1LNnT7Vp00aDBg3Shg0btG7dOg0ZMkRXXnmlOnbsqNzcXI0cOVLLli3T7t279cMPP2j9+vVq0aKFJGn06NFauHChUlJStGHDBi1dutS1D55lodE5AOA0yI/OTnJysg4fPuzqoVnSoUOH9MUXX2jo0KFq3bq122PIkCGaN2+ejh496hqflZWl1NRUt0dmZmalxXoyilIexvI9AMCZ3HvvvTp27Jh69erl1t/g6aef1sUXX6xevXqpe/fuio+P14033lju41osFs2dO1e5ubnq3Lmz7rvvPr344otuY2644QY9/PDDGjlypC666CKtWrVKzzzzjNuYAQMGqHfv3rrqqqtUp06dUm+7HBISooULF+ro0aPq1KmTbrnlFvXo0UNTpkw5uw+jFNnZ2Wrfvr3bo1+/fjIMQ59//rmio6N1xRVX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KSkpvg7B65wX7kxaHAAAUENVqCjVv39/3XzzzXrggQeUnp6uLl26yN/fX4cPH9Ybb7yhBx98sLLjPK8ZrplSPg4EAABUWfXr1z/jmC1btnghEu8pbnHgcPg4EAAA4BMVanS+YcMGXX755ZKkTz75RHFxcdq9e7c++OADTZ48uVIDrA64uwwAAKiorKwsvfPOO+rcubOrj2d1UdzigOV7AADUTBUqSh0/flzh4eGSpG+//VY333yzLBaLLrnkEu3evbtSA6wOSt5dhiV8AACgPFasWKGhQ4cqISFBr7/+uq6++mqtWbPG12FVKgt3KAYAoEarUFGqcePGmjdvnvbu3auFCxfq2muvlSSlpaUpIiKiUgOsDko2JSXnAgAAZUlNTdXLL7+sJk2a6NZbb1VERIRsNpvmzZunl19+WZ06dfJ1iJXKtXyPi3YAANRIFSpKjRs3To8++qgaNGigzp07q2vXrpKcs6bat29fqQFWB8yUAgAAZ9KvXz81a9ZMv/zyiyZNmqT9+/frzTff9HVYHlVclGKmFAAANVOFGp3fcsstuuyyy3TgwAG33gY9evTQTTfdVGnBVRduPaUoSgEAgFJ88803euihh/Tggw+qSZMmvg7HK1w9pShKAQBQI1VoppQkxcfHq3379tq/f7/27dsnSercubOaN29eacFVFxaW7wEAgDNYuXKlsrKy1KFDB3Xp0kVTpkzR4cOHfR2WR7F8DwCAmq1CRSmHw6EJEyYoMjJS9evXV/369RUVFaXnn39eDu7pewqD5XsAAOAMLrnkEr377rs6cOCA/v73v2v27NlKTEyUw+HQokWLlJWV5esQKx0zpQAAqNkqVJR66qmnNGXKFL388sv6+eef9fPPP+ull17Sm2++qWeeeaayYzzvlZwpZVKzAwAApxEaGqp77rlHK1eu1ObNm/XII4/o5ZdfVmxsrG644YZyHWPq1Klq27atIiIiFBERoa5du+qbb77xcORnj5lSAADUbBUqSr3//vv6z3/+owcffFBt27ZV27ZtNXz4cL377rtKTk6u5BDPf9YSRSk7SRcAACinZs2a6dVXX9W+ffs0e/Zstzv6nk7dunX18ssv66efftKPP/6oq6++Wv3799evv/7q4YjPzomilI8DAQAAPlGhRudHjx4ttXdU8+bNdfTo0XMOqrph+R4AADiTe+6554xjatWq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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9458.574843,
   "end_time": "2025-08-08T16:21:00.458870",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-08T13:43:21.884027",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
