{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd94096c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-08T05:45:00.983370Z",
     "iopub.status.busy": "2025-08-08T05:45:00.982625Z",
     "iopub.status.idle": "2025-08-08T05:45:02.401745Z",
     "shell.execute_reply": "2025-08-08T05:45:02.400954Z"
    },
    "papermill": {
     "duration": 1.424021,
     "end_time": "2025-08-08T05:45:02.403100",
     "exception": false,
     "start_time": "2025-08-08T05:45:00.979079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b0667dac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:45:02.409210Z",
     "iopub.status.busy": "2025-08-08T05:45:02.408537Z",
     "iopub.status.idle": "2025-08-08T05:45:16.365952Z",
     "shell.execute_reply": "2025-08-08T05:45:16.365099Z"
    },
    "papermill": {
     "duration": 13.961627,
     "end_time": "2025-08-08T05:45:16.367418",
     "exception": false,
     "start_time": "2025-08-08T05:45:02.405791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-08 05:45:03.846476: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754631904.033441      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754631904.080230      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2cfd7705",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:45:16.372624Z",
     "iopub.status.busy": "2025-08-08T05:45:16.372157Z",
     "iopub.status.idle": "2025-08-08T05:45:16.376688Z",
     "shell.execute_reply": "2025-08-08T05:45:16.375996Z"
    },
    "papermill": {
     "duration": 0.008113,
     "end_time": "2025-08-08T05:45:16.377740",
     "exception": false,
     "start_time": "2025-08-08T05:45:16.369627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 64   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 7   #0-200\n",
    "dropout_rate = 0.1  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b210cf81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:45:16.382014Z",
     "iopub.status.busy": "2025-08-08T05:45:16.381808Z",
     "iopub.status.idle": "2025-08-08T05:45:16.385073Z",
     "shell.execute_reply": "2025-08-08T05:45:16.384381Z"
    },
    "papermill": {
     "duration": 0.006631,
     "end_time": "2025-08-08T05:45:16.386188",
     "exception": false,
     "start_time": "2025-08-08T05:45:16.379557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "479d9079",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-08T05:45:16.391086Z",
     "iopub.status.busy": "2025-08-08T05:45:16.390870Z",
     "iopub.status.idle": "2025-08-08T06:19:29.601853Z",
     "shell.execute_reply": "2025-08-08T06:19:29.601009Z"
    },
    "papermill": {
     "duration": 2053.21505,
     "end_time": "2025-08-08T06:19:29.603024",
     "exception": false,
     "start_time": "2025-08-08T05:45:16.387974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754631945.983637      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754631955.242118      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,192</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,472</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │        \u001b[38;5;34m16,192\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │        \u001b[38;5;34m16,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        \u001b[38;5;34m33,472\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m130\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">66,058</span> (258.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m66,058\u001b[0m (258.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">65,926</span> (257.52 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m65,926\u001b[0m (257.52 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> (528.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m132\u001b[0m (528.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754631965.965948      57 service.cc:148] XLA service 0x7c2258017050 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754631965.966879      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754631970.162939      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 13.74471, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 48.8750 - mae: 4.3348 - val_loss: 13.7447 - val_mae: 2.8892 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss did not improve from 13.74471\n",
      "4375/4375 - 20s - 5ms/step - loss: 12.5308 - mae: 2.7350 - val_loss: 16.0777 - val_mae: 3.1351 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 13.74471\n",
      "4375/4375 - 20s - 5ms/step - loss: 10.0390 - mae: 2.4376 - val_loss: 18.9382 - val_mae: 3.5130 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 13.74471\n",
      "4375/4375 - 20s - 5ms/step - loss: 9.3011 - mae: 2.3568 - val_loss: 15.4890 - val_mae: 3.1029 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 13.74471 to 11.85347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 7.6823 - mae: 2.1220 - val_loss: 11.8535 - val_mae: 2.7857 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 11.85347 to 8.37705, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 5.4462 - mae: 1.7758 - val_loss: 8.3771 - val_mae: 2.2730 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 8.37705 to 6.37075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 5.3361 - mae: 1.7423 - val_loss: 6.3708 - val_mae: 1.9819 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 6.37075 to 6.25875, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 5.3552 - mae: 1.7183 - val_loss: 6.2587 - val_mae: 1.9596 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 6.25875\n",
      "4375/4375 - 20s - 5ms/step - loss: 4.2338 - mae: 1.5035 - val_loss: 13.6836 - val_mae: 2.7826 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 6.25875 to 4.16541, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.5137 - mae: 1.3940 - val_loss: 4.1654 - val_mae: 1.5416 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.8426 - mae: 1.4451 - val_loss: 7.1941 - val_mae: 2.0946 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.0699 - mae: 1.2887 - val_loss: 5.4357 - val_mae: 1.8026 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.5578 - mae: 1.3192 - val_loss: 5.5036 - val_mae: 1.7939 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.7735 - mae: 1.1859 - val_loss: 4.8558 - val_mae: 1.7449 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 4ms/step - loss: 3.3781 - mae: 1.3287 - val_loss: 7.2971 - val_mae: 2.1119 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.1082 - mae: 1.2924 - val_loss: 11.7055 - val_mae: 2.4437 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.5296 - mae: 1.3471 - val_loss: 4.5796 - val_mae: 1.6037 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 4.16541\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.6727 - mae: 1.3097 - val_loss: 5.5959 - val_mae: 1.8589 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 4.16541 to 3.82572, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.9658 - mae: 1.0515 - val_loss: 3.8257 - val_mae: 1.4984 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 3.82572\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.5833 - mae: 1.2444 - val_loss: 4.1096 - val_mae: 1.5459 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 3.82572\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.4736 - mae: 1.1577 - val_loss: 4.8632 - val_mae: 1.7192 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 3.82572\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.8101 - mae: 1.1763 - val_loss: 5.1266 - val_mae: 1.7463 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 3.82572 to 3.56913, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3237 - mae: 1.0875 - val_loss: 3.5691 - val_mae: 1.4767 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 3.56913\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.0184 - mae: 1.0186 - val_loss: 3.9068 - val_mae: 1.4953 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 3.56913 to 3.42913, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.1164 - mae: 0.9668 - val_loss: 3.4291 - val_mae: 1.4939 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 3.42913\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.7049 - mae: 1.0808 - val_loss: 4.5994 - val_mae: 1.6958 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 3.42913\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.1228 - mae: 1.0157 - val_loss: 3.5713 - val_mae: 1.4753 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 3.42913\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.2736 - mae: 1.0401 - val_loss: 5.6421 - val_mae: 1.7538 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 3.42913\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.0710 - mae: 1.0037 - val_loss: 7.8430 - val_mae: 2.0932 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 3.42913\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.4688 - mae: 1.0771 - val_loss: 5.0850 - val_mae: 1.7808 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 3.42913\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1665 - mae: 1.0288 - val_loss: 10.1815 - val_mae: 2.3403 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 3.42913\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.0725 - mae: 1.0432 - val_loss: 4.6831 - val_mae: 1.6831 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 3.42913\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.5958 - mae: 1.3366 - val_loss: 5.5754 - val_mae: 1.8614 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss improved from 3.42913 to 3.31814, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.9336 - mae: 1.2658 - val_loss: 3.3181 - val_mae: 1.4337 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 3.31814\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.7336 - mae: 1.1810 - val_loss: 3.9906 - val_mae: 1.5368 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 3.31814\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.1666 - mae: 1.0503 - val_loss: 6.6863 - val_mae: 1.9812 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss improved from 3.31814 to 2.78316, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.9711 - mae: 1.0263 - val_loss: 2.7832 - val_mae: 1.3204 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 2.78316\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3585 - mae: 1.0765 - val_loss: 3.4089 - val_mae: 1.4728 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 2.78316\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.4180 - mae: 1.0484 - val_loss: 3.9062 - val_mae: 1.5298 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 2.78316\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.1476 - mae: 1.0160 - val_loss: 3.1368 - val_mae: 1.4121 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 2.78316 to 2.77027, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.2388 - mae: 1.0076 - val_loss: 2.7703 - val_mae: 1.2769 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 2.77027\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6614 - mae: 0.9398 - val_loss: 3.8879 - val_mae: 1.5525 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 2.77027\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.1406 - mae: 0.9967 - val_loss: 3.5042 - val_mae: 1.4467 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 2.77027\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1496 - mae: 1.0049 - val_loss: 3.6107 - val_mae: 1.4897 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 2.77027\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0515 - mae: 1.0009 - val_loss: 3.9226 - val_mae: 1.5483 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 2.77027\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.2113 - mae: 1.0107 - val_loss: 3.7610 - val_mae: 1.4672 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 2.77027\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.2153 - mae: 1.0169 - val_loss: 3.0666 - val_mae: 1.4048 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 2.77027\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.5972 - mae: 1.0560 - val_loss: 3.0163 - val_mae: 1.3617 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 2.77027\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.8234 - mae: 1.1172 - val_loss: 3.4390 - val_mae: 1.4439 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 2.77027\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.2140 - mae: 1.0026 - val_loss: 3.7769 - val_mae: 1.5627 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 2.77027 to 2.75617, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.9722 - mae: 0.9889 - val_loss: 2.7562 - val_mae: 1.2988 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3123 - mae: 1.0302 - val_loss: 4.5758 - val_mae: 1.6641 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.4588 - mae: 0.8948 - val_loss: 2.8139 - val_mae: 1.3374 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 3.2260 - mae: 1.1229 - val_loss: 3.2628 - val_mae: 1.4410 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.7788 - mae: 0.9603 - val_loss: 4.3061 - val_mae: 1.6133 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.1628 - mae: 0.9893 - val_loss: 4.1579 - val_mae: 1.6124 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 3.3666 - mae: 1.1143 - val_loss: 4.7096 - val_mae: 1.7101 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.8541 - mae: 0.9523 - val_loss: 3.6071 - val_mae: 1.5155 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.8509 - mae: 1.0685 - val_loss: 4.8392 - val_mae: 1.7546 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.3434 - mae: 1.0669 - val_loss: 12.6664 - val_mae: 2.6158 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.5145 - mae: 1.0619 - val_loss: 3.5040 - val_mae: 1.4171 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.4144 - mae: 1.0383 - val_loss: 3.9055 - val_mae: 1.4963 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 2.3805 - mae: 1.0643 - val_loss: 5.3391 - val_mae: 1.7802 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.5646 - mae: 1.1227 - val_loss: 3.8757 - val_mae: 1.4970 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 7.4587 - mae: 1.7406 - val_loss: 7.4909 - val_mae: 2.1124 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.3379 - mae: 1.3440 - val_loss: 9.0966 - val_mae: 2.3292 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 3.3107 - mae: 1.2802 - val_loss: 8.4016 - val_mae: 2.2011 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.9709 - mae: 1.2190 - val_loss: 5.9030 - val_mae: 1.9184 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 3.0263 - mae: 1.2213 - val_loss: 5.7421 - val_mae: 1.9045 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.5213 - mae: 1.1088 - val_loss: 5.4435 - val_mae: 1.8033 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 71: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.5752 - mae: 1.1326 - val_loss: 4.8363 - val_mae: 1.7579 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.1767 - mae: 0.8281 - val_loss: 4.3586 - val_mae: 1.6617 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.9078 - mae: 0.7351 - val_loss: 4.2597 - val_mae: 1.6285 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.7740 - mae: 0.6801 - val_loss: 4.8334 - val_mae: 1.7406 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.6842 - mae: 0.6398 - val_loss: 4.3340 - val_mae: 1.6647 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.6293 - mae: 0.6132 - val_loss: 3.7359 - val_mae: 1.5323 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.5937 - mae: 0.5963 - val_loss: 4.1663 - val_mae: 1.6087 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.5363 - mae: 0.5662 - val_loss: 4.1258 - val_mae: 1.6075 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.5008 - mae: 0.5480 - val_loss: 4.1540 - val_mae: 1.5988 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.4730 - mae: 0.5331 - val_loss: 4.0210 - val_mae: 1.6141 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.4424 - mae: 0.5156 - val_loss: 4.1393 - val_mae: 1.5926 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.4221 - mae: 0.5037 - val_loss: 4.2708 - val_mae: 1.6559 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.4074 - mae: 0.4958 - val_loss: 4.1584 - val_mae: 1.6098 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.3830 - mae: 0.4806 - val_loss: 3.9276 - val_mae: 1.5789 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.3763 - mae: 0.4771 - val_loss: 3.8815 - val_mae: 1.5691 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.3612 - mae: 0.4671 - val_loss: 4.0138 - val_mae: 1.6080 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.3527 - mae: 0.4617 - val_loss: 3.6569 - val_mae: 1.5286 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.3381 - mae: 0.4523 - val_loss: 3.8392 - val_mae: 1.5655 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.3249 - mae: 0.4438 - val_loss: 4.0069 - val_mae: 1.6112 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.3073 - mae: 0.4316 - val_loss: 3.6414 - val_mae: 1.5255 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 91: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2858 - mae: 0.4170 - val_loss: 3.8150 - val_mae: 1.5552 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2358 - mae: 0.3786 - val_loss: 3.8093 - val_mae: 1.5617 - learning_rate: 1.0000e-04\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2297 - mae: 0.3740 - val_loss: 3.7975 - val_mae: 1.5554 - learning_rate: 1.0000e-04\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2270 - mae: 0.3721 - val_loss: 3.8369 - val_mae: 1.5704 - learning_rate: 1.0000e-04\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.2254 - mae: 0.3706 - val_loss: 3.7634 - val_mae: 1.5487 - learning_rate: 1.0000e-04\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2231 - mae: 0.3689 - val_loss: 3.8201 - val_mae: 1.5656 - learning_rate: 1.0000e-04\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 2.75617\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2212 - mae: 0.3665 - val_loss: 3.8627 - val_mae: 1.5750 - learning_rate: 1.0000e-04\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.2195 - mae: 0.3657 - val_loss: 3.7549 - val_mae: 1.5492 - learning_rate: 1.0000e-04\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.2194 - mae: 0.3657 - val_loss: 3.8218 - val_mae: 1.5582 - learning_rate: 1.0000e-04\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.2172 - mae: 0.3636 - val_loss: 3.8840 - val_mae: 1.5704 - learning_rate: 1.0000e-04\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 2.75617\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2166 - mae: 0.3633 - val_loss: 3.6977 - val_mae: 1.5384 - learning_rate: 1.0000e-04\n",
      "Epoch 101: early stopping\n",
      "Restoring model weights from the end of the best epoch: 51.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 2.0660 m\n",
      "Median positioning error: 1.9202 m\n",
      "90th percentile error: 3.4576 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2075.963817,
   "end_time": "2025-08-08T06:19:32.888711",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-08T05:44:56.924894",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
