{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0e0d9007",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-16T10:50:58.447000Z",
     "iopub.status.busy": "2025-08-16T10:50:58.446747Z",
     "iopub.status.idle": "2025-08-16T10:50:59.924195Z",
     "shell.execute_reply": "2025-08-16T10:50:59.923271Z"
    },
    "papermill": {
     "duration": 1.482247,
     "end_time": "2025-08-16T10:50:59.925421",
     "exception": false,
     "start_time": "2025-08-16T10:50:58.443174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "865f5d75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:50:59.931309Z",
     "iopub.status.busy": "2025-08-16T10:50:59.930970Z",
     "iopub.status.idle": "2025-08-16T10:51:14.730379Z",
     "shell.execute_reply": "2025-08-16T10:51:14.729732Z"
    },
    "papermill": {
     "duration": 14.803938,
     "end_time": "2025-08-16T10:51:14.731947",
     "exception": false,
     "start_time": "2025-08-16T10:50:59.928009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-16 10:51:01.540520: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755341461.732843      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755341461.786068      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b01daa82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:51:14.737781Z",
     "iopub.status.busy": "2025-08-16T10:51:14.737205Z",
     "iopub.status.idle": "2025-08-16T10:51:14.742487Z",
     "shell.execute_reply": "2025-08-16T10:51:14.741613Z"
    },
    "papermill": {
     "duration": 0.009697,
     "end_time": "2025-08-16T10:51:14.744000",
     "exception": false,
     "start_time": "2025-08-16T10:51:14.734303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size =9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4b3c14fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:51:14.749399Z",
     "iopub.status.busy": "2025-08-16T10:51:14.748852Z",
     "iopub.status.idle": "2025-08-16T10:51:14.752307Z",
     "shell.execute_reply": "2025-08-16T10:51:14.751550Z"
    },
    "papermill": {
     "duration": 0.00746,
     "end_time": "2025-08-16T10:51:14.753815",
     "exception": false,
     "start_time": "2025-08-16T10:51:14.746355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "28c60aee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-16T10:51:14.759375Z",
     "iopub.status.busy": "2025-08-16T10:51:14.759078Z",
     "iopub.status.idle": "2025-08-16T13:07:57.203533Z",
     "shell.execute_reply": "2025-08-16T13:07:57.202817Z"
    },
    "papermill": {
     "duration": 8202.448924,
     "end_time": "2025-08-16T13:07:57.204767",
     "exception": false,
     "start_time": "2025-08-16T10:51:14.755843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755341499.968102      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755341509.697122      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,602</span> (807.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m206,602\u001b[0m (807.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">206,342</span> (806.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m206,342\u001b[0m (806.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755341520.942777      58 service.cc:148] XLA service 0x7c0c08006550 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755341520.943628      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755341524.393761      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 16.63014, saving model to models/best_model_full.keras\n",
      "4375/4375 - 56s - 13ms/step - loss: 108.0616 - mae: 7.0011 - val_loss: 16.6301 - val_mae: 3.1541 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 16.63014 to 4.34826, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 8.9913 - mae: 2.2857 - val_loss: 4.3483 - val_mae: 1.6139 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 4.34826 to 3.21695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 3.1508 - mae: 1.3726 - val_loss: 3.2170 - val_mae: 1.4183 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.21695 to 1.08718, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 2.0324 - mae: 1.0629 - val_loss: 1.0872 - val_mae: 0.8230 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.08718\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.8632 - mae: 0.9526 - val_loss: 1.2533 - val_mae: 0.8732 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.08718 to 0.71264, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9301 - mae: 0.7521 - val_loss: 0.7126 - val_mae: 0.6590 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.71264 to 0.69498, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.8832 - mae: 0.7258 - val_loss: 0.6950 - val_mae: 0.6660 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.69498 to 0.47324, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.1682 - mae: 0.7398 - val_loss: 0.4732 - val_mae: 0.5413 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.47324\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5413 - mae: 0.5764 - val_loss: 0.5229 - val_mae: 0.5792 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 0.47324 to 0.39028, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9835 - mae: 0.6666 - val_loss: 0.3903 - val_mae: 0.4925 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.39028\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.1430 - mae: 0.6829 - val_loss: 0.9904 - val_mae: 0.7789 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.39028\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5627 - mae: 0.5825 - val_loss: 0.5377 - val_mae: 0.5900 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.39028 to 0.36339, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4474 - mae: 0.5229 - val_loss: 0.3634 - val_mae: 0.4660 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.36339\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.9028 - mae: 0.6000 - val_loss: 0.4802 - val_mae: 0.5415 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.36339 to 0.33140, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3769 - mae: 0.4813 - val_loss: 0.3314 - val_mae: 0.4543 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.33140\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.0111 - mae: 0.6203 - val_loss: 0.5211 - val_mae: 0.5637 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.33140\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4295 - mae: 0.5116 - val_loss: 0.3521 - val_mae: 0.4739 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.33140 to 0.29302, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3856 - mae: 0.4847 - val_loss: 0.2930 - val_mae: 0.4185 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.29302\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6677 - mae: 0.5616 - val_loss: 0.4081 - val_mae: 0.4998 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.29302\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.4141 - mae: 0.5017 - val_loss: 0.3845 - val_mae: 0.4892 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.29302\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4093 - mae: 0.4916 - val_loss: 0.3232 - val_mae: 0.4503 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.29302\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5466 - mae: 0.5226 - val_loss: 0.3358 - val_mae: 0.4519 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.29302\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.3705 - mae: 0.4725 - val_loss: 0.3254 - val_mae: 0.4493 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.29302\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3483 - mae: 0.4595 - val_loss: 0.3861 - val_mae: 0.4717 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.29302\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6353 - mae: 0.5320 - val_loss: 0.4556 - val_mae: 0.5500 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.29302 to 0.20687, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3368 - mae: 0.4520 - val_loss: 0.2069 - val_mae: 0.3582 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3696 - mae: 0.4735 - val_loss: 0.3921 - val_mae: 0.4858 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3258 - mae: 0.4466 - val_loss: 0.2645 - val_mae: 0.3990 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5743 - mae: 0.5371 - val_loss: 0.4189 - val_mae: 0.5039 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3435 - mae: 0.4594 - val_loss: 0.3259 - val_mae: 0.4427 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.20687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3501 - mae: 0.4585 - val_loss: 0.3373 - val_mae: 0.4568 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3347 - mae: 0.4515 - val_loss: 0.3283 - val_mae: 0.4532 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4610 - mae: 0.4730 - val_loss: 0.2858 - val_mae: 0.4147 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2945 - mae: 0.4215 - val_loss: 0.2216 - val_mae: 0.3678 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3181 - mae: 0.4386 - val_loss: 0.2535 - val_mae: 0.3913 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4795 - mae: 0.4737 - val_loss: 0.2287 - val_mae: 0.3731 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2781 - mae: 0.4119 - val_loss: 0.2709 - val_mae: 0.4073 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.20687\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.3375 - mae: 0.4398 - val_loss: 0.3156 - val_mae: 0.4409 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3098 - mae: 0.4331 - val_loss: 0.2677 - val_mae: 0.4116 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.6350 - mae: 0.5327 - val_loss: 1.5977 - val_mae: 0.4956 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2787 - mae: 0.4135 - val_loss: 0.3521 - val_mae: 0.4702 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4340 - mae: 0.4842 - val_loss: 0.3574 - val_mae: 0.4708 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2658 - mae: 0.4034 - val_loss: 0.2667 - val_mae: 0.4123 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2874 - mae: 0.4178 - val_loss: 0.4142 - val_mae: 0.5083 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2917 - mae: 0.4213 - val_loss: 0.3195 - val_mae: 0.4500 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.20687\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2888 - mae: 0.4183 - val_loss: 0.2820 - val_mae: 0.4090 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.20687 to 0.07258, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0818 - mae: 0.2235 - val_loss: 0.0726 - val_mae: 0.2113 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.07258 to 0.07199, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0630 - mae: 0.1980 - val_loss: 0.0720 - val_mae: 0.2104 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.07199 to 0.05867, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0561 - mae: 0.1868 - val_loss: 0.0587 - val_mae: 0.1894 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.05867 to 0.05668, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0517 - mae: 0.1791 - val_loss: 0.0567 - val_mae: 0.1860 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.05668\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0486 - mae: 0.1739 - val_loss: 0.0582 - val_mae: 0.1899 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.05668 to 0.05031, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0460 - mae: 0.1694 - val_loss: 0.0503 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.05031 to 0.04976, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0437 - mae: 0.1653 - val_loss: 0.0498 - val_mae: 0.1748 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.04976 to 0.04889, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0419 - mae: 0.1618 - val_loss: 0.0489 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.04889\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0404 - mae: 0.1587 - val_loss: 0.0498 - val_mae: 0.1753 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.04889 to 0.04686, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0390 - mae: 0.1560 - val_loss: 0.0469 - val_mae: 0.1700 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.04686 to 0.04597, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0381 - mae: 0.1544 - val_loss: 0.0460 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.04597\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0373 - mae: 0.1528 - val_loss: 0.0462 - val_mae: 0.1681 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.04597 to 0.04260, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0361 - mae: 0.1502 - val_loss: 0.0426 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.04260\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0352 - mae: 0.1483 - val_loss: 0.0456 - val_mae: 0.1671 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.04260\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0347 - mae: 0.1474 - val_loss: 0.0453 - val_mae: 0.1660 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.04260\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0338 - mae: 0.1454 - val_loss: 0.0434 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.04260\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0332 - mae: 0.1441 - val_loss: 0.0445 - val_mae: 0.1659 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.04260 to 0.04227, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0325 - mae: 0.1428 - val_loss: 0.0423 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.04227 to 0.04159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0319 - mae: 0.1411 - val_loss: 0.0416 - val_mae: 0.1589 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.04159\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0313 - mae: 0.1399 - val_loss: 0.0425 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.04159\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0307 - mae: 0.1385 - val_loss: 0.0425 - val_mae: 0.1611 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.04159\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0303 - mae: 0.1378 - val_loss: 0.0437 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.04159\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0298 - mae: 0.1365 - val_loss: 0.0433 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.04159 to 0.04048, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0297 - mae: 0.1363 - val_loss: 0.0405 - val_mae: 0.1570 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.04048\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0291 - mae: 0.1349 - val_loss: 0.0422 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.04048 to 0.03899, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0287 - mae: 0.1340 - val_loss: 0.0390 - val_mae: 0.1539 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.03899\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0285 - mae: 0.1338 - val_loss: 0.0423 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.03899\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0281 - mae: 0.1326 - val_loss: 0.0431 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.03899\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0279 - mae: 0.1323 - val_loss: 0.0421 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.03899\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0278 - mae: 0.1319 - val_loss: 0.0446 - val_mae: 0.1653 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.03899 to 0.03815, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0273 - mae: 0.1310 - val_loss: 0.0382 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.03815\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0272 - mae: 0.1303 - val_loss: 0.0389 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.03815\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0268 - mae: 0.1295 - val_loss: 0.0400 - val_mae: 0.1556 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.03815\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0269 - mae: 0.1299 - val_loss: 0.0406 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.03815\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0267 - mae: 0.1293 - val_loss: 0.0397 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.03815\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0265 - mae: 0.1287 - val_loss: 0.0417 - val_mae: 0.1591 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.03815 to 0.03807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0262 - mae: 0.1281 - val_loss: 0.0381 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.03807\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0263 - mae: 0.1283 - val_loss: 0.0395 - val_mae: 0.1558 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.03807\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0259 - mae: 0.1271 - val_loss: 0.0392 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.03807\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0260 - mae: 0.1275 - val_loss: 0.0398 - val_mae: 0.1562 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.03807\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0258 - mae: 0.1268 - val_loss: 0.0394 - val_mae: 0.1546 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.03807\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0255 - mae: 0.1262 - val_loss: 0.0404 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.03807\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0254 - mae: 0.1261 - val_loss: 0.0383 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.03807 to 0.03807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0254 - mae: 0.1261 - val_loss: 0.0381 - val_mae: 0.1524 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03807\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0254 - mae: 0.1259 - val_loss: 0.0430 - val_mae: 0.1611 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.03807 to 0.03751, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0251 - mae: 0.1250 - val_loss: 0.0375 - val_mae: 0.1507 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0251 - mae: 0.1251 - val_loss: 0.0466 - val_mae: 0.1706 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0252 - mae: 0.1254 - val_loss: 0.0377 - val_mae: 0.1517 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0251 - mae: 0.1254 - val_loss: 0.0432 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1248 - val_loss: 0.0385 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1247 - val_loss: 0.0406 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0249 - mae: 0.1248 - val_loss: 0.0420 - val_mae: 0.1606 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1248 - val_loss: 0.0395 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1249 - val_loss: 0.0393 - val_mae: 0.1552 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1250 - val_loss: 0.0382 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0249 - mae: 0.1248 - val_loss: 0.0386 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03751\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1248 - val_loss: 0.0411 - val_mae: 0.1579 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.03751\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0248 - mae: 0.1244 - val_loss: 0.0403 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.03751 to 0.03704, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0248 - mae: 0.1243 - val_loss: 0.0370 - val_mae: 0.1511 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0249 - mae: 0.1246 - val_loss: 0.0436 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03704\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0248 - mae: 0.1243 - val_loss: 0.0388 - val_mae: 0.1533 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03704\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1248 - val_loss: 0.0426 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03704\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0249 - mae: 0.1246 - val_loss: 0.0420 - val_mae: 0.1586 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03704\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0250 - mae: 0.1246 - val_loss: 0.0418 - val_mae: 0.1594 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0251 - mae: 0.1253 - val_loss: 0.0422 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0250 - mae: 0.1248 - val_loss: 0.0474 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03704\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0247 - mae: 0.1241 - val_loss: 0.0393 - val_mae: 0.1549 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0253 - mae: 0.1255 - val_loss: 0.0440 - val_mae: 0.1656 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0252 - mae: 0.1250 - val_loss: 0.0403 - val_mae: 0.1565 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0252 - mae: 0.1254 - val_loss: 0.0402 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0251 - mae: 0.1250 - val_loss: 0.0449 - val_mae: 0.1659 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0253 - mae: 0.1254 - val_loss: 0.0387 - val_mae: 0.1534 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03704\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0253 - mae: 0.1254 - val_loss: 0.0401 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03704\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0252 - mae: 0.1251 - val_loss: 0.0413 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.03704 to 0.03687, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0255 - mae: 0.1259 - val_loss: 0.0369 - val_mae: 0.1496 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0254 - mae: 0.1256 - val_loss: 0.0400 - val_mae: 0.1559 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0254 - mae: 0.1258 - val_loss: 0.0378 - val_mae: 0.1512 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0256 - mae: 0.1261 - val_loss: 0.0411 - val_mae: 0.1588 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0254 - mae: 0.1255 - val_loss: 0.0411 - val_mae: 0.1587 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0259 - mae: 0.1265 - val_loss: 0.0424 - val_mae: 0.1611 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0257 - mae: 0.1264 - val_loss: 0.0416 - val_mae: 0.1590 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0255 - mae: 0.1259 - val_loss: 0.0435 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0260 - mae: 0.1270 - val_loss: 0.0414 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0393 - val_mae: 0.1546 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0259 - mae: 0.1268 - val_loss: 0.0400 - val_mae: 0.1556 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0409 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0258 - mae: 0.1266 - val_loss: 0.0407 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0259 - mae: 0.1269 - val_loss: 0.0401 - val_mae: 0.1561 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0259 - mae: 0.1269 - val_loss: 0.0386 - val_mae: 0.1535 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0258 - mae: 0.1267 - val_loss: 0.0416 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03687\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0264 - mae: 0.1278 - val_loss: 0.0432 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03687\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0422 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0264 - mae: 0.1278 - val_loss: 0.0409 - val_mae: 0.1576 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03687\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0457 - val_mae: 0.1670 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03687\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0262 - mae: 0.1274 - val_loss: 0.0422 - val_mae: 0.1601 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.03687 to 0.02624, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0108 - mae: 0.0821 - val_loss: 0.0262 - val_mae: 0.1253 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.02624 to 0.02602, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0092 - mae: 0.0760 - val_loss: 0.0260 - val_mae: 0.1245 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.02602 to 0.02593, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0086 - mae: 0.0736 - val_loss: 0.0259 - val_mae: 0.1243 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0082 - mae: 0.0719 - val_loss: 0.0262 - val_mae: 0.1248 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02593\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0079 - mae: 0.0705 - val_loss: 0.0260 - val_mae: 0.1240 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0077 - mae: 0.0696 - val_loss: 0.0261 - val_mae: 0.1241 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0075 - mae: 0.0687 - val_loss: 0.0261 - val_mae: 0.1240 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0073 - mae: 0.0679 - val_loss: 0.0262 - val_mae: 0.1241 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0072 - mae: 0.0671 - val_loss: 0.0267 - val_mae: 0.1254 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0070 - mae: 0.0666 - val_loss: 0.0265 - val_mae: 0.1249 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0069 - mae: 0.0661 - val_loss: 0.0262 - val_mae: 0.1243 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0068 - mae: 0.0657 - val_loss: 0.0267 - val_mae: 0.1254 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0067 - mae: 0.0650 - val_loss: 0.0264 - val_mae: 0.1246 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0066 - mae: 0.0647 - val_loss: 0.0265 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0065 - mae: 0.0642 - val_loss: 0.0266 - val_mae: 0.1249 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0065 - mae: 0.0638 - val_loss: 0.0265 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0064 - mae: 0.0635 - val_loss: 0.0267 - val_mae: 0.1251 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0063 - mae: 0.0631 - val_loss: 0.0268 - val_mae: 0.1253 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0062 - mae: 0.0627 - val_loss: 0.0268 - val_mae: 0.1254 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0062 - mae: 0.0624 - val_loss: 0.0268 - val_mae: 0.1255 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0622 - val_loss: 0.0267 - val_mae: 0.1252 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0618 - val_loss: 0.0269 - val_mae: 0.1256 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0051 - mae: 0.0564 - val_loss: 0.0263 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0050 - mae: 0.0559 - val_loss: 0.0262 - val_mae: 0.1237 - learning_rate: 1.0000e-05\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0050 - mae: 0.0557 - val_loss: 0.0262 - val_mae: 0.1237 - learning_rate: 1.0000e-05\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0050 - mae: 0.0556 - val_loss: 0.0263 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0555 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0555 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0554 - val_loss: 0.0263 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0553 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0553 - val_loss: 0.0263 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0552 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0552 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0551 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0550 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0049 - mae: 0.0550 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0048 - mae: 0.0550 - val_loss: 0.0264 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0048 - mae: 0.0549 - val_loss: 0.0264 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0048 - mae: 0.0549 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0048 - mae: 0.0549 - val_loss: 0.0264 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0264 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0264 - val_mae: 0.1242 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0542 - val_loss: 0.0264 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0541 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0541 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0541 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0541 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0540 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0540 - val_loss: 0.0264 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0540 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0540 - val_loss: 0.0264 - val_mae: 0.1241 - learning_rate: 1.0000e-06\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0540 - val_loss: 0.0263 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02593\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0047 - mae: 0.0540 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 194: early stopping\n",
      "Restoring model weights from the end of the best epoch: 144.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1958 m\n",
      "Median positioning error: 0.1774 m\n",
      "90th percentile error: 0.3492 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8226.232295,
   "end_time": "2025-08-16T13:08:00.450117",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-16T10:50:54.217822",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
