{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a277e1ba",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:36.710573Z",
     "iopub.status.busy": "2025-07-30T18:21:36.709944Z",
     "iopub.status.idle": "2025-07-30T18:21:38.161485Z",
     "shell.execute_reply": "2025-07-30T18:21:38.160620Z"
    },
    "papermill": {
     "duration": 1.456378,
     "end_time": "2025-07-30T18:21:38.162708",
     "exception": false,
     "start_time": "2025-07-30T18:21:36.706330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "22a73deb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:38.168056Z",
     "iopub.status.busy": "2025-07-30T18:21:38.167750Z",
     "iopub.status.idle": "2025-07-30T18:21:52.070274Z",
     "shell.execute_reply": "2025-07-30T18:21:52.069547Z"
    },
    "papermill": {
     "duration": 13.906316,
     "end_time": "2025-07-30T18:21:52.071615",
     "exception": false,
     "start_time": "2025-07-30T18:21:38.165299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-30 18:21:39.707267: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753899699.881294      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753899699.934806      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c73feb98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:52.076779Z",
     "iopub.status.busy": "2025-07-30T18:21:52.076356Z",
     "iopub.status.idle": "2025-07-30T18:21:52.080667Z",
     "shell.execute_reply": "2025-07-30T18:21:52.080149Z"
    },
    "papermill": {
     "duration": 0.007884,
     "end_time": "2025-07-30T18:21:52.081678",
     "exception": false,
     "start_time": "2025-07-30T18:21:52.073794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 5   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b2b259cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:52.085997Z",
     "iopub.status.busy": "2025-07-30T18:21:52.085764Z",
     "iopub.status.idle": "2025-07-30T18:21:52.088685Z",
     "shell.execute_reply": "2025-07-30T18:21:52.088205Z"
    },
    "papermill": {
     "duration": 0.00608,
     "end_time": "2025-07-30T18:21:52.089610",
     "exception": false,
     "start_time": "2025-07-30T18:21:52.083530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d3792aba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T18:21:52.094407Z",
     "iopub.status.busy": "2025-07-30T18:21:52.094212Z",
     "iopub.status.idle": "2025-07-30T20:23:36.659703Z",
     "shell.execute_reply": "2025-07-30T20:23:36.659030Z"
    },
    "papermill": {
     "duration": 7304.569836,
     "end_time": "2025-07-30T20:23:36.661195",
     "exception": false,
     "start_time": "2025-07-30T18:21:52.091359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753899733.477888      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753899742.687613      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">23,168</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,256</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m23,168\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,256\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">188,682</span> (737.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m188,682\u001b[0m (737.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">188,422</span> (736.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m188,422\u001b[0m (736.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753899753.257385      57 service.cc:148] XLA service 0x7b1d58008330 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753899753.258121      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753899756.509472      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 14.87903, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 86.6736 - mae: 6.4033 - val_loss: 14.8790 - val_mae: 3.0114 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 14.87903 to 8.76682, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 11.0225 - mae: 2.5184 - val_loss: 8.7668 - val_mae: 2.2882 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 8.76682 to 5.89146, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 5.3479 - mae: 1.7372 - val_loss: 5.8915 - val_mae: 1.8039 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 5.89146 to 2.44834, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 4.4177 - mae: 1.5306 - val_loss: 2.4483 - val_mae: 1.1923 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.44834 to 1.65057, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.6338 - mae: 1.1797 - val_loss: 1.6506 - val_mae: 0.9768 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.65057\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.6314 - mae: 1.1839 - val_loss: 1.6822 - val_mae: 1.0170 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.65057 to 1.34082, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.3618 - mae: 1.1159 - val_loss: 1.3408 - val_mae: 0.9086 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.34082\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9202 - mae: 1.0204 - val_loss: 2.4103 - val_mae: 1.1539 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 1.34082\n",
      "4375/4375 - 24s - 6ms/step - loss: 1.8333 - mae: 0.9767 - val_loss: 1.3559 - val_mae: 0.9048 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.34082\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3392 - mae: 0.8766 - val_loss: 5.2060 - val_mae: 1.6043 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 1.34082 to 0.80950, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2085 - mae: 0.8081 - val_loss: 0.8095 - val_mae: 0.7024 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.80950 to 0.72052, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8051 - mae: 0.8838 - val_loss: 0.7205 - val_mae: 0.6596 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.72052\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4030 - mae: 0.8360 - val_loss: 1.5009 - val_mae: 0.9383 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.72052\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5238 - mae: 0.8620 - val_loss: 1.0900 - val_mae: 0.8013 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.72052 to 0.63894, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9533 - mae: 0.7435 - val_loss: 0.6389 - val_mae: 0.6219 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.63894\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4434 - mae: 0.8158 - val_loss: 0.8817 - val_mae: 0.7298 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.63894\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4519 - mae: 0.8115 - val_loss: 0.8559 - val_mae: 0.7209 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.63894\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2290 - mae: 0.7472 - val_loss: 0.8663 - val_mae: 0.7349 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.63894\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2496 - mae: 0.7838 - val_loss: 0.8123 - val_mae: 0.6892 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.63894\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4976 - mae: 0.8574 - val_loss: 1.0116 - val_mae: 0.7786 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.63894\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3822 - mae: 0.8459 - val_loss: 1.0357 - val_mae: 0.8115 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.63894\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6112 - mae: 0.6083 - val_loss: 0.7392 - val_mae: 0.6609 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.63894 to 0.46774, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9673 - mae: 0.6614 - val_loss: 0.4677 - val_mae: 0.5342 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.46774\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8864 - mae: 0.6540 - val_loss: 1.0631 - val_mae: 0.7916 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.46774\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8795 - mae: 0.6763 - val_loss: 0.6943 - val_mae: 0.6477 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.46774\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0692 - mae: 0.6963 - val_loss: 0.5457 - val_mae: 0.5820 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.46774\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3773 - mae: 0.7335 - val_loss: 0.5391 - val_mae: 0.5719 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.46774\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1267 - mae: 0.7009 - val_loss: 0.8505 - val_mae: 0.7148 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.46774\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5007 - mae: 0.5510 - val_loss: 0.4741 - val_mae: 0.5469 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 0.46774 to 0.46310, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3693 - mae: 0.7257 - val_loss: 0.4631 - val_mae: 0.5326 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss improved from 0.46310 to 0.45255, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5114 - mae: 0.5461 - val_loss: 0.4526 - val_mae: 0.5278 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss improved from 0.45255 to 0.37213, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5035 - mae: 0.7327 - val_loss: 0.3721 - val_mae: 0.4715 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2138 - mae: 0.6862 - val_loss: 0.5575 - val_mae: 0.5752 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6302 - mae: 0.5823 - val_loss: 0.5689 - val_mae: 0.5920 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6975 - mae: 0.5848 - val_loss: 0.5424 - val_mae: 0.5887 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4145 - mae: 0.7173 - val_loss: 0.5382 - val_mae: 0.5725 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6174 - mae: 0.7898 - val_loss: 1.1081 - val_mae: 0.7866 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5839 - mae: 0.5867 - val_loss: 0.5847 - val_mae: 0.5996 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5722 - mae: 0.7994 - val_loss: 0.5340 - val_mae: 0.5684 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2504 - mae: 0.7163 - val_loss: 0.6674 - val_mae: 0.6311 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0569 - mae: 0.6339 - val_loss: 4.5366 - val_mae: 1.5529 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9571 - mae: 0.7088 - val_loss: 1.2997 - val_mae: 0.8784 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4808 - mae: 0.7819 - val_loss: 0.5719 - val_mae: 0.5889 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4332 - mae: 0.7823 - val_loss: 0.6753 - val_mae: 0.6333 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8986 - mae: 0.8508 - val_loss: 1.0165 - val_mae: 0.7772 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6460 - mae: 0.6229 - val_loss: 0.6371 - val_mae: 0.6229 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5770 - mae: 0.7922 - val_loss: 0.5359 - val_mae: 0.5601 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6348 - mae: 0.7880 - val_loss: 0.9635 - val_mae: 0.7513 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8127 - mae: 0.6825 - val_loss: 0.7593 - val_mae: 0.6744 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1995 - mae: 0.7458 - val_loss: 0.6699 - val_mae: 0.6307 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7714 - mae: 0.7977 - val_loss: 22.4056 - val_mae: 2.8530 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9787 - mae: 0.9740 - val_loss: 1.3036 - val_mae: 0.8827 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6831 - mae: 0.6372 - val_loss: 0.5878 - val_mae: 0.5860 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.37213\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4332 - mae: 0.5106 - val_loss: 0.3735 - val_mae: 0.4703 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.37213 to 0.28767, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3109 - mae: 0.4348 - val_loss: 0.2877 - val_mae: 0.4108 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.28767 to 0.24374, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2466 - mae: 0.3884 - val_loss: 0.2437 - val_mae: 0.3805 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.24374 to 0.21684, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2133 - mae: 0.3615 - val_loss: 0.2168 - val_mae: 0.3597 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.21684 to 0.19827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1872 - mae: 0.3389 - val_loss: 0.1983 - val_mae: 0.3445 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.19827 to 0.17482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1691 - mae: 0.3222 - val_loss: 0.1748 - val_mae: 0.3238 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.17482 to 0.15450, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1516 - mae: 0.3051 - val_loss: 0.1545 - val_mae: 0.3050 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.15450 to 0.15079, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1384 - mae: 0.2917 - val_loss: 0.1508 - val_mae: 0.3018 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.15079 to 0.14418, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1292 - mae: 0.2819 - val_loss: 0.1442 - val_mae: 0.2947 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.14418 to 0.12693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1208 - mae: 0.2728 - val_loss: 0.1269 - val_mae: 0.2776 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.12693 to 0.12147, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1139 - mae: 0.2650 - val_loss: 0.1215 - val_mae: 0.2715 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.12147\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1073 - mae: 0.2572 - val_loss: 0.1281 - val_mae: 0.2793 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.12147 to 0.11624, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1015 - mae: 0.2500 - val_loss: 0.1162 - val_mae: 0.2656 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.11624 to 0.11000, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0954 - mae: 0.2424 - val_loss: 0.1100 - val_mae: 0.2575 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.11000\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0912 - mae: 0.2371 - val_loss: 0.1108 - val_mae: 0.2570 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.11000 to 0.10323, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0877 - mae: 0.2326 - val_loss: 0.1032 - val_mae: 0.2489 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.10323 to 0.09810, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0845 - mae: 0.2288 - val_loss: 0.0981 - val_mae: 0.2427 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.09810 to 0.09755, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0812 - mae: 0.2238 - val_loss: 0.0975 - val_mae: 0.2430 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.09755\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0794 - mae: 0.2212 - val_loss: 0.1008 - val_mae: 0.2474 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.09755 to 0.08789, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0755 - mae: 0.2160 - val_loss: 0.0879 - val_mae: 0.2298 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.08789\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0744 - mae: 0.2144 - val_loss: 0.0929 - val_mae: 0.2373 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.08789\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0718 - mae: 0.2108 - val_loss: 0.0898 - val_mae: 0.2325 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.08789 to 0.08533, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0695 - mae: 0.2073 - val_loss: 0.0853 - val_mae: 0.2258 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.08533\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0677 - mae: 0.2040 - val_loss: 0.0884 - val_mae: 0.2301 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.08533 to 0.08201, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0659 - mae: 0.2018 - val_loss: 0.0820 - val_mae: 0.2205 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.08201 to 0.08062, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0646 - mae: 0.1998 - val_loss: 0.0806 - val_mae: 0.2205 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.08062 to 0.07930, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0638 - mae: 0.1987 - val_loss: 0.0793 - val_mae: 0.2183 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.07930 to 0.07796, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0621 - mae: 0.1961 - val_loss: 0.0780 - val_mae: 0.2154 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.07796 to 0.07755, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0608 - mae: 0.1940 - val_loss: 0.0775 - val_mae: 0.2147 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.07755 to 0.07464, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0592 - mae: 0.1916 - val_loss: 0.0746 - val_mae: 0.2109 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.07464\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0584 - mae: 0.1900 - val_loss: 0.0772 - val_mae: 0.2139 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.07464\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0572 - mae: 0.1881 - val_loss: 0.0789 - val_mae: 0.2177 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.07464\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0564 - mae: 0.1869 - val_loss: 0.0769 - val_mae: 0.2136 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.07464 to 0.07271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0560 - mae: 0.1856 - val_loss: 0.0727 - val_mae: 0.2087 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.07271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0546 - mae: 0.1837 - val_loss: 0.0749 - val_mae: 0.2123 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.07271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0535 - mae: 0.1822 - val_loss: 0.0746 - val_mae: 0.2118 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.07271 to 0.06647, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0531 - mae: 0.1814 - val_loss: 0.0665 - val_mae: 0.1988 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.06647\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0522 - mae: 0.1799 - val_loss: 0.0690 - val_mae: 0.2022 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.06647\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0517 - mae: 0.1790 - val_loss: 0.0700 - val_mae: 0.2044 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.06647\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0510 - mae: 0.1777 - val_loss: 0.0678 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.06647 to 0.06524, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0508 - mae: 0.1775 - val_loss: 0.0652 - val_mae: 0.1967 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.06524\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0501 - mae: 0.1762 - val_loss: 0.0675 - val_mae: 0.2008 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.06524\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0494 - mae: 0.1748 - val_loss: 0.0707 - val_mae: 0.2037 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.06524\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0490 - mae: 0.1740 - val_loss: 0.0667 - val_mae: 0.1976 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.06524 to 0.06468, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0488 - mae: 0.1736 - val_loss: 0.0647 - val_mae: 0.1976 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.06468\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0484 - mae: 0.1729 - val_loss: 0.0707 - val_mae: 0.2066 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.06468 to 0.06423, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0510 - mae: 0.1739 - val_loss: 0.0642 - val_mae: 0.1956 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.06423\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0470 - mae: 0.1708 - val_loss: 0.0700 - val_mae: 0.2054 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.06423\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0478 - mae: 0.1722 - val_loss: 0.0669 - val_mae: 0.2002 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.06423 to 0.06343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0479 - mae: 0.1718 - val_loss: 0.0634 - val_mae: 0.1937 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.06343\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0477 - mae: 0.1716 - val_loss: 0.0679 - val_mae: 0.2025 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.06343 to 0.06174, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0471 - mae: 0.1709 - val_loss: 0.0617 - val_mae: 0.1923 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.06174 to 0.06148, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0467 - mae: 0.1701 - val_loss: 0.0615 - val_mae: 0.1909 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.06148\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0464 - mae: 0.1694 - val_loss: 0.0650 - val_mae: 0.1965 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.06148 to 0.06099, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0464 - mae: 0.1695 - val_loss: 0.0610 - val_mae: 0.1895 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.06099\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0458 - mae: 0.1686 - val_loss: 0.0633 - val_mae: 0.1956 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.06099 to 0.05864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0610 - mae: 0.1675 - val_loss: 0.0586 - val_mae: 0.1865 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0442 - mae: 0.1654 - val_loss: 0.0603 - val_mae: 0.1894 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0463 - mae: 0.1690 - val_loss: 0.0661 - val_mae: 0.1971 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.05864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0464 - mae: 0.1693 - val_loss: 0.0634 - val_mae: 0.1948 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.05864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0465 - mae: 0.1695 - val_loss: 0.0625 - val_mae: 0.1932 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.05864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0460 - mae: 0.1682 - val_loss: 0.0644 - val_mae: 0.1964 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.05864\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0454 - mae: 0.1674 - val_loss: 0.0636 - val_mae: 0.1942 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0455 - mae: 0.1677 - val_loss: 0.0658 - val_mae: 0.1971 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0456 - mae: 0.1678 - val_loss: 0.0632 - val_mae: 0.1954 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0451 - mae: 0.1671 - val_loss: 0.0648 - val_mae: 0.1941 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0455 - mae: 0.1676 - val_loss: 0.0637 - val_mae: 0.1948 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0456 - mae: 0.1678 - val_loss: 0.0662 - val_mae: 0.1981 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0450 - mae: 0.1667 - val_loss: 0.0679 - val_mae: 0.2027 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0457 - mae: 0.1679 - val_loss: 0.0621 - val_mae: 0.1943 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.05864\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0453 - mae: 0.1673 - val_loss: 0.0606 - val_mae: 0.1904 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.05864\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0449 - mae: 0.1666 - val_loss: 0.0633 - val_mae: 0.1944 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.05864 to 0.05852, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0448 - mae: 0.1663 - val_loss: 0.0585 - val_mae: 0.1860 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.05852\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0466 - mae: 0.1682 - val_loss: 0.0608 - val_mae: 0.1917 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.05852\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0426 - mae: 0.1623 - val_loss: 0.0585 - val_mae: 0.1875 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.05852\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0444 - mae: 0.1654 - val_loss: 0.0610 - val_mae: 0.1914 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.05852 to 0.05791, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0448 - mae: 0.1661 - val_loss: 0.0579 - val_mae: 0.1863 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.05791\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0447 - mae: 0.1661 - val_loss: 0.0647 - val_mae: 0.1961 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.05791\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0437 - mae: 0.1640 - val_loss: 0.0635 - val_mae: 0.1949 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.05791\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0443 - mae: 0.1652 - val_loss: 0.0584 - val_mae: 0.1865 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.05791\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0443 - mae: 0.1651 - val_loss: 0.0588 - val_mae: 0.1873 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.05791\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0449 - mae: 0.1656 - val_loss: 0.0629 - val_mae: 0.1945 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.05791\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0431 - mae: 0.1630 - val_loss: 0.0611 - val_mae: 0.1912 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.05791\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0436 - mae: 0.1639 - val_loss: 0.0585 - val_mae: 0.1878 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.05791 to 0.05724, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0436 - mae: 0.1640 - val_loss: 0.0572 - val_mae: 0.1854 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0436 - mae: 0.1638 - val_loss: 0.0609 - val_mae: 0.1899 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0435 - mae: 0.1637 - val_loss: 0.0632 - val_mae: 0.1960 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0439 - mae: 0.1642 - val_loss: 0.0663 - val_mae: 0.2005 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0436 - mae: 0.1640 - val_loss: 0.0590 - val_mae: 0.1880 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0434 - mae: 0.1637 - val_loss: 0.0657 - val_mae: 0.2004 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0438 - mae: 0.1637 - val_loss: 0.0696 - val_mae: 0.2064 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0436 - mae: 0.1638 - val_loss: 0.0609 - val_mae: 0.1905 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0431 - mae: 0.1633 - val_loss: 0.0617 - val_mae: 0.1932 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0437 - mae: 0.1632 - val_loss: 0.0607 - val_mae: 0.1901 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0432 - mae: 0.1629 - val_loss: 0.0598 - val_mae: 0.1888 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0428 - mae: 0.1624 - val_loss: 0.0640 - val_mae: 0.1957 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0431 - mae: 0.1628 - val_loss: 0.0632 - val_mae: 0.1976 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.05724\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0440 - mae: 0.1643 - val_loss: 0.0576 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.05724 to 0.05611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0433 - mae: 0.1627 - val_loss: 0.0561 - val_mae: 0.1838 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.05611\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0429 - mae: 0.1624 - val_loss: 0.0603 - val_mae: 0.1913 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.05611\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0437 - mae: 0.1637 - val_loss: 0.0602 - val_mae: 0.1906 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.05611\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0425 - mae: 0.1616 - val_loss: 0.0621 - val_mae: 0.1938 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.05611\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0427 - mae: 0.1623 - val_loss: 0.0652 - val_mae: 0.1979 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.05611\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0429 - mae: 0.1625 - val_loss: 0.0588 - val_mae: 0.1868 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.05611\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0424 - mae: 0.1616 - val_loss: 0.0562 - val_mae: 0.1840 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss improved from 0.05611 to 0.05432, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0425 - mae: 0.1621 - val_loss: 0.0543 - val_mae: 0.1803 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0434 - mae: 0.1636 - val_loss: 0.0663 - val_mae: 0.1982 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0435 - mae: 0.1634 - val_loss: 0.0545 - val_mae: 0.1808 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0425 - mae: 0.1618 - val_loss: 0.0635 - val_mae: 0.1951 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0470 - mae: 0.1644 - val_loss: 0.0580 - val_mae: 0.1869 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0398 - mae: 0.1564 - val_loss: 0.0725 - val_mae: 0.2069 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0427 - mae: 0.1621 - val_loss: 0.0623 - val_mae: 0.1939 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0428 - mae: 0.1621 - val_loss: 0.0568 - val_mae: 0.1852 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0426 - mae: 0.1620 - val_loss: 0.0548 - val_mae: 0.1819 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0424 - mae: 0.1613 - val_loss: 0.0620 - val_mae: 0.1912 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0426 - mae: 0.1619 - val_loss: 0.0554 - val_mae: 0.1837 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0426 - mae: 0.1618 - val_loss: 0.0570 - val_mae: 0.1859 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0425 - mae: 0.1617 - val_loss: 0.0616 - val_mae: 0.1937 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0426 - mae: 0.1617 - val_loss: 0.0590 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0429 - mae: 0.1622 - val_loss: 0.0560 - val_mae: 0.1841 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0428 - mae: 0.1619 - val_loss: 0.0576 - val_mae: 0.1859 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0427 - mae: 0.1619 - val_loss: 0.0551 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0423 - mae: 0.1612 - val_loss: 0.0689 - val_mae: 0.2044 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0432 - mae: 0.1621 - val_loss: 0.0570 - val_mae: 0.1855 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0413 - mae: 0.1595 - val_loss: 0.0561 - val_mae: 0.1828 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.05432\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0424 - mae: 0.1612 - val_loss: 0.0582 - val_mae: 0.1857 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.05432 to 0.03537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0191 - mae: 0.1086 - val_loss: 0.0354 - val_mae: 0.1438 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.03537 to 0.03435, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0166 - mae: 0.1019 - val_loss: 0.0344 - val_mae: 0.1413 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.03435 to 0.03394, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0158 - mae: 0.0993 - val_loss: 0.0339 - val_mae: 0.1403 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.03394\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0153 - mae: 0.0978 - val_loss: 0.0343 - val_mae: 0.1410 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.03394\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0149 - mae: 0.0965 - val_loss: 0.0341 - val_mae: 0.1406 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.03394 to 0.03380, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0146 - mae: 0.0956 - val_loss: 0.0338 - val_mae: 0.1400 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.03380\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0143 - mae: 0.0946 - val_loss: 0.0339 - val_mae: 0.1399 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss improved from 0.03380 to 0.03364, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0141 - mae: 0.0941 - val_loss: 0.0336 - val_mae: 0.1391 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.03364\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0139 - mae: 0.0934 - val_loss: 0.0340 - val_mae: 0.1398 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.03364\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0138 - mae: 0.0930 - val_loss: 0.0337 - val_mae: 0.1393 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.03364\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0136 - mae: 0.0923 - val_loss: 0.0340 - val_mae: 0.1398 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.03364 to 0.03354, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0135 - mae: 0.0919 - val_loss: 0.0335 - val_mae: 0.1389 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.03354\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0134 - mae: 0.0915 - val_loss: 0.0337 - val_mae: 0.1394 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.03354\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0132 - mae: 0.0911 - val_loss: 0.0340 - val_mae: 0.1395 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.03354 to 0.03338, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0132 - mae: 0.0909 - val_loss: 0.0334 - val_mae: 0.1386 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0130 - mae: 0.0903 - val_loss: 0.0337 - val_mae: 0.1386 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0129 - mae: 0.0900 - val_loss: 0.0338 - val_mae: 0.1393 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0129 - mae: 0.0898 - val_loss: 0.0341 - val_mae: 0.1395 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0128 - mae: 0.0894 - val_loss: 0.0343 - val_mae: 0.1402 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0127 - mae: 0.0891 - val_loss: 0.0336 - val_mae: 0.1384 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0126 - mae: 0.0889 - val_loss: 0.0336 - val_mae: 0.1387 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0125 - mae: 0.0886 - val_loss: 0.0342 - val_mae: 0.1397 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0125 - mae: 0.0884 - val_loss: 0.0344 - val_mae: 0.1407 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0124 - mae: 0.0882 - val_loss: 0.0338 - val_mae: 0.1391 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0123 - mae: 0.0878 - val_loss: 0.0337 - val_mae: 0.1386 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0123 - mae: 0.0876 - val_loss: 0.0339 - val_mae: 0.1391 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0122 - mae: 0.0873 - val_loss: 0.0339 - val_mae: 0.1392 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0121 - mae: 0.0872 - val_loss: 0.0340 - val_mae: 0.1394 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0121 - mae: 0.0870 - val_loss: 0.0338 - val_mae: 0.1387 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0120 - mae: 0.0867 - val_loss: 0.0339 - val_mae: 0.1387 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0119 - mae: 0.0865 - val_loss: 0.0341 - val_mae: 0.1396 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0119 - mae: 0.0864 - val_loss: 0.0338 - val_mae: 0.1388 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0118 - mae: 0.0861 - val_loss: 0.0337 - val_mae: 0.1388 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0118 - mae: 0.0861 - val_loss: 0.0339 - val_mae: 0.1388 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.03338\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0117 - mae: 0.0858 - val_loss: 0.0341 - val_mae: 0.1392 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss improved from 0.03338 to 0.03288, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0102 - mae: 0.0798 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.03288 to 0.03285, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0100 - mae: 0.0791 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0100 - mae: 0.0790 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0100 - mae: 0.0789 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0788 - val_loss: 0.0329 - val_mae: 0.1365 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0329 - val_mae: 0.1363 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss improved from 0.03285 to 0.03285, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0328 - val_mae: 0.1363 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0329 - val_mae: 0.1363 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0785 - val_loss: 0.0329 - val_mae: 0.1363 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0785 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0785 - val_loss: 0.0329 - val_mae: 0.1363 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0784 - val_loss: 0.0329 - val_mae: 0.1365 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0784 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0330 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0330 - val_mae: 0.1365 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0329 - val_mae: 0.1364 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0097 - mae: 0.0775 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.03285\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss improved from 0.03285 to 0.03282, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1361 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-06\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1363 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1361 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0329 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.03282\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0328 - val_mae: 0.1362 - learning_rate: 1.0000e-07\n",
      "Epoch 289: early stopping\n",
      "Restoring model weights from the end of the best epoch: 239.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.2146 m\n",
      "Median positioning error: 0.1884 m\n",
      "90th percentile error: 0.3834 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeZxT1d0/8M9NJpPMvrEMIKuAyq4gKO4tKmLdaq2tbVWsVq22Vnx+rbRVxNba2kerVVrbutv61NbdSlFEaEVRFNyQRfZNZoZZM2smk3t+f4TEyUwCk5mce05OPu/Xixdwb3LO93vOvefkTJIzlhBCgIiIiIiIiIiUc6kOgIiIiIiIiIjCuEgnIiIiIiIi0gQX6URERERERESa4CKdiIiIiIiISBNcpBMRERERERFpgot0IiIiIiIiIk1wkU5ERERERESkCS7SiYiIiIiIiDTBRToRERERERGRJrhIJyIiclhlZSW+9rWvoaysDJZl4d5771UdUtTll1+OESNG9Oixt912GyzLkhrPihUrYFkWVqxYIbUeIiIiXXCRTkREaWfr1q24+uqrMWrUKPh8PhQWFuKEE07Afffdh9bW1ujjRowYAcuyYFkWXC4XiouLMXHiRHzve9/Du+++G7fsyOO7/ikvL09Z/DfeeCNeffVVzJ8/H08++SRmz56d8LGdY3C5XBg8eDDOOOMMxxatLS0tuO222zJykfzYY48lvB4sy8I777yjOkQiIjKQJYQQqoMgIiLqqVdeeQUXXXQRvF4vLr30UkyYMAHt7e1YuXIlnn32WVx++eX485//DCC8SC8pKcFNN90EAGhsbMSGDRvwz3/+ExUVFbjxxhtxzz33xJRvWRZOP/10XHrppTHHc3JycOGFF6Ykh/LycsyaNQt//etfD/nYzvEIIbB9+3b84Q9/QFVVFV555RWcddZZKYkpIhgMwrZteL1eAEB1dTX69++PBQsW4Lbbbot5bEdHBzo6OuDz+VIaQ2e2baO9vR3Z2dlwuZx9b+Gxxx7D3Llzcfvtt2PkyJHdzs+ePRv9+vVzNCYiIjJfluoAiIiIemr79u34xje+geHDh+ONN97AoEGDoueuu+46bNmyBa+88krMc4YMGYJvf/vbMcd+85vf4JJLLsHvfvc7jBkzBtdee23M+bFjx3Z7TipVVVWhuLi4x4/vGs8FF1yASZMm4d577035It3j8fT4sVlZWcjKkvtSwuVySf0hQE+cddZZmDZtWlLP6ejogG3byM7O7nauubkZeXl5vY5HCIG2tjbk5OT0ugwiItIXP+5ORERp46677kJTUxMefvjhmAV6xOjRo3HDDTccspycnBw8+eSTKC0txR133IFUfahs27ZtuOiii1BaWorc3Fwcd9xxMT80iHx8WgiBRYsWRT82nayJEyeiX79+2L59e/TYG2+8gZNOOgl5eXkoLi7Geeedhw0bNsQ8r7GxET/60Y8wYsQIeL1eDBgwAKeffjrWrl0bfUzn76Tv2LED/fv3BwAsXLgwGm/kHfV430nv6OjAL37xCxx++OHwer0YMWIEfvrTnyIQCMQ8bsSIEfjKV76ClStXYvr06fD5fBg1ahSeeOKJmMfF+076qaeeigkTJmD9+vU47bTTkJubiyFDhuCuu+7q1lY7d+7Eueeei7y8PAwYMCD6VYNUfs99x44dsCwL//u//4t77703mvv69eujbbR+/XpccsklKCkpwYknntirtnr11Vcxbdo05OTk4E9/+lNKYiciIv3wnXQiIkobL7/8MkaNGoWZM2f2uaz8/HxccMEFePjhh7F+/XqMHz8+eq6trQ3V1dUxjy8oKIh+BDyeyspKzJw5Ey0tLfjhD3+IsrIyPP744zj33HPxzDPP4IILLsDJJ5+MJ598Et/5znfifqS+p+rq6lBXV4fRo0cDAF5//XWcddZZGDVqFG677Ta0trbi/vvvxwknnIC1a9dGF93XXHMNnnnmGVx//fUYN24campqsHLlSmzYsAHHHHNMt3r69++PP/7xj7j22mtxwQUX4Ktf/SoAYNKkSQlju/LKK/H444/ja1/7Gm666Sa8++67uPPOO7FhwwY8//zzMY/dsmULvva1r+G73/0uLrvsMjzyyCO4/PLLMXXq1Jj+SNQGs2fPxle/+lV8/etfxzPPPIOf/OQnmDhxYvTTBc3NzfjSl76Effv24YYbbkB5eTmeeuopLF++vMdtDQANDQ3drgfLslBWVhZz7NFHH0VbWxu+973vwev1orS0NHruoosuwpgxY/CrX/0q+kOhZNpq06ZN+OY3v4mrr74aV111FY444oikciAiojQiiIiI0kBDQ4MAIM4777weP2f48OHi7LPPTnj+d7/7nQAgXnzxxegxAHH/PProowet60c/+pEAIN58883oscbGRjFy5EgxYsQIEQqFYuq47rrrepQDAPHd735X7N+/X1RVVYl3331XfPnLXxYAxN133y2EEGLKlCliwIABoqamJvq8jz76SLhcLnHppZdGjxUVFR2y3ssuu0wMHz48+v/9+/cLAGLBggXdHrtgwQLR+aXEhx9+KACIK6+8MuZx//M//yMAiDfeeCN6bPjw4QKA+O9//xs9VlVVJbxer7jpppuix5YvXy4AiOXLl0ePnXLKKQKAeOKJJ6LHAoGAKC8vFxdeeGH02N133y0AiBdeeCF6rLW1VRx55JHdyozn0UcfTXg9eL3e6OO2b98uAIjCwkJRVVUVt42++c1vxhzvTVstWbLkoPESEZEZ+HF3IiJKC36/H0D4He1Uyc/PBxD+GHhn5513HpYuXRrz58wzzzxoWYsXL8b06dOjH2WOlP+9730PO3bswPr163sd58MPP4z+/ftjwIABmDFjBt566y3MmzcPP/rRj7Bv3z58+OGHuPzyy2PeuZ00aRJOP/10LF68OHqsuLgY7777Lj7//PNex3IwkbrmzZsXczyycV/X/QLGjRuHk046Kfr//v3744gjjsC2bdsOWVd+fn7M9/Szs7Mxffr0mOcuWbIEQ4YMwbnnnhs95vP5cNVVVyWRFbBo0aJu18O///3vbo+78MILo18P6Oqaa66J+X+ybTVy5MhDXoNERGQGftydiIjSQmFhIYDuC+q+aGpqAtB94X/YYYdh1qxZSZW1c+dOzJgxo9vxo446Knp+woQJvYrzvPPOw/XXXw/LslBQUIDx48dHNx7buXMnAMT9+PNRRx2FV199NbpR2V133YXLLrsMQ4cOxdSpUzFnzhxceumlGDVqVK/i6mrnzp1wuVzRj+FHlJeXo7i4OBprxLBhw7qVUVJSgrq6ukPWddhhh3X7PnxJSQk+/vjjmHgOP/zwbo/rGt+hTJ8+vUcbx8XbAT7RuWTb6mBlExGRWfhOOhERpYXCwkIMHjwY69atS1mZkbKSXbQ5LfJDgy9/+cuYPn16r3cG//rXv45t27bh/vvvx+DBg/Hb3/4W48ePj/uucF/0dDM8t9sd97jowUZ+fXmuLAfbbT3RuZ62FXdyJyLKHFykExFR2vjKV76CrVu3YtWqVX0uq6mpCc8//zyGDh0afbe7L4YPH45NmzZ1O75x48boeRki5Saqu1+/fjGL+kGDBuH73/8+XnjhBWzfvh1lZWW44447EpafzO7zw4cPh23b2Lx5c8zxyspK1NfXS2uDg8WzdevWbgv3LVu2OBpHPLq1FRER6YOLdCIiShs//vGPkZeXhyuvvBKVlZXdzm/duhX33XffIctpbW3Fd77zHdTW1uJnP/tZr34NWldz5szB6tWrY36A0NzcjD//+c8YMWIExo0b1+c64hk0aBCmTJmCxx9/HPX19dHj69atw2uvvYY5c+YAAEKhEBoaGmKeO2DAAAwePLjbr/zqLDc3FwBiyk4kUte9994bc/yee+4BAJx99tmHLCOVzjzzTOzduxcvvfRS9FhbWxv+8pe/OBpHPLq1FRER6YPfSSciorRx+OGH46mnnsLFF1+Mo446CpdeeikmTJiA9vZ2vP322/jnP/+Jyy+/POY5e/fuxV//+lcA4XfP169fj3/+85+oqKjATTfdhKuvvjolsd188834v//7P5x11ln44Q9/iNLSUjz++OPYvn07nn32Wbhc8n4u/tvf/hZnnXUWjj/+eHz3u9+N/gq2oqKi6O80b2xsxGGHHYavfe1rmDx5MvLz8/H666/jvffew913352w7JycHIwbNw5PP/00xo4di9LSUkyYMCHu9+snT56Myy67DH/+859RX1+PU045BatXr8bjjz+O888/H6eddpqsJojr6quvxgMPPIBvfvObuOGGGzBo0CD87W9/g8/nA9DzTwn8+9//jn4iorOZM2f2+vv8urUVERHpg4t0IiJKK+eeey4+/vhj/Pa3v8WLL76IP/7xj/B6vZg0aRLuvvvubjt3f/jhh/jOd74T3XRt6NChOOecc3DllVdi+vTpKYtr4MCBePvtt/GTn/wE999/P9ra2jBp0iS8/PLL0t8VnTVrFpYsWYIFCxbg1ltvhcfjwSmnnILf/OY30Q3HcnNz8f3vfx+vvfYannvuOdi2jdGjR+MPf/gDrr322oOW/9BDD+EHP/gBbrzxRrS3t2PBggUJN8F76KGHMGrUKDz22GN4/vnnUV5ejvnz52PBggUpz/tQ8vPz8cYbb+AHP/gB7rvvPuTn5+PSSy/FzJkzceGFF0YX64dy6623xj3+6KOP9mnTPZ3aioiI9GEJlTusEBERETns3nvvxY033og9e/ZgyJAhqsMhIiKKwUU6ERERGau1tTVmZ/S2tjYc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msx36tSpuOmmm3DppZdiw4YNWLVqFU499VRccMEF+Pe//13vvtdccw1uv/12XHDBBVi6dCnWr1+Pe++9Fx999BH+97//AQCSkpKQk5PT5MfR16xZg6ysLLz22mvYvHkz7rnnHtx9992N2kxJSUFBQQH27duHb775BjfeeCNeffVVDB48GPn5+U3Wt23bNuTn5+Pdd9/F5s2bcd5557V4cTGgbjXxphY3TEpKCvsvFMTHxyMrKyusMQPx9v2x//3yyy8B719TU9Nom3cl/lA193EtxUk6ERFZ5lBZNe757w8AgOuHd8JTV5wkxaJMRESqW7VqFR588EE89thjePTRRzFs2DDk5eVhzJgxeP/993HttdciKysL5513Hl566aVGj3/55Zdx4YUXIiMjo952p9OJnJwc33/x8fGIjY2tt8274nUg3377LR577DE88sgjmDJlCrp27YpevXrhgQcewO23344pU6Zg7969AIB33nkHr7/+Ot5880383//9HwYPHoy8vDxccMEF+OKLLzBq1KiQ+uX666/Hk08+idNPPx2dO3fG1VdfjYkTJzZ6oULTNOTk5CA3Nxe9evXCDTfcgBUrVqC8vBx/+9vfmmwnKysLubm5OO2003Dffffhxx9/xI4dOwAAzzzzDLp164asrCz06tULr776qu9xhmHg/vvvR4cOHRAbG4s2bdrg1ltv9d1+7Mfd8/LyAAAXXXQRNE3z/d3w4+66rmPGjBlo164dYmNj0b9/fyxcuNB3++7du6FpGj744AOMGjUKCQkJ6NevH1auXOm7T8NPRnjbePXVV5GXl4fU1FRcccUVKCsr892nrKwMV111FRITE5Gbm4snnngCI0eOxO23337cvvP2/bH/ZWdn+24fOXIkJk+ejNtvvx2tWrXC2LFjfZ9g+OyzzzBw4EDExsbi66+/RnV1NW699VZkZWUhLi4Op556KlavXu2LFehxVuMknZSkaRoSEhL45N8PlfpG5lpE52Zl+8G2daS8GhPnrUJZVS1ObJuKe87p1eQ76GbUIXpsiFSh0rEUbC2GYaCiptby/6pq9RZ/FP/1119HUlISbrnlFr+3eydcN9xwA7744ot671Tu3r0bX375JW644YYW5RDIm2++iaSkJPzxj39stFr6HXfcAbfbjffff99XR48ePXDBBRc0iqNpGlJTUwO2E+xK7KWlpY1ejPAnKysLv//97zF//vyQ3hWPj48HUPeO73//+1/cdtttmDJliu8d+okTJ2Lp0qUA6r6e8MQTT+DZZ5/F9u3b8eGHH+LEE0/0G9c72Xz55ZdRUFBQb/J5rCeffBKPPfYYZs2ahY0bN2Ls2LE4//zzsX379nr3u+eeezB16lSsX78e3bt3x5VXXnncd5V37tyJDz/8EJ988gk++eQTLF++HA899JDv9ilTpmDFihWYP38+Fi1ahK+++gpr164Nut+O55VXXoHT6cSKFSswd+5c3/a77roLDz30ELZs2YK+ffvizjvvxPvvv49XXnkFa9euRdeuXTF27FgUFRXVi9fwceHA1d0p6nkvttSYSn0jcy2ic7Oy/WDaWrenGLe9tR57iiqQkejErEv7BfURdzPqED02FFm4untgKh1LwdZS6fag932fW5BRYz/OGIsEZ/PfX9u+fTs6d+4Mh8Nx3PuNHTsWbdq0wcsvv+xbfO3VV19F+/btceaZZza7/eP56aef0KVLF8TGNl6bpE2bNkhJSfF9/3n79u3o0aNHyG0EuxL7N998g7fffhuffvppUDF79eqFsrIyHDlyJKiPfxcUFGDWrFlo27YtevTogZtuugnXXXcdbr75ZrhcLgwYMADfffcdZs2ahVGjRmHPnj3IycnB6NGj4XA40KFDBwwZMsRv7NatWwOoe8ElJycnYA6zZs3C3/72N1xxxRUAgIcffhhLly7F7NmzMWfOHN/9pk6dinPOOQcAMH36dPTp0wc7duxAz549/cbVdR3z5s3z/VLCNddcgyVLluCBBx5AWVkZXnnlFbzxxhu+/ejll19GmzZtmuyz0tJSJCUl1ds2YsQIfPbZZ76/u3XrhkceecT3d0FBAQBgxowZGDNmDADg6NGjeOaZZzBv3jycffbZAIDnn38eixYtwosvvoi//vWvvscf+7hw4eruFPUMw0Bpaam0C8CIpFLfyFyL6NysbL+ptvYWVeCGV77HnqIKtE2Lxzt/PAU9coL7qSMz6hA9NhRZuLp7YCodS5FQS0tzC/bxdrsd1157LebNm+dbvfyVV17BddddZ+pvghuG4fv+7/FybW4/GIaBcePGISkpCUlJSejTp0+j+2zatAkXXHABpk2bhrPOOiuomN53lpuagLVr1w6JiYlo06YNjh49ivfffx9OpxNbtmzB8OHD6913+PDh2LJlCwDg0ksvRWVlJTp37oxJkybhv//9b4u+I+1yuZCfn3/cNr2OfQc5NzcXAHDw4MGAsfPy8ur9lGFubq7v/rt27YLb7a73AkNqampQL7gkJydj/fr19f574YUX6t1n4MCBfh87aNAg3//v3LkTbre7Xu0OhwNDhgxpVPuxjwuXUPZdvpNOSjIMA263G4ZhKPExvHBSqW9krkV0bla2f7y21u8twXUvr0JJhRu9c1Pw1h9PRkrc8d/FCTa2GfkSUfBUOpaCrSXeYcePM8ZamNlvE8F4R8t+j7t79+74+uuv4Xa7m3w3/frrr8fMmTPxxRdfwOPxYO/evZg4cWKL2g8mt5qamkYvBOTn58PlcqF79+6++27durVZ7cydOxdutxuapjXqgx9//BFnnnkmbrzxRvz9738POubWrVuRkpLS5MJsX331FVJSUpCVlVVvItuU9u3bY9u2bVi8eDEWLVqEW265BY8++iiWL1/e5Di21LHxvcfF8X5poGE+mqY165cJGrLZbOjatetx75OYmBjS9qY093HHw9XdiYhIuO0HyjDhxe9QUuHGiW1T8fy1g0KaoBMRyUbTNCQ4Y4T819IXQn7/+9+jvLwcTz/9tN/bS0pKfP/fpUsXnH766XjppZcwb948nHnmmejYsWOL2j+eK664AuXl5Xj22Wcb3TZr1iw4HA5ccsklAOrq+Omnn/DRRx81uq/3ExGBtG3bFl27dkXXrl3r1bN582aMGjUK1157LR544IGg8z548CDeeustXHjhhU1+yqBTp07o0qVLowl6r169sGLFinrbVqxYgd69e/v+jo+Px3nnnYennnoKy5Ytw8qVK/HDDz/4bcfhcBz3+/EpKSlo06ZNk22Gm/erFsd+T760tNSSn3Hz6tKli+97615utxurV682tfbm4DvpREQUdgdcVbju5dVwVdViQIc0vHrDUCTG8pJDRCTK0KFDceedd+KOO+7A/v37cdFFF6FNmzbYsWMH5s6di1NPPRW33Xab7/433HADJk2aBACNPlrcXB6PB+vXr6+3LTY2Fqeccgpuu+023HnnnaiqqsLFF1+M2tpavPbaa3jyyScxe/ZstG/fHgBw2WWX4b///S+uvPJK/P3vf8dZZ52F1q1b44cffsATTzyBP//5z7jwwguDzmnTpk0444wzMHbsWEyZMgWFhYUA6j72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P25dX331FXbu3ImlS5filVdewbx58+p9zH7ChAnIz8/HsmXL8P777+O5555r1sf+/Zk1axb69euHdevW4d577wUAVFRU4OGHH8YLL7yAzZs3IysrC9dddx2+//57zJ8/HytXroRhGBg/fny9FxP8Pa45du7ciQ8//BCffPIJPvnkEyxfvhwPPfSQ7/aZM2fiP//5D+bOnYvNmzfjL3/5C66++mosX768ZZ0hAU7SiYgI8zfkY8KLq1CrGxjbJxtf3DESAzqki06LiEhKJc+8hd19L8buvhejckX972q7f8n33XboricaPbbg6rt8tzfkenOB77byT5o/0Rg6dCjmzZuHhQsX4plnnsHPP/+MESNG+N6FLCwshNPpbLRQV3Z2NgoLCwEAd911F2JiYtC1a1d89NFHeOGFF7B9+3a88soruPfee3HTTTehc+fOuOyyy1BaWhpUXjNnzsRVV12F22+/Hd26dcOwYcPw1FNP4T//+Q+qqqqCirF9+3bMnTsXgwYNQnJyMmbNmoW//e1vuOKKK9CjRw88/PDD6N+/v+/d5T179qBbt2449dRT0bFjR5x66qm48sor/cZu3bo1ACAzMxM5OTnIyMhodJ+jR4/imWeewaOPPoqzzz4bvXv3xnPPPYf4+Hi8+OKL9e77wAMP4PTTT0fv3r1x11134ZtvvjlunWlpafjXv/6Fnj174txzz8U555zj+9761q1bsXjxYjz//PMYOnQoBgwYgBdeeAGVlZVN9tkPP/zg+3i997+bbrqp3n3OOOMM3HHHHejSpQu6dOkCoO5TE08//TSGDRuGHj16YP/+/Zg/fz5eeOEFjBgxAv369cPrr7+O/fv311t8r+HjEhISmszRH13XMW/ePJxwwgkYMWIErrnmGl9/VFdX48EHH8RLL72EsWPHonPnzrjuuutw9dVX49lnn21WezLhd9KJiKLcR+v34453NqBWN3DOibl49NK+cBzn4+1ERNFOL6uAp+AQAMCorql/o0f33aaXljV8KDxHSny3N2RUVP0WtzK4Sas/3oXQAKBv374YOnQoOnbsiHfeeQc33HBDUDFSU1Pxxhtv+D6CHhMTgzPPPBOPPvooXn/9dezatQvbtm3DpEmTMGPGjEaLyPmzYcMGbNy4Ea+//rpvm2EY0HUdP//8c8DFzEpLS5GUlARd11FVVYVTTz0VL7zw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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7327.775258,
   "end_time": "2025-07-30T20:23:40.519062",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T18:21:32.743804",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
