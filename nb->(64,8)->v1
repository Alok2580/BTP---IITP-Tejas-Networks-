{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a57784d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-01T13:33:31.420109Z",
     "iopub.status.busy": "2025-08-01T13:33:31.419540Z",
     "iopub.status.idle": "2025-08-01T13:33:32.859294Z",
     "shell.execute_reply": "2025-08-01T13:33:32.858488Z"
    },
    "papermill": {
     "duration": 1.444502,
     "end_time": "2025-08-01T13:33:32.860479",
     "exception": false,
     "start_time": "2025-08-01T13:33:31.415977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "38eea1c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:33:32.865949Z",
     "iopub.status.busy": "2025-08-01T13:33:32.865644Z",
     "iopub.status.idle": "2025-08-01T13:33:46.624796Z",
     "shell.execute_reply": "2025-08-01T13:33:46.624160Z"
    },
    "papermill": {
     "duration": 13.763258,
     "end_time": "2025-08-01T13:33:46.626198",
     "exception": false,
     "start_time": "2025-08-01T13:33:32.862940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-01 13:33:34.357502: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754055214.537115      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754055214.590042      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6ba43d60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:33:46.631575Z",
     "iopub.status.busy": "2025-08-01T13:33:46.630883Z",
     "iopub.status.idle": "2025-08-01T13:33:46.635085Z",
     "shell.execute_reply": "2025-08-01T13:33:46.634588Z"
    },
    "papermill": {
     "duration": 0.007776,
     "end_time": "2025-08-01T13:33:46.636191",
     "exception": false,
     "start_time": "2025-08-01T13:33:46.628415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 7   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 2 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0b3e0871",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:33:46.640494Z",
     "iopub.status.busy": "2025-08-01T13:33:46.640309Z",
     "iopub.status.idle": "2025-08-01T13:33:46.643584Z",
     "shell.execute_reply": "2025-08-01T13:33:46.642884Z"
    },
    "papermill": {
     "duration": 0.006689,
     "end_time": "2025-08-01T13:33:46.644686",
     "exception": false,
     "start_time": "2025-08-01T13:33:46.637997",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "38d480df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-01T13:33:46.649552Z",
     "iopub.status.busy": "2025-08-01T13:33:46.649348Z",
     "iopub.status.idle": "2025-08-01T18:54:19.161501Z",
     "shell.execute_reply": "2025-08-01T18:54:19.160684Z"
    },
    "papermill": {
     "duration": 19232.516278,
     "end_time": "2025-08-01T18:54:19.162753",
     "exception": false,
     "start_time": "2025-08-01T13:33:46.646475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754055252.378053      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754055261.806117      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block_1     │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">330,122</span> (1.26 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m330,122\u001b[0m (1.26 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">329,862</span> (1.26 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m329,862\u001b[0m (1.26 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754055275.957210      56 service.cc:148] XLA service 0x7b4f48001c30 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754055275.958181      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754055280.021683      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 478.08716, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 489.6956 - mae: 17.5599 - val_loss: 478.0872 - val_mae: 17.3783 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss did not improve from 478.08716\n",
      "4375/4375 - 40s - 9ms/step - loss: 485.6998 - mae: 17.5099 - val_loss: 478.6744 - val_mae: 17.3844 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 478.08716\n",
      "4375/4375 - 39s - 9ms/step - loss: 484.9576 - mae: 17.4957 - val_loss: 481.9357 - val_mae: 17.4190 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 478.08716\n",
      "4375/4375 - 41s - 9ms/step - loss: 484.9010 - mae: 17.4916 - val_loss: 478.8521 - val_mae: 17.3828 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 478.08716\n",
      "4375/4375 - 41s - 9ms/step - loss: 484.5774 - mae: 17.4918 - val_loss: 481.2501 - val_mae: 17.4128 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 478.08716\n",
      "4375/4375 - 41s - 9ms/step - loss: 484.0127 - mae: 17.4809 - val_loss: 478.5688 - val_mae: 17.3816 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 478.08716\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.9807 - mae: 17.4837 - val_loss: 478.6053 - val_mae: 17.3920 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 478.08716\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.7582 - mae: 17.4811 - val_loss: 480.4084 - val_mae: 17.4212 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 478.08716\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.5854 - mae: 17.4745 - val_loss: 478.9119 - val_mae: 17.3885 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 478.08716\n",
      "4375/4375 - 41s - 9ms/step - loss: 484.4138 - mae: 17.4874 - val_loss: 479.0119 - val_mae: 17.3883 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 478.08716 to 478.05371, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.6635 - mae: 17.4814 - val_loss: 478.0537 - val_mae: 17.3756 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 478.05371\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.6151 - mae: 17.4769 - val_loss: 478.0654 - val_mae: 17.3756 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 478.05371\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.4907 - mae: 17.4762 - val_loss: 479.2234 - val_mae: 17.3902 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 478.05371\n",
      "4375/4375 - 41s - 9ms/step - loss: 483.4696 - mae: 17.4753 - val_loss: 478.4479 - val_mae: 17.3797 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 478.05371 to 247.57628, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 449.8279 - mae: 16.7456 - val_loss: 247.5763 - val_mae: 12.5275 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 247.57628 to 142.35338, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 155.0667 - mae: 10.0128 - val_loss: 142.3534 - val_mae: 9.5584 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 142.35338\n",
      "4375/4375 - 41s - 9ms/step - loss: 143.2691 - mae: 9.5833 - val_loss: 161.4252 - val_mae: 10.1745 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 142.35338 to 104.36808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 173.2558 - mae: 10.4242 - val_loss: 104.3681 - val_mae: 8.2149 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 104.36808\n",
      "4375/4375 - 40s - 9ms/step - loss: 89.3878 - mae: 7.6046 - val_loss: 105.0491 - val_mae: 8.3565 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 104.36808\n",
      "4375/4375 - 40s - 9ms/step - loss: 112.7494 - mae: 8.4205 - val_loss: 115.8514 - val_mae: 8.7353 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 104.36808\n",
      "4375/4375 - 40s - 9ms/step - loss: 132.0208 - mae: 9.1285 - val_loss: 119.4480 - val_mae: 8.5932 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 104.36808\n",
      "4375/4375 - 40s - 9ms/step - loss: 188.1373 - mae: 10.4619 - val_loss: 120.2179 - val_mae: 8.6462 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 104.36808 to 40.58741, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 72.8890 - mae: 6.5419 - val_loss: 40.5874 - val_mae: 4.9241 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 40.58741\n",
      "4375/4375 - 40s - 9ms/step - loss: 68.7383 - mae: 6.1644 - val_loss: 142.7751 - val_mae: 8.6272 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 40.58741\n",
      "4375/4375 - 40s - 9ms/step - loss: 45.4127 - mae: 5.0431 - val_loss: 59.5653 - val_mae: 5.9777 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 40.58741 to 29.65340, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 40.7493 - mae: 4.8747 - val_loss: 29.6534 - val_mae: 4.1603 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 29.65340\n",
      "4375/4375 - 40s - 9ms/step - loss: 76.0099 - mae: 6.3061 - val_loss: 59.5737 - val_mae: 5.8120 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 29.65340\n",
      "4375/4375 - 40s - 9ms/step - loss: 82.4999 - mae: 6.6656 - val_loss: 65.2004 - val_mae: 5.9597 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 29.65340\n",
      "4375/4375 - 40s - 9ms/step - loss: 72.6533 - mae: 6.1027 - val_loss: 84.8383 - val_mae: 6.6364 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 29.65340\n",
      "4375/4375 - 40s - 9ms/step - loss: 85.0165 - mae: 6.7791 - val_loss: 71.6121 - val_mae: 6.4083 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 29.65340\n",
      "4375/4375 - 40s - 9ms/step - loss: 79.4917 - mae: 6.5602 - val_loss: 71.1531 - val_mae: 6.2968 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 29.65340\n",
      "4375/4375 - 41s - 9ms/step - loss: 68.6493 - mae: 6.1189 - val_loss: 64.3018 - val_mae: 6.1677 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 29.65340\n",
      "4375/4375 - 41s - 9ms/step - loss: 41.2133 - mae: 4.7994 - val_loss: 69.9048 - val_mae: 6.1766 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss improved from 29.65340 to 21.95030, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 44.0898 - mae: 4.8934 - val_loss: 21.9503 - val_mae: 3.5986 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 51.9129 - mae: 5.1982 - val_loss: 56.6043 - val_mae: 5.6937 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 53.0640 - mae: 5.3604 - val_loss: 36.3031 - val_mae: 4.6033 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 60.2666 - mae: 5.6538 - val_loss: 44.9002 - val_mae: 5.0465 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 60.6207 - mae: 5.6886 - val_loss: 58.3070 - val_mae: 5.6101 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 36.9098 - mae: 4.4887 - val_loss: 32.5070 - val_mae: 4.3679 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 49.6097 - mae: 5.0598 - val_loss: 57.6469 - val_mae: 5.5369 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 21.95030\n",
      "4375/4375 - 40s - 9ms/step - loss: 95.0275 - mae: 6.9915 - val_loss: 80.3470 - val_mae: 6.7513 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 67.2511 - mae: 5.9522 - val_loss: 44.9695 - val_mae: 4.9169 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 53.4206 - mae: 5.2720 - val_loss: 132.1058 - val_mae: 7.7650 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 128.1374 - mae: 8.1746 - val_loss: 200.2356 - val_mae: 10.8738 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 156.4769 - mae: 9.7206 - val_loss: 122.4703 - val_mae: 8.6898 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 127.2174 - mae: 8.7029 - val_loss: 99.6492 - val_mae: 7.7690 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 153.0403 - mae: 9.3880 - val_loss: 127.4072 - val_mae: 8.6978 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 105.6470 - mae: 7.7993 - val_loss: 147.6618 - val_mae: 9.5917 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 123.9791 - mae: 8.5158 - val_loss: 221.6790 - val_mae: 10.7564 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 116.8514 - mae: 8.1809 - val_loss: 101.9383 - val_mae: 7.4877 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 21.95030\n",
      "4375/4375 - 42s - 9ms/step - loss: 147.3236 - mae: 9.2669 - val_loss: 126.6178 - val_mae: 9.0082 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 90.2386 - mae: 7.3769 - val_loss: 47.6637 - val_mae: 5.3783 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 64.7269 - mae: 6.0810 - val_loss: 47.1984 - val_mae: 5.2890 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 54: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 115.1394 - mae: 8.0153 - val_loss: 68.9241 - val_mae: 6.2422 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 52.7224 - mae: 5.4736 - val_loss: 44.9163 - val_mae: 5.0642 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 37.4469 - mae: 4.6392 - val_loss: 31.9852 - val_mae: 4.3058 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 21.95030\n",
      "4375/4375 - 41s - 9ms/step - loss: 27.4034 - mae: 3.9877 - val_loss: 25.1792 - val_mae: 3.7797 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 21.95030 to 19.72973, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 21.2203 - mae: 3.5059 - val_loss: 19.7297 - val_mae: 3.3623 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 19.72973 to 14.75527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 16.4960 - mae: 3.0959 - val_loss: 14.7553 - val_mae: 2.9310 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 14.75527 to 12.27004, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 13.2019 - mae: 2.7723 - val_loss: 12.2700 - val_mae: 2.6703 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 12.27004 to 10.51380, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 11.0939 - mae: 2.5313 - val_loss: 10.5138 - val_mae: 2.4702 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 10.51380 to 8.62259, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 9.0712 - mae: 2.3004 - val_loss: 8.6226 - val_mae: 2.2286 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 8.62259 to 7.46354, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 7.7106 - mae: 2.1219 - val_loss: 7.4635 - val_mae: 2.0762 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 7.46354 to 6.23229, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 6.7199 - mae: 1.9716 - val_loss: 6.2323 - val_mae: 1.8881 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 6.23229 to 5.45275, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 5.6758 - mae: 1.8159 - val_loss: 5.4527 - val_mae: 1.7657 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 5.45275 to 4.97822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 4.9211 - mae: 1.6891 - val_loss: 4.9782 - val_mae: 1.6868 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 4.97822 to 4.48714, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 4.3017 - mae: 1.5781 - val_loss: 4.4871 - val_mae: 1.6040 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 4.48714 to 3.69970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 3.8205 - mae: 1.4920 - val_loss: 3.6997 - val_mae: 1.4569 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 3.69970 to 3.25763, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 3.2187 - mae: 1.3751 - val_loss: 3.2576 - val_mae: 1.3673 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 3.25763 to 2.90102, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 9ms/step - loss: 2.8069 - mae: 1.2824 - val_loss: 2.9010 - val_mae: 1.2943 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 2.90102 to 2.50113, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.4810 - mae: 1.2052 - val_loss: 2.5011 - val_mae: 1.1968 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 2.50113\n",
      "4375/4375 - 41s - 9ms/step - loss: 2.2311 - mae: 1.1386 - val_loss: 2.5139 - val_mae: 1.1949 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 2.50113 to 2.10972, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.9128 - mae: 1.0659 - val_loss: 2.1097 - val_mae: 1.1032 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 2.10972 to 1.88709, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.7120 - mae: 1.0067 - val_loss: 1.8871 - val_mae: 1.0331 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 1.88709 to 1.70537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.6382 - mae: 0.9677 - val_loss: 1.7054 - val_mae: 0.9781 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 1.70537 to 1.51554, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.4220 - mae: 0.9160 - val_loss: 1.5155 - val_mae: 0.9231 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 1.51554 to 1.44620, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.4629 - mae: 0.9078 - val_loss: 1.4462 - val_mae: 0.9057 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 1.44620 to 1.40886, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2351 - mae: 0.8483 - val_loss: 1.4089 - val_mae: 0.9024 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 1.40886 to 1.38522, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 1.2517 - mae: 0.8484 - val_loss: 1.3852 - val_mae: 0.8885 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 1.38522 to 1.18318, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.0803 - mae: 0.8035 - val_loss: 1.1832 - val_mae: 0.8273 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 1.18318\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.0182 - mae: 0.7787 - val_loss: 1.2636 - val_mae: 0.8385 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 1.18318 to 1.04698, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.9123 - mae: 0.7403 - val_loss: 1.0470 - val_mae: 0.7744 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 1.04698\n",
      "4375/4375 - 40s - 9ms/step - loss: 1.0889 - mae: 0.7387 - val_loss: 1.1854 - val_mae: 0.7777 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 1.04698 to 0.96202, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.8389 - mae: 0.7023 - val_loss: 0.9620 - val_mae: 0.7415 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.96202 to 0.94050, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.8578 - mae: 0.7041 - val_loss: 0.9405 - val_mae: 0.7256 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.94050 to 0.84463, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6977 - mae: 0.6500 - val_loss: 0.8446 - val_mae: 0.6924 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.84463\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6715 - mae: 0.6362 - val_loss: 0.8461 - val_mae: 0.6888 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.84463\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.6862 - mae: 0.6339 - val_loss: 0.9419 - val_mae: 0.7464 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.84463 to 0.69531, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5816 - mae: 0.5938 - val_loss: 0.6953 - val_mae: 0.6279 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.69531\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5548 - mae: 0.5790 - val_loss: 0.6996 - val_mae: 0.6320 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.69531 to 0.60367, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5457 - mae: 0.5703 - val_loss: 0.6037 - val_mae: 0.5911 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.60367 to 0.57198, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5130 - mae: 0.5553 - val_loss: 0.5720 - val_mae: 0.5714 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.57198\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4969 - mae: 0.5443 - val_loss: 0.6690 - val_mae: 0.6076 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.57198 to 0.53052, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4468 - mae: 0.5205 - val_loss: 0.5305 - val_mae: 0.5455 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.53052\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4293 - mae: 0.5102 - val_loss: 1.9678 - val_mae: 0.8051 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.53052 to 0.48401, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4312 - mae: 0.5074 - val_loss: 0.4840 - val_mae: 0.5247 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.48401\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3954 - mae: 0.4896 - val_loss: 0.5081 - val_mae: 0.5371 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.48401 to 0.45561, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.4278 - mae: 0.4926 - val_loss: 0.4556 - val_mae: 0.5113 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.45561\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3544 - mae: 0.4656 - val_loss: 0.4980 - val_mae: 0.5382 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.45561\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.5022 - mae: 0.5088 - val_loss: 0.4773 - val_mae: 0.5244 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.45561 to 0.44561, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3543 - mae: 0.4630 - val_loss: 0.4456 - val_mae: 0.5112 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.44561 to 0.39435, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3577 - mae: 0.4588 - val_loss: 0.3944 - val_mae: 0.4735 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.39435 to 0.39036, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3037 - mae: 0.4307 - val_loss: 0.3904 - val_mae: 0.4737 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.39036 to 0.35693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2955 - mae: 0.4251 - val_loss: 0.3569 - val_mae: 0.4504 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.35693 to 0.35164, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2891 - mae: 0.4184 - val_loss: 0.3516 - val_mae: 0.4531 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.35164 to 0.33696, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2655 - mae: 0.4026 - val_loss: 0.3370 - val_mae: 0.4422 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.33696 to 0.31766, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.3732 - mae: 0.4245 - val_loss: 0.3177 - val_mae: 0.4243 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.31766 to 0.29650, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2420 - mae: 0.3856 - val_loss: 0.2965 - val_mae: 0.4114 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.29650\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2496 - mae: 0.3906 - val_loss: 0.3182 - val_mae: 0.4312 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.29650\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2542 - mae: 0.3892 - val_loss: 0.3103 - val_mae: 0.4194 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.29650 to 0.28750, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2301 - mae: 0.3755 - val_loss: 0.2875 - val_mae: 0.4009 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.28750 to 0.28551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2409 - mae: 0.3773 - val_loss: 0.2855 - val_mae: 0.4085 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.28551 to 0.28106, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.2595 - mae: 0.3822 - val_loss: 0.2811 - val_mae: 0.4017 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss improved from 0.28106 to 0.25261, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2187 - mae: 0.3635 - val_loss: 0.2526 - val_mae: 0.3822 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.25261\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2124 - mae: 0.3609 - val_loss: 0.2677 - val_mae: 0.3981 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.25261\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2101 - mae: 0.3595 - val_loss: 0.2638 - val_mae: 0.3858 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.25261\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2034 - mae: 0.3521 - val_loss: 0.2616 - val_mae: 0.3904 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.25261\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1890 - mae: 0.3413 - val_loss: 0.2814 - val_mae: 0.3852 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.25261 to 0.21429, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2180 - mae: 0.3489 - val_loss: 0.2143 - val_mae: 0.3516 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.21429\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.2514 - mae: 0.3572 - val_loss: 0.2391 - val_mae: 0.3569 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.21429\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1750 - mae: 0.3285 - val_loss: 0.2410 - val_mae: 0.3721 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.21429\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1897 - mae: 0.3395 - val_loss: 0.2340 - val_mae: 0.3686 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.21429\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1749 - mae: 0.3274 - val_loss: 0.2505 - val_mae: 0.3802 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.21429\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1691 - mae: 0.3222 - val_loss: 0.2165 - val_mae: 0.3576 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.21429\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1627 - mae: 0.3170 - val_loss: 0.2649 - val_mae: 0.3951 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.21429\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1606 - mae: 0.3143 - val_loss: 0.2359 - val_mae: 0.3686 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.21429 to 0.20661, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1579 - mae: 0.3076 - val_loss: 0.2066 - val_mae: 0.3336 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.20661 to 0.20011, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1515 - mae: 0.3057 - val_loss: 0.2001 - val_mae: 0.3439 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.20011 to 0.18218, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3017 - mae: 0.3543 - val_loss: 0.1822 - val_mae: 0.3269 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.18218\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1390 - mae: 0.2929 - val_loss: 0.1827 - val_mae: 0.3314 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.18218 to 0.17941, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1713 - mae: 0.3088 - val_loss: 0.1794 - val_mae: 0.3222 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.17941\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1447 - mae: 0.2977 - val_loss: 0.1933 - val_mae: 0.3372 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.17941\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1435 - mae: 0.2967 - val_loss: 0.1909 - val_mae: 0.3280 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.17941\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1533 - mae: 0.3009 - val_loss: 0.2002 - val_mae: 0.3305 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.17941 to 0.16989, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1264 - mae: 0.2794 - val_loss: 0.1699 - val_mae: 0.3092 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.16989 to 0.16495, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1351 - mae: 0.2875 - val_loss: 0.1650 - val_mae: 0.3047 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.16495\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1308 - mae: 0.2832 - val_loss: 0.2094 - val_mae: 0.3533 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.16495\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1280 - mae: 0.2807 - val_loss: 0.1720 - val_mae: 0.3134 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.16495\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1244 - mae: 0.2767 - val_loss: 0.1940 - val_mae: 0.3169 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss improved from 0.16495 to 0.15628, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1650 - mae: 0.2838 - val_loss: 0.1563 - val_mae: 0.3038 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.15628 to 0.15425, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1195 - mae: 0.2692 - val_loss: 0.1543 - val_mae: 0.2906 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.15425\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1227 - mae: 0.2742 - val_loss: 0.1610 - val_mae: 0.3065 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.15425\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1208 - mae: 0.2704 - val_loss: 0.1749 - val_mae: 0.3119 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.15425 to 0.13456, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1250 - mae: 0.2726 - val_loss: 0.1346 - val_mae: 0.2834 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.13456\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1175 - mae: 0.2640 - val_loss: 0.1480 - val_mae: 0.2893 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.13456\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1184 - mae: 0.2674 - val_loss: 0.1514 - val_mae: 0.3029 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.13456\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.1209 - mae: 0.2665 - val_loss: 0.1473 - val_mae: 0.2948 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.13456\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1099 - mae: 0.2601 - val_loss: 0.1592 - val_mae: 0.3008 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.13456\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1090 - mae: 0.2592 - val_loss: 0.1592 - val_mae: 0.3058 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.13456\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1065 - mae: 0.2564 - val_loss: 0.1586 - val_mae: 0.3050 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.13456 to 0.13343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1056 - mae: 0.2549 - val_loss: 0.1334 - val_mae: 0.2840 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.13343 to 0.12585, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1042 - mae: 0.2533 - val_loss: 0.1258 - val_mae: 0.2744 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.12585 to 0.11854, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1229 - mae: 0.2682 - val_loss: 0.1185 - val_mae: 0.2669 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.11854\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0976 - mae: 0.2452 - val_loss: 0.1376 - val_mae: 0.2866 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.11854 to 0.11848, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1260 - mae: 0.2633 - val_loss: 0.1185 - val_mae: 0.2640 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.11848\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0968 - mae: 0.2417 - val_loss: 0.1335 - val_mae: 0.2811 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.11848\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1018 - mae: 0.2492 - val_loss: 0.1373 - val_mae: 0.2869 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.11848\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1023 - mae: 0.2509 - val_loss: 0.1460 - val_mae: 0.2970 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.11848\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1033 - mae: 0.2516 - val_loss: 0.2237 - val_mae: 0.3107 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.11848\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1150 - mae: 0.2536 - val_loss: 0.1412 - val_mae: 0.2908 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.11848\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0975 - mae: 0.2455 - val_loss: 0.1430 - val_mae: 0.2945 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.11848\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1016 - mae: 0.2496 - val_loss: 0.1361 - val_mae: 0.2873 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.11848 to 0.11093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0991 - mae: 0.2464 - val_loss: 0.1109 - val_mae: 0.2588 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0968 - mae: 0.2444 - val_loss: 0.1306 - val_mae: 0.2768 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.1057 - mae: 0.2499 - val_loss: 0.1648 - val_mae: 0.3181 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0953 - mae: 0.2412 - val_loss: 0.1393 - val_mae: 0.2931 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0932 - mae: 0.2400 - val_loss: 0.1379 - val_mae: 0.2908 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0968 - mae: 0.2434 - val_loss: 0.1118 - val_mae: 0.2595 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0932 - mae: 0.2394 - val_loss: 0.1128 - val_mae: 0.2622 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0921 - mae: 0.2380 - val_loss: 0.1261 - val_mae: 0.2713 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.11093\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0924 - mae: 0.2343 - val_loss: 0.1234 - val_mae: 0.2696 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.11093 to 0.10161, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0918 - mae: 0.2365 - val_loss: 0.1016 - val_mae: 0.2485 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.10161\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0933 - mae: 0.2289 - val_loss: 0.1109 - val_mae: 0.2567 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.10161\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0891 - mae: 0.2332 - val_loss: 0.1079 - val_mae: 0.2542 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.10161\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0884 - mae: 0.2332 - val_loss: 0.1255 - val_mae: 0.2727 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.10161\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0891 - mae: 0.2343 - val_loss: 0.1420 - val_mae: 0.2844 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.10161\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0859 - mae: 0.2303 - val_loss: 0.1224 - val_mae: 0.2602 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.10161\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0924 - mae: 0.2363 - val_loss: 0.1257 - val_mae: 0.2736 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.10161 to 0.10003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0845 - mae: 0.2282 - val_loss: 0.1000 - val_mae: 0.2414 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0856 - mae: 0.2292 - val_loss: 0.1158 - val_mae: 0.2627 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0883 - mae: 0.2306 - val_loss: 0.3390 - val_mae: 0.4451 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0910 - mae: 0.2295 - val_loss: 0.1154 - val_mae: 0.2486 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0836 - mae: 0.2271 - val_loss: 0.1157 - val_mae: 0.2506 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0841 - mae: 0.2276 - val_loss: 0.1298 - val_mae: 0.2789 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0819 - mae: 0.2246 - val_loss: 0.1331 - val_mae: 0.2809 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0836 - mae: 0.2266 - val_loss: 0.1170 - val_mae: 0.2540 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0815 - mae: 0.2219 - val_loss: 0.1178 - val_mae: 0.2504 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0806 - mae: 0.2228 - val_loss: 0.1408 - val_mae: 0.2470 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0806 - mae: 0.2227 - val_loss: 0.1203 - val_mae: 0.2466 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0812 - mae: 0.2234 - val_loss: 0.1046 - val_mae: 0.2467 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0775 - mae: 0.2184 - val_loss: 0.1042 - val_mae: 0.2526 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0794 - mae: 0.2210 - val_loss: 0.1069 - val_mae: 0.2486 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.10003\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0806 - mae: 0.2214 - val_loss: 0.1240 - val_mae: 0.2683 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.10003 to 0.09781, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0768 - mae: 0.2176 - val_loss: 0.0978 - val_mae: 0.2399 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.09781\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0790 - mae: 0.2204 - val_loss: 0.1238 - val_mae: 0.2719 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.09781\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0772 - mae: 0.2178 - val_loss: 0.1003 - val_mae: 0.2373 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.09781\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0781 - mae: 0.2188 - val_loss: 0.1040 - val_mae: 0.2523 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.09781\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0764 - mae: 0.2162 - val_loss: 0.1066 - val_mae: 0.2516 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.09781\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0762 - mae: 0.2167 - val_loss: 0.0995 - val_mae: 0.2462 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.09781 to 0.08493, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0820 - mae: 0.2210 - val_loss: 0.0849 - val_mae: 0.2261 - learning_rate: 1.0000e-03\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.08493\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0725 - mae: 0.2108 - val_loss: 0.0957 - val_mae: 0.2429 - learning_rate: 1.0000e-03\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.08493\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0739 - mae: 0.2134 - val_loss: 0.0996 - val_mae: 0.2456 - learning_rate: 1.0000e-03\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.08493\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0752 - mae: 0.2148 - val_loss: 0.0974 - val_mae: 0.2406 - learning_rate: 1.0000e-03\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.08493\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0751 - mae: 0.2143 - val_loss: 0.0996 - val_mae: 0.2454 - learning_rate: 1.0000e-03\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.08493\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0761 - mae: 0.2147 - val_loss: 0.0897 - val_mae: 0.2343 - learning_rate: 1.0000e-03\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.08493\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0746 - mae: 0.2139 - val_loss: 0.1018 - val_mae: 0.2479 - learning_rate: 1.0000e-03\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.08493\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0720 - mae: 0.2107 - val_loss: 0.1108 - val_mae: 0.2587 - learning_rate: 1.0000e-03\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.08493 to 0.08447, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0754 - mae: 0.2140 - val_loss: 0.0845 - val_mae: 0.2279 - learning_rate: 1.0000e-03\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.08447\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0727 - mae: 0.2075 - val_loss: 0.0932 - val_mae: 0.2361 - learning_rate: 1.0000e-03\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.08447\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0712 - mae: 0.2087 - val_loss: 0.0900 - val_mae: 0.2365 - learning_rate: 1.0000e-03\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.08447\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0729 - mae: 0.2118 - val_loss: 0.0929 - val_mae: 0.2378 - learning_rate: 1.0000e-03\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.08447\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0722 - mae: 0.2101 - val_loss: 0.0953 - val_mae: 0.2409 - learning_rate: 1.0000e-03\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.08447\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0712 - mae: 0.2095 - val_loss: 0.0926 - val_mae: 0.2382 - learning_rate: 1.0000e-03\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.08447\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0716 - mae: 0.2094 - val_loss: 0.0972 - val_mae: 0.2417 - learning_rate: 1.0000e-03\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss improved from 0.08447 to 0.07881, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0706 - mae: 0.2065 - val_loss: 0.0788 - val_mae: 0.2181 - learning_rate: 1.0000e-03\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.07881 to 0.07731, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0741 - mae: 0.2093 - val_loss: 0.0773 - val_mae: 0.2176 - learning_rate: 1.0000e-03\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.07731\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0663 - mae: 0.2020 - val_loss: 0.1015 - val_mae: 0.2477 - learning_rate: 1.0000e-03\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss improved from 0.07731 to 0.07618, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0702 - mae: 0.2076 - val_loss: 0.0762 - val_mae: 0.2154 - learning_rate: 1.0000e-03\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.07618\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0709 - mae: 0.2084 - val_loss: 0.0848 - val_mae: 0.2258 - learning_rate: 1.0000e-03\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.07618\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0682 - mae: 0.2051 - val_loss: 0.0961 - val_mae: 0.2412 - learning_rate: 1.0000e-03\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.07618\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0689 - mae: 0.2054 - val_loss: 0.0937 - val_mae: 0.2377 - learning_rate: 1.0000e-03\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.07618\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0686 - mae: 0.2052 - val_loss: 0.0860 - val_mae: 0.2252 - learning_rate: 1.0000e-03\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.07618\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0671 - mae: 0.2032 - val_loss: 0.0977 - val_mae: 0.2439 - learning_rate: 1.0000e-03\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.07618 to 0.07315, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0742 - mae: 0.2076 - val_loss: 0.0732 - val_mae: 0.2113 - learning_rate: 1.0000e-03\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.07315\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0671 - mae: 0.2031 - val_loss: 0.1231 - val_mae: 0.2713 - learning_rate: 1.0000e-03\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.07315\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0659 - mae: 0.2016 - val_loss: 0.0838 - val_mae: 0.2195 - learning_rate: 1.0000e-03\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.07315\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0966 - mae: 0.2237 - val_loss: 0.0874 - val_mae: 0.2311 - learning_rate: 1.0000e-03\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.07315 to 0.07300, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0660 - mae: 0.2020 - val_loss: 0.0730 - val_mae: 0.2085 - learning_rate: 1.0000e-03\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0698 - mae: 0.2065 - val_loss: 0.0791 - val_mae: 0.2215 - learning_rate: 1.0000e-03\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0674 - mae: 0.2034 - val_loss: 0.0909 - val_mae: 0.2347 - learning_rate: 1.0000e-03\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0675 - mae: 0.2039 - val_loss: 0.0986 - val_mae: 0.2476 - learning_rate: 1.0000e-03\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0667 - mae: 0.2025 - val_loss: 0.0821 - val_mae: 0.2253 - learning_rate: 1.0000e-03\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0680 - mae: 0.2041 - val_loss: 0.0783 - val_mae: 0.2158 - learning_rate: 1.0000e-03\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0664 - mae: 0.2016 - val_loss: 0.0852 - val_mae: 0.2260 - learning_rate: 1.0000e-03\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0665 - mae: 0.2016 - val_loss: 0.0911 - val_mae: 0.2370 - learning_rate: 1.0000e-03\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0678 - mae: 0.2033 - val_loss: 0.0815 - val_mae: 0.2243 - learning_rate: 1.0000e-03\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0648 - mae: 0.1983 - val_loss: 0.0798 - val_mae: 0.2180 - learning_rate: 1.0000e-03\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0652 - mae: 0.2003 - val_loss: 0.0831 - val_mae: 0.2235 - learning_rate: 1.0000e-03\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0646 - mae: 0.1994 - val_loss: 0.0802 - val_mae: 0.2193 - learning_rate: 1.0000e-03\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0639 - mae: 0.1980 - val_loss: 0.0905 - val_mae: 0.2336 - learning_rate: 1.0000e-03\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.07300\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0638 - mae: 0.1977 - val_loss: 0.0913 - val_mae: 0.2359 - learning_rate: 1.0000e-03\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss improved from 0.07300 to 0.06940, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0630 - mae: 0.1964 - val_loss: 0.0694 - val_mae: 0.2044 - learning_rate: 1.0000e-03\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0634 - mae: 0.1970 - val_loss: 0.0756 - val_mae: 0.2132 - learning_rate: 1.0000e-03\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0635 - mae: 0.1972 - val_loss: 0.0757 - val_mae: 0.2130 - learning_rate: 1.0000e-03\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0626 - mae: 0.1965 - val_loss: 0.0780 - val_mae: 0.2182 - learning_rate: 1.0000e-03\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0620 - mae: 0.1952 - val_loss: 0.0719 - val_mae: 0.2094 - learning_rate: 1.0000e-03\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0618 - mae: 0.1950 - val_loss: 0.0921 - val_mae: 0.2361 - learning_rate: 1.0000e-03\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0630 - mae: 0.1957 - val_loss: 0.0893 - val_mae: 0.2297 - learning_rate: 1.0000e-03\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0610 - mae: 0.1940 - val_loss: 0.0766 - val_mae: 0.2146 - learning_rate: 1.0000e-03\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0619 - mae: 0.1947 - val_loss: 0.0710 - val_mae: 0.2074 - learning_rate: 1.0000e-03\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0637 - mae: 0.1949 - val_loss: 0.0724 - val_mae: 0.2100 - learning_rate: 1.0000e-03\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0588 - mae: 0.1900 - val_loss: 0.0736 - val_mae: 0.2118 - learning_rate: 1.0000e-03\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0603 - mae: 0.1923 - val_loss: 0.0694 - val_mae: 0.2075 - learning_rate: 1.0000e-03\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0618 - mae: 0.1950 - val_loss: 0.0798 - val_mae: 0.2229 - learning_rate: 1.0000e-03\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0591 - mae: 0.1904 - val_loss: 0.0711 - val_mae: 0.2083 - learning_rate: 1.0000e-03\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0598 - mae: 0.1915 - val_loss: 0.0826 - val_mae: 0.2235 - learning_rate: 1.0000e-03\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0603 - mae: 0.1921 - val_loss: 0.0787 - val_mae: 0.2178 - learning_rate: 1.0000e-03\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.06940\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0602 - mae: 0.1920 - val_loss: 0.0853 - val_mae: 0.2307 - learning_rate: 1.0000e-03\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss improved from 0.06940 to 0.06412, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0614 - mae: 0.1935 - val_loss: 0.0641 - val_mae: 0.1968 - learning_rate: 1.0000e-03\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.06412\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0566 - mae: 0.1865 - val_loss: 0.0710 - val_mae: 0.2059 - learning_rate: 1.0000e-03\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.06412\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0590 - mae: 0.1907 - val_loss: 0.0712 - val_mae: 0.2089 - learning_rate: 1.0000e-03\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.06412\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0598 - mae: 0.1912 - val_loss: 0.0716 - val_mae: 0.2100 - learning_rate: 1.0000e-03\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.06412\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0578 - mae: 0.1885 - val_loss: 0.0704 - val_mae: 0.2065 - learning_rate: 1.0000e-03\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.06412\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0584 - mae: 0.1888 - val_loss: 0.0743 - val_mae: 0.2127 - learning_rate: 1.0000e-03\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.06412\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0586 - mae: 0.1895 - val_loss: 0.0857 - val_mae: 0.2322 - learning_rate: 1.0000e-03\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.06412\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0580 - mae: 0.1888 - val_loss: 0.0792 - val_mae: 0.2171 - learning_rate: 1.0000e-03\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss improved from 0.06412 to 0.06044, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0617 - mae: 0.1936 - val_loss: 0.0604 - val_mae: 0.1922 - learning_rate: 1.0000e-03\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0580 - mae: 0.1888 - val_loss: 0.0768 - val_mae: 0.2200 - learning_rate: 1.0000e-03\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0581 - mae: 0.1888 - val_loss: 0.0898 - val_mae: 0.2284 - learning_rate: 1.0000e-03\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0591 - mae: 0.1905 - val_loss: 0.0822 - val_mae: 0.2256 - learning_rate: 1.0000e-03\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0583 - mae: 0.1896 - val_loss: 0.0880 - val_mae: 0.2324 - learning_rate: 1.0000e-03\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0607 - mae: 0.1902 - val_loss: 0.0805 - val_mae: 0.2189 - learning_rate: 1.0000e-03\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0576 - mae: 0.1876 - val_loss: 0.0675 - val_mae: 0.2037 - learning_rate: 1.0000e-03\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0589 - mae: 0.1894 - val_loss: 0.0810 - val_mae: 0.2236 - learning_rate: 1.0000e-03\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0564 - mae: 0.1863 - val_loss: 0.0623 - val_mae: 0.1957 - learning_rate: 1.0000e-03\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0570 - mae: 0.1871 - val_loss: 0.0697 - val_mae: 0.2063 - learning_rate: 1.0000e-03\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0592 - mae: 0.1898 - val_loss: 0.0724 - val_mae: 0.2088 - learning_rate: 1.0000e-03\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0580 - mae: 0.1886 - val_loss: 0.0746 - val_mae: 0.2140 - learning_rate: 1.0000e-03\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0579 - mae: 0.1885 - val_loss: 0.0687 - val_mae: 0.2057 - learning_rate: 1.0000e-03\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.06044\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0563 - mae: 0.1859 - val_loss: 0.0827 - val_mae: 0.2246 - learning_rate: 1.0000e-03\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss improved from 0.06044 to 0.05538, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0576 - mae: 0.1879 - val_loss: 0.0554 - val_mae: 0.1849 - learning_rate: 1.0000e-03\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.05538\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0565 - mae: 0.1860 - val_loss: 0.0667 - val_mae: 0.2016 - learning_rate: 1.0000e-03\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.05538\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0667 - mae: 0.1913 - val_loss: 0.0641 - val_mae: 0.1975 - learning_rate: 1.0000e-03\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.05538\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0490 - mae: 0.1740 - val_loss: 0.0699 - val_mae: 0.2033 - learning_rate: 1.0000e-03\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.05538\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0550 - mae: 0.1837 - val_loss: 0.0866 - val_mae: 0.2305 - learning_rate: 1.0000e-03\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.05538\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0571 - mae: 0.1873 - val_loss: 0.0653 - val_mae: 0.2004 - learning_rate: 1.0000e-03\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.05538\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0574 - mae: 0.1877 - val_loss: 0.0814 - val_mae: 0.2223 - learning_rate: 1.0000e-03\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.05538\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0561 - mae: 0.1853 - val_loss: 0.0803 - val_mae: 0.2223 - learning_rate: 1.0000e-03\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.05538\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0561 - mae: 0.1857 - val_loss: 0.0667 - val_mae: 0.2012 - learning_rate: 1.0000e-03\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0561 - mae: 0.1855 - val_loss: 0.0665 - val_mae: 0.2012 - learning_rate: 1.0000e-03\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0548 - mae: 0.1833 - val_loss: 0.0721 - val_mae: 0.2115 - learning_rate: 1.0000e-03\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0552 - mae: 0.1840 - val_loss: 0.0916 - val_mae: 0.2278 - learning_rate: 1.0000e-03\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0557 - mae: 0.1847 - val_loss: 0.0750 - val_mae: 0.2124 - learning_rate: 1.0000e-03\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0564 - mae: 0.1852 - val_loss: 0.0652 - val_mae: 0.1996 - learning_rate: 1.0000e-03\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0543 - mae: 0.1827 - val_loss: 0.0613 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0554 - mae: 0.1841 - val_loss: 0.0709 - val_mae: 0.2096 - learning_rate: 1.0000e-03\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0563 - mae: 0.1853 - val_loss: 0.0727 - val_mae: 0.2110 - learning_rate: 1.0000e-03\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0546 - mae: 0.1829 - val_loss: 0.0596 - val_mae: 0.1911 - learning_rate: 1.0000e-03\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0571 - mae: 0.1870 - val_loss: 0.0658 - val_mae: 0.2011 - learning_rate: 1.0000e-03\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0542 - mae: 0.1825 - val_loss: 0.0627 - val_mae: 0.1956 - learning_rate: 1.0000e-03\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.05538\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0552 - mae: 0.1838 - val_loss: 0.0667 - val_mae: 0.2028 - learning_rate: 1.0000e-03\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss improved from 0.05538 to 0.03291, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0182 - mae: 0.1060 - val_loss: 0.0329 - val_mae: 0.1406 - learning_rate: 1.0000e-04\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss improved from 0.03291 to 0.03105, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0148 - mae: 0.0962 - val_loss: 0.0310 - val_mae: 0.1365 - learning_rate: 1.0000e-04\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.03105\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0135 - mae: 0.0921 - val_loss: 0.0311 - val_mae: 0.1366 - learning_rate: 1.0000e-04\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss improved from 0.03105 to 0.03078, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0128 - mae: 0.0895 - val_loss: 0.0308 - val_mae: 0.1354 - learning_rate: 1.0000e-04\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss improved from 0.03078 to 0.03029, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0122 - mae: 0.0875 - val_loss: 0.0303 - val_mae: 0.1346 - learning_rate: 1.0000e-04\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss improved from 0.03029 to 0.02942, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0118 - mae: 0.0859 - val_loss: 0.0294 - val_mae: 0.1322 - learning_rate: 1.0000e-04\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02942\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0114 - mae: 0.0847 - val_loss: 0.0296 - val_mae: 0.1328 - learning_rate: 1.0000e-04\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.02942\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0111 - mae: 0.0834 - val_loss: 0.0299 - val_mae: 0.1335 - learning_rate: 1.0000e-04\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.02942\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0109 - mae: 0.0826 - val_loss: 0.0298 - val_mae: 0.1331 - learning_rate: 1.0000e-04\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.02942\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0106 - mae: 0.0816 - val_loss: 0.0297 - val_mae: 0.1327 - learning_rate: 1.0000e-04\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.02942\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0105 - mae: 0.0812 - val_loss: 0.0294 - val_mae: 0.1324 - learning_rate: 1.0000e-04\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss improved from 0.02942 to 0.02905, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0103 - mae: 0.0803 - val_loss: 0.0290 - val_mae: 0.1313 - learning_rate: 1.0000e-04\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.02905\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0101 - mae: 0.0795 - val_loss: 0.0294 - val_mae: 0.1322 - learning_rate: 1.0000e-04\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.02905\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0099 - mae: 0.0790 - val_loss: 0.0293 - val_mae: 0.1318 - learning_rate: 1.0000e-04\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0295 - val_mae: 0.1320 - learning_rate: 1.0000e-04\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.02905\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0097 - mae: 0.0781 - val_loss: 0.0294 - val_mae: 0.1318 - learning_rate: 1.0000e-04\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0095 - mae: 0.0775 - val_loss: 0.0295 - val_mae: 0.1321 - learning_rate: 1.0000e-04\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0094 - mae: 0.0771 - val_loss: 0.0295 - val_mae: 0.1321 - learning_rate: 1.0000e-04\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.02905\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0093 - mae: 0.0765 - val_loss: 0.0291 - val_mae: 0.1311 - learning_rate: 1.0000e-04\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0092 - mae: 0.0761 - val_loss: 0.0294 - val_mae: 0.1322 - learning_rate: 1.0000e-04\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.02905\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0091 - mae: 0.0757 - val_loss: 0.0294 - val_mae: 0.1317 - learning_rate: 1.0000e-04\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0091 - mae: 0.0754 - val_loss: 0.0297 - val_mae: 0.1325 - learning_rate: 1.0000e-04\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0089 - mae: 0.0750 - val_loss: 0.0292 - val_mae: 0.1311 - learning_rate: 1.0000e-04\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0089 - mae: 0.0748 - val_loss: 0.0293 - val_mae: 0.1314 - learning_rate: 1.0000e-04\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.02905\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0088 - mae: 0.0743 - val_loss: 0.0295 - val_mae: 0.1316 - learning_rate: 1.0000e-04\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.02905\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0087 - mae: 0.0739 - val_loss: 0.0292 - val_mae: 0.1312 - learning_rate: 1.0000e-04\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0086 - mae: 0.0736 - val_loss: 0.0294 - val_mae: 0.1313 - learning_rate: 1.0000e-04\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0086 - mae: 0.0732 - val_loss: 0.0299 - val_mae: 0.1326 - learning_rate: 1.0000e-04\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0085 - mae: 0.0730 - val_loss: 0.0293 - val_mae: 0.1309 - learning_rate: 1.0000e-04\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0084 - mae: 0.0728 - val_loss: 0.0293 - val_mae: 0.1313 - learning_rate: 1.0000e-04\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0084 - mae: 0.0724 - val_loss: 0.0296 - val_mae: 0.1320 - learning_rate: 1.0000e-04\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.02905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0083 - mae: 0.0723 - val_loss: 0.0299 - val_mae: 0.1324 - learning_rate: 1.0000e-04\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss improved from 0.02905 to 0.02819, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0065 - mae: 0.0639 - val_loss: 0.0282 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss improved from 0.02819 to 0.02812, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0064 - mae: 0.0632 - val_loss: 0.0281 - val_mae: 0.1281 - learning_rate: 1.0000e-05\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.02812\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0063 - mae: 0.0629 - val_loss: 0.0281 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.02812\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0063 - mae: 0.0627 - val_loss: 0.0281 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss improved from 0.02812 to 0.02810, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0063 - mae: 0.0626 - val_loss: 0.0281 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0063 - mae: 0.0625 - val_loss: 0.0281 - val_mae: 0.1281 - learning_rate: 1.0000e-05\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.02810\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0062 - mae: 0.0624 - val_loss: 0.0281 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.02810\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0062 - mae: 0.0623 - val_loss: 0.0281 - val_mae: 0.1281 - learning_rate: 1.0000e-05\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0062 - mae: 0.0622 - val_loss: 0.0282 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0062 - mae: 0.0622 - val_loss: 0.0281 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0062 - mae: 0.0621 - val_loss: 0.0282 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0062 - mae: 0.0621 - val_loss: 0.0281 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.02810\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0062 - mae: 0.0619 - val_loss: 0.0282 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0062 - mae: 0.0620 - val_loss: 0.0282 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0619 - val_loss: 0.0281 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0618 - val_loss: 0.0281 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0617 - val_loss: 0.0282 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0617 - val_loss: 0.0282 - val_mae: 0.1282 - learning_rate: 1.0000e-05\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0617 - val_loss: 0.0281 - val_mae: 0.1281 - learning_rate: 1.0000e-05\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.02810\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0061 - mae: 0.0616 - val_loss: 0.0282 - val_mae: 0.1283 - learning_rate: 1.0000e-05\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.02810\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0061 - mae: 0.0616 - val_loss: 0.0282 - val_mae: 0.1284 - learning_rate: 1.0000e-05\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss improved from 0.02810 to 0.02808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0059 - mae: 0.0607 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.02808\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss improved from 0.02808 to 0.02808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss improved from 0.02808 to 0.02807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.02807\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.02807\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss improved from 0.02807 to 0.02807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.02807\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0605 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.02807\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.02807\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss improved from 0.02807 to 0.02806, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-06\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss improved from 0.02806 to 0.02806, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-06\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-06\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-06\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0059 - mae: 0.0604 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-06\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0058 - mae: 0.0603 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0603 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0603 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0058 - mae: 0.0603 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 384/1000\n",
      "\n",
      "Epoch 384: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 385/1000\n",
      "\n",
      "Epoch 385: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 386/1000\n",
      "\n",
      "Epoch 386: val_loss did not improve from 0.02806\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 387/1000\n",
      "\n",
      "Epoch 387: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 388/1000\n",
      "\n",
      "Epoch 388: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 389/1000\n",
      "\n",
      "Epoch 389: val_loss did not improve from 0.02806\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 390/1000\n",
      "\n",
      "Epoch 390: val_loss did not improve from 0.02806\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 391/1000\n",
      "\n",
      "Epoch 391: val_loss did not improve from 0.02806\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 392/1000\n",
      "\n",
      "Epoch 392: val_loss did not improve from 0.02806\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 393/1000\n",
      "\n",
      "Epoch 393: val_loss did not improve from 0.02806\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 394/1000\n",
      "\n",
      "Epoch 394: val_loss did not improve from 0.02806\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 395/1000\n",
      "\n",
      "Epoch 395: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 396/1000\n",
      "\n",
      "Epoch 396: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 397/1000\n",
      "\n",
      "Epoch 397: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 398/1000\n",
      "\n",
      "Epoch 398: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 399/1000\n",
      "\n",
      "Epoch 399: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 400/1000\n",
      "\n",
      "Epoch 400: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 401/1000\n",
      "\n",
      "Epoch 401: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 402/1000\n",
      "\n",
      "Epoch 402: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 403/1000\n",
      "\n",
      "Epoch 403: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 404/1000\n",
      "\n",
      "Epoch 404: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 405/1000\n",
      "\n",
      "Epoch 405: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 406/1000\n",
      "\n",
      "Epoch 406: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 407/1000\n",
      "\n",
      "Epoch 407: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 408/1000\n",
      "\n",
      "Epoch 408: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 409/1000\n",
      "\n",
      "Epoch 409: val_loss improved from 0.02806 to 0.02806, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 410/1000\n",
      "\n",
      "Epoch 410: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 411/1000\n",
      "\n",
      "Epoch 411: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 412/1000\n",
      "\n",
      "Epoch 412: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 413/1000\n",
      "\n",
      "Epoch 413: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 414/1000\n",
      "\n",
      "Epoch 414: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 415/1000\n",
      "\n",
      "Epoch 415: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 416/1000\n",
      "\n",
      "Epoch 416: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 417/1000\n",
      "\n",
      "Epoch 417: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 418/1000\n",
      "\n",
      "Epoch 418: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 419/1000\n",
      "\n",
      "Epoch 419: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 420/1000\n",
      "\n",
      "Epoch 420: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 421/1000\n",
      "\n",
      "Epoch 421: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 422/1000\n",
      "\n",
      "Epoch 422: val_loss did not improve from 0.02806\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 423/1000\n",
      "\n",
      "Epoch 423: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 424/1000\n",
      "\n",
      "Epoch 424: val_loss did not improve from 0.02806\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 425/1000\n",
      "\n",
      "Epoch 425: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 426/1000\n",
      "\n",
      "Epoch 426: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 427/1000\n",
      "\n",
      "Epoch 427: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 428/1000\n",
      "\n",
      "Epoch 428: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 429/1000\n",
      "\n",
      "Epoch 429: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 430/1000\n",
      "\n",
      "Epoch 430: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 431/1000\n",
      "\n",
      "Epoch 431: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 432/1000\n",
      "\n",
      "Epoch 432: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 433/1000\n",
      "\n",
      "Epoch 433: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 434/1000\n",
      "\n",
      "Epoch 434: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 435/1000\n",
      "\n",
      "Epoch 435: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 436/1000\n",
      "\n",
      "Epoch 436: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 437/1000\n",
      "\n",
      "Epoch 437: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 438/1000\n",
      "\n",
      "Epoch 438: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 439/1000\n",
      "\n",
      "Epoch 439: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 440/1000\n",
      "\n",
      "Epoch 440: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 441/1000\n",
      "\n",
      "Epoch 441: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 442/1000\n",
      "\n",
      "Epoch 442: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 443/1000\n",
      "\n",
      "Epoch 443: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 444/1000\n",
      "\n",
      "Epoch 444: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 445/1000\n",
      "\n",
      "Epoch 445: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 446/1000\n",
      "\n",
      "Epoch 446: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 447/1000\n",
      "\n",
      "Epoch 447: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 448/1000\n",
      "\n",
      "Epoch 448: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 449/1000\n",
      "\n",
      "Epoch 449: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 450/1000\n",
      "\n",
      "Epoch 450: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 451/1000\n",
      "\n",
      "Epoch 451: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 452/1000\n",
      "\n",
      "Epoch 452: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 453/1000\n",
      "\n",
      "Epoch 453: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 454/1000\n",
      "\n",
      "Epoch 454: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 455/1000\n",
      "\n",
      "Epoch 455: val_loss did not improve from 0.02806\n",
      "4375/4375 - 40s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 456/1000\n",
      "\n",
      "Epoch 456: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 457/1000\n",
      "\n",
      "Epoch 457: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 458/1000\n",
      "\n",
      "Epoch 458: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1279 - learning_rate: 1.0000e-07\n",
      "Epoch 459/1000\n",
      "\n",
      "Epoch 459: val_loss did not improve from 0.02806\n",
      "4375/4375 - 39s - 9ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0281 - val_mae: 0.1280 - learning_rate: 1.0000e-07\n",
      "Epoch 459: early stopping\n",
      "Restoring model weights from the end of the best epoch: 409.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 6ms/step\n",
      "Mean positioning error: 0.2014 m\n",
      "Median positioning error: 0.1779 m\n",
      "90th percentile error: 0.3588 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 19255.265406,
   "end_time": "2025-08-01T18:54:22.672369",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-01T13:33:27.406963",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
