{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba6f2316",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-21T04:59:29.838241Z",
     "iopub.status.busy": "2025-08-21T04:59:29.837948Z",
     "iopub.status.idle": "2025-08-21T04:59:31.394051Z",
     "shell.execute_reply": "2025-08-21T04:59:31.393306Z"
    },
    "papermill": {
     "duration": 1.563223,
     "end_time": "2025-08-21T04:59:31.395246",
     "exception": false,
     "start_time": "2025-08-21T04:59:29.832023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a8bf2c22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:59:31.401260Z",
     "iopub.status.busy": "2025-08-21T04:59:31.400539Z",
     "iopub.status.idle": "2025-08-21T04:59:48.181299Z",
     "shell.execute_reply": "2025-08-21T04:59:48.180668Z"
    },
    "papermill": {
     "duration": 16.784854,
     "end_time": "2025-08-21T04:59:48.182810",
     "exception": false,
     "start_time": "2025-08-21T04:59:31.397956",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-21 04:59:33.474799: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755752373.712928      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755752373.784966      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2bf805bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:59:48.188191Z",
     "iopub.status.busy": "2025-08-21T04:59:48.187722Z",
     "iopub.status.idle": "2025-08-21T04:59:48.192023Z",
     "shell.execute_reply": "2025-08-21T04:59:48.191487Z"
    },
    "papermill": {
     "duration": 0.008001,
     "end_time": "2025-08-21T04:59:48.193133",
     "exception": false,
     "start_time": "2025-08-21T04:59:48.185132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256    #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size =7    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1   #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16      # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                    # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d757c23b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:59:48.197779Z",
     "iopub.status.busy": "2025-08-21T04:59:48.197563Z",
     "iopub.status.idle": "2025-08-21T04:59:48.200765Z",
     "shell.execute_reply": "2025-08-21T04:59:48.200221Z"
    },
    "papermill": {
     "duration": 0.006804,
     "end_time": "2025-08-21T04:59:48.201870",
     "exception": false,
     "start_time": "2025-08-21T04:59:48.195066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "44c8f18a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-21T04:59:48.206962Z",
     "iopub.status.busy": "2025-08-21T04:59:48.206777Z",
     "iopub.status.idle": "2025-08-21T08:17:38.410784Z",
     "shell.execute_reply": "2025-08-21T08:17:38.410024Z"
    },
    "papermill": {
     "duration": 11870.208412,
     "end_time": "2025-08-21T08:17:38.412151",
     "exception": false,
     "start_time": "2025-08-21T04:59:48.203739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755752409.704108      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755752419.178971      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">64,768</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">64,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m64,768\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m64,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">657,418</span> (2.51 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m657,418\u001b[0m (2.51 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">656,902</span> (2.51 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m656,902\u001b[0m (2.51 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755752430.014334      56 service.cc:148] XLA service 0x7b8868016b90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755752430.015437      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755752433.524224      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 28.97375, saving model to models/best_model_full.keras\n",
      "4375/4375 - 48s - 11ms/step - loss: 78.4771 - mae: 6.3079 - val_loss: 28.9737 - val_mae: 4.2025 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 28.97375 to 12.85771, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 30.1492 - mae: 4.1541 - val_loss: 12.8577 - val_mae: 2.7659 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 12.85771 to 6.99610, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 10.8158 - mae: 2.4821 - val_loss: 6.9961 - val_mae: 2.0179 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 6.99610 to 4.06411, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 5.3811 - mae: 1.6942 - val_loss: 4.0641 - val_mae: 1.5654 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 4.06411\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.7056 - mae: 1.3839 - val_loss: 7.0816 - val_mae: 2.0311 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 4.06411 to 1.26934, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.9917 - mae: 1.2457 - val_loss: 1.2693 - val_mae: 0.8698 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.26934 to 1.07493, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8137 - mae: 1.1427 - val_loss: 1.0749 - val_mae: 0.8060 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.07493\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2275 - mae: 0.9962 - val_loss: 1.1359 - val_mae: 0.8169 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.07493 to 0.73111, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5266 - mae: 0.8594 - val_loss: 0.7311 - val_mae: 0.6634 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.73111\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4160 - mae: 0.7362 - val_loss: 4.7160 - val_mae: 1.6622 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.73111 to 0.64006, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0677 - mae: 0.7394 - val_loss: 0.6401 - val_mae: 0.6196 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.64006\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5954 - mae: 0.5865 - val_loss: 1.1275 - val_mae: 0.8125 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.64006\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.6715 - mae: 0.9781 - val_loss: 0.6792 - val_mae: 0.6397 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.64006\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5221 - mae: 0.7979 - val_loss: 0.7961 - val_mae: 0.6950 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.64006\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1367 - mae: 0.6934 - val_loss: 3.9992 - val_mae: 1.5337 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 0.64006 to 0.49916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0367 - mae: 0.7237 - val_loss: 0.4992 - val_mae: 0.5476 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.49916\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2160 - mae: 0.7203 - val_loss: 0.5599 - val_mae: 0.5712 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.49916\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.0586 - mae: 0.8938 - val_loss: 0.6672 - val_mae: 0.6308 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.49916\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1746 - mae: 0.7383 - val_loss: 0.5141 - val_mae: 0.5589 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.49916\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4289 - mae: 0.8170 - val_loss: 0.7996 - val_mae: 0.6824 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.49916\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7797 - mae: 0.9366 - val_loss: 1.1015 - val_mae: 0.8168 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.49916\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2167 - mae: 0.7969 - val_loss: 1.1080 - val_mae: 0.8026 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.49916\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2395 - mae: 0.7783 - val_loss: 0.6665 - val_mae: 0.6499 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss improved from 0.49916 to 0.47145, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.9158 - mae: 0.6440 - val_loss: 0.4715 - val_mae: 0.5310 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.47145\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2113 - mae: 0.8084 - val_loss: 0.7684 - val_mae: 0.6828 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.47145\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6168 - mae: 0.5974 - val_loss: 0.6907 - val_mae: 0.6305 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.47145 to 0.32393, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5527 - mae: 0.7405 - val_loss: 0.3239 - val_mae: 0.4442 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6737 - mae: 0.7534 - val_loss: 1.1823 - val_mae: 0.8211 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7258 - mae: 0.6318 - val_loss: 6.4558 - val_mae: 1.6815 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.7213 - mae: 1.9506 - val_loss: 5.2586 - val_mae: 1.7587 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.2267 - mae: 1.3466 - val_loss: 1.5539 - val_mae: 0.9786 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7571 - mae: 0.9299 - val_loss: 1.2394 - val_mae: 0.8560 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.32393\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.5043 - mae: 0.8500 - val_loss: 0.5761 - val_mae: 0.5894 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9788 - mae: 0.7147 - val_loss: 5.5569 - val_mae: 1.5321 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.8327 - mae: 0.9543 - val_loss: 1.9783 - val_mae: 1.0833 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0103 - mae: 0.7635 - val_loss: 0.6092 - val_mae: 0.6152 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6079 - mae: 0.5967 - val_loss: 0.4706 - val_mae: 0.5316 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.32393\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4867 - mae: 0.7467 - val_loss: 0.4783 - val_mae: 0.5363 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.32393\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4265 - mae: 0.5080 - val_loss: 0.3708 - val_mae: 0.4775 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7897 - mae: 0.9159 - val_loss: 0.5903 - val_mae: 0.6053 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5394 - mae: 0.5681 - val_loss: 1.4030 - val_mae: 0.9016 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3683 - mae: 0.7441 - val_loss: 0.4656 - val_mae: 0.5323 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.32393\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.8403 - mae: 1.0373 - val_loss: 0.6746 - val_mae: 0.6385 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1933 - mae: 0.9680 - val_loss: 3.7935 - val_mae: 1.5125 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7059 - mae: 0.8994 - val_loss: 3.5765 - val_mae: 1.4399 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7389 - mae: 0.8828 - val_loss: 0.9798 - val_mae: 0.7576 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.32393\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2843 - mae: 0.8022 - val_loss: 0.7559 - val_mae: 0.6655 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.32393 to 0.28912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3798 - mae: 0.4703 - val_loss: 0.2891 - val_mae: 0.4169 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.28912 to 0.20190, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2427 - mae: 0.3826 - val_loss: 0.2019 - val_mae: 0.3487 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.20190 to 0.16545, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1830 - mae: 0.3334 - val_loss: 0.1655 - val_mae: 0.3162 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.16545 to 0.14015, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1476 - mae: 0.3004 - val_loss: 0.1401 - val_mae: 0.2910 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.14015 to 0.12639, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1258 - mae: 0.2769 - val_loss: 0.1264 - val_mae: 0.2747 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.12639 to 0.11419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1103 - mae: 0.2600 - val_loss: 0.1142 - val_mae: 0.2629 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.11419 to 0.10810, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0994 - mae: 0.2472 - val_loss: 0.1081 - val_mae: 0.2551 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.10810 to 0.09884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0928 - mae: 0.2388 - val_loss: 0.0988 - val_mae: 0.2447 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.09884 to 0.08808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0849 - mae: 0.2284 - val_loss: 0.0881 - val_mae: 0.2309 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.08808\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0774 - mae: 0.2184 - val_loss: 0.0887 - val_mae: 0.2314 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.08808 to 0.08035, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0725 - mae: 0.2114 - val_loss: 0.0804 - val_mae: 0.2200 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.08035\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0699 - mae: 0.2073 - val_loss: 0.0808 - val_mae: 0.2210 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.08035 to 0.07310, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0655 - mae: 0.2009 - val_loss: 0.0731 - val_mae: 0.2102 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.07310 to 0.06764, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0618 - mae: 0.1953 - val_loss: 0.0676 - val_mae: 0.2012 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.06764\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0590 - mae: 0.1908 - val_loss: 0.0693 - val_mae: 0.2045 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.06764\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0580 - mae: 0.1890 - val_loss: 0.0716 - val_mae: 0.2068 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.06764 to 0.06505, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0551 - mae: 0.1847 - val_loss: 0.0651 - val_mae: 0.1984 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.06505\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0529 - mae: 0.1809 - val_loss: 0.0668 - val_mae: 0.2011 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.06505 to 0.05681, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0506 - mae: 0.1769 - val_loss: 0.0568 - val_mae: 0.1848 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.05681\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0497 - mae: 0.1755 - val_loss: 0.0594 - val_mae: 0.1885 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.05681\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0485 - mae: 0.1733 - val_loss: 0.0643 - val_mae: 0.1967 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.05681\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0469 - mae: 0.1705 - val_loss: 0.0576 - val_mae: 0.1855 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.05681\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0459 - mae: 0.1686 - val_loss: 0.0610 - val_mae: 0.1930 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.05681 to 0.05217, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0444 - mae: 0.1660 - val_loss: 0.0522 - val_mae: 0.1778 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.05217 to 0.05063, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0429 - mae: 0.1633 - val_loss: 0.0506 - val_mae: 0.1741 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.05063\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0421 - mae: 0.1609 - val_loss: 0.0527 - val_mae: 0.1779 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.05063 to 0.04938, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0412 - mae: 0.1596 - val_loss: 0.0494 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.04938\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0405 - mae: 0.1584 - val_loss: 0.0537 - val_mae: 0.1805 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.04938 to 0.04703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0394 - mae: 0.1565 - val_loss: 0.0470 - val_mae: 0.1678 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.04703\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0383 - mae: 0.1542 - val_loss: 0.0522 - val_mae: 0.1769 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.04703\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0379 - mae: 0.1531 - val_loss: 0.0476 - val_mae: 0.1701 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.04703\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0373 - mae: 0.1522 - val_loss: 0.0495 - val_mae: 0.1720 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.04703\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0364 - mae: 0.1503 - val_loss: 0.0535 - val_mae: 0.1797 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.04703 to 0.04367, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0354 - mae: 0.1480 - val_loss: 0.0437 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04367\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0427 - mae: 0.1512 - val_loss: 0.0444 - val_mae: 0.1640 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.04367 to 0.04258, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0324 - mae: 0.1403 - val_loss: 0.0426 - val_mae: 0.1607 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.04258\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0346 - mae: 0.1461 - val_loss: 0.0440 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04258\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0340 - mae: 0.1449 - val_loss: 0.0454 - val_mae: 0.1663 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04258\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0342 - mae: 0.1455 - val_loss: 0.0431 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.04258\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0363 - mae: 0.1462 - val_loss: 0.0438 - val_mae: 0.1637 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.04258\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0340 - mae: 0.1453 - val_loss: 0.0460 - val_mae: 0.1669 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04258\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0334 - mae: 0.1439 - val_loss: 0.0444 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.04258 to 0.04202, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0329 - mae: 0.1427 - val_loss: 0.0420 - val_mae: 0.1586 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04202\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0324 - mae: 0.1415 - val_loss: 0.0432 - val_mae: 0.1625 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04202\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0331 - mae: 0.1430 - val_loss: 0.0430 - val_mae: 0.1618 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04202\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0319 - mae: 0.1406 - val_loss: 0.0441 - val_mae: 0.1640 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04202\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0323 - mae: 0.1411 - val_loss: 0.0421 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04202\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0319 - mae: 0.1403 - val_loss: 0.0429 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.04202 to 0.03993, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0315 - mae: 0.1395 - val_loss: 0.0399 - val_mae: 0.1558 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03993\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0317 - mae: 0.1402 - val_loss: 0.0440 - val_mae: 0.1623 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03993\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0312 - mae: 0.1383 - val_loss: 0.0500 - val_mae: 0.1748 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03993\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0304 - mae: 0.1372 - val_loss: 0.0402 - val_mae: 0.1553 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03993\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0304 - mae: 0.1372 - val_loss: 0.0420 - val_mae: 0.1598 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.03993 to 0.03863, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0302 - mae: 0.1367 - val_loss: 0.0386 - val_mae: 0.1524 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.03863\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0308 - mae: 0.1378 - val_loss: 0.0393 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03863\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0301 - mae: 0.1365 - val_loss: 0.0417 - val_mae: 0.1584 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.03863\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0306 - mae: 0.1376 - val_loss: 0.0410 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03863\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0300 - mae: 0.1353 - val_loss: 0.0404 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03863\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0299 - mae: 0.1356 - val_loss: 0.0396 - val_mae: 0.1548 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03863\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0298 - mae: 0.1359 - val_loss: 0.0410 - val_mae: 0.1568 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.03863 to 0.03706, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0293 - mae: 0.1343 - val_loss: 0.0371 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03706\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0293 - mae: 0.1344 - val_loss: 0.0372 - val_mae: 0.1499 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03706\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0298 - mae: 0.1358 - val_loss: 0.0412 - val_mae: 0.1579 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03706\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0295 - mae: 0.1350 - val_loss: 0.0415 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03706\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0458 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03706\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0297 - mae: 0.1354 - val_loss: 0.0423 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03706\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0288 - mae: 0.1335 - val_loss: 0.0389 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.03706 to 0.03589, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0289 - mae: 0.1334 - val_loss: 0.0359 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03589\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0293 - mae: 0.1344 - val_loss: 0.0481 - val_mae: 0.1706 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03589\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0286 - mae: 0.1329 - val_loss: 0.0431 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03589\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0290 - mae: 0.1337 - val_loss: 0.0402 - val_mae: 0.1572 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03589\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0292 - mae: 0.1341 - val_loss: 0.0419 - val_mae: 0.1601 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03589\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0285 - mae: 0.1322 - val_loss: 0.0412 - val_mae: 0.1584 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03589\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0283 - mae: 0.1323 - val_loss: 0.0418 - val_mae: 0.1582 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03589\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0285 - mae: 0.1324 - val_loss: 0.0382 - val_mae: 0.1528 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03589\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0286 - mae: 0.1326 - val_loss: 0.0390 - val_mae: 0.1546 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03589\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0287 - mae: 0.1326 - val_loss: 0.0405 - val_mae: 0.1563 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03589\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0283 - mae: 0.1321 - val_loss: 0.0371 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.03589 to 0.03458, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0281 - mae: 0.1313 - val_loss: 0.0346 - val_mae: 0.1438 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0284 - mae: 0.1322 - val_loss: 0.0409 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0284 - mae: 0.1321 - val_loss: 0.0371 - val_mae: 0.1498 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0278 - mae: 0.1309 - val_loss: 0.0369 - val_mae: 0.1498 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03458\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0279 - mae: 0.1310 - val_loss: 0.0359 - val_mae: 0.1472 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0287 - mae: 0.1325 - val_loss: 0.0422 - val_mae: 0.1603 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0276 - mae: 0.1304 - val_loss: 0.0387 - val_mae: 0.1531 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0282 - mae: 0.1316 - val_loss: 0.0383 - val_mae: 0.1519 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0278 - mae: 0.1306 - val_loss: 0.0368 - val_mae: 0.1494 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0280 - mae: 0.1312 - val_loss: 0.0386 - val_mae: 0.1531 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0279 - mae: 0.1310 - val_loss: 0.0380 - val_mae: 0.1530 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0282 - mae: 0.1318 - val_loss: 0.0371 - val_mae: 0.1466 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03458\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0276 - mae: 0.1305 - val_loss: 0.0377 - val_mae: 0.1495 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0276 - mae: 0.1302 - val_loss: 0.0407 - val_mae: 0.1576 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0282 - mae: 0.1314 - val_loss: 0.0398 - val_mae: 0.1556 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0275 - mae: 0.1298 - val_loss: 0.0365 - val_mae: 0.1491 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0279 - mae: 0.1306 - val_loss: 0.0389 - val_mae: 0.1543 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03458\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0278 - mae: 0.1306 - val_loss: 0.0370 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0280 - mae: 0.1312 - val_loss: 0.0361 - val_mae: 0.1489 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0276 - mae: 0.1297 - val_loss: 0.0363 - val_mae: 0.1488 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03458\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0274 - mae: 0.1296 - val_loss: 0.0353 - val_mae: 0.1458 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.03458 to 0.01946, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0101 - mae: 0.0787 - val_loss: 0.0195 - val_mae: 0.1069 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.01946 to 0.01867, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0083 - mae: 0.0721 - val_loss: 0.0187 - val_mae: 0.1047 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.01867 to 0.01830, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0183 - val_mae: 0.1036 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.01830 to 0.01813, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0181 - val_mae: 0.1028 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.01813\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0182 - val_mae: 0.1034 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.01813 to 0.01779, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0178 - val_mae: 0.1018 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.01779 to 0.01769, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0067 - mae: 0.0646 - val_loss: 0.0177 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.01769 to 0.01766, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0065 - mae: 0.0640 - val_loss: 0.0177 - val_mae: 0.1015 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01766\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0064 - mae: 0.0632 - val_loss: 0.0178 - val_mae: 0.1021 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01766\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0063 - mae: 0.0627 - val_loss: 0.0177 - val_mae: 0.1016 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.01766 to 0.01757, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0062 - mae: 0.0622 - val_loss: 0.0176 - val_mae: 0.1010 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.01757\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0060 - mae: 0.0616 - val_loss: 0.0177 - val_mae: 0.1015 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01757\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0059 - mae: 0.0610 - val_loss: 0.0177 - val_mae: 0.1017 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.01757 to 0.01745, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0605 - val_loss: 0.0175 - val_mae: 0.1006 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.01745 to 0.01744, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0602 - val_loss: 0.0174 - val_mae: 0.1008 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.01744\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0057 - mae: 0.0597 - val_loss: 0.0175 - val_mae: 0.1010 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss improved from 0.01744 to 0.01734, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0593 - val_loss: 0.0173 - val_mae: 0.1004 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01734\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0590 - val_loss: 0.0176 - val_mae: 0.1012 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01734\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0055 - mae: 0.0586 - val_loss: 0.0175 - val_mae: 0.1009 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss improved from 0.01734 to 0.01732, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0054 - mae: 0.0583 - val_loss: 0.0173 - val_mae: 0.1002 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.01732 to 0.01728, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0053 - mae: 0.0579 - val_loss: 0.0173 - val_mae: 0.1002 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01728\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0053 - mae: 0.0576 - val_loss: 0.0174 - val_mae: 0.1004 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.01728 to 0.01725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0052 - mae: 0.0573 - val_loss: 0.0172 - val_mae: 0.1000 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01725\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0176 - val_mae: 0.1012 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01725\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0051 - mae: 0.0567 - val_loss: 0.0174 - val_mae: 0.1004 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01725\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0051 - mae: 0.0563 - val_loss: 0.0174 - val_mae: 0.1002 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01725\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0050 - mae: 0.0562 - val_loss: 0.0173 - val_mae: 0.0997 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01725\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0050 - mae: 0.0559 - val_loss: 0.0174 - val_mae: 0.0999 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.01725 to 0.01718, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0050 - mae: 0.0558 - val_loss: 0.0172 - val_mae: 0.0995 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0049 - mae: 0.0554 - val_loss: 0.0172 - val_mae: 0.0994 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0049 - mae: 0.0552 - val_loss: 0.0173 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0173 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0048 - mae: 0.0546 - val_loss: 0.0175 - val_mae: 0.1005 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0172 - val_mae: 0.0997 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0047 - mae: 0.0542 - val_loss: 0.0175 - val_mae: 0.1003 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0539 - val_loss: 0.0173 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0046 - mae: 0.0538 - val_loss: 0.0174 - val_mae: 0.1002 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0046 - mae: 0.0536 - val_loss: 0.0172 - val_mae: 0.0995 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0174 - val_mae: 0.0999 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0174 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0045 - mae: 0.0529 - val_loss: 0.0174 - val_mae: 0.1003 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0044 - mae: 0.0526 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0044 - mae: 0.0525 - val_loss: 0.0176 - val_mae: 0.1005 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0044 - mae: 0.0524 - val_loss: 0.0175 - val_mae: 0.1003 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0520 - val_loss: 0.0174 - val_mae: 0.1001 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0519 - val_loss: 0.0172 - val_mae: 0.0993 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0518 - val_loss: 0.0175 - val_mae: 0.1002 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01718\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0515 - val_loss: 0.0174 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01718\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0042 - mae: 0.0514 - val_loss: 0.0174 - val_mae: 0.1000 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.01718 to 0.01673, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0457 - val_loss: 0.0167 - val_mae: 0.0976 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.01673 to 0.01669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0451 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.01669 to 0.01669, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0167 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.01669 to 0.01668, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0448 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0167 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0446 - val_loss: 0.0167 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0445 - val_loss: 0.0167 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0167 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0444 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.01668 to 0.01668, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0443 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0443 - val_loss: 0.0167 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0167 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0442 - val_loss: 0.0167 - val_mae: 0.0975 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0441 - val_loss: 0.0167 - val_mae: 0.0974 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01668\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01668\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01668\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01668\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0031 - mae: 0.0439 - val_loss: 0.0167 - val_mae: 0.0973 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss improved from 0.01668 to 0.01665, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0432 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss improved from 0.01665 to 0.01665, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01665\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01665\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss improved from 0.01665 to 0.01665, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01665\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0431 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01665\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01665\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss improved from 0.01665 to 0.01664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss improved from 0.01664 to 0.01664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0430 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.01664 to 0.01664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01664\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01664\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01664\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01664\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss improved from 0.01664 to 0.01664, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0972 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.01664\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0167 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.01664\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.01664\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0030 - mae: 0.0429 - val_loss: 0.0166 - val_mae: 0.0971 - learning_rate: 1.0000e-07\n",
      "Epoch 337: early stopping\n",
      "Restoring model weights from the end of the best epoch: 287.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1533 m\n",
      "Median positioning error: 0.1342 m\n",
      "90th percentile error: 0.2806 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11896.65362,
   "end_time": "2025-08-21T08:17:41.953915",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-21T04:59:25.300295",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
