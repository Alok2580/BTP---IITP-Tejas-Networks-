{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2117b2c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-11T14:16:50.056319Z",
     "iopub.status.busy": "2025-07-11T14:16:50.055594Z",
     "iopub.status.idle": "2025-07-11T14:16:51.626916Z",
     "shell.execute_reply": "2025-07-11T14:16:51.625943Z"
    },
    "papermill": {
     "duration": 1.576241,
     "end_time": "2025-07-11T14:16:51.628185",
     "exception": false,
     "start_time": "2025-07-11T14:16:50.051944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "083b751d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T14:16:51.633463Z",
     "iopub.status.busy": "2025-07-11T14:16:51.633131Z",
     "iopub.status.idle": "2025-07-11T14:17:08.196156Z",
     "shell.execute_reply": "2025-07-11T14:17:08.195513Z"
    },
    "papermill": {
     "duration": 16.566876,
     "end_time": "2025-07-11T14:17:08.197541",
     "exception": false,
     "start_time": "2025-07-11T14:16:51.630665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-11 14:16:53.751703: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752243413.972525      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752243414.044682      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "32e8f37e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T14:17:08.202854Z",
     "iopub.status.busy": "2025-07-11T14:17:08.202405Z",
     "iopub.status.idle": "2025-07-11T14:17:08.206902Z",
     "shell.execute_reply": "2025-07-11T14:17:08.206175Z"
    },
    "papermill": {
     "duration": 0.008206,
     "end_time": "2025-07-11T14:17:08.207996",
     "exception": false,
     "start_time": "2025-07-11T14:17:08.199790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "\n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "98cddbfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T14:17:08.212513Z",
     "iopub.status.busy": "2025-07-11T14:17:08.212300Z",
     "iopub.status.idle": "2025-07-11T14:17:08.215446Z",
     "shell.execute_reply": "2025-07-11T14:17:08.214780Z"
    },
    "papermill": {
     "duration": 0.006777,
     "end_time": "2025-07-11T14:17:08.216619",
     "exception": false,
     "start_time": "2025-07-11T14:17:08.209842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "16503cd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-11T14:17:08.221532Z",
     "iopub.status.busy": "2025-07-11T14:17:08.221298Z",
     "iopub.status.idle": "2025-07-11T16:42:14.566046Z",
     "shell.execute_reply": "2025-07-11T16:42:14.565150Z"
    },
    "papermill": {
     "duration": 8706.348895,
     "end_time": "2025-07-11T16:42:14.567261",
     "exception": false,
     "start_time": "2025-07-11T14:17:08.218366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752243448.549660      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1752243458.004066      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">729,098</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m729,098\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">728,582</span> (2.78 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m728,582\u001b[0m (2.78 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1752243469.021396      57 service.cc:148] XLA service 0x7d78000069e0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1752243469.022464      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1752243472.937169      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 18.77722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 49s - 11ms/step - loss: 111.9498 - mae: 7.5247 - val_loss: 18.7772 - val_mae: 3.3266 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 18.77722 to 8.95654, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 15.2724 - mae: 2.9818 - val_loss: 8.9565 - val_mae: 2.3134 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 8.95654 to 5.49141, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.2345 - mae: 1.9153 - val_loss: 5.4914 - val_mae: 1.7959 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 5.49141 to 2.73612, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 6.4946 - mae: 1.8201 - val_loss: 2.7361 - val_mae: 1.2871 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.73612 to 1.12970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9379 - mae: 1.0707 - val_loss: 1.1297 - val_mae: 0.8378 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.12970 to 0.90073, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2267 - mae: 0.8385 - val_loss: 0.9007 - val_mae: 0.7419 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.90073 to 0.69786, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2614 - mae: 1.0010 - val_loss: 0.6979 - val_mae: 0.6595 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.69786 to 0.62801, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6674 - mae: 0.6386 - val_loss: 0.6280 - val_mae: 0.6168 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.62801 to 0.60553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6984 - mae: 1.0014 - val_loss: 0.6055 - val_mae: 0.6102 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.0304 - mae: 1.0768 - val_loss: 1.9194 - val_mae: 1.0486 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2990 - mae: 0.8494 - val_loss: 7.4079 - val_mae: 2.0701 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1524 - mae: 0.9828 - val_loss: 0.7653 - val_mae: 0.6829 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7288 - mae: 0.8457 - val_loss: 6.0806 - val_mae: 1.6612 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7658 - mae: 1.0957 - val_loss: 10.8473 - val_mae: 2.4540 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2650 - mae: 0.8058 - val_loss: 1.7523 - val_mae: 0.8466 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6808 - mae: 0.9704 - val_loss: 7.2919 - val_mae: 1.8005 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.60553\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.7758 - mae: 0.6694 - val_loss: 1.3490 - val_mae: 0.6549 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 0.60553 to 0.40554, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2297 - mae: 0.6872 - val_loss: 0.4055 - val_mae: 0.4981 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1063 - mae: 0.7036 - val_loss: 0.7010 - val_mae: 0.5516 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9651 - mae: 0.8854 - val_loss: 2.1209 - val_mae: 0.6922 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3787 - mae: 0.7676 - val_loss: 1.1591 - val_mae: 0.6869 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4699 - mae: 0.7803 - val_loss: 21.9216 - val_mae: 2.4782 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 7.8370 - mae: 1.6505 - val_loss: 16.5512 - val_mae: 2.9702 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.3114 - mae: 1.3090 - val_loss: 7.4083 - val_mae: 2.1279 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3027 - mae: 0.9836 - val_loss: 0.6784 - val_mae: 0.6440 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5354 - mae: 0.5723 - val_loss: 0.5521 - val_mae: 0.5803 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1670 - mae: 0.9137 - val_loss: 0.6030 - val_mae: 0.6063 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6322 - mae: 0.7477 - val_loss: 0.9889 - val_mae: 0.6978 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5760 - mae: 0.5850 - val_loss: 0.5427 - val_mae: 0.5684 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.4048 - mae: 0.9502 - val_loss: 0.6707 - val_mae: 0.6348 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.40554\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9523 - mae: 0.8481 - val_loss: 1.3979 - val_mae: 0.8861 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss improved from 0.40554 to 0.33252, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6466 - mae: 0.5897 - val_loss: 0.3325 - val_mae: 0.4501 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1900 - mae: 1.0886 - val_loss: 0.6075 - val_mae: 0.6058 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4836 - mae: 0.5424 - val_loss: 0.4500 - val_mae: 0.5230 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2025 - mae: 0.8330 - val_loss: 1.9229 - val_mae: 0.9465 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5485 - mae: 0.5435 - val_loss: 0.3646 - val_mae: 0.4790 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3554 - mae: 0.4652 - val_loss: 0.4583 - val_mae: 0.5298 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.2435 - mae: 1.0923 - val_loss: 0.8729 - val_mae: 0.6608 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0517 - mae: 0.6708 - val_loss: 1.5194 - val_mae: 0.6284 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.4848 - mae: 0.7924 - val_loss: 3.1575 - val_mae: 1.2376 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9287 - mae: 0.7071 - val_loss: 0.7423 - val_mae: 0.6497 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6768 - mae: 0.7161 - val_loss: 0.9690 - val_mae: 0.7589 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.0861 - mae: 0.9731 - val_loss: 1.7959 - val_mae: 0.7849 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6809 - mae: 0.9647 - val_loss: 0.7919 - val_mae: 0.6945 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5774 - mae: 0.5849 - val_loss: 0.4313 - val_mae: 0.5115 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8505 - mae: 0.8146 - val_loss: 0.8726 - val_mae: 0.6123 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.33252\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.9390 - mae: 0.6855 - val_loss: 0.9503 - val_mae: 0.5507 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6058 - mae: 0.7918 - val_loss: 0.6539 - val_mae: 0.6404 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5694 - mae: 0.5602 - val_loss: 0.5752 - val_mae: 0.5159 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.3367 - mae: 1.0846 - val_loss: 2.7453 - val_mae: 1.1775 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7297 - mae: 0.8425 - val_loss: 1.2989 - val_mae: 0.7599 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2293 - mae: 0.7968 - val_loss: 0.9701 - val_mae: 0.7530 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3463 - mae: 0.4546 - val_loss: 0.4298 - val_mae: 0.4461 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2668 - mae: 0.4014 - val_loss: 0.4807 - val_mae: 0.4173 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2332 - mae: 0.3741 - val_loss: 0.8915 - val_mae: 0.3903 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1957 - mae: 0.3439 - val_loss: 0.8086 - val_mae: 0.3617 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1769 - mae: 0.3264 - val_loss: 0.4830 - val_mae: 0.3428 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1478 - mae: 0.3003 - val_loss: 0.7263 - val_mae: 0.3321 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.33252\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1295 - mae: 0.2812 - val_loss: 0.7424 - val_mae: 0.3171 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.33252 to 0.33005, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1124 - mae: 0.2629 - val_loss: 0.3301 - val_mae: 0.2869 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.33005\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1009 - mae: 0.2496 - val_loss: 0.3357 - val_mae: 0.2782 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.33005 to 0.32404, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0965 - mae: 0.2438 - val_loss: 0.3240 - val_mae: 0.2838 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.32404 to 0.29173, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0916 - mae: 0.2372 - val_loss: 0.2917 - val_mae: 0.2710 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.29173 to 0.26989, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0845 - mae: 0.2284 - val_loss: 0.2699 - val_mae: 0.2600 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.26989\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0793 - mae: 0.2210 - val_loss: 0.5285 - val_mae: 0.2518 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.26989 to 0.23950, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0745 - mae: 0.2144 - val_loss: 0.2395 - val_mae: 0.2483 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.23950 to 0.19654, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0718 - mae: 0.2108 - val_loss: 0.1965 - val_mae: 0.2339 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.19654\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0666 - mae: 0.2034 - val_loss: 0.6680 - val_mae: 0.2417 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.19654\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0652 - mae: 0.2011 - val_loss: 0.3883 - val_mae: 0.2327 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.19654\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0620 - mae: 0.1963 - val_loss: 0.6712 - val_mae: 0.2385 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.19654 to 0.09087, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0597 - mae: 0.1924 - val_loss: 0.0909 - val_mae: 0.2276 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.09087\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0565 - mae: 0.1874 - val_loss: 0.1784 - val_mae: 0.2061 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.09087 to 0.07071, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0540 - mae: 0.1832 - val_loss: 0.0707 - val_mae: 0.2003 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.07071\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0516 - mae: 0.1793 - val_loss: 0.0734 - val_mae: 0.1947 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.07071\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0487 - mae: 0.1741 - val_loss: 0.1008 - val_mae: 0.1959 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.07071\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0461 - mae: 0.1695 - val_loss: 0.1229 - val_mae: 0.2065 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.07071 to 0.05726, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0454 - mae: 0.1680 - val_loss: 0.0573 - val_mae: 0.1795 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.05726 to 0.05271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0442 - mae: 0.1661 - val_loss: 0.0527 - val_mae: 0.1785 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.05271\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0427 - mae: 0.1629 - val_loss: 0.0956 - val_mae: 0.1815 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.05271\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0427 - mae: 0.1632 - val_loss: 0.0744 - val_mae: 0.2020 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.05271\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0413 - mae: 0.1604 - val_loss: 0.0786 - val_mae: 0.1775 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.05271\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0408 - mae: 0.1593 - val_loss: 0.0762 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.05271 to 0.04755, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0388 - mae: 0.1556 - val_loss: 0.0475 - val_mae: 0.1699 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.04755\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0375 - mae: 0.1530 - val_loss: 0.0591 - val_mae: 0.1747 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04755\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0359 - mae: 0.1497 - val_loss: 0.0698 - val_mae: 0.1645 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04755\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0356 - mae: 0.1487 - val_loss: 0.1278 - val_mae: 0.1730 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.04755\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0342 - mae: 0.1458 - val_loss: 0.1008 - val_mae: 0.1686 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.04755 to 0.04453, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0348 - mae: 0.1470 - val_loss: 0.0445 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04453\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0335 - mae: 0.1445 - val_loss: 0.0451 - val_mae: 0.1653 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.04453\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0458 - val_mae: 0.1677 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.04453 to 0.04366, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0323 - mae: 0.1418 - val_loss: 0.0437 - val_mae: 0.1600 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0313 - mae: 0.1399 - val_loss: 0.0471 - val_mae: 0.1639 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0309 - mae: 0.1387 - val_loss: 0.0449 - val_mae: 0.1615 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0301 - mae: 0.1369 - val_loss: 0.0495 - val_mae: 0.1731 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0298 - mae: 0.1362 - val_loss: 0.0493 - val_mae: 0.1601 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0298 - mae: 0.1359 - val_loss: 0.0501 - val_mae: 0.1733 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0292 - mae: 0.1347 - val_loss: 0.0446 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0290 - mae: 0.1346 - val_loss: 0.0439 - val_mae: 0.1579 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0286 - mae: 0.1333 - val_loss: 0.0444 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04366\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0281 - mae: 0.1323 - val_loss: 0.0525 - val_mae: 0.1658 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.04366 to 0.04237, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0282 - mae: 0.1322 - val_loss: 0.0424 - val_mae: 0.1597 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.04237 to 0.04093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0280 - mae: 0.1322 - val_loss: 0.0409 - val_mae: 0.1573 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.04093 to 0.03985, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0281 - mae: 0.1321 - val_loss: 0.0399 - val_mae: 0.1548 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.03985 to 0.03779, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0270 - mae: 0.1296 - val_loss: 0.0378 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03779\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0278 - mae: 0.1313 - val_loss: 0.0391 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03779\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0272 - mae: 0.1301 - val_loss: 0.0386 - val_mae: 0.1542 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03779\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0293 - mae: 0.1348 - val_loss: 0.0449 - val_mae: 0.1635 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.03779 to 0.03651, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0268 - mae: 0.1290 - val_loss: 0.0365 - val_mae: 0.1490 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0268 - mae: 0.1288 - val_loss: 0.0378 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1282 - val_loss: 0.0384 - val_mae: 0.1527 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0262 - mae: 0.1275 - val_loss: 0.0407 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0265 - mae: 0.1282 - val_loss: 0.0471 - val_mae: 0.1681 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1280 - val_loss: 0.0389 - val_mae: 0.1544 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0264 - mae: 0.1278 - val_loss: 0.0382 - val_mae: 0.1538 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0257 - mae: 0.1260 - val_loss: 0.0384 - val_mae: 0.1525 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0258 - mae: 0.1265 - val_loss: 0.0388 - val_mae: 0.1537 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0253 - mae: 0.1256 - val_loss: 0.0376 - val_mae: 0.1518 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0255 - mae: 0.1259 - val_loss: 0.0392 - val_mae: 0.1552 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0251 - mae: 0.1249 - val_loss: 0.0385 - val_mae: 0.1537 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03651\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1246 - val_loss: 0.0411 - val_mae: 0.1581 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.03651 to 0.03636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1236 - val_loss: 0.0364 - val_mae: 0.1483 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03636\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0250 - mae: 0.1245 - val_loss: 0.0374 - val_mae: 0.1508 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03636\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1235 - val_loss: 0.0375 - val_mae: 0.1501 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.03636 to 0.03598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0246 - mae: 0.1233 - val_loss: 0.0360 - val_mae: 0.1478 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03598\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0248 - mae: 0.1235 - val_loss: 0.0400 - val_mae: 0.1569 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.03598 to 0.03557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0252 - mae: 0.1247 - val_loss: 0.0356 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03557\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1223 - val_loss: 0.0404 - val_mae: 0.1567 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.03557 to 0.03278, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1227 - val_loss: 0.0328 - val_mae: 0.1404 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03278\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0241 - mae: 0.1218 - val_loss: 0.0352 - val_mae: 0.1447 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03278\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0241 - mae: 0.1219 - val_loss: 0.0336 - val_mae: 0.1424 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03278\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1217 - val_loss: 0.0365 - val_mae: 0.1482 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03278\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0239 - mae: 0.1213 - val_loss: 0.0386 - val_mae: 0.1535 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03278\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0288 - mae: 0.1317 - val_loss: 0.0387 - val_mae: 0.1530 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.03278 to 0.03243, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0242 - mae: 0.1222 - val_loss: 0.0324 - val_mae: 0.1408 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03243\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0249 - mae: 0.1239 - val_loss: 0.0388 - val_mae: 0.1536 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0241 - mae: 0.1219 - val_loss: 0.0338 - val_mae: 0.1427 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0245 - mae: 0.1227 - val_loss: 0.0346 - val_mae: 0.1450 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0241 - mae: 0.1217 - val_loss: 0.0375 - val_mae: 0.1517 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03243\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0237 - mae: 0.1209 - val_loss: 0.0334 - val_mae: 0.1419 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0239 - mae: 0.1212 - val_loss: 0.0436 - val_mae: 0.1631 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0235 - mae: 0.1203 - val_loss: 0.0346 - val_mae: 0.1442 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0244 - mae: 0.1225 - val_loss: 0.0390 - val_mae: 0.1540 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1191 - val_loss: 0.0339 - val_mae: 0.1429 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0237 - mae: 0.1208 - val_loss: 0.0347 - val_mae: 0.1453 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0240 - mae: 0.1215 - val_loss: 0.0381 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0237 - mae: 0.1206 - val_loss: 0.0402 - val_mae: 0.1561 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0236 - mae: 0.1205 - val_loss: 0.0391 - val_mae: 0.1501 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0234 - mae: 0.1199 - val_loss: 0.0396 - val_mae: 0.1557 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0232 - mae: 0.1195 - val_loss: 0.0426 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0236 - mae: 0.1204 - val_loss: 0.0336 - val_mae: 0.1415 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0231 - mae: 0.1193 - val_loss: 0.0345 - val_mae: 0.1450 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0243 - mae: 0.1217 - val_loss: 0.0341 - val_mae: 0.1437 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.03243\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0227 - mae: 0.1179 - val_loss: 0.0394 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.03243 to 0.03167, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0232 - mae: 0.1191 - val_loss: 0.0317 - val_mae: 0.1377 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0228 - mae: 0.1184 - val_loss: 0.0342 - val_mae: 0.1420 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0231 - mae: 0.1190 - val_loss: 0.0331 - val_mae: 0.1420 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0229 - mae: 0.1186 - val_loss: 0.0349 - val_mae: 0.1458 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0232 - mae: 0.1190 - val_loss: 0.0330 - val_mae: 0.1414 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0247 - mae: 0.1226 - val_loss: 0.0369 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0233 - mae: 0.1194 - val_loss: 0.0373 - val_mae: 0.1407 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0231 - mae: 0.1189 - val_loss: 0.0455 - val_mae: 0.1473 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0229 - mae: 0.1187 - val_loss: 0.0350 - val_mae: 0.1460 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0229 - mae: 0.1184 - val_loss: 0.0356 - val_mae: 0.1466 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0228 - mae: 0.1177 - val_loss: 0.0388 - val_mae: 0.1506 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0229 - mae: 0.1184 - val_loss: 0.0336 - val_mae: 0.1428 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1175 - val_loss: 0.0370 - val_mae: 0.1500 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0228 - mae: 0.1178 - val_loss: 0.0361 - val_mae: 0.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.03167\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1178 - val_loss: 0.0341 - val_mae: 0.1443 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.03167 to 0.03084, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1173 - val_loss: 0.0308 - val_mae: 0.1362 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0227 - mae: 0.1178 - val_loss: 0.0315 - val_mae: 0.1386 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1185 - val_loss: 0.0355 - val_mae: 0.1467 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1167 - val_loss: 0.0446 - val_mae: 0.1452 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0224 - mae: 0.1167 - val_loss: 0.0331 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0227 - mae: 0.1175 - val_loss: 0.0384 - val_mae: 0.1525 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1187 - val_loss: 0.0344 - val_mae: 0.1435 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0229 - mae: 0.1182 - val_loss: 0.0359 - val_mae: 0.1477 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0221 - mae: 0.1162 - val_loss: 0.0417 - val_mae: 0.1529 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1167 - val_loss: 0.0352 - val_mae: 0.1455 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0221 - mae: 0.1163 - val_loss: 0.0337 - val_mae: 0.1436 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1173 - val_loss: 0.0383 - val_mae: 0.1529 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0230 - mae: 0.1179 - val_loss: 0.0337 - val_mae: 0.1424 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0226 - mae: 0.1171 - val_loss: 0.0340 - val_mae: 0.1428 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1167 - val_loss: 0.0399 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0224 - mae: 0.1167 - val_loss: 0.0363 - val_mae: 0.1490 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1154 - val_loss: 0.0345 - val_mae: 0.1384 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1169 - val_loss: 0.0331 - val_mae: 0.1422 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0220 - mae: 0.1162 - val_loss: 0.0326 - val_mae: 0.1406 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0225 - mae: 0.1168 - val_loss: 0.0388 - val_mae: 0.1549 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.03084\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0223 - mae: 0.1167 - val_loss: 0.0326 - val_mae: 0.1404 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss improved from 0.03084 to 0.01779, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0070 - mae: 0.0655 - val_loss: 0.0178 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss improved from 0.01779 to 0.01715, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 0.0053 - mae: 0.0575 - val_loss: 0.0171 - val_mae: 0.1002 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.01715 to 0.01700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0047 - mae: 0.0544 - val_loss: 0.0170 - val_mae: 0.0994 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01700\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0523 - val_loss: 0.0171 - val_mae: 0.0996 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01700\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0173 - val_mae: 0.1003 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01700\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0497 - val_loss: 0.0172 - val_mae: 0.0999 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.01700 to 0.01695, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0486 - val_loss: 0.0170 - val_mae: 0.0989 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.01695 to 0.01675, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0036 - mae: 0.0476 - val_loss: 0.0167 - val_mae: 0.0987 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.01675 to 0.01670, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0035 - mae: 0.0469 - val_loss: 0.0167 - val_mae: 0.0987 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0034 - mae: 0.0462 - val_loss: 0.0169 - val_mae: 0.0990 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0033 - mae: 0.0455 - val_loss: 0.0169 - val_mae: 0.0988 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0032 - mae: 0.0449 - val_loss: 0.0169 - val_mae: 0.0992 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0444 - val_loss: 0.0171 - val_mae: 0.0993 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0031 - mae: 0.0440 - val_loss: 0.0168 - val_mae: 0.0989 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0030 - mae: 0.0434 - val_loss: 0.0168 - val_mae: 0.0987 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0430 - val_loss: 0.0172 - val_mae: 0.0993 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0029 - mae: 0.0425 - val_loss: 0.0169 - val_mae: 0.0990 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0178 - val_mae: 0.0992 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0179 - val_mae: 0.0998 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0413 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0172 - val_mae: 0.0996 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0407 - val_loss: 0.0217 - val_mae: 0.1003 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0273 - val_mae: 0.1019 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0026 - mae: 0.0401 - val_loss: 0.0171 - val_mae: 0.0994 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0397 - val_loss: 0.0175 - val_mae: 0.1001 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0025 - mae: 0.0396 - val_loss: 0.0288 - val_mae: 0.1011 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0391 - val_loss: 0.0236 - val_mae: 0.1009 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0024 - mae: 0.0389 - val_loss: 0.0174 - val_mae: 0.0999 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0172 - val_mae: 0.0984 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0329 - val_loss: 0.0174 - val_mae: 0.0987 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0327 - val_loss: 0.0193 - val_mae: 0.0990 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0260 - val_mae: 0.0994 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0325 - val_loss: 0.0323 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0324 - val_loss: 0.0339 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0323 - val_loss: 0.0183 - val_mae: 0.0989 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0287 - val_mae: 0.0996 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0322 - val_loss: 0.0311 - val_mae: 0.0996 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0321 - val_loss: 0.0318 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0320 - val_loss: 0.0343 - val_mae: 0.1000 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0017 - mae: 0.0320 - val_loss: 0.0286 - val_mae: 0.0995 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0296 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0319 - val_loss: 0.0311 - val_mae: 0.1002 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0279 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0320 - val_mae: 0.1001 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0317 - val_loss: 0.0310 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0317 - val_loss: 0.0175 - val_mae: 0.0988 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0316 - val_loss: 0.0318 - val_mae: 0.1002 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0316 - val_loss: 0.0326 - val_mae: 0.1001 - learning_rate: 1.0000e-05\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0310 - val_loss: 0.0243 - val_mae: 0.0994 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0309 - val_loss: 0.0340 - val_mae: 0.1000 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0016 - mae: 0.0309 - val_loss: 0.0246 - val_mae: 0.0992 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0315 - val_mae: 0.0998 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0174 - val_mae: 0.0987 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0246 - val_mae: 0.0995 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0215 - val_mae: 0.0991 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0308 - val_mae: 0.0998 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0309 - val_loss: 0.0332 - val_mae: 0.1002 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0317 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01670\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0015 - mae: 0.0308 - val_loss: 0.0294 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 248: early stopping\n",
      "Restoring model weights from the end of the best epoch: 198.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1560 m\n",
      "Median positioning error: 0.1376 m\n",
      "90th percentile error: 0.2821 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8732.489938,
   "end_time": "2025-07-11T16:42:17.934894",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-11T14:16:45.444956",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
