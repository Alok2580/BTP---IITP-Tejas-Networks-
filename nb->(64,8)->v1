{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "235cfd27",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-17T05:33:30.880528Z",
     "iopub.status.busy": "2025-08-17T05:33:30.880026Z",
     "iopub.status.idle": "2025-08-17T05:33:32.406101Z",
     "shell.execute_reply": "2025-08-17T05:33:32.405064Z"
    },
    "papermill": {
     "duration": 1.531397,
     "end_time": "2025-08-17T05:33:32.407618",
     "exception": false,
     "start_time": "2025-08-17T05:33:30.876221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4146cf1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:33:32.415838Z",
     "iopub.status.busy": "2025-08-17T05:33:32.415080Z",
     "iopub.status.idle": "2025-08-17T05:33:48.174386Z",
     "shell.execute_reply": "2025-08-17T05:33:48.173571Z"
    },
    "papermill": {
     "duration": 15.764771,
     "end_time": "2025-08-17T05:33:48.175856",
     "exception": false,
     "start_time": "2025-08-17T05:33:32.411085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-17 05:33:34.223804: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755408814.453957      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755408814.513218      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4402f875",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:33:48.181339Z",
     "iopub.status.busy": "2025-08-17T05:33:48.180628Z",
     "iopub.status.idle": "2025-08-17T05:33:48.185165Z",
     "shell.execute_reply": "2025-08-17T05:33:48.184509Z"
    },
    "papermill": {
     "duration": 0.008176,
     "end_time": "2025-08-17T05:33:48.186259",
     "exception": false,
     "start_time": "2025-08-17T05:33:48.178083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0d06ddcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:33:48.190752Z",
     "iopub.status.busy": "2025-08-17T05:33:48.190516Z",
     "iopub.status.idle": "2025-08-17T05:33:48.193712Z",
     "shell.execute_reply": "2025-08-17T05:33:48.193064Z"
    },
    "papermill": {
     "duration": 0.006672,
     "end_time": "2025-08-17T05:33:48.194849",
     "exception": false,
     "start_time": "2025-08-17T05:33:48.188177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e60e85ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-17T05:33:48.199649Z",
     "iopub.status.busy": "2025-08-17T05:33:48.199428Z",
     "iopub.status.idle": "2025-08-17T07:04:12.773028Z",
     "shell.execute_reply": "2025-08-17T07:04:12.772158Z"
    },
    "papermill": {
     "duration": 5424.577566,
     "end_time": "2025-08-17T07:04:12.774261",
     "exception": false,
     "start_time": "2025-08-17T05:33:48.196695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755408849.545245      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755408858.908711      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,600</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">31,744</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">198,272</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m41,600\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m31,744\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m198,272\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">272,394</span> (1.04 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m272,394\u001b[0m (1.04 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">272,134</span> (1.04 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m272,134\u001b[0m (1.04 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755408869.599695      57 service.cc:148] XLA service 0x7f5430003610 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755408869.600972      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755408872.959465      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 18.20718, saving model to models/best_model_full.keras\n",
      "4375/4375 - 40s - 9ms/step - loss: 122.5159 - mae: 7.6584 - val_loss: 18.2072 - val_mae: 3.2573 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 18.20718 to 6.08711, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 12.5870 - mae: 2.6917 - val_loss: 6.0871 - val_mae: 1.8958 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 6.08711 to 3.97635, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 6.1248 - mae: 1.8508 - val_loss: 3.9764 - val_mae: 1.5186 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss did not improve from 3.97635\n",
      "4375/4375 - 26s - 6ms/step - loss: 4.1718 - mae: 1.4229 - val_loss: 5.4828 - val_mae: 1.7081 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 3.97635 to 1.56225, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.6024 - mae: 1.1980 - val_loss: 1.5623 - val_mae: 0.9689 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.56225\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.4831 - mae: 1.0659 - val_loss: 2.0095 - val_mae: 1.0961 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.56225 to 0.71008, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4027 - mae: 0.8756 - val_loss: 0.7101 - val_mae: 0.6625 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.71008\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7354 - mae: 0.9054 - val_loss: 0.8231 - val_mae: 0.6986 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.71008\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4192 - mae: 0.7656 - val_loss: 0.9635 - val_mae: 0.7647 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.71008\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1237 - mae: 0.6987 - val_loss: 6.0069 - val_mae: 1.7943 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.71008\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5204 - mae: 0.7723 - val_loss: 1.5256 - val_mae: 0.9377 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.71008 to 0.55117, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7248 - mae: 0.6545 - val_loss: 0.5512 - val_mae: 0.5865 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.55117\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5180 - mae: 0.7561 - val_loss: 1.2605 - val_mae: 0.8698 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.55117\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5832 - mae: 0.5931 - val_loss: 0.6400 - val_mae: 0.6077 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.55117\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.0495 - mae: 0.8053 - val_loss: 0.8188 - val_mae: 0.7016 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.55117\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1943 - mae: 0.7327 - val_loss: 1.0233 - val_mae: 0.7767 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.55117 to 0.48718, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5872 - mae: 0.5937 - val_loss: 0.4872 - val_mae: 0.5478 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.48718\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.5877 - mae: 0.9045 - val_loss: 0.9816 - val_mae: 0.7780 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.48718 to 0.35979, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5685 - mae: 0.5859 - val_loss: 0.3598 - val_mae: 0.4694 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.35979\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.7820 - mae: 0.9365 - val_loss: 0.6297 - val_mae: 0.6133 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.35979\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4555 - mae: 0.7930 - val_loss: 0.5416 - val_mae: 0.5779 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.35979\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4863 - mae: 0.7274 - val_loss: 1.2158 - val_mae: 0.8546 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.35979 to 0.34902, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5915 - mae: 0.5940 - val_loss: 0.3490 - val_mae: 0.4626 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.2537 - mae: 0.8262 - val_loss: 0.8580 - val_mae: 0.7197 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6283 - mae: 0.5873 - val_loss: 0.5336 - val_mae: 0.5609 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3536 - mae: 0.6988 - val_loss: 0.8316 - val_mae: 0.7007 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4917 - mae: 0.5443 - val_loss: 0.3843 - val_mae: 0.4786 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3687 - mae: 0.7020 - val_loss: 0.5382 - val_mae: 0.5838 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3093 - mae: 0.7118 - val_loss: 0.9882 - val_mae: 0.7698 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8107 - mae: 0.6534 - val_loss: 0.5450 - val_mae: 0.5767 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2775 - mae: 0.7031 - val_loss: 0.5276 - val_mae: 0.5691 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7354 - mae: 0.5943 - val_loss: 1.0867 - val_mae: 0.7937 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7686 - mae: 0.7580 - val_loss: 0.9719 - val_mae: 0.7593 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5253 - mae: 0.5543 - val_loss: 0.3689 - val_mae: 0.4809 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.34902\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4360 - mae: 0.6828 - val_loss: 0.5117 - val_mae: 0.5369 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.34902\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3765 - mae: 0.4798 - val_loss: 0.5550 - val_mae: 0.5597 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4140 - mae: 0.7150 - val_loss: 0.3512 - val_mae: 0.4629 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.34902\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3510 - mae: 0.4636 - val_loss: 0.4540 - val_mae: 0.5210 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.34902\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7939 - mae: 0.7339 - val_loss: 0.4504 - val_mae: 0.5278 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.34902 to 0.23655, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3838 - mae: 0.4825 - val_loss: 0.2366 - val_mae: 0.3834 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3611 - mae: 0.4664 - val_loss: 0.2934 - val_mae: 0.4237 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1648 - mae: 0.6299 - val_loss: 0.9658 - val_mae: 0.7199 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.23655\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3786 - mae: 0.4783 - val_loss: 0.2632 - val_mae: 0.4046 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9459 - mae: 0.6157 - val_loss: 0.4284 - val_mae: 0.4874 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.23655\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4298 - mae: 0.4885 - val_loss: 6.9978 - val_mae: 1.9418 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.23655\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.4857 - mae: 0.5087 - val_loss: 2.0006 - val_mae: 0.9537 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.23655\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2723 - mae: 0.6574 - val_loss: 0.4610 - val_mae: 0.5323 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.23655\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.3617 - mae: 0.4678 - val_loss: 0.9403 - val_mae: 0.7233 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1408 - mae: 0.5603 - val_loss: 19.4032 - val_mae: 2.8361 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7198 - mae: 0.6128 - val_loss: 0.3256 - val_mae: 0.4486 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6863 - mae: 0.5544 - val_loss: 92.6889 - val_mae: 6.2317 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7515 - mae: 0.7375 - val_loss: 0.3529 - val_mae: 0.4669 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4187 - mae: 0.5710 - val_loss: 14.6529 - val_mae: 2.3298 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3760 - mae: 0.7645 - val_loss: 0.5999 - val_mae: 0.5908 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.9927 - mae: 0.9643 - val_loss: 1.1569 - val_mae: 0.8235 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5734 - mae: 0.5850 - val_loss: 2.1433 - val_mae: 0.5265 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.4152 - mae: 0.8534 - val_loss: 2.5256 - val_mae: 0.6615 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4674 - mae: 0.7599 - val_loss: 1.1120 - val_mae: 0.6829 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.23655\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3873 - mae: 0.6670 - val_loss: 11.2937 - val_mae: 2.4998 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.23655\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9984 - mae: 0.6847 - val_loss: 1.0347 - val_mae: 0.7550 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.23655 to 0.19397, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.2161 - mae: 0.3629 - val_loss: 0.1940 - val_mae: 0.3438 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.19397 to 0.15472, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1626 - mae: 0.3163 - val_loss: 0.1547 - val_mae: 0.3088 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.15472 to 0.12682, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1271 - mae: 0.2799 - val_loss: 0.1268 - val_mae: 0.2783 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.12682 to 0.11110, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1080 - mae: 0.2583 - val_loss: 0.1111 - val_mae: 0.2610 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.11110 to 0.09822, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0959 - mae: 0.2434 - val_loss: 0.0982 - val_mae: 0.2452 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.09822 to 0.09236, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0881 - mae: 0.2332 - val_loss: 0.0924 - val_mae: 0.2373 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.09236 to 0.08879, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0813 - mae: 0.2245 - val_loss: 0.0888 - val_mae: 0.2330 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.08879 to 0.08043, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0758 - mae: 0.2167 - val_loss: 0.0804 - val_mae: 0.2212 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.08043 to 0.07796, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0715 - mae: 0.2103 - val_loss: 0.0780 - val_mae: 0.2181 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.07796\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0677 - mae: 0.2048 - val_loss: 0.0926 - val_mae: 0.2389 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.07796\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0641 - mae: 0.1991 - val_loss: 0.0793 - val_mae: 0.2200 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.07796 to 0.07253, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0610 - mae: 0.1943 - val_loss: 0.0725 - val_mae: 0.2103 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.07253 to 0.07136, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0594 - mae: 0.1918 - val_loss: 0.0714 - val_mae: 0.2083 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.07136 to 0.06610, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0573 - mae: 0.1883 - val_loss: 0.0661 - val_mae: 0.2008 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.06610\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0555 - mae: 0.1856 - val_loss: 0.0681 - val_mae: 0.2041 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.06610\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0534 - mae: 0.1822 - val_loss: 0.0687 - val_mae: 0.2062 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.06610\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0523 - mae: 0.1799 - val_loss: 0.0673 - val_mae: 0.2030 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.06610 to 0.06137, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0507 - mae: 0.1778 - val_loss: 0.0614 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.06137 to 0.05956, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0494 - mae: 0.1751 - val_loss: 0.0596 - val_mae: 0.1912 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.05956\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0480 - mae: 0.1727 - val_loss: 0.0611 - val_mae: 0.1934 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.05956 to 0.05941, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0468 - mae: 0.1704 - val_loss: 0.0594 - val_mae: 0.1904 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.05941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0462 - mae: 0.1696 - val_loss: 0.0645 - val_mae: 0.1991 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.05941 to 0.05556, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0453 - mae: 0.1677 - val_loss: 0.0556 - val_mae: 0.1834 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.05556 to 0.05245, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0439 - mae: 0.1652 - val_loss: 0.0524 - val_mae: 0.1797 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.05245\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0428 - mae: 0.1631 - val_loss: 0.0554 - val_mae: 0.1849 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.05245\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0418 - mae: 0.1612 - val_loss: 0.0547 - val_mae: 0.1832 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.05245\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0408 - mae: 0.1594 - val_loss: 0.0537 - val_mae: 0.1816 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.05245\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0404 - mae: 0.1585 - val_loss: 0.0536 - val_mae: 0.1813 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.05245\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0399 - mae: 0.1575 - val_loss: 0.0556 - val_mae: 0.1851 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.05245 to 0.04932, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0395 - mae: 0.1569 - val_loss: 0.0493 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.04932 to 0.04603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0390 - mae: 0.1555 - val_loss: 0.0460 - val_mae: 0.1675 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04603\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0383 - mae: 0.1543 - val_loss: 0.0542 - val_mae: 0.1823 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04603\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0374 - mae: 0.1528 - val_loss: 0.0551 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04603\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0374 - mae: 0.1525 - val_loss: 0.0469 - val_mae: 0.1700 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04603\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0370 - mae: 0.1517 - val_loss: 0.0508 - val_mae: 0.1766 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.04603 to 0.04426, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0371 - mae: 0.1512 - val_loss: 0.0443 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04426\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0354 - mae: 0.1487 - val_loss: 0.0562 - val_mae: 0.1859 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04426\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0355 - mae: 0.1489 - val_loss: 0.0540 - val_mae: 0.1815 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04426\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0353 - mae: 0.1483 - val_loss: 0.0498 - val_mae: 0.1742 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04426\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0351 - mae: 0.1475 - val_loss: 0.0533 - val_mae: 0.1764 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.04426\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0349 - mae: 0.1472 - val_loss: 0.0501 - val_mae: 0.1746 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.04426\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0348 - mae: 0.1470 - val_loss: 0.0603 - val_mae: 0.1645 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04426\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0339 - mae: 0.1453 - val_loss: 0.0498 - val_mae: 0.1717 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.04426 to 0.04385, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0341 - mae: 0.1453 - val_loss: 0.0439 - val_mae: 0.1640 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.04385 to 0.04353, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0338 - mae: 0.1449 - val_loss: 0.0435 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.04353 to 0.04346, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0335 - mae: 0.1441 - val_loss: 0.0435 - val_mae: 0.1629 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04346\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0333 - mae: 0.1437 - val_loss: 0.0435 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04346\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0331 - mae: 0.1434 - val_loss: 0.0464 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04346\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0330 - mae: 0.1433 - val_loss: 0.0455 - val_mae: 0.1663 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.04346 to 0.04273, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0330 - mae: 0.1431 - val_loss: 0.0427 - val_mae: 0.1609 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.04273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0457 - val_mae: 0.1663 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.04273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0330 - mae: 0.1433 - val_loss: 0.0476 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.04273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0324 - mae: 0.1417 - val_loss: 0.0512 - val_mae: 0.1689 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.04273\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0327 - mae: 0.1423 - val_loss: 0.0440 - val_mae: 0.1636 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.04273 to 0.03941, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0322 - mae: 0.1414 - val_loss: 0.0394 - val_mae: 0.1545 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0323 - mae: 0.1414 - val_loss: 0.0458 - val_mae: 0.1679 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0323 - mae: 0.1416 - val_loss: 0.0425 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0320 - mae: 0.1409 - val_loss: 0.0436 - val_mae: 0.1609 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0320 - mae: 0.1408 - val_loss: 0.0444 - val_mae: 0.1635 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0317 - mae: 0.1403 - val_loss: 0.0433 - val_mae: 0.1582 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0320 - mae: 0.1407 - val_loss: 0.0459 - val_mae: 0.1619 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0317 - mae: 0.1403 - val_loss: 0.0489 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1404 - val_loss: 0.0435 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0320 - mae: 0.1407 - val_loss: 0.0421 - val_mae: 0.1598 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0319 - mae: 0.1404 - val_loss: 0.0402 - val_mae: 0.1562 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0315 - mae: 0.1398 - val_loss: 0.0447 - val_mae: 0.1651 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0315 - mae: 0.1398 - val_loss: 0.0436 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1404 - val_loss: 0.0426 - val_mae: 0.1611 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0314 - mae: 0.1396 - val_loss: 0.0421 - val_mae: 0.1597 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03941\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0316 - mae: 0.1399 - val_loss: 0.0405 - val_mae: 0.1569 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0314 - mae: 0.1393 - val_loss: 0.0434 - val_mae: 0.1620 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0313 - mae: 0.1395 - val_loss: 0.0444 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03941\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0312 - mae: 0.1390 - val_loss: 0.0476 - val_mae: 0.1715 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03941\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0313 - mae: 0.1392 - val_loss: 0.0430 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03941\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0311 - mae: 0.1389 - val_loss: 0.0402 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.03941 to 0.02610, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0148 - mae: 0.0961 - val_loss: 0.0261 - val_mae: 0.1246 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02610\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0132 - mae: 0.0908 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss improved from 0.02610 to 0.02538, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0126 - mae: 0.0889 - val_loss: 0.0254 - val_mae: 0.1226 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02538\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0123 - mae: 0.0877 - val_loss: 0.0256 - val_mae: 0.1227 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.02538\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0120 - mae: 0.0868 - val_loss: 0.0256 - val_mae: 0.1221 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.02538 to 0.02515, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0118 - mae: 0.0861 - val_loss: 0.0252 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02515\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0117 - mae: 0.0856 - val_loss: 0.0252 - val_mae: 0.1216 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02515\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0115 - mae: 0.0850 - val_loss: 0.0260 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.02515 to 0.02512, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0114 - mae: 0.0845 - val_loss: 0.0251 - val_mae: 0.1217 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02512\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0113 - mae: 0.0842 - val_loss: 0.0252 - val_mae: 0.1211 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02512\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0112 - mae: 0.0838 - val_loss: 0.0256 - val_mae: 0.1218 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02512\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0111 - mae: 0.0835 - val_loss: 0.0252 - val_mae: 0.1210 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02512\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0110 - mae: 0.0832 - val_loss: 0.0255 - val_mae: 0.1215 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02512\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0110 - mae: 0.0829 - val_loss: 0.0279 - val_mae: 0.1227 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02512\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0109 - mae: 0.0826 - val_loss: 0.0259 - val_mae: 0.1223 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02512\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0108 - mae: 0.0823 - val_loss: 0.0254 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02512\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0107 - mae: 0.0820 - val_loss: 0.0255 - val_mae: 0.1215 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02512\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0106 - mae: 0.0817 - val_loss: 0.0262 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.02512 to 0.02501, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0106 - mae: 0.0816 - val_loss: 0.0250 - val_mae: 0.1212 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0105 - mae: 0.0813 - val_loss: 0.0254 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0105 - mae: 0.0810 - val_loss: 0.0251 - val_mae: 0.1212 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0104 - mae: 0.0809 - val_loss: 0.0253 - val_mae: 0.1219 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0104 - mae: 0.0807 - val_loss: 0.0252 - val_mae: 0.1216 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0103 - mae: 0.0804 - val_loss: 0.0251 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0103 - mae: 0.0801 - val_loss: 0.0253 - val_mae: 0.1209 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0801 - val_loss: 0.0251 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0102 - mae: 0.0799 - val_loss: 0.0251 - val_mae: 0.1211 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0101 - mae: 0.0796 - val_loss: 0.0255 - val_mae: 0.1220 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0796 - val_loss: 0.0251 - val_mae: 0.1212 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0101 - mae: 0.0794 - val_loss: 0.0257 - val_mae: 0.1216 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0100 - mae: 0.0793 - val_loss: 0.0255 - val_mae: 0.1212 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0790 - val_loss: 0.0255 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0789 - val_loss: 0.0259 - val_mae: 0.1216 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0788 - val_loss: 0.0252 - val_mae: 0.1213 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0098 - mae: 0.0785 - val_loss: 0.0255 - val_mae: 0.1208 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0263 - val_mae: 0.1221 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0273 - val_mae: 0.1223 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0781 - val_loss: 0.0255 - val_mae: 0.1208 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0779 - val_loss: 0.0333 - val_mae: 0.1241 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0085 - mae: 0.0730 - val_loss: 0.0305 - val_mae: 0.1211 - learning_rate: 1.0000e-05\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0290 - val_mae: 0.1205 - learning_rate: 1.0000e-05\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0723 - val_loss: 0.0271 - val_mae: 0.1200 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0084 - mae: 0.0722 - val_loss: 0.0277 - val_mae: 0.1203 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0722 - val_loss: 0.0273 - val_mae: 0.1201 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0721 - val_loss: 0.0260 - val_mae: 0.1197 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0721 - val_loss: 0.0261 - val_mae: 0.1197 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0083 - mae: 0.0720 - val_loss: 0.0268 - val_mae: 0.1199 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0720 - val_loss: 0.0263 - val_mae: 0.1199 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0720 - val_loss: 0.0268 - val_mae: 0.1199 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0720 - val_loss: 0.0264 - val_mae: 0.1198 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0719 - val_loss: 0.0268 - val_mae: 0.1201 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0719 - val_loss: 0.0266 - val_mae: 0.1199 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0719 - val_loss: 0.0264 - val_mae: 0.1200 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0719 - val_loss: 0.0264 - val_mae: 0.1197 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0718 - val_loss: 0.0260 - val_mae: 0.1196 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0718 - val_loss: 0.0260 - val_mae: 0.1197 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0718 - val_loss: 0.0271 - val_mae: 0.1201 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0083 - mae: 0.0718 - val_loss: 0.0261 - val_mae: 0.1198 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0082 - mae: 0.0718 - val_loss: 0.0267 - val_mae: 0.1199 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0712 - val_loss: 0.0266 - val_mae: 0.1198 - learning_rate: 1.0000e-06\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0266 - val_mae: 0.1198 - learning_rate: 1.0000e-06\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0263 - val_mae: 0.1196 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0261 - val_mae: 0.1195 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0262 - val_mae: 0.1196 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0261 - val_mae: 0.1195 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02501\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0263 - val_mae: 0.1196 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0261 - val_mae: 0.1195 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0263 - val_mae: 0.1196 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02501\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0263 - val_mae: 0.1196 - learning_rate: 1.0000e-06\n",
      "Epoch 204: early stopping\n",
      "Restoring model weights from the end of the best epoch: 154.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1912 m\n",
      "Median positioning error: 0.1723 m\n",
      "90th percentile error: 0.3386 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5449.248799,
   "end_time": "2025-08-17T07:04:15.746147",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-17T05:33:26.497348",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
