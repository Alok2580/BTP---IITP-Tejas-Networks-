{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bedc6e10",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T05:32:00.764666Z",
     "iopub.status.busy": "2025-08-07T05:32:00.764402Z",
     "iopub.status.idle": "2025-08-07T05:32:02.244867Z",
     "shell.execute_reply": "2025-08-07T05:32:02.243981Z"
    },
    "papermill": {
     "duration": 1.487365,
     "end_time": "2025-08-07T05:32:02.246792",
     "exception": false,
     "start_time": "2025-08-07T05:32:00.759427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e8852d78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:32:02.254676Z",
     "iopub.status.busy": "2025-08-07T05:32:02.254281Z",
     "iopub.status.idle": "2025-08-07T05:32:17.390540Z",
     "shell.execute_reply": "2025-08-07T05:32:17.389661Z"
    },
    "papermill": {
     "duration": 15.141174,
     "end_time": "2025-08-07T05:32:17.392061",
     "exception": false,
     "start_time": "2025-08-07T05:32:02.250887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 05:32:04.304042: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754544724.494139      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754544724.553607      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3338be45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:32:17.397427Z",
     "iopub.status.busy": "2025-08-07T05:32:17.396955Z",
     "iopub.status.idle": "2025-08-07T05:32:17.401604Z",
     "shell.execute_reply": "2025-08-07T05:32:17.400862Z"
    },
    "papermill": {
     "duration": 0.008477,
     "end_time": "2025-08-07T05:32:17.402796",
     "exception": false,
     "start_time": "2025-08-07T05:32:17.394319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 7   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc65d097",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:32:17.407273Z",
     "iopub.status.busy": "2025-08-07T05:32:17.407062Z",
     "iopub.status.idle": "2025-08-07T05:32:17.410171Z",
     "shell.execute_reply": "2025-08-07T05:32:17.409655Z"
    },
    "papermill": {
     "duration": 0.006503,
     "end_time": "2025-08-07T05:32:17.411194",
     "exception": false,
     "start_time": "2025-08-07T05:32:17.404691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5260c198",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T05:32:17.416162Z",
     "iopub.status.busy": "2025-08-07T05:32:17.415971Z",
     "iopub.status.idle": "2025-08-07T08:17:13.572836Z",
     "shell.execute_reply": "2025-08-07T08:17:13.572094Z"
    },
    "papermill": {
     "duration": 9896.161,
     "end_time": "2025-08-07T08:17:13.574019",
     "exception": false,
     "start_time": "2025-08-07T05:32:17.413019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754544757.455173      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754544766.631951      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,642</span> (772.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m197,642\u001b[0m (772.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,382</span> (771.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m197,382\u001b[0m (771.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754544777.309956      56 service.cc:148] XLA service 0x7ea1c00030f0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754544777.310856      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754544780.487156      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 15.34886, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 63.3931 - mae: 5.4642 - val_loss: 15.3489 - val_mae: 3.0698 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 15.34886 to 7.67890, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 13.5721 - mae: 2.8429 - val_loss: 7.6789 - val_mae: 2.1480 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 7.67890 to 4.85453, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 7.4087 - mae: 2.0637 - val_loss: 4.8545 - val_mae: 1.7290 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 4.85453 to 2.85182, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.8543 - mae: 1.5015 - val_loss: 2.8518 - val_mae: 1.3069 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.85182 to 2.59184, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.2953 - mae: 1.3173 - val_loss: 2.5918 - val_mae: 1.2514 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.59184 to 1.46649, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7326 - mae: 0.9864 - val_loss: 1.4665 - val_mae: 0.9301 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.46649 to 0.79697, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7542 - mae: 0.9061 - val_loss: 0.7970 - val_mae: 0.6950 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.79697\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7864 - mae: 0.9032 - val_loss: 0.8707 - val_mae: 0.7289 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.79697\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1675 - mae: 0.8031 - val_loss: 2.2132 - val_mae: 1.1037 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.79697\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3293 - mae: 0.8473 - val_loss: 0.9418 - val_mae: 0.7610 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 0.79697 to 0.77397, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5564 - mae: 0.8687 - val_loss: 0.7740 - val_mae: 0.6781 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 0.77397 to 0.56002, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3073 - mae: 0.7744 - val_loss: 0.5600 - val_mae: 0.5861 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.56002\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9689 - mae: 0.8924 - val_loss: 4.5607 - val_mae: 1.4140 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.56002\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1709 - mae: 0.8089 - val_loss: 1.5336 - val_mae: 0.9528 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.56002\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.6500 - mae: 0.8526 - val_loss: 0.8109 - val_mae: 0.6970 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.56002\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2539 - mae: 0.7971 - val_loss: 0.7814 - val_mae: 0.6924 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.56002\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1785 - mae: 0.7585 - val_loss: 0.9057 - val_mae: 0.7359 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.56002\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6047 - mae: 0.8477 - val_loss: 6.0754 - val_mae: 1.8652 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.56002\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2340 - mae: 0.7742 - val_loss: 1.1425 - val_mae: 0.8333 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.56002\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2027 - mae: 0.7455 - val_loss: 1.5293 - val_mae: 0.9286 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.56002\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4633 - mae: 0.8521 - val_loss: 0.8877 - val_mae: 0.7321 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.56002\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2192 - mae: 0.7700 - val_loss: 9.3646 - val_mae: 2.2475 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.56002\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3594 - mae: 0.8168 - val_loss: 0.7578 - val_mae: 0.6923 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.56002\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8207 - mae: 0.8401 - val_loss: 1.0913 - val_mae: 0.8041 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.56002 to 0.53522, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7901 - mae: 0.6824 - val_loss: 0.5352 - val_mae: 0.5721 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.53522\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4167 - mae: 0.8428 - val_loss: 0.7031 - val_mae: 0.6473 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.53522 to 0.44178, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6586 - mae: 0.6196 - val_loss: 0.4418 - val_mae: 0.5177 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.44178\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5828 - mae: 0.7902 - val_loss: 4.3279 - val_mae: 1.5529 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.44178\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.4595 - mae: 1.0476 - val_loss: 0.7501 - val_mae: 0.6637 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.44178\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1497 - mae: 0.7733 - val_loss: 0.9701 - val_mae: 0.7553 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.44178\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8068 - mae: 0.8872 - val_loss: 0.8458 - val_mae: 0.7051 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.44178\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2409 - mae: 0.7791 - val_loss: 1.0108 - val_mae: 0.7698 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.44178\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5723 - mae: 0.9019 - val_loss: 1.0854 - val_mae: 0.8163 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.44178\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5926 - mae: 0.8345 - val_loss: 5.2855 - val_mae: 1.7525 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.44178\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3629 - mae: 0.8077 - val_loss: 2.1511 - val_mae: 1.0791 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.44178 to 0.43752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0267 - mae: 0.7165 - val_loss: 0.4375 - val_mae: 0.5139 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.43752\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9725 - mae: 0.6761 - val_loss: 1.3424 - val_mae: 0.8837 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.43752\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2648 - mae: 0.7493 - val_loss: 0.7030 - val_mae: 0.6613 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.43752\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5239 - mae: 0.8198 - val_loss: 0.7808 - val_mae: 0.6862 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.43752\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7567 - mae: 0.6613 - val_loss: 0.6825 - val_mae: 0.6439 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.43752\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1129 - mae: 0.7021 - val_loss: 0.8807 - val_mae: 0.7112 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.43752 to 0.42713, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5190 - mae: 0.5584 - val_loss: 0.4271 - val_mae: 0.5011 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.42713\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9082 - mae: 0.6645 - val_loss: 0.6527 - val_mae: 0.6269 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.42713 to 0.37686, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7301 - mae: 0.6022 - val_loss: 0.3769 - val_mae: 0.4766 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4573 - mae: 0.7365 - val_loss: 0.5534 - val_mae: 0.5777 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9624 - mae: 0.6852 - val_loss: 0.9428 - val_mae: 0.7384 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.4221 - mae: 0.9731 - val_loss: 1.0665 - val_mae: 0.7937 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.7631 - mae: 1.2376 - val_loss: 6.0543 - val_mae: 1.8947 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.0031 - mae: 0.9919 - val_loss: 1.2123 - val_mae: 0.8370 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8863 - mae: 0.7173 - val_loss: 0.9160 - val_mae: 0.7619 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7128 - mae: 0.8489 - val_loss: 0.8704 - val_mae: 0.7190 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1506 - mae: 0.7414 - val_loss: 1.0152 - val_mae: 0.7688 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8898 - mae: 0.6811 - val_loss: 0.5326 - val_mae: 0.5662 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7001 - mae: 0.8550 - val_loss: 1.9164 - val_mae: 1.0486 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.5093 - mae: 0.9612 - val_loss: 6.2176 - val_mae: 1.4631 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3569 - mae: 0.8424 - val_loss: 0.8331 - val_mae: 0.7150 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3185 - mae: 0.7775 - val_loss: 0.8259 - val_mae: 0.6931 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8018 - mae: 0.9043 - val_loss: 1.3671 - val_mae: 0.8716 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8806 - mae: 0.9446 - val_loss: 1.5686 - val_mae: 0.9554 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2516 - mae: 0.8190 - val_loss: 0.8714 - val_mae: 0.7171 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2846 - mae: 0.7605 - val_loss: 0.5139 - val_mae: 0.5485 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.37686\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5732 - mae: 0.5744 - val_loss: 0.9241 - val_mae: 0.7485 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0247 - mae: 0.6892 - val_loss: 0.4137 - val_mae: 0.4999 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.37686\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7705 - mae: 0.6148 - val_loss: 0.6330 - val_mae: 0.6121 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.37686 to 0.26389, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3549 - mae: 0.4567 - val_loss: 0.2639 - val_mae: 0.4001 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.26389 to 0.18910, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2284 - mae: 0.3714 - val_loss: 0.1891 - val_mae: 0.3379 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.18910 to 0.16135, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1721 - mae: 0.3238 - val_loss: 0.1614 - val_mae: 0.3138 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.16135 to 0.13561, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1441 - mae: 0.2964 - val_loss: 0.1356 - val_mae: 0.2871 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.13561 to 0.12173, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1264 - mae: 0.2780 - val_loss: 0.1217 - val_mae: 0.2721 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.12173 to 0.11188, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1120 - mae: 0.2618 - val_loss: 0.1119 - val_mae: 0.2610 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.11188 to 0.10389, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1022 - mae: 0.2504 - val_loss: 0.1039 - val_mae: 0.2511 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.10389 to 0.09541, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0937 - mae: 0.2398 - val_loss: 0.0954 - val_mae: 0.2409 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.09541\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0861 - mae: 0.2302 - val_loss: 0.0967 - val_mae: 0.2429 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.09541 to 0.08403, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0821 - mae: 0.2249 - val_loss: 0.0840 - val_mae: 0.2266 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.08403\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0767 - mae: 0.2175 - val_loss: 0.0841 - val_mae: 0.2260 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.08403 to 0.07630, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0736 - mae: 0.2127 - val_loss: 0.0763 - val_mae: 0.2150 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.07630\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0702 - mae: 0.2082 - val_loss: 0.0768 - val_mae: 0.2154 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.07630 to 0.07445, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0664 - mae: 0.2024 - val_loss: 0.0745 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.07445 to 0.07151, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0636 - mae: 0.1982 - val_loss: 0.0715 - val_mae: 0.2084 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.07151 to 0.06593, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0618 - mae: 0.1956 - val_loss: 0.0659 - val_mae: 0.2002 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.06593 to 0.06335, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0592 - mae: 0.1915 - val_loss: 0.0634 - val_mae: 0.1950 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.06335\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0579 - mae: 0.1892 - val_loss: 0.0667 - val_mae: 0.2002 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.06335\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0563 - mae: 0.1865 - val_loss: 0.0651 - val_mae: 0.1994 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.06335 to 0.06112, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0539 - mae: 0.1825 - val_loss: 0.0611 - val_mae: 0.1926 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.06112\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0522 - mae: 0.1797 - val_loss: 0.0672 - val_mae: 0.2028 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.06112\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0504 - mae: 0.1764 - val_loss: 0.0612 - val_mae: 0.1929 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.06112 to 0.05752, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0494 - mae: 0.1748 - val_loss: 0.0575 - val_mae: 0.1865 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.05752 to 0.05620, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0482 - mae: 0.1728 - val_loss: 0.0562 - val_mae: 0.1842 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.05620 to 0.05489, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0475 - mae: 0.1713 - val_loss: 0.0549 - val_mae: 0.1820 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.05489\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0460 - mae: 0.1688 - val_loss: 0.0629 - val_mae: 0.1946 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.05489\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0454 - mae: 0.1677 - val_loss: 0.0568 - val_mae: 0.1857 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.05489 to 0.05024, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0445 - mae: 0.1661 - val_loss: 0.0502 - val_mae: 0.1740 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.05024\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0435 - mae: 0.1640 - val_loss: 0.0505 - val_mae: 0.1741 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.05024\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0425 - mae: 0.1625 - val_loss: 0.0537 - val_mae: 0.1801 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.05024 to 0.04956, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0418 - mae: 0.1610 - val_loss: 0.0496 - val_mae: 0.1720 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04956\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0407 - mae: 0.1586 - val_loss: 0.0507 - val_mae: 0.1751 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.04956 to 0.04608, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0404 - mae: 0.1582 - val_loss: 0.0461 - val_mae: 0.1669 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04608\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0397 - mae: 0.1566 - val_loss: 0.0499 - val_mae: 0.1734 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04608\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0392 - mae: 0.1555 - val_loss: 0.0541 - val_mae: 0.1814 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04608\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0385 - mae: 0.1544 - val_loss: 0.0497 - val_mae: 0.1733 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.04608 to 0.04556, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0374 - mae: 0.1522 - val_loss: 0.0456 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.04556 to 0.04514, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0372 - mae: 0.1519 - val_loss: 0.0451 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.04514 to 0.04411, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0364 - mae: 0.1502 - val_loss: 0.0441 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0359 - mae: 0.1490 - val_loss: 0.0446 - val_mae: 0.1638 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04411\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0357 - mae: 0.1486 - val_loss: 0.0469 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.04411\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0354 - mae: 0.1481 - val_loss: 0.0446 - val_mae: 0.1627 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04411\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0351 - mae: 0.1471 - val_loss: 0.0506 - val_mae: 0.1748 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.04411 to 0.04200, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0354 - mae: 0.1469 - val_loss: 0.0420 - val_mae: 0.1585 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04200\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0344 - mae: 0.1457 - val_loss: 0.0425 - val_mae: 0.1597 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04200\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0342 - mae: 0.1456 - val_loss: 0.0458 - val_mae: 0.1660 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.04200\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0335 - mae: 0.1438 - val_loss: 0.0442 - val_mae: 0.1636 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.04200\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0341 - mae: 0.1450 - val_loss: 0.0468 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.04200 to 0.04080, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0338 - mae: 0.1449 - val_loss: 0.0408 - val_mae: 0.1562 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0334 - mae: 0.1438 - val_loss: 0.0445 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0329 - mae: 0.1427 - val_loss: 0.0433 - val_mae: 0.1618 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0333 - mae: 0.1436 - val_loss: 0.0416 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0329 - mae: 0.1425 - val_loss: 0.0447 - val_mae: 0.1632 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0327 - mae: 0.1423 - val_loss: 0.0429 - val_mae: 0.1594 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0327 - mae: 0.1421 - val_loss: 0.0457 - val_mae: 0.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0324 - mae: 0.1414 - val_loss: 0.0526 - val_mae: 0.1793 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0328 - mae: 0.1421 - val_loss: 0.0430 - val_mae: 0.1600 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.04080 to 0.03715, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0323 - mae: 0.1406 - val_loss: 0.0371 - val_mae: 0.1488 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0318 - mae: 0.1402 - val_loss: 0.0504 - val_mae: 0.1719 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0321 - mae: 0.1407 - val_loss: 0.0442 - val_mae: 0.1638 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0323 - mae: 0.1410 - val_loss: 0.0422 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0319 - mae: 0.1401 - val_loss: 0.0398 - val_mae: 0.1543 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0321 - mae: 0.1406 - val_loss: 0.0443 - val_mae: 0.1638 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0321 - mae: 0.1407 - val_loss: 0.0408 - val_mae: 0.1544 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0318 - mae: 0.1401 - val_loss: 0.0430 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1403 - val_loss: 0.0408 - val_mae: 0.1551 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0323 - mae: 0.1408 - val_loss: 0.0436 - val_mae: 0.1609 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0319 - mae: 0.1401 - val_loss: 0.0472 - val_mae: 0.1668 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0322 - mae: 0.1408 - val_loss: 0.0423 - val_mae: 0.1594 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0318 - mae: 0.1400 - val_loss: 0.0388 - val_mae: 0.1516 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0319 - mae: 0.1399 - val_loss: 0.0479 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0326 - mae: 0.1412 - val_loss: 0.0424 - val_mae: 0.1593 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0326 - mae: 0.1413 - val_loss: 0.0412 - val_mae: 0.1563 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03715\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0322 - mae: 0.1405 - val_loss: 0.0434 - val_mae: 0.1607 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0319 - mae: 0.1401 - val_loss: 0.0450 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0318 - mae: 0.1399 - val_loss: 0.0465 - val_mae: 0.1667 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0320 - mae: 0.1393 - val_loss: 0.0394 - val_mae: 0.1533 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03715\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0321 - mae: 0.1407 - val_loss: 0.0423 - val_mae: 0.1591 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss improved from 0.03715 to 0.02486, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0147 - mae: 0.0956 - val_loss: 0.0249 - val_mae: 0.1199 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.02486 to 0.02440, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0131 - mae: 0.0903 - val_loss: 0.0244 - val_mae: 0.1185 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02440\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0125 - mae: 0.0883 - val_loss: 0.0247 - val_mae: 0.1197 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss improved from 0.02440 to 0.02403, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0121 - mae: 0.0871 - val_loss: 0.0240 - val_mae: 0.1175 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.02403\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0119 - mae: 0.0862 - val_loss: 0.0244 - val_mae: 0.1182 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02403\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0117 - mae: 0.0853 - val_loss: 0.0240 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.02403\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0115 - mae: 0.0849 - val_loss: 0.0241 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.02403 to 0.02395, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0113 - mae: 0.0844 - val_loss: 0.0240 - val_mae: 0.1170 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02395\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0112 - mae: 0.0839 - val_loss: 0.0242 - val_mae: 0.1173 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02395\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0111 - mae: 0.0834 - val_loss: 0.0243 - val_mae: 0.1178 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02395\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0110 - mae: 0.0830 - val_loss: 0.0242 - val_mae: 0.1177 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.02395 to 0.02384, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0109 - mae: 0.0826 - val_loss: 0.0238 - val_mae: 0.1164 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02384\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0108 - mae: 0.0822 - val_loss: 0.0242 - val_mae: 0.1176 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02384 to 0.02375, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0107 - mae: 0.0819 - val_loss: 0.0238 - val_mae: 0.1162 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02375\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0107 - mae: 0.0818 - val_loss: 0.0239 - val_mae: 0.1166 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02375\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0106 - mae: 0.0813 - val_loss: 0.0240 - val_mae: 0.1171 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02375\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0105 - mae: 0.0810 - val_loss: 0.0243 - val_mae: 0.1178 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02375\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0104 - mae: 0.0808 - val_loss: 0.0238 - val_mae: 0.1165 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02375\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0103 - mae: 0.0805 - val_loss: 0.0242 - val_mae: 0.1173 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.02375 to 0.02370, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0103 - mae: 0.0803 - val_loss: 0.0237 - val_mae: 0.1160 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02370\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0801 - val_loss: 0.0239 - val_mae: 0.1167 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss improved from 0.02370 to 0.02368, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0799 - val_loss: 0.0237 - val_mae: 0.1160 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02368\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0796 - val_loss: 0.0239 - val_mae: 0.1166 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02368\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0795 - val_loss: 0.0240 - val_mae: 0.1167 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02368\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0792 - val_loss: 0.0238 - val_mae: 0.1163 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.02368 to 0.02361, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0791 - val_loss: 0.0236 - val_mae: 0.1157 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02361\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0789 - val_loss: 0.0237 - val_mae: 0.1160 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02361\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0238 - val_mae: 0.1161 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02361\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0240 - val_mae: 0.1169 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.02361 to 0.02356, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0236 - val_mae: 0.1157 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02356\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0781 - val_loss: 0.0237 - val_mae: 0.1159 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02356\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0097 - mae: 0.0779 - val_loss: 0.0237 - val_mae: 0.1159 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.02356 to 0.02349, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0777 - val_loss: 0.0235 - val_mae: 0.1155 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02349\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0237 - val_mae: 0.1163 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02349\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0235 - val_mae: 0.1155 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02349\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0236 - val_mae: 0.1155 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02349\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0095 - mae: 0.0769 - val_loss: 0.0237 - val_mae: 0.1159 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02349\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0768 - val_loss: 0.0235 - val_mae: 0.1156 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02349\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0769 - val_loss: 0.0237 - val_mae: 0.1159 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.02349 to 0.02347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0767 - val_loss: 0.0235 - val_mae: 0.1154 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0093 - mae: 0.0765 - val_loss: 0.0236 - val_mae: 0.1160 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0093 - mae: 0.0763 - val_loss: 0.0239 - val_mae: 0.1161 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0093 - mae: 0.0761 - val_loss: 0.0235 - val_mae: 0.1152 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02347\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0092 - mae: 0.0760 - val_loss: 0.0238 - val_mae: 0.1159 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0092 - mae: 0.0759 - val_loss: 0.0240 - val_mae: 0.1166 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0092 - mae: 0.0759 - val_loss: 0.0239 - val_mae: 0.1164 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02347\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0091 - mae: 0.0757 - val_loss: 0.0237 - val_mae: 0.1157 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0091 - mae: 0.0754 - val_loss: 0.0237 - val_mae: 0.1156 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0091 - mae: 0.0755 - val_loss: 0.0236 - val_mae: 0.1156 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02347\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0091 - mae: 0.0754 - val_loss: 0.0238 - val_mae: 0.1160 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss improved from 0.02347 to 0.02289, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0079 - mae: 0.0702 - val_loss: 0.0229 - val_mae: 0.1134 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.02289 to 0.02283, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0078 - mae: 0.0696 - val_loss: 0.0228 - val_mae: 0.1133 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.02283 to 0.02280, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0228 - val_mae: 0.1133 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.02280 to 0.02280, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0694 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02280\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0228 - val_mae: 0.1133 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.02280 to 0.02280, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.02280 to 0.02277, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02277\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.02277 to 0.02276, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0228 - val_mae: 0.1131 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.02276 to 0.02276, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0228 - val_mae: 0.1131 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0690 - val_loss: 0.0228 - val_mae: 0.1131 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0690 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0690 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.02276 to 0.02276, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0690 - val_loss: 0.0228 - val_mae: 0.1130 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0228 - val_mae: 0.1131 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02276\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02276\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0228 - val_mae: 0.1131 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0228 - val_mae: 0.1131 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0687 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02276\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0687 - val_loss: 0.0228 - val_mae: 0.1132 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss improved from 0.02276 to 0.02272, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0682 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02272\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02272\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss improved from 0.02272 to 0.02272, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.02272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss improved from 0.02272 to 0.02271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.02271 to 0.02271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss improved from 0.02271 to 0.02271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss improved from 0.02271 to 0.02271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.02271\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.02271\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss improved from 0.02271 to 0.02270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.02270\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss improved from 0.02270 to 0.02270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss improved from 0.02270 to 0.02270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.02270\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0228 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.02270\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.02270\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1130 - learning_rate: 1.0000e-07\n",
      "Epoch 383/1000\n",
      "\n",
      "Epoch 383: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 384/1000\n",
      "\n",
      "Epoch 384: val_loss did not improve from 0.02270\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0074 - mae: 0.0679 - val_loss: 0.0227 - val_mae: 0.1129 - learning_rate: 1.0000e-07\n",
      "Epoch 384: early stopping\n",
      "Restoring model weights from the end of the best epoch: 334.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1782 m\n",
      "Median positioning error: 0.1561 m\n",
      "90th percentile error: 0.3191 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeXhbxbk/8O+RLNmWdzuLs4csJGSHpAmEspVAQmhZSlu6srSlQKGlhPtroQsBeoGWthQupKW0bKVwL5SdEgIhJEDYAmEN2cm+2I43yass68zvD8WKZUuxZWvOjEbfz/PkAZ9jzbzvzDkzGksaWUIIASIiIiIiIiJSzqU6ACIiIiIiIiKK4CKdiIiIiIiISBNcpBMRERERERFpgot0IiIiIiIiIk1wkU5ERERERESkCS7SiYiIiIiIiDTBRToRERERERGRJrhIJyIiIiIiItIEF+lEREREREREmuAinYiIyGGVlZX42te+hrKyMliWhTvuuEN1SFEXXXQRRo8e3avfveGGG2BZltR4Vq1aBcuysGrVKqn1EBER6YKLdCIiSjuff/45Lr30UowZMwY5OTkoLCzE8ccfjzvvvBMtLS3R3xs9ejQsy4JlWXC5XCguLsbUqVPxox/9CO+++27csjt+v+u/8vLylMV/9dVX46WXXsJ1112Hhx9+GAsWLEj4u51jcLlcGDp0KE4//XTHFq3Nzc244YYbMnKR/OCDDya8HizLwjvvvKM6RCIiMpAlhBCqgyAiIuqtF154AV//+teRnZ2NCy64AFOmTEFbWxtWr16NJ598EhdddBHuvfdeAJFFeklJCa655hoAQENDAzZs2IB///vfqKiowNVXX43bb789pnzLsnDaaafhggsuiDmem5uL8847LyU5lJeXY968efjXv/7V4+92jkcIge3bt+Mvf/kLqqqq8MILL+CMM85ISUwdQqEQbNtGdnY2AKC6uhoDBw7E4sWLccMNN8T8bnt7O9rb25GTk5PSGDqzbRttbW3wer1wuZx9beHBBx/ExRdfjJtuuglHHHFEt/MLFizAgAEDHI2JiIjMl6U6ACIiot7avn07vvnNb2LUqFF49dVXMWTIkOi5K664Alu3bsULL7wQ85hhw4bhu9/9bsyx3//+9/j2t7+NP//5zxg/fjwuv/zymPNHHnlkt8ekUlVVFYqLi3v9+13jOffcczFt2jTccccdKV+kezyeXv9uVlYWsrLkPpVwuVxS/wjQG2eccQZmzZqV1GPa29th2za8Xm+3c01NTcjLy+tzPEIItLa2Ijc3t89lEBGRvvh2dyIiShu33XYbGhsbcd9998Us0DuMGzcOV111VY/l5Obm4uGHH0ZpaSluvvlmpOpNZdu2bcPXv/51lJaWwufz4dhjj435o0HH26eFEFiyZEn0bdPJmjp1KgYMGIDt27dHj7366qs44YQTkJeXh+LiYpx99tnYsGFDzOMaGhrws5/9DKNHj0Z2djYGDRqE0047DR988EH0dzp/Jn3Hjh0YOHAgAODGG2+Mxtvxinq8z6S3t7fjt7/9LcaOHYvs7GyMHj0av/zlLxEMBmN+b/To0fjyl7+M1atXY/bs2cjJycGYMWPwz3/+M+b34n0m/eSTT8aUKVOwfv16nHLKKfD5fBg2bBhuu+22bm21c+dOnHXWWcjLy8OgQYOiHzVI5efcd+zYAcuy8Mc//hF33HFHNPf169dH22j9+vX49re/jZKSEnzxi1/sU1u99NJLmDVrFnJzc/G3v/0tJbETEZF++Eo6ERGljeeffx5jxozB3Llz+11Wfn4+zj33XNx3331Yv349Jk+eHD3X2tqK6urqmN8vKCiIvgU8nsrKSsydOxfNzc346U9/irKyMjz00EM466yz8MQTT+Dcc8/FiSeeiIcffhjf+9734r6lvrfq6upQV1eHcePGAQBeeeUVnHHGGRgzZgxuuOEGtLS04K677sLxxx+PDz74ILrovuyyy/DEE0/gyiuvxKRJk1BTU4PVq1djw4YNOOaYY7rVM3DgQPz1r3/F5ZdfjnPPPRdf/epXAQDTpk1LGNsPf/hDPPTQQ/ja176Ga665Bu+++y5uvfVWbNiwAU8//XTM727duhVf+9rX8IMf/AAXXngh7r//flx00UWYOXNmTH8kaoMFCxbgq1/9Kr7xjW/giSeewC9+8QtMnTo1+u6CpqYmfOlLX8L+/ftx1VVXoby8HI8++ihWrlzZ67YGAL/f3+16sCwLZWVlMcceeOABtLa24kc/+hGys7NRWloaPff1r38d48ePxy233BL9o1AybbVp0yZ861vfwqWXXopLLrkEEyZMSCoHIiJKI4KIiCgN+P1+AUCcffbZvX7MqFGjxJlnnpnw/J///GcBQDz77LPRYwDi/nvggQcOW9fPfvYzAUC88cYb0WMNDQ3iiCOOEKNHjxbhcDimjiuuuKJXOQAQP/jBD8SBAwdEVVWVePfdd8Wpp54qAIg//elPQgghZsyYIQYNGiRqamqij/v444+Fy+USF1xwQfRYUVFRj/VeeOGFYtSoUdGfDxw4IACIxYsXd/vdxYsXi85PJT766CMBQPzwhz+M+b3/+q//EgDEq6++Gj02atQoAUC8/vrr0WNVVVUiOztbXHPNNdFjK1euFADEypUro8dOOukkAUD885//jB4LBoOivLxcnHfeedFjf/rTnwQA8cwzz0SPtbS0iIkTJ3YrM54HHngg4fWQnZ0d/b3t27cLAKKwsFBUVVXFbaNvfetbMcf70lbLli07bLxERGQGvt2diIjSQiAQABB5RTtV8vPzAUTeBt7Z2WefjeXLl8f8mz9//mHLWrp0KWbPnh19K3NH+T/60Y+wY8cOrF+/vs9x3nfffRg4cCAGDRqEOXPm4M0338SiRYvws5/9DPv378dHH32Eiy66KOaV22nTpuG0007D0qVLo8eKi4vx7rvvYt++fX2O5XA66lq0aFHM8Y6N+7ruFzBp0iSccMIJ0Z8HDhyICRMmYNu2bT3WlZ+fH/M5fa/Xi9mzZ8c8dtmyZRg2bBjOOuus6LGcnBxccsklSWQFLFmypNv18OKLL3b7vfPOOy/68YCuLrvsspifk22rI444osdrkIiIzMC3uxMRUVooLCwE0H1B3R+NjY0Aui/8hw8fjnnz5iVV1s6dOzFnzpxux4866qjo+SlTpvQpzrPPPhtXXnklLMtCQUEBJk+eHN14bOfOnQAQ9+3PRx11FF566aXoRmW33XYbLrzwQowYMQIzZ87EwoULccEFF2DMmDF9iqurnTt3wuVyRd+G36G8vBzFxcXRWDuMHDmyWxklJSWoq6vrsa7hw4d3+zx8SUkJPvnkk5h4xo4d2+33usbXk9mzZ/dq47h4O8AnOpdsWx2ubCIiMgtfSSciorRQWFiIoUOHYt26dSkrs6OsZBdtTuv4o8Gpp56K2bNn93ln8G984xvYtm0b7rrrLgwdOhR/+MMfMHny5LivCvdHbzfDc7vdcY+LXmzk15/HynK43dYTnettW3EndyKizMFFOhERpY0vf/nL+Pzzz/H222/3u6zGxkY8/fTTGDFiRPTV7v4YNWoUNm3a1O34xo0bo+dl6Cg3Ud0DBgyIWdQPGTIEP/7xj/HMM89g+/btKCsrw80335yw/GR2nx81ahRs28aWLVtijldWVqK+vl5aGxwuns8//7zbwn3r1q2OxhGPbm1FRET64CKdiIjSxs9//nPk5eXhhz/8ISorK7ud//zzz3HnnXf2WE5LSwu+973voba2Fr/61a/69DVoXS1cuBBr1qyJ+QNCU1MT7r33XowePRqTJk3qdx3xDBkyBDNmzMBDDz2E+vr66PF169bh5ZdfxsKFCwEA4XAYfr8/5rGDBg3C0KFDu33lV2c+nw8AYspOpKOuO+64I+b47bffDgA488wzeywjlebPn4+9e/fiueeeix5rbW3F3//+d0fjiEe3tiIiIn3wM+lERJQ2xo4di0cffRTnn38+jjrqKFxwwQWYMmUK2tra8NZbb+Hf//43LrroopjH7N27F//6178ARF49X79+Pf7973+joqIC11xzDS699NKUxHbttdfif//3f3HGGWfgpz/9KUpLS/HQQw9h+/btePLJJ+Fyyfu7+B/+8AecccYZOO644/CDH/wg+hVsRUVF0e80b2howPDhw/G1r30N06dPR35+Pl555RW89957+NOf/pSw7NzcXEyaNAmPPfYYjjzySJSWlmLKlClxP18/ffp0XHjhhbj33ntRX1+Pk046CWvWrMFDDz2Ec845B6eccoqsJojr0ksvxd13341vfetbuOqqqzBkyBA88sgjyMnJAdD7dwm8+OKL0XdEdDZ37tw+f55ft7YiIiJ9cJFORERp5ayzzsInn3yCP/zhD3j22Wfx17/+FdnZ2Zg2bRr+9Kc/ddu5+6OPPsL3vve96KZrI0aMwFe+8hX88Ic/xOzZs1MW1+DBg/HWW2/hF7/4Be666y60trZi2rRpeP7556W/Kjpv3jwsW7YMixcvxvXXXw+Px4OTTjoJv//976Mbjvl8Pvz4xz/Gyy+/jKeeegq2bWPcuHH4y1/+gssvv/yw5f/jH//AT37yE1x99dVoa2vD4sWLE26C949//ANjxozBgw8+iKeffhrl5eW47rrrsHjx4pTn3ZP8/Hy8+uqr+MlPfoI777wT+fn5uOCCCzB37lycd9550cV6T66//vq4xx944IF+bbqnU1sREZE+LKFyhxUiIiIih91xxx24+uqrsWfPHgwbNkx1OERERDG4SCciIiJjtbS0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ePjhh1FQUIA5c+YgLS0NlZWVDdovLy9HcnIynn32WQC/TA5XrFjhmwwH+m/FihVBTepeeeUVDB06FC1atEBSUhLOPvtsfPTRRw3uZxgG/vGPf2Do0KFITExEamoqBg0ahLlz56K8vBwAMGPGDOTl5aFdu3an7McffvgBV199NXJychAfH4+ePXvimWeeqXOfhQsX+mqx2+1IS0vD0KFD8fDDD6OwsPCUNdXvn9atW+Pyyy/Hnj17Tvm4YH377be46aabfH9rmoYPPvigzn1mzJiBZcuWhaU9r0mTJmHHjh1hjenPyX1/8n9xccH9Ao1MOEknIqKAqmt0TP3Xd/jhYDESnHY8eUVf5KRzYSQiIpUkJCQgKysLMTG/fLv1/vvvx6RJkzB48GB88skn2Lx5M+bMmYMffvgBr776Kq677jqUlZXh/fffbxDv3XffRXV1Na699to624cPH468vDzff1deeSXGjx9fZ9vw4cMbzXfGjBm4+eabccUVV+CHH37A2rVrMXLkSEycOBF///vf69z3uuuuwx133IGJEydi+fLl2LBhA/7yl7/gww8/xP/+9z8AQGJiIrKyshr9OPq6deuQmZmJ1157DVu2bMH999+P++67r0GbycnJyMvLw8GDB7Fq1SrcdNNNePXVVzF48GAcPny40fq2b9+Ow4cP45133sGWLVtw0UUXNXtxMaB2NfHGFjdMTEwM+y8UxMfHIzMzM6wxA/H2/cn/7du3L+D9q6urG2zzrsQfqqY+rrk4SSciiiKGYeCe9zZix5FStEx04n9/PAsT+7cVnRYREZls7dq1ePTRRzFnzhw8+eSTGD58OHJzczF27Fi89957uP7665GZmYmLLroIL7/8coPHL1iwAJdccgnS09PrbHc6ncjKyvL9Fx8fj9jY2DrbvCteB7JmzRrMmTMHTzzxBKZPn44uXbqgZ8+eeOSRR3DHHXdg+vTpOHDgAADg7bffxuuvv44333wTf/rTnzB48GDk5uZi4sSJ+PzzzzF69OiQ+uU3v/kNnnnmGZx99tno1KkTrr32WkyZMqXBCxWapiErKwvZ2dno2bMnbrzxRqxcuRKlpaW45557Gm0nMzMT2dnZOOuss/DAAw/gxx9/xK5duwAAzz//PLp27YrMzEz07NkTr776qu9xhmHgwQcfRPv27REbG4s2bdrgtttu891+8sfd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5vXXX+eXX37h+PHj/Otf/yIgIIDevXsDefda79y5k8uXL3PkyBF2795tcLIyyBuinpaWRkxMDHfu3DE4dDoiIoKmTZvSv39/jhw5woEDB3jllVfo2LGjwSHjFeXll19Gq9UydOhQzpw5w86dO4mKigL+ubJcnIyMDBISEvRe99M57t+/Pw4ODgwcOJBTp06xe/duRo0axYABA4oMny9NWFgY3t7exMbGljsfhuzbt486depQt27dCklPCCGEkE66EEIIcR+io6Np2bIlTz/9NG3btkVRFLZt26YbHq3RaBgxYgSNGjWie/fuNGjQgM8//9xgWu3atWPYsGH069eP6tWrM2fOnCLrqFQq/ve//+Hp6UmHDh2IiIigTp06rFu3zqjldHNzY8uWLRw7dozQ0FDeffddpkyZAlDsvd35li1bhr+/v97rpZdeKncenJyc2LlzJ3fv3qV169Y8//zzdOnShUWLFpU7LWtrawYPHsyaNWvKva0h33zzTZkm0RNCCCHKSqUoimLqTAghhBCi6lizZo3u2e6Ojo6mzk65JSQk0KRJE44cOULt2rXvO50//viDJ554gnPnzuHu7l6BORRCCPEwk9ndhRBCCFGiVatWUadOHQICAjh+/DiTJk0iMjKySnbQAfz8/Pjqq6+4du3aA3XS4+PjWbVqlXTQhRBCVCi5ki6EEEKIEs2ZM4fPP/+chIQE/P396dOnDzNnzsTJycnUWRNCCCEsjnTShRBCCCGEEEIIMyETxwkhhBBCCCGEEGZCOulCCCGEEEIIIYSZkE66EEIIIYQQQghhJqSTLoQQQgghhBBCmAnppAshhBBCCCGEEGZCOulCCCGEEEIIIYSZkE66EEIIIYQQQghhJqSTLoQQQgghhBBCmAnppAshhBBCCCGEEGbi/wHVmWBGsFjGfQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9920.810503,
   "end_time": "2025-08-07T08:17:17.385210",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T05:31:56.574707",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
