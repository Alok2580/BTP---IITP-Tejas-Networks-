{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f0418a45",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-19T04:18:07.642185Z",
     "iopub.status.busy": "2025-08-19T04:18:07.641881Z",
     "iopub.status.idle": "2025-08-19T04:18:09.095181Z",
     "shell.execute_reply": "2025-08-19T04:18:09.094389Z"
    },
    "papermill": {
     "duration": 1.458379,
     "end_time": "2025-08-19T04:18:09.096621",
     "exception": false,
     "start_time": "2025-08-19T04:18:07.638242",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fb2e7b06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:18:09.102297Z",
     "iopub.status.busy": "2025-08-19T04:18:09.101927Z",
     "iopub.status.idle": "2025-08-19T04:18:23.046050Z",
     "shell.execute_reply": "2025-08-19T04:18:23.045379Z"
    },
    "papermill": {
     "duration": 13.948393,
     "end_time": "2025-08-19T04:18:23.047596",
     "exception": false,
     "start_time": "2025-08-19T04:18:09.099203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-19 04:18:10.619499: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755577090.788397      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755577090.839369      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4cc2841d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:18:23.052879Z",
     "iopub.status.busy": "2025-08-19T04:18:23.052470Z",
     "iopub.status.idle": "2025-08-19T04:18:23.057021Z",
     "shell.execute_reply": "2025-08-19T04:18:23.056350Z"
    },
    "papermill": {
     "duration": 0.008361,
     "end_time": "2025-08-19T04:18:23.058219",
     "exception": false,
     "start_time": "2025-08-19T04:18:23.049858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128    #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =7    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1   #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16      # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                    # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb7e55be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:18:23.062889Z",
     "iopub.status.busy": "2025-08-19T04:18:23.062489Z",
     "iopub.status.idle": "2025-08-19T04:18:23.065678Z",
     "shell.execute_reply": "2025-08-19T04:18:23.065046Z"
    },
    "papermill": {
     "duration": 0.006618,
     "end_time": "2025-08-19T04:18:23.066731",
     "exception": false,
     "start_time": "2025-08-19T04:18:23.060113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e12db907",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T04:18:23.071764Z",
     "iopub.status.busy": "2025-08-19T04:18:23.071544Z",
     "iopub.status.idle": "2025-08-19T06:48:03.827827Z",
     "shell.execute_reply": "2025-08-19T06:48:03.827168Z"
    },
    "papermill": {
     "duration": 8980.760581,
     "end_time": "2025-08-19T06:48:03.829204",
     "exception": false,
     "start_time": "2025-08-19T04:18:23.068623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755577129.997910      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755577139.197909      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,642</span> (772.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m197,642\u001b[0m (772.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,382</span> (771.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m197,382\u001b[0m (771.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755577150.459294      57 service.cc:148] XLA service 0x7ac1a4016d00 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755577150.460125      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755577153.735491      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 23.28292, saving model to models/best_model_full.keras\n",
      "4375/4375 - 39s - 9ms/step - loss: 63.7455 - mae: 5.6911 - val_loss: 23.2829 - val_mae: 3.8138 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 23.28292 to 12.56736, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 18.0429 - mae: 3.2918 - val_loss: 12.5674 - val_mae: 2.7976 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 12.56736 to 10.26267, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 12.0326 - mae: 2.6740 - val_loss: 10.2627 - val_mae: 2.5092 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 10.26267 to 10.19536, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 8.8917 - mae: 2.2920 - val_loss: 10.1954 - val_mae: 2.5483 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 10.19536 to 4.02419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 5.8666 - mae: 1.8748 - val_loss: 4.0242 - val_mae: 1.5714 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 4.02419\n",
      "4375/4375 - 26s - 6ms/step - loss: 4.8860 - mae: 1.6752 - val_loss: 5.6647 - val_mae: 1.8522 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 4.02419 to 2.34040, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 3.7564 - mae: 1.4918 - val_loss: 2.3404 - val_mae: 1.1901 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 2.34040 to 1.60482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.6186 - mae: 1.2431 - val_loss: 1.6048 - val_mae: 0.9935 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.60482 to 1.20753, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8621 - mae: 1.0507 - val_loss: 1.2075 - val_mae: 0.8516 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.20753\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5770 - mae: 0.9179 - val_loss: 1.7064 - val_mae: 1.0507 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 1.20753\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5917 - mae: 0.9253 - val_loss: 1.2193 - val_mae: 0.8647 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 1.20753 to 0.89141, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1522 - mae: 0.7858 - val_loss: 0.8914 - val_mae: 0.7373 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.89141 to 0.63278, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9885 - mae: 0.7350 - val_loss: 0.6328 - val_mae: 0.6185 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.63278 to 0.51722, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0627 - mae: 0.7309 - val_loss: 0.5172 - val_mae: 0.5550 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.51722\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1417 - mae: 0.7426 - val_loss: 0.6508 - val_mae: 0.6161 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.51722\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5752 - mae: 0.5832 - val_loss: 0.6694 - val_mae: 0.6469 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.51722 to 0.37859, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5554 - mae: 0.5728 - val_loss: 0.3786 - val_mae: 0.4800 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.37859\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9534 - mae: 0.6274 - val_loss: 0.6439 - val_mae: 0.5755 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.37859\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9911 - mae: 0.6504 - val_loss: 0.4216 - val_mae: 0.5073 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.37859\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0616 - mae: 0.6542 - val_loss: 0.7797 - val_mae: 0.6675 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.37859\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0976 - mae: 0.6780 - val_loss: 2.3798 - val_mae: 1.1647 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.37859\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6862 - mae: 0.6321 - val_loss: 0.4381 - val_mae: 0.5231 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.37859\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1013 - mae: 0.6793 - val_loss: 0.6222 - val_mae: 0.6271 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.37859\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6752 - mae: 0.5833 - val_loss: 0.5288 - val_mae: 0.5748 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.37859\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1641 - mae: 0.7545 - val_loss: 0.8734 - val_mae: 0.7343 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.37859 to 0.36144, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4996 - mae: 0.5484 - val_loss: 0.3614 - val_mae: 0.4689 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.36144 to 0.33598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4678 - mae: 0.5297 - val_loss: 0.3360 - val_mae: 0.4512 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.33598\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4242 - mae: 0.7236 - val_loss: 0.4186 - val_mae: 0.5031 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.33598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3954 - mae: 0.4895 - val_loss: 0.4356 - val_mae: 0.5152 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.33598\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8881 - mae: 0.7757 - val_loss: 0.3763 - val_mae: 0.4766 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.33598\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4413 - mae: 0.5144 - val_loss: 0.3877 - val_mae: 0.4941 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss improved from 0.33598 to 0.30359, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0614 - mae: 0.6267 - val_loss: 0.3036 - val_mae: 0.4293 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9521 - mae: 0.6038 - val_loss: 0.4160 - val_mae: 0.5042 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0783 - mae: 0.6215 - val_loss: 1.4868 - val_mae: 0.9290 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7718 - mae: 0.6170 - val_loss: 0.3401 - val_mae: 0.4532 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8142 - mae: 0.6038 - val_loss: 0.4872 - val_mae: 0.5455 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4510 - mae: 0.5192 - val_loss: 0.3261 - val_mae: 0.4422 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5271 - mae: 0.7896 - val_loss: 0.4794 - val_mae: 0.5349 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9144 - mae: 0.6530 - val_loss: 2.0844 - val_mae: 0.9870 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1000 - mae: 0.7355 - val_loss: 0.6686 - val_mae: 0.6406 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9106 - mae: 0.6034 - val_loss: 3.7795 - val_mae: 1.4377 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6339 - mae: 0.5925 - val_loss: 0.4907 - val_mae: 0.5353 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.8766 - mae: 0.6174 - val_loss: 0.3997 - val_mae: 0.4936 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7480 - mae: 0.5983 - val_loss: 0.4457 - val_mae: 0.5134 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2737 - mae: 0.7072 - val_loss: 0.8359 - val_mae: 0.7052 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4623 - mae: 0.5209 - val_loss: 0.3514 - val_mae: 0.4570 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.7648 - mae: 0.7522 - val_loss: 0.5977 - val_mae: 0.6022 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5581 - mae: 0.5794 - val_loss: 0.3620 - val_mae: 0.4672 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.30359\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9012 - mae: 0.6197 - val_loss: 0.3590 - val_mae: 0.4701 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5890 - mae: 0.5561 - val_loss: 0.3798 - val_mae: 0.4900 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4729 - mae: 0.7564 - val_loss: 0.6229 - val_mae: 0.6073 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.30359\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5139 - mae: 0.5559 - val_loss: 0.6018 - val_mae: 0.6140 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.30359 to 0.15661, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1837 - mae: 0.3326 - val_loss: 0.1566 - val_mae: 0.3071 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.15661 to 0.13789, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1385 - mae: 0.2896 - val_loss: 0.1379 - val_mae: 0.2898 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.13789 to 0.11743, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1174 - mae: 0.2674 - val_loss: 0.1174 - val_mae: 0.2659 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.11743 to 0.10465, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1036 - mae: 0.2512 - val_loss: 0.1046 - val_mae: 0.2511 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.10465 to 0.09673, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0925 - mae: 0.2379 - val_loss: 0.0967 - val_mae: 0.2429 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.09673 to 0.08788, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0845 - mae: 0.2278 - val_loss: 0.0879 - val_mae: 0.2308 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.08788 to 0.07834, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0785 - mae: 0.2197 - val_loss: 0.0783 - val_mae: 0.2176 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.07834 to 0.07234, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0721 - mae: 0.2105 - val_loss: 0.0723 - val_mae: 0.2088 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.07234\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0675 - mae: 0.2042 - val_loss: 0.0754 - val_mae: 0.2158 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.07234\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0649 - mae: 0.1999 - val_loss: 0.0750 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.07234 to 0.06776, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0623 - mae: 0.1957 - val_loss: 0.0678 - val_mae: 0.2020 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.06776 to 0.06482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0599 - mae: 0.1920 - val_loss: 0.0648 - val_mae: 0.1974 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.06482\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0580 - mae: 0.1892 - val_loss: 0.0653 - val_mae: 0.1981 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.06482\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0558 - mae: 0.1857 - val_loss: 0.0683 - val_mae: 0.2036 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.06482 to 0.05799, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0538 - mae: 0.1822 - val_loss: 0.0580 - val_mae: 0.1871 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.05799\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0523 - mae: 0.1796 - val_loss: 0.0584 - val_mae: 0.1882 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.05799\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0511 - mae: 0.1777 - val_loss: 0.0586 - val_mae: 0.1888 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss improved from 0.05799 to 0.05727, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0495 - mae: 0.1750 - val_loss: 0.0573 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.05727\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0482 - mae: 0.1727 - val_loss: 0.0604 - val_mae: 0.1904 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.05727 to 0.05435, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0472 - mae: 0.1711 - val_loss: 0.0543 - val_mae: 0.1815 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.05435\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0462 - mae: 0.1692 - val_loss: 0.0544 - val_mae: 0.1811 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.05435 to 0.05144, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0445 - mae: 0.1660 - val_loss: 0.0514 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.05144 to 0.04818, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0445 - mae: 0.1661 - val_loss: 0.0482 - val_mae: 0.1701 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.04818\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0435 - mae: 0.1644 - val_loss: 0.0514 - val_mae: 0.1760 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.04818\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0425 - mae: 0.1625 - val_loss: 0.0485 - val_mae: 0.1705 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.04818 to 0.04731, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0414 - mae: 0.1602 - val_loss: 0.0473 - val_mae: 0.1700 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.04731\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0410 - mae: 0.1595 - val_loss: 0.0482 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.04731 to 0.04700, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0401 - mae: 0.1576 - val_loss: 0.0470 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.04700 to 0.04539, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0397 - mae: 0.1570 - val_loss: 0.0454 - val_mae: 0.1662 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss improved from 0.04539 to 0.04334, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0390 - mae: 0.1555 - val_loss: 0.0433 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.04334\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0388 - mae: 0.1550 - val_loss: 0.0448 - val_mae: 0.1637 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.04334\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0383 - mae: 0.1540 - val_loss: 0.0511 - val_mae: 0.1752 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04334\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1532 - val_loss: 0.0459 - val_mae: 0.1671 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.04334 to 0.04221, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0379 - mae: 0.1530 - val_loss: 0.0422 - val_mae: 0.1596 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.04221\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0368 - mae: 0.1511 - val_loss: 0.0440 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.04221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0371 - mae: 0.1515 - val_loss: 0.0431 - val_mae: 0.1609 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0362 - mae: 0.1497 - val_loss: 0.0464 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.04221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0360 - mae: 0.1495 - val_loss: 0.0454 - val_mae: 0.1655 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0368 - mae: 0.1507 - val_loss: 0.0454 - val_mae: 0.1653 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0365 - mae: 0.1503 - val_loss: 0.0457 - val_mae: 0.1664 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0362 - mae: 0.1498 - val_loss: 0.0450 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04221\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0360 - mae: 0.1490 - val_loss: 0.0452 - val_mae: 0.1657 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.04221\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0355 - mae: 0.1481 - val_loss: 0.0441 - val_mae: 0.1622 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.04221 to 0.04142, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0354 - mae: 0.1478 - val_loss: 0.0414 - val_mae: 0.1582 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.04142 to 0.04074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0353 - mae: 0.1477 - val_loss: 0.0407 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0345 - mae: 0.1461 - val_loss: 0.0441 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0350 - mae: 0.1474 - val_loss: 0.0432 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0345 - mae: 0.1462 - val_loss: 0.0462 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.04074 to 0.03895, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0343 - mae: 0.1457 - val_loss: 0.0390 - val_mae: 0.1528 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.03895\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0341 - mae: 0.1453 - val_loss: 0.0478 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03895\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0341 - mae: 0.1453 - val_loss: 0.0413 - val_mae: 0.1585 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.03895\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0338 - mae: 0.1447 - val_loss: 0.0417 - val_mae: 0.1579 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.03895 to 0.03885, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0337 - mae: 0.1443 - val_loss: 0.0389 - val_mae: 0.1533 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03885\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0335 - mae: 0.1437 - val_loss: 0.0412 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.03885 to 0.03718, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0333 - mae: 0.1435 - val_loss: 0.0372 - val_mae: 0.1493 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0331 - mae: 0.1433 - val_loss: 0.0399 - val_mae: 0.1543 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0330 - mae: 0.1432 - val_loss: 0.0382 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0328 - mae: 0.1427 - val_loss: 0.0427 - val_mae: 0.1599 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0328 - mae: 0.1425 - val_loss: 0.0405 - val_mae: 0.1570 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0328 - mae: 0.1425 - val_loss: 0.0401 - val_mae: 0.1563 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0330 - mae: 0.1427 - val_loss: 0.0390 - val_mae: 0.1532 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0328 - mae: 0.1424 - val_loss: 0.0421 - val_mae: 0.1598 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0331 - mae: 0.1427 - val_loss: 0.0423 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0325 - mae: 0.1416 - val_loss: 0.0427 - val_mae: 0.1613 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0333 - mae: 0.1428 - val_loss: 0.0412 - val_mae: 0.1576 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0322 - mae: 0.1408 - val_loss: 0.0421 - val_mae: 0.1600 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0331 - mae: 0.1427 - val_loss: 0.0428 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0326 - mae: 0.1418 - val_loss: 0.0508 - val_mae: 0.1755 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0329 - mae: 0.1426 - val_loss: 0.0393 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0327 - mae: 0.1424 - val_loss: 0.0381 - val_mae: 0.1523 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0329 - mae: 0.1426 - val_loss: 0.0402 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0328 - mae: 0.1423 - val_loss: 0.0405 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03718\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0329 - mae: 0.1425 - val_loss: 0.0437 - val_mae: 0.1638 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0325 - mae: 0.1416 - val_loss: 0.0374 - val_mae: 0.1511 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03718\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0333 - mae: 0.1433 - val_loss: 0.0426 - val_mae: 0.1587 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.03718 to 0.02342, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0153 - mae: 0.0971 - val_loss: 0.0234 - val_mae: 0.1176 - learning_rate: 1.0000e-04\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.02342 to 0.02313, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0136 - mae: 0.0920 - val_loss: 0.0231 - val_mae: 0.1169 - learning_rate: 1.0000e-04\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.02313 to 0.02277, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0131 - mae: 0.0903 - val_loss: 0.0228 - val_mae: 0.1160 - learning_rate: 1.0000e-04\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.02277 to 0.02271, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0127 - mae: 0.0891 - val_loss: 0.0227 - val_mae: 0.1158 - learning_rate: 1.0000e-04\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.02271 to 0.02231, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0125 - mae: 0.0881 - val_loss: 0.0223 - val_mae: 0.1147 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.02231\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0123 - mae: 0.0874 - val_loss: 0.0226 - val_mae: 0.1155 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.02231\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0121 - mae: 0.0868 - val_loss: 0.0224 - val_mae: 0.1148 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.02231 to 0.02221, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0119 - mae: 0.0861 - val_loss: 0.0222 - val_mae: 0.1142 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.02221\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0118 - mae: 0.0858 - val_loss: 0.0226 - val_mae: 0.1154 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.02221\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0117 - mae: 0.0854 - val_loss: 0.0224 - val_mae: 0.1146 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.02221\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0116 - mae: 0.0849 - val_loss: 0.0223 - val_mae: 0.1146 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.02221\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0114 - mae: 0.0846 - val_loss: 0.0222 - val_mae: 0.1143 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss improved from 0.02221 to 0.02188, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0114 - mae: 0.0842 - val_loss: 0.0219 - val_mae: 0.1134 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.02188\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0112 - mae: 0.0837 - val_loss: 0.0221 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.02188\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0112 - mae: 0.0836 - val_loss: 0.0225 - val_mae: 0.1152 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.02188\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0111 - mae: 0.0832 - val_loss: 0.0220 - val_mae: 0.1135 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.02188\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0110 - mae: 0.0828 - val_loss: 0.0219 - val_mae: 0.1134 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.02188\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0109 - mae: 0.0826 - val_loss: 0.0221 - val_mae: 0.1139 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.02188\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0109 - mae: 0.0824 - val_loss: 0.0222 - val_mae: 0.1141 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss improved from 0.02188 to 0.02184, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0108 - mae: 0.0821 - val_loss: 0.0218 - val_mae: 0.1131 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.02184\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0107 - mae: 0.0818 - val_loss: 0.0219 - val_mae: 0.1132 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.02184 to 0.02181, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0107 - mae: 0.0815 - val_loss: 0.0218 - val_mae: 0.1129 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.02181\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0106 - mae: 0.0813 - val_loss: 0.0220 - val_mae: 0.1134 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.02181\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0105 - mae: 0.0811 - val_loss: 0.0219 - val_mae: 0.1136 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.02181\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0105 - mae: 0.0811 - val_loss: 0.0220 - val_mae: 0.1136 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02181\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0104 - mae: 0.0808 - val_loss: 0.0219 - val_mae: 0.1131 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.02181 to 0.02173, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0104 - mae: 0.0806 - val_loss: 0.0217 - val_mae: 0.1125 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02173\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0103 - mae: 0.0802 - val_loss: 0.0218 - val_mae: 0.1128 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.02173\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0103 - mae: 0.0801 - val_loss: 0.0218 - val_mae: 0.1130 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.02173 to 0.02158, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0799 - val_loss: 0.0216 - val_mae: 0.1124 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0102 - mae: 0.0797 - val_loss: 0.0216 - val_mae: 0.1125 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0101 - mae: 0.0794 - val_loss: 0.0218 - val_mae: 0.1126 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02158\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0793 - val_loss: 0.0218 - val_mae: 0.1127 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02158\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0791 - val_loss: 0.0219 - val_mae: 0.1135 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02158\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0789 - val_loss: 0.0217 - val_mae: 0.1127 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0218 - val_mae: 0.1128 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02158\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0786 - val_loss: 0.0219 - val_mae: 0.1132 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02158\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0784 - val_loss: 0.0216 - val_mae: 0.1124 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0221 - val_mae: 0.1139 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02158\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0781 - val_loss: 0.0221 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0098 - mae: 0.0781 - val_loss: 0.0218 - val_mae: 0.1129 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0097 - mae: 0.0778 - val_loss: 0.0220 - val_mae: 0.1133 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0777 - val_loss: 0.0218 - val_mae: 0.1127 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0775 - val_loss: 0.0217 - val_mae: 0.1125 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0219 - val_mae: 0.1129 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0217 - val_mae: 0.1122 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0095 - mae: 0.0770 - val_loss: 0.0218 - val_mae: 0.1128 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0095 - mae: 0.0769 - val_loss: 0.0218 - val_mae: 0.1128 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0094 - mae: 0.0768 - val_loss: 0.0220 - val_mae: 0.1134 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02158\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0094 - mae: 0.0767 - val_loss: 0.0217 - val_mae: 0.1128 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss improved from 0.02158 to 0.02083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0082 - mae: 0.0714 - val_loss: 0.0208 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.02083 to 0.02081, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0081 - mae: 0.0709 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0707 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss improved from 0.02081 to 0.02078, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0706 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0705 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0705 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0704 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0703 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0080 - mae: 0.0703 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0703 - val_loss: 0.0209 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0703 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0703 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0702 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0702 - val_loss: 0.0208 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0701 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0701 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0701 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0701 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0700 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02078\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0079 - mae: 0.0700 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02078\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0079 - mae: 0.0700 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.02078 to 0.02077, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0078 - mae: 0.0694 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.02077 to 0.02076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss improved from 0.02076 to 0.02076, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02076\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.02076 to 0.02075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.02075 to 0.02075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.02075 to 0.02075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss improved from 0.02075 to 0.02075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 218: val_loss improved from 0.02075 to 0.02074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss improved from 0.02074 to 0.02074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.02074 to 0.02074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.02074 to 0.02074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss improved from 0.02074 to 0.02074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss improved from 0.02074 to 0.02074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.02074 to 0.02074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.02074\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.02074\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.02074\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0692 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.02074\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss improved from 0.02074 to 0.02073, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.02073\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.02073\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.02073\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02073\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.02073\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.02073\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.02073\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.02073\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.02073\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.02073\n",
      "4375/4375 - 29s - 7ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.02073\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.02073\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.02073\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.02073\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.02073\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.02073\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.02073\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.02073\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.02073\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0208 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.02073\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0077 - mae: 0.0691 - val_loss: 0.0207 - val_mae: 0.1096 - learning_rate: 1.0000e-07\n",
      "Epoch 344: early stopping\n",
      "Restoring model weights from the end of the best epoch: 294.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1727 m\n",
      "Median positioning error: 0.1530 m\n",
      "90th percentile error: 0.3080 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9003.453489,
   "end_time": "2025-08-19T06:48:07.104007",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-19T04:18:03.650518",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
