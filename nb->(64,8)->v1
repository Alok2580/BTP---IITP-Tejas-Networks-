{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb4a3bf7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-06T17:47:39.804702Z",
     "iopub.status.busy": "2025-08-06T17:47:39.804061Z",
     "iopub.status.idle": "2025-08-06T17:47:41.341353Z",
     "shell.execute_reply": "2025-08-06T17:47:41.340506Z"
    },
    "papermill": {
     "duration": 1.542117,
     "end_time": "2025-08-06T17:47:41.342520",
     "exception": false,
     "start_time": "2025-08-06T17:47:39.800403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8390875a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:47:41.348467Z",
     "iopub.status.busy": "2025-08-06T17:47:41.347802Z",
     "iopub.status.idle": "2025-08-06T17:47:57.293594Z",
     "shell.execute_reply": "2025-08-06T17:47:57.292982Z"
    },
    "papermill": {
     "duration": 15.949739,
     "end_time": "2025-08-06T17:47:57.294894",
     "exception": false,
     "start_time": "2025-08-06T17:47:41.345155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-06 17:47:43.249957: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754502463.474062      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754502463.540138      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3bacac6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:47:57.300157Z",
     "iopub.status.busy": "2025-08-06T17:47:57.299676Z",
     "iopub.status.idle": "2025-08-06T17:47:57.303926Z",
     "shell.execute_reply": "2025-08-06T17:47:57.303414Z"
    },
    "papermill": {
     "duration": 0.007751,
     "end_time": "2025-08-06T17:47:57.304845",
     "exception": false,
     "start_time": "2025-08-06T17:47:57.297094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 64   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 8     # 8,16,32,64,128, 256\n",
    "filter_size = 5   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "edc45aef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:47:57.309261Z",
     "iopub.status.busy": "2025-08-06T17:47:57.309051Z",
     "iopub.status.idle": "2025-08-06T17:47:57.312287Z",
     "shell.execute_reply": "2025-08-06T17:47:57.311692Z"
    },
    "papermill": {
     "duration": 0.006621,
     "end_time": "2025-08-06T17:47:57.313343",
     "exception": false,
     "start_time": "2025-08-06T17:47:57.306722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9bd2e569",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T17:47:57.318523Z",
     "iopub.status.busy": "2025-08-06T17:47:57.318329Z",
     "iopub.status.idle": "2025-08-06T20:11:08.547069Z",
     "shell.execute_reply": "2025-08-06T20:11:08.546359Z"
    },
    "papermill": {
     "duration": 8591.233113,
     "end_time": "2025-08-06T20:11:08.548294",
     "exception": false,
     "start_time": "2025-08-06T17:47:57.315181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754502498.844175      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754502508.244186      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">11,584</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,128</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,472</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │        \u001b[38;5;34m11,584\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │        \u001b[38;5;34m16,128\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        \u001b[38;5;34m33,472\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m130\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">61,578</span> (240.54 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m61,578\u001b[0m (240.54 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">61,446</span> (240.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m61,446\u001b[0m (240.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> (528.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m132\u001b[0m (528.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754502519.149071      56 service.cc:148] XLA service 0x7d6160007100 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754502519.149931      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754502522.349172      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 8.34212, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 79.9748 - mae: 5.4553 - val_loss: 8.3421 - val_mae: 2.2581 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 8.34212 to 3.43412, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 5.5639 - mae: 1.8138 - val_loss: 3.4341 - val_mae: 1.4383 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 3.43412 to 3.25640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 4.3309 - mae: 1.5878 - val_loss: 3.2564 - val_mae: 1.4017 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.25640 to 2.20228, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 3.0131 - mae: 1.3362 - val_loss: 2.2023 - val_mae: 1.1511 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.20228 to 2.14268, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 2.4793 - mae: 1.1967 - val_loss: 2.1427 - val_mae: 1.0979 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.14268 to 1.61294, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 2.1690 - mae: 1.0960 - val_loss: 1.6129 - val_mae: 0.9913 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.61294 to 1.54330, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.4950 - mae: 0.9169 - val_loss: 1.5433 - val_mae: 0.9482 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.54330 to 1.08225, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.6669 - mae: 0.9535 - val_loss: 1.0822 - val_mae: 0.8082 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 1.08225\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.7136 - mae: 0.9261 - val_loss: 1.0859 - val_mae: 0.8054 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 1.08225 to 0.59344, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.9025 - mae: 0.7240 - val_loss: 0.5934 - val_mae: 0.5981 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.59344\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.8070 - mae: 0.9263 - val_loss: 1.0549 - val_mae: 0.7976 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.2159 - mae: 0.7960 - val_loss: 0.9353 - val_mae: 0.7603 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.9718 - mae: 0.7380 - val_loss: 1.1552 - val_mae: 0.8193 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.4076 - mae: 0.8090 - val_loss: 0.8923 - val_mae: 0.7214 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.3109 - mae: 0.8199 - val_loss: 1.3732 - val_mae: 0.9133 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.7433 - mae: 0.9155 - val_loss: 0.9338 - val_mae: 0.7554 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.59344\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2363 - mae: 0.8223 - val_loss: 0.8628 - val_mae: 0.7266 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.5194 - mae: 0.8726 - val_loss: 1.6908 - val_mae: 1.0009 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.6209 - mae: 0.8575 - val_loss: 1.8607 - val_mae: 1.0410 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.9660 - mae: 0.7523 - val_loss: 0.8253 - val_mae: 0.7183 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.59344\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.7199 - mae: 0.8515 - val_loss: 0.9419 - val_mae: 0.7473 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss improved from 0.59344 to 0.56109, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.1859 - mae: 0.7768 - val_loss: 0.5611 - val_mae: 0.5801 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.56109\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.7117 - mae: 0.8529 - val_loss: 0.9331 - val_mae: 0.7482 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.56109\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.4367 - mae: 0.7792 - val_loss: 0.6244 - val_mae: 0.6116 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.56109\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.1334 - mae: 0.7184 - val_loss: 0.8338 - val_mae: 0.7055 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.56109 to 0.55894, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5254 - mae: 0.8068 - val_loss: 0.5589 - val_mae: 0.5767 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.55894 to 0.47094, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.7035 - mae: 0.6293 - val_loss: 0.4709 - val_mae: 0.5283 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.47094\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.5420 - mae: 0.7943 - val_loss: 0.6189 - val_mae: 0.6163 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.2446 - mae: 0.7651 - val_loss: 0.5228 - val_mae: 0.5618 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.47094\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.2246 - mae: 0.6861 - val_loss: 4.3699 - val_mae: 1.5890 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.47094\n",
      "4375/4375 - 23s - 5ms/step - loss: 4.9128 - mae: 1.3411 - val_loss: 7.3199 - val_mae: 2.1082 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.47094\n",
      "4375/4375 - 23s - 5ms/step - loss: 4.0394 - mae: 1.5303 - val_loss: 2.6453 - val_mae: 1.2607 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.47094\n",
      "4375/4375 - 23s - 5ms/step - loss: 2.8671 - mae: 1.2781 - val_loss: 1.7698 - val_mae: 1.0318 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.9448 - mae: 1.0666 - val_loss: 1.4849 - val_mae: 0.9475 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 2.1257 - mae: 1.0400 - val_loss: 1.9098 - val_mae: 1.0678 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.7762 - mae: 0.9786 - val_loss: 1.3138 - val_mae: 0.8964 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.5365 - mae: 0.9106 - val_loss: 1.4882 - val_mae: 0.9293 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.47094\n",
      "4375/4375 - 23s - 5ms/step - loss: 1.3254 - mae: 0.8605 - val_loss: 0.8397 - val_mae: 0.7072 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.4804 - mae: 0.8687 - val_loss: 0.8643 - val_mae: 0.7243 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.9995 - mae: 0.7412 - val_loss: 1.1521 - val_mae: 0.8313 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.2848 - mae: 0.7742 - val_loss: 0.8993 - val_mae: 0.7285 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.7614 - mae: 0.6736 - val_loss: 0.8635 - val_mae: 0.7279 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.6115 - mae: 0.8605 - val_loss: 1.0376 - val_mae: 0.7917 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.6774 - mae: 0.8347 - val_loss: 2.0910 - val_mae: 1.0979 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.4082 - mae: 0.8751 - val_loss: 1.1280 - val_mae: 0.7883 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 2.8653 - mae: 1.1291 - val_loss: 1.9880 - val_mae: 1.0481 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.47094\n",
      "4375/4375 - 22s - 5ms/step - loss: 1.0727 - mae: 0.7911 - val_loss: 0.6564 - val_mae: 0.6263 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.47094 to 0.32279, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.3786 - mae: 0.4758 - val_loss: 0.3228 - val_mae: 0.4365 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.32279 to 0.27121, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.2811 - mae: 0.4130 - val_loss: 0.2712 - val_mae: 0.4039 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.27121 to 0.22646, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.2347 - mae: 0.3777 - val_loss: 0.2265 - val_mae: 0.3674 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.22646 to 0.20300, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.2034 - mae: 0.3522 - val_loss: 0.2030 - val_mae: 0.3488 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.20300 to 0.20053, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.1832 - mae: 0.3343 - val_loss: 0.2005 - val_mae: 0.3495 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.20053\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1677 - mae: 0.3199 - val_loss: 0.2086 - val_mae: 0.3583 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.20053 to 0.17049, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1569 - mae: 0.3097 - val_loss: 0.1705 - val_mae: 0.3185 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.17049\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1457 - mae: 0.2991 - val_loss: 0.1768 - val_mae: 0.3278 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.17049 to 0.15898, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1398 - mae: 0.2929 - val_loss: 0.1590 - val_mae: 0.3083 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.15898\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1343 - mae: 0.2868 - val_loss: 0.1630 - val_mae: 0.3148 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.15898 to 0.14263, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1277 - mae: 0.2797 - val_loss: 0.1426 - val_mae: 0.2918 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.14263 to 0.13093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1229 - mae: 0.2748 - val_loss: 0.1309 - val_mae: 0.2805 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.13093\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1192 - mae: 0.2706 - val_loss: 0.1353 - val_mae: 0.2845 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.13093 to 0.12390, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1161 - mae: 0.2672 - val_loss: 0.1239 - val_mae: 0.2725 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.12390\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1126 - mae: 0.2629 - val_loss: 0.1294 - val_mae: 0.2797 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.12390\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1097 - mae: 0.2596 - val_loss: 0.1265 - val_mae: 0.2751 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.12390 to 0.12120, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.1069 - mae: 0.2566 - val_loss: 0.1212 - val_mae: 0.2698 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.12120 to 0.11864, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.1049 - mae: 0.2540 - val_loss: 0.1186 - val_mae: 0.2667 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.11864\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.1037 - mae: 0.2525 - val_loss: 0.1195 - val_mae: 0.2678 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.11864 to 0.11396, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.1015 - mae: 0.2498 - val_loss: 0.1140 - val_mae: 0.2608 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.11396 to 0.10943, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0994 - mae: 0.2471 - val_loss: 0.1094 - val_mae: 0.2543 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.10943\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0973 - mae: 0.2448 - val_loss: 0.1169 - val_mae: 0.2650 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.10943\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0970 - mae: 0.2445 - val_loss: 0.1170 - val_mae: 0.2661 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.10943\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0959 - mae: 0.2429 - val_loss: 0.1131 - val_mae: 0.2593 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.10943\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0967 - mae: 0.2437 - val_loss: 0.1136 - val_mae: 0.2600 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.10943\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0958 - mae: 0.2426 - val_loss: 0.1107 - val_mae: 0.2573 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.10943 to 0.10517, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0936 - mae: 0.2401 - val_loss: 0.1052 - val_mae: 0.2518 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.10517\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0929 - mae: 0.2391 - val_loss: 0.1166 - val_mae: 0.2648 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.10517 to 0.10472, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0912 - mae: 0.2371 - val_loss: 0.1047 - val_mae: 0.2515 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.10472\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0906 - mae: 0.2364 - val_loss: 0.1174 - val_mae: 0.2674 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.10472\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0901 - mae: 0.2355 - val_loss: 0.1050 - val_mae: 0.2518 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.10472\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0897 - mae: 0.2351 - val_loss: 0.1098 - val_mae: 0.2555 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.10472\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0883 - mae: 0.2334 - val_loss: 0.1074 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.10472\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0890 - mae: 0.2344 - val_loss: 0.1098 - val_mae: 0.2568 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.10472\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0875 - mae: 0.2322 - val_loss: 0.1295 - val_mae: 0.2820 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.10472\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0872 - mae: 0.2317 - val_loss: 0.1095 - val_mae: 0.2564 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.10472 to 0.09859, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0864 - mae: 0.2308 - val_loss: 0.0986 - val_mae: 0.2436 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.09859\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0864 - mae: 0.2306 - val_loss: 0.1096 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.09859\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0857 - mae: 0.2299 - val_loss: 0.1042 - val_mae: 0.2505 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.09859\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0856 - mae: 0.2296 - val_loss: 0.1434 - val_mae: 0.2973 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.09859\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0847 - mae: 0.2286 - val_loss: 0.0994 - val_mae: 0.2446 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.09859 to 0.09635, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0847 - mae: 0.2288 - val_loss: 0.0963 - val_mae: 0.2401 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.09635\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0858 - mae: 0.2296 - val_loss: 0.1120 - val_mae: 0.2597 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.09635 to 0.09568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0918 - mae: 0.2298 - val_loss: 0.0957 - val_mae: 0.2400 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.09568\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0838 - mae: 0.2274 - val_loss: 0.1053 - val_mae: 0.2520 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.09568 to 0.09419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0851 - mae: 0.2291 - val_loss: 0.0942 - val_mae: 0.2376 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.09419 to 0.09360, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0843 - mae: 0.2278 - val_loss: 0.0936 - val_mae: 0.2363 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0846 - mae: 0.2283 - val_loss: 0.1003 - val_mae: 0.2447 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0844 - mae: 0.2280 - val_loss: 0.1054 - val_mae: 0.2512 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0843 - mae: 0.2282 - val_loss: 0.0978 - val_mae: 0.2433 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0838 - mae: 0.2273 - val_loss: 0.0948 - val_mae: 0.2381 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0843 - mae: 0.2277 - val_loss: 0.1067 - val_mae: 0.2565 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0845 - mae: 0.2279 - val_loss: 0.1019 - val_mae: 0.2484 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0843 - mae: 0.2281 - val_loss: 0.1043 - val_mae: 0.2505 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0842 - mae: 0.2282 - val_loss: 0.1010 - val_mae: 0.2467 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0834 - mae: 0.2268 - val_loss: 0.1050 - val_mae: 0.2518 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0831 - mae: 0.2259 - val_loss: 0.0945 - val_mae: 0.2382 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.09360\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0841 - mae: 0.2272 - val_loss: 0.0966 - val_mae: 0.2412 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.09360 to 0.09352, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0843 - mae: 0.2276 - val_loss: 0.0935 - val_mae: 0.2364 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.09352\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0834 - mae: 0.2267 - val_loss: 0.1006 - val_mae: 0.2469 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.09352\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0834 - mae: 0.2265 - val_loss: 0.1019 - val_mae: 0.2484 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.09352\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0829 - mae: 0.2259 - val_loss: 0.1107 - val_mae: 0.2599 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.09352\n",
      "4375/4375 - 24s - 5ms/step - loss: 0.0842 - mae: 0.2274 - val_loss: 0.1003 - val_mae: 0.2470 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.09352 to 0.09182, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0844 - mae: 0.2278 - val_loss: 0.0918 - val_mae: 0.2345 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0831 - mae: 0.2262 - val_loss: 0.1022 - val_mae: 0.2480 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0842 - mae: 0.2279 - val_loss: 0.1042 - val_mae: 0.2505 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0837 - mae: 0.2272 - val_loss: 0.0965 - val_mae: 0.2396 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0845 - mae: 0.2280 - val_loss: 0.1046 - val_mae: 0.2500 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0834 - mae: 0.2266 - val_loss: 0.0959 - val_mae: 0.2405 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0838 - mae: 0.2270 - val_loss: 0.0967 - val_mae: 0.2422 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0840 - mae: 0.2271 - val_loss: 0.0970 - val_mae: 0.2426 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0831 - mae: 0.2262 - val_loss: 0.1004 - val_mae: 0.2454 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0837 - mae: 0.2272 - val_loss: 0.1014 - val_mae: 0.2476 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0828 - mae: 0.2257 - val_loss: 0.1003 - val_mae: 0.2434 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0828 - mae: 0.2257 - val_loss: 0.0951 - val_mae: 0.2404 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0825 - mae: 0.2255 - val_loss: 0.0975 - val_mae: 0.2421 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.09182\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0840 - mae: 0.2273 - val_loss: 0.1010 - val_mae: 0.2450 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0831 - mae: 0.2263 - val_loss: 0.0996 - val_mae: 0.2438 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.09182\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0834 - mae: 0.2264 - val_loss: 0.0973 - val_mae: 0.2409 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0842 - mae: 0.2271 - val_loss: 0.0978 - val_mae: 0.2420 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.09182\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0841 - mae: 0.2272 - val_loss: 0.1121 - val_mae: 0.2618 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.09182\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0836 - mae: 0.2267 - val_loss: 0.0934 - val_mae: 0.2362 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.09182\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0837 - mae: 0.2270 - val_loss: 0.0922 - val_mae: 0.2351 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.09182\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0841 - mae: 0.2274 - val_loss: 0.0991 - val_mae: 0.2423 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss improved from 0.09182 to 0.06843, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0489 - mae: 0.1737 - val_loss: 0.0684 - val_mae: 0.2008 - learning_rate: 1.0000e-04\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.06843 to 0.06721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0449 - mae: 0.1668 - val_loss: 0.0672 - val_mae: 0.1990 - learning_rate: 1.0000e-04\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.06721\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0435 - mae: 0.1643 - val_loss: 0.0672 - val_mae: 0.1991 - learning_rate: 1.0000e-04\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.06721 to 0.06635, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0427 - mae: 0.1630 - val_loss: 0.0663 - val_mae: 0.1976 - learning_rate: 1.0000e-04\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.06635 to 0.06543, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0422 - mae: 0.1619 - val_loss: 0.0654 - val_mae: 0.1961 - learning_rate: 1.0000e-04\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.06543 to 0.06536, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0417 - mae: 0.1610 - val_loss: 0.0654 - val_mae: 0.1960 - learning_rate: 1.0000e-04\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.06536\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0414 - mae: 0.1605 - val_loss: 0.0710 - val_mae: 0.2045 - learning_rate: 1.0000e-04\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.06536 to 0.06514, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0411 - mae: 0.1596 - val_loss: 0.0651 - val_mae: 0.1954 - learning_rate: 1.0000e-04\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.06514\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0407 - mae: 0.1591 - val_loss: 0.0659 - val_mae: 0.1966 - learning_rate: 1.0000e-04\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.06514\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0406 - mae: 0.1590 - val_loss: 0.0652 - val_mae: 0.1954 - learning_rate: 1.0000e-04\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss improved from 0.06514 to 0.06469, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0404 - mae: 0.1585 - val_loss: 0.0647 - val_mae: 0.1949 - learning_rate: 1.0000e-04\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.06469\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0401 - mae: 0.1579 - val_loss: 0.0662 - val_mae: 0.1970 - learning_rate: 1.0000e-04\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss improved from 0.06469 to 0.06449, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0400 - mae: 0.1576 - val_loss: 0.0645 - val_mae: 0.1942 - learning_rate: 1.0000e-04\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.06449\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0398 - mae: 0.1573 - val_loss: 0.0657 - val_mae: 0.1961 - learning_rate: 1.0000e-04\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.06449\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0397 - mae: 0.1571 - val_loss: 0.0655 - val_mae: 0.1957 - learning_rate: 1.0000e-04\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.06449\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0395 - mae: 0.1566 - val_loss: 0.0660 - val_mae: 0.1970 - learning_rate: 1.0000e-04\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.06449\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0394 - mae: 0.1564 - val_loss: 0.0656 - val_mae: 0.1961 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.06449\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0391 - mae: 0.1561 - val_loss: 0.0649 - val_mae: 0.1948 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.06449\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0391 - mae: 0.1560 - val_loss: 0.0649 - val_mae: 0.1951 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.06449\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0390 - mae: 0.1558 - val_loss: 0.0662 - val_mae: 0.1970 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.06449\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0389 - mae: 0.1555 - val_loss: 0.0655 - val_mae: 0.1955 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.06449\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0388 - mae: 0.1553 - val_loss: 0.0649 - val_mae: 0.1945 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.06449\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0387 - mae: 0.1552 - val_loss: 0.0647 - val_mae: 0.1941 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.06449\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0386 - mae: 0.1548 - val_loss: 0.0662 - val_mae: 0.1966 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.06449 to 0.06415, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0385 - mae: 0.1548 - val_loss: 0.0642 - val_mae: 0.1933 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0384 - mae: 0.1545 - val_loss: 0.0651 - val_mae: 0.1947 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0383 - mae: 0.1545 - val_loss: 0.0662 - val_mae: 0.1967 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0382 - mae: 0.1542 - val_loss: 0.0660 - val_mae: 0.1962 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0381 - mae: 0.1541 - val_loss: 0.0683 - val_mae: 0.1994 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0381 - mae: 0.1539 - val_loss: 0.0647 - val_mae: 0.1934 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0380 - mae: 0.1538 - val_loss: 0.0647 - val_mae: 0.1936 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0379 - mae: 0.1535 - val_loss: 0.0656 - val_mae: 0.1957 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0378 - mae: 0.1533 - val_loss: 0.0649 - val_mae: 0.1939 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0378 - mae: 0.1533 - val_loss: 0.0662 - val_mae: 0.1958 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0377 - mae: 0.1532 - val_loss: 0.0655 - val_mae: 0.1945 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0376 - mae: 0.1530 - val_loss: 0.0656 - val_mae: 0.1954 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0375 - mae: 0.1527 - val_loss: 0.0662 - val_mae: 0.1962 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0375 - mae: 0.1526 - val_loss: 0.0657 - val_mae: 0.1957 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.06415\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0374 - mae: 0.1526 - val_loss: 0.0646 - val_mae: 0.1935 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0373 - mae: 0.1524 - val_loss: 0.0659 - val_mae: 0.1953 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0373 - mae: 0.1525 - val_loss: 0.0650 - val_mae: 0.1935 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0373 - mae: 0.1524 - val_loss: 0.0660 - val_mae: 0.1961 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0372 - mae: 0.1521 - val_loss: 0.0649 - val_mae: 0.1938 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0371 - mae: 0.1519 - val_loss: 0.0646 - val_mae: 0.1932 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.06415\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0371 - mae: 0.1520 - val_loss: 0.0650 - val_mae: 0.1940 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss improved from 0.06415 to 0.06320, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0339 - mae: 0.1451 - val_loss: 0.0632 - val_mae: 0.1907 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss improved from 0.06320 to 0.06303, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0336 - mae: 0.1445 - val_loss: 0.0630 - val_mae: 0.1903 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.06303\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0335 - mae: 0.1444 - val_loss: 0.0631 - val_mae: 0.1905 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.06303\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0335 - mae: 0.1442 - val_loss: 0.0630 - val_mae: 0.1904 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.06303\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0334 - mae: 0.1442 - val_loss: 0.0631 - val_mae: 0.1904 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.06303 to 0.06297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0334 - mae: 0.1441 - val_loss: 0.0630 - val_mae: 0.1904 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.06297\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0334 - mae: 0.1441 - val_loss: 0.0631 - val_mae: 0.1905 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss improved from 0.06297 to 0.06283, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0334 - mae: 0.1440 - val_loss: 0.0628 - val_mae: 0.1902 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.06283\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0333 - mae: 0.1440 - val_loss: 0.0630 - val_mae: 0.1902 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.06283\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0333 - mae: 0.1439 - val_loss: 0.0630 - val_mae: 0.1903 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.06283\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0333 - mae: 0.1439 - val_loss: 0.0629 - val_mae: 0.1901 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.06283\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0333 - mae: 0.1438 - val_loss: 0.0629 - val_mae: 0.1903 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.06283\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1438 - val_loss: 0.0629 - val_mae: 0.1901 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.06283\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1438 - val_loss: 0.0630 - val_mae: 0.1903 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.06283\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0630 - val_mae: 0.1902 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.06283 to 0.06280, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0628 - val_mae: 0.1900 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.06280\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0630 - val_mae: 0.1902 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.06280\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1436 - val_loss: 0.0628 - val_mae: 0.1900 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.06280\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1436 - val_loss: 0.0630 - val_mae: 0.1902 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.06280\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0332 - mae: 0.1436 - val_loss: 0.0629 - val_mae: 0.1901 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.06280 to 0.06276, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0331 - mae: 0.1435 - val_loss: 0.0628 - val_mae: 0.1899 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.06276\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0331 - mae: 0.1434 - val_loss: 0.0631 - val_mae: 0.1904 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.06276\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0331 - mae: 0.1434 - val_loss: 0.0629 - val_mae: 0.1901 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.06276\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0331 - mae: 0.1434 - val_loss: 0.0629 - val_mae: 0.1903 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.06276\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0331 - mae: 0.1434 - val_loss: 0.0628 - val_mae: 0.1899 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.06276\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0331 - mae: 0.1434 - val_loss: 0.0628 - val_mae: 0.1901 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss improved from 0.06276 to 0.06274, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0331 - mae: 0.1433 - val_loss: 0.0627 - val_mae: 0.1898 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.06274\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0330 - mae: 0.1433 - val_loss: 0.0627 - val_mae: 0.1899 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.06274 to 0.06262, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0327 - mae: 0.1425 - val_loss: 0.0626 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss improved from 0.06262 to 0.06262, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0626 - val_mae: 0.1897 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss improved from 0.06262 to 0.06258, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0626 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.06258 to 0.06254, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.06254\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0626 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.06254\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0626 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss improved from 0.06254 to 0.06254, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss improved from 0.06254 to 0.06252, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.06252\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.06252\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.06252\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1424 - val_loss: 0.0626 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.06252\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0626 - val_mae: 0.1897 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.06252\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss improved from 0.06252 to 0.06251, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.06251\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss improved from 0.06251 to 0.06249, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.06249\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.06249 to 0.06249, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss improved from 0.06249 to 0.06247, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.06247\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.06247\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.06247\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss improved from 0.06247 to 0.06245, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.06245\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss improved from 0.06245 to 0.06244, saving model to models/best_model_full.keras\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0624 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.06244\n",
      "4375/4375 - 23s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.06244\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss improved from 0.06244 to 0.06243, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.06243\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss improved from 0.06243 to 0.06241, saving model to models/best_model_full.keras\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1894 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0624 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1896 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 381/1000\n",
      "\n",
      "Epoch 381: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 382/1000\n",
      "\n",
      "Epoch 382: val_loss did not improve from 0.06241\n",
      "4375/4375 - 22s - 5ms/step - loss: 0.0325 - mae: 0.1421 - val_loss: 0.0625 - val_mae: 0.1895 - learning_rate: 1.0000e-07\n",
      "Epoch 382: early stopping\n",
      "Restoring model weights from the end of the best epoch: 332.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.2979 m\n",
      "Median positioning error: 0.2682 m\n",
      "90th percentile error: 0.5218 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8616.538665,
   "end_time": "2025-08-06T20:11:11.802393",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-06T17:47:35.263728",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
