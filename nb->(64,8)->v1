{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e0087d28",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-27T11:34:27.443364Z",
     "iopub.status.busy": "2025-08-27T11:34:27.443058Z",
     "iopub.status.idle": "2025-08-27T11:34:29.146940Z",
     "shell.execute_reply": "2025-08-27T11:34:29.145969Z"
    },
    "papermill": {
     "duration": 1.709318,
     "end_time": "2025-08-27T11:34:29.148309",
     "exception": false,
     "start_time": "2025-08-27T11:34:27.438991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d3c2bf18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:34:29.154606Z",
     "iopub.status.busy": "2025-08-27T11:34:29.154211Z",
     "iopub.status.idle": "2025-08-27T11:34:45.904588Z",
     "shell.execute_reply": "2025-08-27T11:34:45.903911Z"
    },
    "papermill": {
     "duration": 16.754971,
     "end_time": "2025-08-27T11:34:45.906112",
     "exception": false,
     "start_time": "2025-08-27T11:34:29.151141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-27 11:34:30.900909: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756294471.098625      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756294471.157062      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "79c8a24d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:34:45.912337Z",
     "iopub.status.busy": "2025-08-27T11:34:45.911824Z",
     "iopub.status.idle": "2025-08-27T11:34:45.917350Z",
     "shell.execute_reply": "2025-08-27T11:34:45.916505Z"
    },
    "papermill": {
     "duration": 0.009931,
     "end_time": "2025-08-27T11:34:45.918685",
     "exception": false,
     "start_time": "2025-08-27T11:34:45.908754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 64    #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 8     # 8,16,32,64,128, 256\n",
    "filter_size =5    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128   #256,512,1025,2048,4096\n",
    "transformer_layers = 1   #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16      # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                    # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eec8afb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:34:45.924140Z",
     "iopub.status.busy": "2025-08-27T11:34:45.923847Z",
     "iopub.status.idle": "2025-08-27T11:34:45.927654Z",
     "shell.execute_reply": "2025-08-27T11:34:45.927026Z"
    },
    "papermill": {
     "duration": 0.007917,
     "end_time": "2025-08-27T11:34:45.928904",
     "exception": false,
     "start_time": "2025-08-27T11:34:45.920987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f21ad259",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T11:34:45.934981Z",
     "iopub.status.busy": "2025-08-27T11:34:45.934697Z",
     "iopub.status.idle": "2025-08-27T14:22:43.797536Z",
     "shell.execute_reply": "2025-08-27T14:22:43.796777Z"
    },
    "papermill": {
     "duration": 10077.867582,
     "end_time": "2025-08-27T14:22:43.798772",
     "exception": false,
     "start_time": "2025-08-27T11:34:45.931190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1756294508.011339      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1756294518.659662      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">11,584</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,128</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,472</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │        \u001b[38;5;34m11,584\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │        \u001b[38;5;34m16,128\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        \u001b[38;5;34m33,472\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m130\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">61,578</span> (240.54 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m61,578\u001b[0m (240.54 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">61,446</span> (240.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m61,446\u001b[0m (240.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> (528.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m132\u001b[0m (528.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1756294531.238711      59 service.cc:148] XLA service 0x7903a80172a0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1756294531.239680      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1756294535.088214      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 7.83561, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 60.3958 - mae: 4.9105 - val_loss: 7.8356 - val_mae: 2.1830 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 7.83561 to 6.18287, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 8.1335 - mae: 2.2118 - val_loss: 6.1829 - val_mae: 1.9223 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 6.18287 to 3.80715, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 4.8946 - mae: 1.7142 - val_loss: 3.8071 - val_mae: 1.5158 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.80715 to 3.13075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 3.4718 - mae: 1.4395 - val_loss: 3.1307 - val_mae: 1.3447 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 3.13075 to 1.81443, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.5383 - mae: 1.2232 - val_loss: 1.8144 - val_mae: 1.0507 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.81443\n",
      "4375/4375 - 26s - 6ms/step - loss: 2.1780 - mae: 1.1166 - val_loss: 3.3192 - val_mae: 1.4305 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.81443 to 1.08439, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.8500 - mae: 1.0492 - val_loss: 1.0844 - val_mae: 0.8008 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.08439\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5647 - mae: 0.9599 - val_loss: 1.3696 - val_mae: 0.8889 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.08439 to 0.82252, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1148 - mae: 0.8188 - val_loss: 0.8225 - val_mae: 0.6915 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.82252\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3172 - mae: 0.8527 - val_loss: 1.1015 - val_mae: 0.8156 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.82252\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.5669 - mae: 0.9061 - val_loss: 1.1736 - val_mae: 0.8278 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.82252\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2149 - mae: 0.8276 - val_loss: 1.3607 - val_mae: 0.9208 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss improved from 0.82252 to 0.71118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0643 - mae: 0.7925 - val_loss: 0.7112 - val_mae: 0.6526 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.71118\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.9931 - mae: 0.7392 - val_loss: 0.9411 - val_mae: 0.7632 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.71118\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4352 - mae: 0.8258 - val_loss: 1.2010 - val_mae: 0.8593 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss improved from 0.71118 to 0.63511, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8873 - mae: 0.7209 - val_loss: 0.6351 - val_mae: 0.6267 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.63511\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2454 - mae: 0.7476 - val_loss: 0.9062 - val_mae: 0.7368 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.63511\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1752 - mae: 0.7248 - val_loss: 1.8343 - val_mae: 1.0250 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.63511\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8550 - mae: 0.7004 - val_loss: 0.7539 - val_mae: 0.6780 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.63511\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7405 - mae: 0.6610 - val_loss: 1.6744 - val_mae: 0.9886 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.63511 to 0.57411, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0728 - mae: 0.7209 - val_loss: 0.5741 - val_mae: 0.5852 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss improved from 0.57411 to 0.50118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.6677 - mae: 0.6317 - val_loss: 0.5012 - val_mae: 0.5492 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.50118\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.3938 - mae: 0.7534 - val_loss: 0.5999 - val_mae: 0.6062 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss improved from 0.50118 to 0.48491, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7093 - mae: 0.6425 - val_loss: 0.4849 - val_mae: 0.5381 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.48491\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6221 - mae: 0.6084 - val_loss: 0.5762 - val_mae: 0.5903 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.48491 to 0.41206, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7880 - mae: 0.6412 - val_loss: 0.4121 - val_mae: 0.4968 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0133 - mae: 0.7003 - val_loss: 0.5969 - val_mae: 0.6019 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6294 - mae: 0.6095 - val_loss: 0.4629 - val_mae: 0.5299 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9916 - mae: 0.6710 - val_loss: 0.7895 - val_mae: 0.6996 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5895 - mae: 0.5956 - val_loss: 0.6147 - val_mae: 0.6132 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.1049 - mae: 0.7094 - val_loss: 0.5067 - val_mae: 0.5560 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6849 - mae: 0.6135 - val_loss: 0.9797 - val_mae: 0.7613 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7402 - mae: 0.6379 - val_loss: 0.4648 - val_mae: 0.5357 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8149 - mae: 0.6323 - val_loss: 0.4489 - val_mae: 0.5229 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5935 - mae: 0.5900 - val_loss: 0.4869 - val_mae: 0.5464 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7076 - mae: 0.6033 - val_loss: 0.8033 - val_mae: 0.6701 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8160 - mae: 0.6091 - val_loss: 7.5342 - val_mae: 2.0102 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8453 - mae: 0.6825 - val_loss: 0.5367 - val_mae: 0.5652 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.41206\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3862 - mae: 0.7710 - val_loss: 0.7871 - val_mae: 0.6852 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5441 - mae: 0.5708 - val_loss: 0.5163 - val_mae: 0.5708 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.41206\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8535 - mae: 0.6373 - val_loss: 0.4509 - val_mae: 0.5213 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.41206 to 0.39991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5545 - mae: 0.5587 - val_loss: 0.3999 - val_mae: 0.4882 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8527 - mae: 0.6244 - val_loss: 0.7078 - val_mae: 0.6694 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0767 - mae: 0.7289 - val_loss: 0.4803 - val_mae: 0.5347 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6254 - mae: 0.5846 - val_loss: 0.9352 - val_mae: 0.7409 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9870 - mae: 0.6778 - val_loss: 0.6979 - val_mae: 0.6517 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5061 - mae: 0.5520 - val_loss: 0.4376 - val_mae: 0.5223 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9436 - mae: 0.6494 - val_loss: 0.7551 - val_mae: 0.6873 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5972 - mae: 0.5899 - val_loss: 0.4261 - val_mae: 0.5067 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6134 - mae: 0.5945 - val_loss: 1.1933 - val_mae: 0.8097 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9886 - mae: 0.6820 - val_loss: 0.4888 - val_mae: 0.5455 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.39991\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5083 - mae: 0.5514 - val_loss: 0.4893 - val_mae: 0.5515 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.39991 to 0.37647, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.9536 - mae: 0.6630 - val_loss: 0.3765 - val_mae: 0.4769 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6998 - mae: 0.6032 - val_loss: 0.4202 - val_mae: 0.5072 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.37647\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6934 - mae: 0.6003 - val_loss: 0.5655 - val_mae: 0.5928 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4572 - mae: 0.5247 - val_loss: 0.3989 - val_mae: 0.4902 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6001 - mae: 0.5627 - val_loss: 0.4259 - val_mae: 0.5061 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6161 - mae: 0.5727 - val_loss: 0.5594 - val_mae: 0.5825 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8187 - mae: 0.6025 - val_loss: 1.6430 - val_mae: 0.9435 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5915 - mae: 0.5812 - val_loss: 0.4247 - val_mae: 0.5106 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5889 - mae: 0.5831 - val_loss: 0.4002 - val_mae: 0.4964 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.8183 - mae: 0.6182 - val_loss: 0.4021 - val_mae: 0.4950 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.37647\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5585 - mae: 0.5632 - val_loss: 0.4294 - val_mae: 0.5114 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.37647\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4632 - mae: 0.5274 - val_loss: 0.6491 - val_mae: 0.6238 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.37647 to 0.35833, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.7354 - mae: 0.6218 - val_loss: 0.3583 - val_mae: 0.4691 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.35833\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4740 - mae: 0.5259 - val_loss: 0.3664 - val_mae: 0.4738 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.4579 - mae: 0.7317 - val_loss: 0.9850 - val_mae: 0.7579 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5444 - mae: 0.5718 - val_loss: 0.4064 - val_mae: 0.4976 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5756 - mae: 0.5664 - val_loss: 0.4396 - val_mae: 0.5163 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6379 - mae: 0.5790 - val_loss: 0.4156 - val_mae: 0.5037 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.3977 - mae: 0.4912 - val_loss: 0.9330 - val_mae: 0.6912 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2182 - mae: 0.6871 - val_loss: 1.4158 - val_mae: 0.9141 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.4951 - mae: 0.5422 - val_loss: 0.3701 - val_mae: 0.4686 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.35833\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.7592 - mae: 0.6142 - val_loss: 0.3815 - val_mae: 0.4802 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.35833\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4405 - mae: 0.5146 - val_loss: 0.4519 - val_mae: 0.5282 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.35833\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2249 - mae: 0.7178 - val_loss: 0.9319 - val_mae: 0.7584 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5817 - mae: 0.5697 - val_loss: 0.5827 - val_mae: 0.5992 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5798 - mae: 0.5653 - val_loss: 0.4330 - val_mae: 0.5102 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5401 - mae: 0.5586 - val_loss: 0.7307 - val_mae: 0.6678 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.35833\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5770 - mae: 0.5721 - val_loss: 0.4302 - val_mae: 0.5131 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.2684 - mae: 0.6779 - val_loss: 0.7118 - val_mae: 0.6513 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5369 - mae: 0.5647 - val_loss: 0.3794 - val_mae: 0.4837 - learning_rate: 0.0100\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.5042 - mae: 0.5400 - val_loss: 0.3726 - val_mae: 0.4797 - learning_rate: 0.0100\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.35833\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2450 - mae: 0.7105 - val_loss: 0.3932 - val_mae: 0.4928 - learning_rate: 0.0100\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.35833\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.6869 - mae: 0.5844 - val_loss: 0.3764 - val_mae: 0.4807 - learning_rate: 0.0100\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.35833 to 0.21071, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2455 - mae: 0.3860 - val_loss: 0.2107 - val_mae: 0.3600 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.21071 to 0.15996, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1786 - mae: 0.3301 - val_loss: 0.1600 - val_mae: 0.3123 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.15996 to 0.14007, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1445 - mae: 0.2977 - val_loss: 0.1401 - val_mae: 0.2931 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.14007 to 0.12358, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1260 - mae: 0.2780 - val_loss: 0.1236 - val_mae: 0.2741 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.12358 to 0.11046, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1139 - mae: 0.2642 - val_loss: 0.1105 - val_mae: 0.2597 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.11046\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1061 - mae: 0.2553 - val_loss: 0.1183 - val_mae: 0.2694 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.11046 to 0.10889, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0995 - mae: 0.2472 - val_loss: 0.1089 - val_mae: 0.2594 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.10889 to 0.09675, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0946 - mae: 0.2413 - val_loss: 0.0968 - val_mae: 0.2438 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.09675 to 0.09492, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0904 - mae: 0.2358 - val_loss: 0.0949 - val_mae: 0.2419 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.09492\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0868 - mae: 0.2313 - val_loss: 0.0950 - val_mae: 0.2416 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.09492 to 0.09140, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0843 - mae: 0.2275 - val_loss: 0.0914 - val_mae: 0.2354 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.09140 to 0.08524, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0817 - mae: 0.2238 - val_loss: 0.0852 - val_mae: 0.2282 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.08524 to 0.08199, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0794 - mae: 0.2212 - val_loss: 0.0820 - val_mae: 0.2240 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.08199\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0781 - mae: 0.2192 - val_loss: 0.0850 - val_mae: 0.2270 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.08199\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0761 - mae: 0.2166 - val_loss: 0.0847 - val_mae: 0.2287 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.08199 to 0.08138, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0750 - mae: 0.2151 - val_loss: 0.0814 - val_mae: 0.2227 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.08138 to 0.07621, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0731 - mae: 0.2122 - val_loss: 0.0762 - val_mae: 0.2156 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.07621\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0719 - mae: 0.2107 - val_loss: 0.0833 - val_mae: 0.2250 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.07621\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0708 - mae: 0.2093 - val_loss: 0.0798 - val_mae: 0.2203 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.07621\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0701 - mae: 0.2083 - val_loss: 0.0778 - val_mae: 0.2173 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.07621\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0688 - mae: 0.2061 - val_loss: 0.0832 - val_mae: 0.2257 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.07621\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0678 - mae: 0.2047 - val_loss: 0.0793 - val_mae: 0.2188 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.07621\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0672 - mae: 0.2037 - val_loss: 0.0805 - val_mae: 0.2204 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.07621\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0665 - mae: 0.2031 - val_loss: 0.0890 - val_mae: 0.2334 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.07621\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0657 - mae: 0.2014 - val_loss: 0.0787 - val_mae: 0.2196 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.07621 to 0.07263, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0661 - mae: 0.2018 - val_loss: 0.0726 - val_mae: 0.2097 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.07263\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0647 - mae: 0.2000 - val_loss: 0.0894 - val_mae: 0.2337 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.07263\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0652 - mae: 0.2003 - val_loss: 0.0737 - val_mae: 0.2108 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.07263\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0633 - mae: 0.1975 - val_loss: 0.0747 - val_mae: 0.2135 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.07263 to 0.07016, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0648 - mae: 0.1994 - val_loss: 0.0702 - val_mae: 0.2072 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.07016\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0630 - mae: 0.1970 - val_loss: 0.0737 - val_mae: 0.2124 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.07016 to 0.06865, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0631 - mae: 0.1975 - val_loss: 0.0687 - val_mae: 0.2040 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.06865\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0626 - mae: 0.1966 - val_loss: 0.0708 - val_mae: 0.2078 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.06865\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0621 - mae: 0.1959 - val_loss: 0.0739 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.06865\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0622 - mae: 0.1959 - val_loss: 0.0702 - val_mae: 0.2065 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.06865 to 0.06865, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0619 - mae: 0.1948 - val_loss: 0.0687 - val_mae: 0.2046 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.06865\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0610 - mae: 0.1943 - val_loss: 0.0720 - val_mae: 0.2075 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.06865\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0609 - mae: 0.1940 - val_loss: 0.0709 - val_mae: 0.2071 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.06865\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0606 - mae: 0.1935 - val_loss: 0.0693 - val_mae: 0.2062 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss improved from 0.06865 to 0.06812, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0606 - mae: 0.1937 - val_loss: 0.0681 - val_mae: 0.2028 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.06812 to 0.06569, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0606 - mae: 0.1934 - val_loss: 0.0657 - val_mae: 0.1996 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.06569 to 0.06469, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0675 - mae: 0.1950 - val_loss: 0.0647 - val_mae: 0.1984 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0574 - mae: 0.1882 - val_loss: 0.0733 - val_mae: 0.2101 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.06469\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0600 - mae: 0.1927 - val_loss: 0.0674 - val_mae: 0.2016 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0601 - mae: 0.1926 - val_loss: 0.0680 - val_mae: 0.2042 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0602 - mae: 0.1928 - val_loss: 0.0690 - val_mae: 0.2033 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0597 - mae: 0.1922 - val_loss: 0.0779 - val_mae: 0.2169 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0594 - mae: 0.1914 - val_loss: 0.0718 - val_mae: 0.2082 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0593 - mae: 0.1915 - val_loss: 0.0763 - val_mae: 0.2169 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.06469\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0620 - mae: 0.1923 - val_loss: 0.0728 - val_mae: 0.2088 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0579 - mae: 0.1893 - val_loss: 0.0710 - val_mae: 0.2083 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0592 - mae: 0.1915 - val_loss: 0.0685 - val_mae: 0.2037 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.06469\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0590 - mae: 0.1912 - val_loss: 0.0680 - val_mae: 0.2030 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0592 - mae: 0.1913 - val_loss: 0.0686 - val_mae: 0.2044 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0591 - mae: 0.1910 - val_loss: 0.0761 - val_mae: 0.2153 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.06469\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0589 - mae: 0.1908 - val_loss: 0.0703 - val_mae: 0.2064 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0594 - mae: 0.1917 - val_loss: 0.0686 - val_mae: 0.2052 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0590 - mae: 0.1907 - val_loss: 0.0659 - val_mae: 0.1997 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.06469\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0585 - mae: 0.1903 - val_loss: 0.0683 - val_mae: 0.2049 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.06469\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0588 - mae: 0.1904 - val_loss: 0.0716 - val_mae: 0.2085 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0588 - mae: 0.1906 - val_loss: 0.0715 - val_mae: 0.2074 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.06469\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0586 - mae: 0.1902 - val_loss: 0.0690 - val_mae: 0.2042 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss improved from 0.06469 to 0.04701, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0361 - mae: 0.1493 - val_loss: 0.0470 - val_mae: 0.1682 - learning_rate: 1.0000e-04\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss improved from 0.04701 to 0.04653, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0341 - mae: 0.1452 - val_loss: 0.0465 - val_mae: 0.1668 - learning_rate: 1.0000e-04\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss improved from 0.04653 to 0.04645, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0334 - mae: 0.1439 - val_loss: 0.0465 - val_mae: 0.1665 - learning_rate: 1.0000e-04\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.04645\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0330 - mae: 0.1429 - val_loss: 0.0465 - val_mae: 0.1664 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.04645 to 0.04636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0327 - mae: 0.1423 - val_loss: 0.0464 - val_mae: 0.1659 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.04636 to 0.04611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0324 - mae: 0.1417 - val_loss: 0.0461 - val_mae: 0.1657 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.04611\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0322 - mae: 0.1413 - val_loss: 0.0461 - val_mae: 0.1653 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.04611\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0319 - mae: 0.1407 - val_loss: 0.0465 - val_mae: 0.1661 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.04611 to 0.04568, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0319 - mae: 0.1406 - val_loss: 0.0457 - val_mae: 0.1646 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.04568\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0317 - mae: 0.1401 - val_loss: 0.0457 - val_mae: 0.1647 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.04568\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0315 - mae: 0.1398 - val_loss: 0.0460 - val_mae: 0.1650 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.04568\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0314 - mae: 0.1396 - val_loss: 0.0463 - val_mae: 0.1655 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.04568\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0313 - mae: 0.1393 - val_loss: 0.0462 - val_mae: 0.1652 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.04568 to 0.04551, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0311 - mae: 0.1390 - val_loss: 0.0455 - val_mae: 0.1641 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.04551\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0311 - mae: 0.1387 - val_loss: 0.0456 - val_mae: 0.1640 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.04551\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0309 - mae: 0.1385 - val_loss: 0.0462 - val_mae: 0.1652 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.04551\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0309 - mae: 0.1383 - val_loss: 0.0460 - val_mae: 0.1654 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.04551\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0308 - mae: 0.1381 - val_loss: 0.0459 - val_mae: 0.1648 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.04551\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0307 - mae: 0.1378 - val_loss: 0.0458 - val_mae: 0.1646 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss improved from 0.04551 to 0.04497, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0306 - mae: 0.1377 - val_loss: 0.0450 - val_mae: 0.1628 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss improved from 0.04497 to 0.04488, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0305 - mae: 0.1376 - val_loss: 0.0449 - val_mae: 0.1628 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.04488\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0305 - mae: 0.1374 - val_loss: 0.0453 - val_mae: 0.1636 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.04488\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0304 - mae: 0.1373 - val_loss: 0.0456 - val_mae: 0.1640 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.04488\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0303 - mae: 0.1369 - val_loss: 0.0451 - val_mae: 0.1634 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.04488\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0302 - mae: 0.1368 - val_loss: 0.0450 - val_mae: 0.1627 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.04488 to 0.04488, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0301 - mae: 0.1367 - val_loss: 0.0449 - val_mae: 0.1626 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.04488\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0301 - mae: 0.1366 - val_loss: 0.0454 - val_mae: 0.1640 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.04488\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0300 - mae: 0.1365 - val_loss: 0.0450 - val_mae: 0.1630 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.04488\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0299 - mae: 0.1362 - val_loss: 0.0449 - val_mae: 0.1629 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.04488\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0299 - mae: 0.1360 - val_loss: 0.0451 - val_mae: 0.1633 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.04488\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0299 - mae: 0.1361 - val_loss: 0.0450 - val_mae: 0.1631 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.04488\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0298 - mae: 0.1357 - val_loss: 0.0458 - val_mae: 0.1645 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.04488\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0297 - mae: 0.1358 - val_loss: 0.0450 - val_mae: 0.1625 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.04488\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0297 - mae: 0.1356 - val_loss: 0.0449 - val_mae: 0.1626 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.04488 to 0.04456, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0297 - mae: 0.1356 - val_loss: 0.0446 - val_mae: 0.1620 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.04456\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0296 - mae: 0.1353 - val_loss: 0.0453 - val_mae: 0.1635 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.04456\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0295 - mae: 0.1353 - val_loss: 0.0453 - val_mae: 0.1633 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.04456\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0295 - mae: 0.1351 - val_loss: 0.0451 - val_mae: 0.1632 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.04456\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0294 - mae: 0.1351 - val_loss: 0.0450 - val_mae: 0.1631 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.04456\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0294 - mae: 0.1349 - val_loss: 0.0451 - val_mae: 0.1632 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.04456\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0293 - mae: 0.1348 - val_loss: 0.0451 - val_mae: 0.1632 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.04456\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0293 - mae: 0.1346 - val_loss: 0.0447 - val_mae: 0.1625 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.04456\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0292 - mae: 0.1346 - val_loss: 0.0446 - val_mae: 0.1625 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.04456\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0292 - mae: 0.1345 - val_loss: 0.0456 - val_mae: 0.1642 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss improved from 0.04456 to 0.04419, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0292 - mae: 0.1345 - val_loss: 0.0442 - val_mae: 0.1614 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.04419\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0291 - mae: 0.1344 - val_loss: 0.0450 - val_mae: 0.1627 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.04419\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0291 - mae: 0.1342 - val_loss: 0.0449 - val_mae: 0.1631 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04419\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0290 - mae: 0.1340 - val_loss: 0.0449 - val_mae: 0.1630 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04419\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0290 - mae: 0.1340 - val_loss: 0.0448 - val_mae: 0.1626 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04419\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0289 - mae: 0.1339 - val_loss: 0.0445 - val_mae: 0.1620 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.04419\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0289 - mae: 0.1338 - val_loss: 0.0452 - val_mae: 0.1630 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss improved from 0.04419 to 0.04412, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0289 - mae: 0.1339 - val_loss: 0.0441 - val_mae: 0.1612 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0288 - mae: 0.1336 - val_loss: 0.0445 - val_mae: 0.1620 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0287 - mae: 0.1334 - val_loss: 0.0450 - val_mae: 0.1630 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.04412\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0287 - mae: 0.1334 - val_loss: 0.0444 - val_mae: 0.1614 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0287 - mae: 0.1333 - val_loss: 0.0448 - val_mae: 0.1628 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0287 - mae: 0.1332 - val_loss: 0.0448 - val_mae: 0.1625 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0446 - val_mae: 0.1619 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0447 - val_mae: 0.1624 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0285 - mae: 0.1331 - val_loss: 0.0446 - val_mae: 0.1621 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0285 - mae: 0.1329 - val_loss: 0.0443 - val_mae: 0.1616 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.04412\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0285 - mae: 0.1330 - val_loss: 0.0442 - val_mae: 0.1611 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.04412\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0284 - mae: 0.1327 - val_loss: 0.0454 - val_mae: 0.1637 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0284 - mae: 0.1328 - val_loss: 0.0443 - val_mae: 0.1615 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.04412\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0284 - mae: 0.1327 - val_loss: 0.0450 - val_mae: 0.1629 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss improved from 0.04412 to 0.04296, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0264 - mae: 0.1278 - val_loss: 0.0430 - val_mae: 0.1587 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.04296 to 0.04291, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0261 - mae: 0.1272 - val_loss: 0.0429 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss improved from 0.04291 to 0.04290, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0261 - mae: 0.1271 - val_loss: 0.0429 - val_mae: 0.1586 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss improved from 0.04290 to 0.04283, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0261 - mae: 0.1270 - val_loss: 0.0428 - val_mae: 0.1583 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.04283\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0429 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss improved from 0.04283 to 0.04282, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0428 - val_mae: 0.1584 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.04282\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0429 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss improved from 0.04282 to 0.04281, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0428 - val_mae: 0.1584 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.04281\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1269 - val_loss: 0.0429 - val_mae: 0.1584 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.04281\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1268 - val_loss: 0.0429 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.04281\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1268 - val_loss: 0.0428 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.04281\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1268 - val_loss: 0.0429 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss improved from 0.04281 to 0.04279, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0260 - mae: 0.1268 - val_loss: 0.0428 - val_mae: 0.1584 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.04279\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0259 - mae: 0.1268 - val_loss: 0.0428 - val_mae: 0.1584 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.04279\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0428 - val_mae: 0.1583 - learning_rate: 1.0000e-05\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.04279 to 0.04277, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0428 - val_mae: 0.1583 - learning_rate: 1.0000e-05\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.04277\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0429 - val_mae: 0.1586 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.04277\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0428 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.04277\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0428 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.04277\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0428 - val_mae: 0.1584 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.04277\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0259 - mae: 0.1267 - val_loss: 0.0428 - val_mae: 0.1584 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.04277\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0259 - mae: 0.1266 - val_loss: 0.0428 - val_mae: 0.1583 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.04277\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0259 - mae: 0.1266 - val_loss: 0.0428 - val_mae: 0.1585 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.04277\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0259 - mae: 0.1266 - val_loss: 0.0428 - val_mae: 0.1583 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss improved from 0.04277 to 0.04270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0257 - mae: 0.1261 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss improved from 0.04270 to 0.04270, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1260 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss improved from 0.04270 to 0.04269, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1260 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss improved from 0.04269 to 0.04268, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1260 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss improved from 0.04268 to 0.04267, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1260 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss improved from 0.04267 to 0.04266, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1260 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.04266\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1260 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.04266\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss improved from 0.04266 to 0.04265, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-06\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1259 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-06\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss improved from 0.04265 to 0.04265, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.04265\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.04265\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss improved from 0.04265 to 0.04264, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1580 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss improved from 0.04264 to 0.04264, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1580 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1580 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.04264\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.04264\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss improved from 0.04264 to 0.04262, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1580 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.04262\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.04262\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.04262\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1580 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.04262\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1582 - learning_rate: 1.0000e-07\n",
      "Epoch 371/1000\n",
      "\n",
      "Epoch 371: val_loss did not improve from 0.04262\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 372/1000\n",
      "\n",
      "Epoch 372: val_loss did not improve from 0.04262\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0426 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 373/1000\n",
      "\n",
      "Epoch 373: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 374/1000\n",
      "\n",
      "Epoch 374: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 375/1000\n",
      "\n",
      "Epoch 375: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 376/1000\n",
      "\n",
      "Epoch 376: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 377/1000\n",
      "\n",
      "Epoch 377: val_loss did not improve from 0.04262\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 378/1000\n",
      "\n",
      "Epoch 378: val_loss did not improve from 0.04262\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 379/1000\n",
      "\n",
      "Epoch 379: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 380/1000\n",
      "\n",
      "Epoch 380: val_loss did not improve from 0.04262\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0256 - mae: 0.1258 - val_loss: 0.0427 - val_mae: 0.1581 - learning_rate: 1.0000e-07\n",
      "Epoch 380: early stopping\n",
      "Restoring model weights from the end of the best epoch: 330.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.2490 m\n",
      "Median positioning error: 0.2226 m\n",
      "90th percentile error: 0.4436 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeXhbxbk/8O+RLC/ybmffVxJCNkhISMJOgGAoaykX2hJCoUChBcK9belCgF5KCz9SWkhLKWtZbqHQAi1pIIQECAQCCVsICYQkhCyO402yY1uWdeb3hyJh2VJs2Zozo9H38zx5wOdYM+87c86MxpJGlhBCgIiIiIiIiIiUc6kOgIiIiIiIiIjCuEgnIiIiIiIi0gQX6URERERERESa4CKdiIiIiIiISBNcpBMRERERERFpgot0IiIiIiIiIk1wkU5ERERERESkCS7SiYiIiIiIiDTBRToRERERERGRJrhIJyIictjevXvxzW9+E+Xl5bAsC3fffbfqkKIuueQSjBgxolu/e/PNN8OyLKnxrFq1CpZlYdWqVVLrISIi0gUX6URElHa++OILXHHFFRg1ahRyc3NRVFSEOXPm4Pe//z2am5ujvzdixAhYlgXLsuByuVBSUoJJkybh+9//Pt555524ZUd+v+O/AQMGpCz+66+/Hi+99BJuvPFGPPbYY5g3b17C320fg8vlwqBBg3DKKac4tmhtamrCzTffnJGL5EceeSTh9WBZFt5++23VIRIRkYEsIYRQHQQREVF3vfjiizj//PORk5ODiy++GBMnTkRraytWr16NZ599Fpdccgnuv/9+AOFFemlpKW644QYAQENDAz799FP8/e9/R2VlJa6//nosXrw4pnzLsnDyySfj4osvjjmel5eH8847LyU5DBgwAHPnzsXjjz/e5e+2j0cIgW3btuGPf/wjqqqq8OKLL+K0005LSUwRwWAQtm0jJycHAFBdXY2+ffti0aJFuPnmm2N+t62tDW1tbcjNzU1pDO3Zto3W1lZkZ2fD5XL2tYVHHnkECxYswK233oqRI0d2Oj9v3jz06dPH0ZiIiMh8WaoDICIi6q5t27bhv/7rvzB8+HC8+uqrGDhwYPTc1VdfjS1btuDFF1+MeczgwYPxne98J+bYb3/7W1x00UX43e9+h7Fjx+Kqq66KOX/IIYd0ekwqVVVVoaSkpNu/3zGec845B5MnT8bdd9+d8kW6x+Pp9u9mZWUhK0vuUwmXyyX1jwDdcdppp2H69OlJPaatrQ22bSM7O7vTuf379yM/P7/H8Qgh0NLSgry8vB6XQURE+uLb3YmIKG3ccccdaGxsxIMPPhizQI8YM2YMrr322i7LycvLw2OPPYaysjLcdtttSNWbyrZu3Yrzzz8fZWVl8Hq9OOqoo2L+aBB5+7QQAkuWLIm+bTpZkyZNQp8+fbBt27bosVdffRXHHHMM8vPzUVJSgrPOOguffvppzOMaGhpw3XXXYcSIEcjJyUG/fv1w8sknY/369dHfaf+Z9O3bt6Nv374AgFtuuSUab+QV9XifSW9ra8OvfvUrjB49Gjk5ORgxYgR+9rOfIRAIxPzeiBEjcMYZZ2D16tWYMWMGcnNzMWrUKPz1r3+N+b14n0k//vjjMXHiRGzcuBEnnHACvF4vBg8ejDvuuKNTW3355Zc488wzkZ+fj379+kU/apDKz7lv374dlmXh//2//4e77747mvvGjRujbbRx40ZcdNFFKC0txdFHH92jtnrppZcwffp05OXl4c9//nNKYiciIv3wlXQiIkob//rXvzBq1CjMnj2712UVFBTgnHPOwYMPPoiNGzfisMMOi55raWlBdXV1zO8XFhZG3wIez969ezF79mw0NTXhRz/6EcrLy/Hoo4/izDPPxDPPPINzzjkHxx57LB577DF897vfjfuW+u6qq6tDXV0dxowZAwB45ZVXcNppp2HUqFG4+eab0dzcjHvuuQdz5szB+vXro4vuK6+8Es888wyuueYaTJgwATU1NVi9ejU+/fRTHHHEEZ3q6du3L/70pz/hqquuwjnnnINzzz0XADB58uSEsV122WV49NFH8c1vfhM33HAD3nnnHdx+++349NNP8c9//jPmd7ds2YJvfvOb+N73vof58+fjoYcewiWXXIJp06bF9EeiNpg3bx7OPfdcfOtb38IzzzyDn/zkJ5g0aVL03QX79+/HiSeeiD179uDaa6/FgAED8OSTT2LlypXdbmsA8Pl8na4Hy7JQXl4ec+zhhx9GS0sLvv/97yMnJwdlZWXRc+effz7Gjh2LX//619E/CiXTVps3b8aFF16IK664ApdffjnGjRuXVA5ERJRGBBERURrw+XwCgDjrrLO6/Zjhw4eL008/PeH53/3udwKAeP7556PHAMT99/DDDx+0ruuuu04AEG+88Ub0WENDgxg5cqQYMWKECIVCMXVcffXV3coBgPje974n9u3bJ6qqqsQ777wjTjrpJAFA3HXXXUIIIaZOnSr69esnampqoo/78MMPhcvlEhdffHH0WHFxcZf1zp8/XwwfPjz68759+wQAsWjRok6/u2jRItH+qcQHH3wgAIjLLrss5vf++7//WwAQr776avTY8OHDBQDx+uuvR49VVVWJnJwcccMNN0SPrVy5UgAQK1eujB477rjjBADx17/+NXosEAiIAQMGiPPOOy967K677hIAxHPPPRc91tzcLMaPH9+pzHgefvjhhNdDTk5O9Pe2bdsmAIiioiJRVVUVt40uvPDCmOM9aatly5YdNF4iIjID3+5ORERpwe/3Awi/op0qBQUFAMJvA2/vrLPOwvLly2P+nXrqqQcta+nSpZgxY0b0rcyR8r///e9j+/bt2LhxY4/jfPDBB9G3b1/069cPM2fOxJtvvomFCxfiuuuuw549e/DBBx/gkksuiXnldvLkyTj55JOxdOnS6LGSkhK888472L17d49jOZhIXQsXLow5Htm4r+N+ARMmTMAxxxwT/blv374YN24ctm7d2mVdBQUFMZ/Tz87OxowZM2Ieu2zZMgwePBhnnnlm9Fhubi4uv/zyJLIClixZ0ul6+M9//tPp984777zoxwM6uvLKK2N+TratRo4c2eU1SEREZuDb3YmIKC0UFRUB6Lyg7o3GxkYAnRf+Q4YMwdy5c5Mq68svv8TMmTM7HT/00EOj5ydOnNijOM866yxcc801sCwLhYWFOOyww6Ibj3355ZcAEPftz4ceeiheeuml6EZld9xxB+bPn4+hQ4di2rRpqKiowMUXX4xRo0b1KK6OvvzyS7hcrujb8CMGDBiAkpKSaKwRw4YN61RGaWkp6urquqxryJAhnT4PX1paio8++igmntGjR3f6vY7xdWXGjBnd2jgu3g7wic4l21YHK5uIiMzCV9KJiCgtFBUVYdCgQdiwYUPKyoyUleyizWmRPxqcdNJJmDFjRo93Bv/Wt76FrVu34p577sGgQYNw55134rDDDov7qnBvdHczPLfbHfe46MZGfr15rCwH22090bnuthV3ciciyhxcpBMRUdo444wz8MUXX2DNmjW9LquxsRH//Oc/MXTo0Oir3b0xfPhwbN68udPxTZs2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qcUpndLx4dTT8cINQ5ESbw97HaLHhiILV3cPTKV9SeZaDMNAbW1tyOsyxcTEICcnx/dfmzZtfPeVlpbihRdewOOPP46zzjoLgwcPxksvvYSvvvoKX3/9NQBg69atuPLKK9GjRw/ceOON2Lp1KwDA7Xbjlltuwfz582G32xu0GeiT6Pq+/PJLnHHGGUhISEBeXh5uu+02VFRUnLBWTdOQk5OD9u3b49xzz8Vtt92GpUuXoqqqCrquY9asWejYsSPi4uJ8C1F7uVwuTJ06Fbm5uUhISEDnzp19vxzlje293L1Lly4AgFNOOQWapmH06NEAml7uXlNTg9tuuw3Z2dlISEjA6aefjm+//dZ3v/dS7mXLlmHIkCFITEzEiBEjsH37dt9jGl/uPnnyZFx99dV47LHHkJubi6ysLPz+97+H2+32PaagoADnnXceEhIS0KVLF7z++uvIz8/H3LlzA/Y30HRbaLw95Ofn4+9//zuuu+46pKam4uabb/Zdfr5w4UL07dsXcXFx2LdvH4qLi3HdddchIyMDiYmJOPfcc7Fjxw5frEDPa07jy929/fPKK68gPz8faWlpuPLKK1FWVuZ7jK7rmD17Nrp06YKEhAQMGDAA77zzTrNtiRLK8YWTdCIiEmL30XJc+8I3OP//vsCG/SVIiYvB3yedhHdvGYGTO/r/1IKIiIKzY8cOtG/fHl27dsXVV1/dYKK0du1auN1ujB071ndb79690alTJ6xevRoAMGDAAHz22Weora3FkiVL0L9/fwDAI488gtGjR2PIkCEh57Rr1y5MmDABl156KTZu3Ii33noLX375ZcBFpANJSEiAruuora3Fk08+icceewxz5szBxo0bMX78eFx44YW+ieNTTz2FhQsX4q233sKmTZvw6quvIj8/32/cNWvWAACWLl2KgoICvPfee34fd9ddd+Hdd9/FggUL8M0336B79+4YP348ioqKGjzu3nvvxWOPPYbvvvsOMTExuPHGG09Y1xdffIFdu3Zh+fLlePnll7FgwYIGl9lfd911OHToEFasWIF3330Xzz77bIsu+/dnzpw5GDBgAL7//nv87W9/AwBUVlbi4YcfxvPPP4/NmzcjOzsbN9xwA7777jssXLgQq1evhmEYmDhxYoM3E/w9ryV27dqF999/Hx999BE++ugjrFy5Eg899JDv/tmzZ+Pf//43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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10104.252621,
   "end_time": "2025-08-27T14:22:46.910264",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T11:34:22.657643",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
