{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5220d5b2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-18T07:35:45.433587Z",
     "iopub.status.busy": "2025-08-18T07:35:45.433361Z",
     "iopub.status.idle": "2025-08-18T07:35:46.924751Z",
     "shell.execute_reply": "2025-08-18T07:35:46.923723Z"
    },
    "papermill": {
     "duration": 1.496017,
     "end_time": "2025-08-18T07:35:46.926025",
     "exception": false,
     "start_time": "2025-08-18T07:35:45.430008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "62002adf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:35:46.932042Z",
     "iopub.status.busy": "2025-08-18T07:35:46.931431Z",
     "iopub.status.idle": "2025-08-18T07:36:00.683779Z",
     "shell.execute_reply": "2025-08-18T07:36:00.683131Z"
    },
    "papermill": {
     "duration": 13.756471,
     "end_time": "2025-08-18T07:36:00.685188",
     "exception": false,
     "start_time": "2025-08-18T07:35:46.928717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-18 07:35:48.314538: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755502548.485872      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755502548.536224      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a91bffb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:36:00.690632Z",
     "iopub.status.busy": "2025-08-18T07:36:00.690159Z",
     "iopub.status.idle": "2025-08-18T07:36:00.694607Z",
     "shell.execute_reply": "2025-08-18T07:36:00.694031Z"
    },
    "papermill": {
     "duration": 0.008271,
     "end_time": "2025-08-18T07:36:00.695793",
     "exception": false,
     "start_time": "2025-08-18T07:36:00.687522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =15   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a1e193b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:36:00.700338Z",
     "iopub.status.busy": "2025-08-18T07:36:00.700095Z",
     "iopub.status.idle": "2025-08-18T07:36:00.703048Z",
     "shell.execute_reply": "2025-08-18T07:36:00.702580Z"
    },
    "papermill": {
     "duration": 0.006335,
     "end_time": "2025-08-18T07:36:00.704069",
     "exception": false,
     "start_time": "2025-08-18T07:36:00.697734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1c45d550",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T07:36:00.709183Z",
     "iopub.status.busy": "2025-08-18T07:36:00.708966Z",
     "iopub.status.idle": "2025-08-18T09:45:10.910351Z",
     "shell.execute_reply": "2025-08-18T09:45:10.909674Z"
    },
    "papermill": {
     "duration": 7750.20567,
     "end_time": "2025-08-18T09:45:10.911618",
     "exception": false,
     "start_time": "2025-08-18T07:36:00.705948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755502581.618544      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755502590.838620      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │       <span style=\"color: #00af00; text-decoration-color: #00af00\">138,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">242</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">61,952</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">330,112</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │       \u001b[38;5;34m138,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m242\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m61,952\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m330,112\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">532,106</span> (2.03 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m532,106\u001b[0m (2.03 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">531,590</span> (2.03 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m531,590\u001b[0m (2.03 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755502601.472842      57 service.cc:148] XLA service 0x7fb4cc008a10 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755502601.473535      57 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755502605.200282      57 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 23.78776, saving model to models/best_model_full.keras\n",
      "4375/4375 - 51s - 12ms/step - loss: 80.4167 - mae: 6.3982 - val_loss: 23.7878 - val_mae: 3.8093 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 23.78776 to 12.17163, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 14.4270 - mae: 2.9209 - val_loss: 12.1716 - val_mae: 2.7917 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 12.17163 to 3.03527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 5.7948 - mae: 1.8285 - val_loss: 3.0353 - val_mae: 1.3560 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.03527 to 1.77319, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 3.0222 - mae: 1.2845 - val_loss: 1.7732 - val_mae: 1.0413 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 1.77319\n",
      "4375/4375 - 37s - 9ms/step - loss: 3.4148 - mae: 1.2186 - val_loss: 3.1657 - val_mae: 1.3706 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.77319 to 0.91044, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.3842 - mae: 0.9026 - val_loss: 0.9104 - val_mae: 0.7393 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 0.91044 to 0.47434, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.8242 - mae: 0.7066 - val_loss: 0.4743 - val_mae: 0.5423 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 8ms/step - loss: 1.6785 - mae: 0.8514 - val_loss: 0.8708 - val_mae: 0.7356 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 2.5246 - mae: 0.9384 - val_loss: 1.5847 - val_mae: 0.9598 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.8978 - mae: 0.7231 - val_loss: 0.6362 - val_mae: 0.6241 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.7032 - mae: 0.6374 - val_loss: 4.1067 - val_mae: 1.4190 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.2539 - mae: 0.7883 - val_loss: 0.8429 - val_mae: 0.7357 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 2.3141 - mae: 0.8848 - val_loss: 1.0475 - val_mae: 0.7956 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.6850 - mae: 0.6444 - val_loss: 0.6604 - val_mae: 0.6421 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.5288 - mae: 0.5655 - val_loss: 4.8879 - val_mae: 1.6116 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 2.1990 - mae: 0.9722 - val_loss: 0.6636 - val_mae: 0.6409 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.5290 - mae: 0.5699 - val_loss: 0.6474 - val_mae: 0.6334 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.4657 - mae: 0.8045 - val_loss: 1.0234 - val_mae: 0.7898 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.6204 - mae: 0.6110 - val_loss: 0.5485 - val_mae: 0.5726 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.47434\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.8365 - mae: 0.6132 - val_loss: 2.0810 - val_mae: 1.0997 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.47434 to 0.42462, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.6525 - mae: 0.6087 - val_loss: 0.4246 - val_mae: 0.5064 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.42462\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.4894 - mae: 0.5438 - val_loss: 0.4876 - val_mae: 0.5487 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 0.42462 to 0.31874, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.5321 - mae: 0.5537 - val_loss: 0.3187 - val_mae: 0.4439 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.3544 - mae: 0.7190 - val_loss: 0.5863 - val_mae: 0.5985 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.4827 - mae: 0.5402 - val_loss: 0.6197 - val_mae: 0.6088 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.8652 - mae: 0.7596 - val_loss: 2.5616 - val_mae: 1.2025 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.7514 - mae: 0.6599 - val_loss: 0.4389 - val_mae: 0.5130 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.0973 - mae: 0.6813 - val_loss: 0.4604 - val_mae: 0.5360 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.7843 - mae: 0.6256 - val_loss: 0.6366 - val_mae: 0.6175 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.0446 - mae: 0.6312 - val_loss: 0.7825 - val_mae: 0.6973 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.5268 - mae: 0.5636 - val_loss: 0.5288 - val_mae: 0.5782 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.31874\n",
      "4375/4375 - 38s - 9ms/step - loss: 2.5330 - mae: 1.0277 - val_loss: 2.6842 - val_mae: 1.2341 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.7056 - mae: 0.6493 - val_loss: 0.8521 - val_mae: 0.7118 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.6824 - mae: 0.8593 - val_loss: 0.5417 - val_mae: 0.5748 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 2.3706 - mae: 0.9843 - val_loss: 3.3640 - val_mae: 0.9393 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 2.4105 - mae: 1.0318 - val_loss: 14.5771 - val_mae: 2.1265 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 2.4125 - mae: 0.9160 - val_loss: 3.9337 - val_mae: 1.2840 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.9044 - mae: 0.9528 - val_loss: 3.7918 - val_mae: 1.0776 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.6243 - mae: 0.8616 - val_loss: 26.7110 - val_mae: 3.6249 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 3.2616 - mae: 1.2152 - val_loss: 1.1476 - val_mae: 0.8234 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 4.6912 - mae: 1.4052 - val_loss: 3.2901 - val_mae: 1.3448 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.7490 - mae: 0.9754 - val_loss: 1.3599 - val_mae: 0.8960 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 1.5491 - mae: 0.8509 - val_loss: 0.6010 - val_mae: 0.6043 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.31874\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.3986 - mae: 0.4942 - val_loss: 0.3667 - val_mae: 0.4720 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.31874 to 0.24683, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.2730 - mae: 0.4101 - val_loss: 0.2468 - val_mae: 0.3878 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.24683 to 0.18096, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.1904 - mae: 0.3436 - val_loss: 0.1810 - val_mae: 0.3323 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.18096 to 0.14829, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.1473 - mae: 0.3027 - val_loss: 0.1483 - val_mae: 0.3010 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.14829 to 0.13074, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.1225 - mae: 0.2763 - val_loss: 0.1307 - val_mae: 0.2835 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.13074 to 0.11872, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.1051 - mae: 0.2562 - val_loss: 0.1187 - val_mae: 0.2702 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.11872 to 0.11527, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0933 - mae: 0.2417 - val_loss: 0.1153 - val_mae: 0.2670 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.11527 to 0.10118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0828 - mae: 0.2274 - val_loss: 0.1012 - val_mae: 0.2495 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.10118 to 0.09020, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0745 - mae: 0.2161 - val_loss: 0.0902 - val_mae: 0.2353 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.09020 to 0.08472, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0682 - mae: 0.2067 - val_loss: 0.0847 - val_mae: 0.2282 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.08472\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0625 - mae: 0.1979 - val_loss: 0.0874 - val_mae: 0.2323 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.08472 to 0.07557, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0579 - mae: 0.1904 - val_loss: 0.0756 - val_mae: 0.2153 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.07557 to 0.07437, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0535 - mae: 0.1830 - val_loss: 0.0744 - val_mae: 0.2136 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.07437 to 0.06987, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0495 - mae: 0.1762 - val_loss: 0.0699 - val_mae: 0.2059 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.06987 to 0.06517, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0468 - mae: 0.1715 - val_loss: 0.0652 - val_mae: 0.1991 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.06517\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0439 - mae: 0.1661 - val_loss: 0.0678 - val_mae: 0.2039 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.06517 to 0.06380, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0422 - mae: 0.1627 - val_loss: 0.0638 - val_mae: 0.1978 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.06380\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0403 - mae: 0.1591 - val_loss: 0.0682 - val_mae: 0.2039 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.06380 to 0.05986, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0386 - mae: 0.1555 - val_loss: 0.0599 - val_mae: 0.1912 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.05986\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0372 - mae: 0.1528 - val_loss: 0.0607 - val_mae: 0.1924 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.05986 to 0.05872, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0356 - mae: 0.1493 - val_loss: 0.0587 - val_mae: 0.1895 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.05872 to 0.05795, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0343 - mae: 0.1467 - val_loss: 0.0579 - val_mae: 0.1883 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.05795\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0330 - mae: 0.1439 - val_loss: 0.0584 - val_mae: 0.1891 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.05795\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0320 - mae: 0.1418 - val_loss: 0.0585 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.05795 to 0.05599, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0307 - mae: 0.1389 - val_loss: 0.0560 - val_mae: 0.1846 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.05599\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0296 - mae: 0.1365 - val_loss: 0.0563 - val_mae: 0.1854 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.05599\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0292 - mae: 0.1355 - val_loss: 0.0610 - val_mae: 0.1936 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.05599 to 0.05306, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0282 - mae: 0.1329 - val_loss: 0.0531 - val_mae: 0.1790 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.05306\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0273 - mae: 0.1308 - val_loss: 0.0553 - val_mae: 0.1830 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.05306\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0271 - mae: 0.1302 - val_loss: 0.0578 - val_mae: 0.1878 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.05306 to 0.05234, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0263 - mae: 0.1283 - val_loss: 0.0523 - val_mae: 0.1776 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.05234 to 0.05216, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0263 - mae: 0.1284 - val_loss: 0.0522 - val_mae: 0.1770 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.05216\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0256 - mae: 0.1266 - val_loss: 0.0539 - val_mae: 0.1810 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.05216 to 0.04893, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0250 - mae: 0.1251 - val_loss: 0.0489 - val_mae: 0.1721 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.04893\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0247 - mae: 0.1245 - val_loss: 0.0555 - val_mae: 0.1840 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.04893 to 0.04783, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0245 - mae: 0.1239 - val_loss: 0.0478 - val_mae: 0.1699 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.04783\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0239 - mae: 0.1223 - val_loss: 0.0520 - val_mae: 0.1774 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.04783 to 0.04715, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0240 - mae: 0.1224 - val_loss: 0.0472 - val_mae: 0.1682 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04715\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0235 - mae: 0.1210 - val_loss: 0.0518 - val_mae: 0.1776 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.04715\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0231 - mae: 0.1199 - val_loss: 0.0476 - val_mae: 0.1690 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.04715 to 0.04601, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0235 - mae: 0.1210 - val_loss: 0.0460 - val_mae: 0.1667 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.04601\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0227 - mae: 0.1188 - val_loss: 0.0465 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.04601\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0229 - mae: 0.1192 - val_loss: 0.0467 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.04601\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0227 - mae: 0.1189 - val_loss: 0.0494 - val_mae: 0.1727 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.04601\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0224 - mae: 0.1181 - val_loss: 0.0463 - val_mae: 0.1674 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.04601\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0217 - mae: 0.1162 - val_loss: 0.0468 - val_mae: 0.1685 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.04601 to 0.04459, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0218 - mae: 0.1163 - val_loss: 0.0446 - val_mae: 0.1647 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.04459\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0215 - mae: 0.1155 - val_loss: 0.0453 - val_mae: 0.1655 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.04459\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0215 - mae: 0.1158 - val_loss: 0.0465 - val_mae: 0.1678 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.04459\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0210 - mae: 0.1142 - val_loss: 0.0477 - val_mae: 0.1693 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.04459\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0210 - mae: 0.1141 - val_loss: 0.0479 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.04459 to 0.04404, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0212 - mae: 0.1143 - val_loss: 0.0440 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0207 - mae: 0.1132 - val_loss: 0.0464 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0208 - mae: 0.1135 - val_loss: 0.0462 - val_mae: 0.1673 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0210 - mae: 0.1140 - val_loss: 0.0462 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0206 - mae: 0.1127 - val_loss: 0.0461 - val_mae: 0.1665 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0207 - mae: 0.1132 - val_loss: 0.0476 - val_mae: 0.1692 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0204 - mae: 0.1123 - val_loss: 0.0455 - val_mae: 0.1649 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0206 - mae: 0.1126 - val_loss: 0.0477 - val_mae: 0.1686 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04404\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0208 - mae: 0.1134 - val_loss: 0.0476 - val_mae: 0.1692 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.04404 to 0.04343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0207 - mae: 0.1128 - val_loss: 0.0434 - val_mae: 0.1621 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0203 - mae: 0.1123 - val_loss: 0.0538 - val_mae: 0.1792 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0204 - mae: 0.1122 - val_loss: 0.0454 - val_mae: 0.1664 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04343\n",
      "4375/4375 - 38s - 9ms/step - loss: 0.0206 - mae: 0.1128 - val_loss: 0.0461 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0206 - mae: 0.1124 - val_loss: 0.0483 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0203 - mae: 0.1119 - val_loss: 0.0440 - val_mae: 0.1633 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0205 - mae: 0.1123 - val_loss: 0.0474 - val_mae: 0.1690 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0207 - mae: 0.1127 - val_loss: 0.0442 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0203 - mae: 0.1118 - val_loss: 0.0466 - val_mae: 0.1672 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0206 - mae: 0.1124 - val_loss: 0.0503 - val_mae: 0.1744 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0204 - mae: 0.1120 - val_loss: 0.0501 - val_mae: 0.1740 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0206 - mae: 0.1124 - val_loss: 0.0460 - val_mae: 0.1682 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0206 - mae: 0.1127 - val_loss: 0.0438 - val_mae: 0.1615 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0204 - mae: 0.1118 - val_loss: 0.0440 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.04343\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0201 - mae: 0.1113 - val_loss: 0.0440 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.04343 to 0.04179, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0205 - mae: 0.1124 - val_loss: 0.0418 - val_mae: 0.1589 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.04179\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0205 - mae: 0.1124 - val_loss: 0.0473 - val_mae: 0.1698 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.04179\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0205 - mae: 0.1121 - val_loss: 0.0431 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.04179 to 0.04150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0206 - mae: 0.1126 - val_loss: 0.0415 - val_mae: 0.1580 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.04150\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0206 - mae: 0.1122 - val_loss: 0.0424 - val_mae: 0.1601 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.04150\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0207 - mae: 0.1126 - val_loss: 0.0456 - val_mae: 0.1646 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.04150\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0204 - mae: 0.1118 - val_loss: 0.0439 - val_mae: 0.1629 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.04150\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0208 - mae: 0.1126 - val_loss: 0.0431 - val_mae: 0.1616 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.04150\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0206 - mae: 0.1124 - val_loss: 0.0421 - val_mae: 0.1599 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss improved from 0.04150 to 0.03994, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0206 - mae: 0.1122 - val_loss: 0.0399 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03994\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0209 - mae: 0.1129 - val_loss: 0.0434 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.03994 to 0.03870, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0207 - mae: 0.1124 - val_loss: 0.0387 - val_mae: 0.1526 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0208 - mae: 0.1129 - val_loss: 0.0441 - val_mae: 0.1634 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0205 - mae: 0.1120 - val_loss: 0.0486 - val_mae: 0.1710 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0209 - mae: 0.1129 - val_loss: 0.0431 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0205 - mae: 0.1121 - val_loss: 0.0441 - val_mae: 0.1631 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0208 - mae: 0.1127 - val_loss: 0.0429 - val_mae: 0.1613 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0206 - mae: 0.1124 - val_loss: 0.0433 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0208 - mae: 0.1126 - val_loss: 0.0429 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0208 - mae: 0.1128 - val_loss: 0.0407 - val_mae: 0.1566 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0210 - mae: 0.1132 - val_loss: 0.0469 - val_mae: 0.1685 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0210 - mae: 0.1132 - val_loss: 0.0397 - val_mae: 0.1546 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0207 - mae: 0.1126 - val_loss: 0.0414 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0209 - mae: 0.1131 - val_loss: 0.0448 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0207 - mae: 0.1122 - val_loss: 0.0409 - val_mae: 0.1571 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0210 - mae: 0.1132 - val_loss: 0.0411 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0210 - mae: 0.1131 - val_loss: 0.0466 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0210 - mae: 0.1131 - val_loss: 0.0470 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0210 - mae: 0.1131 - val_loss: 0.0407 - val_mae: 0.1569 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0210 - mae: 0.1132 - val_loss: 0.0414 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0212 - mae: 0.1137 - val_loss: 0.0424 - val_mae: 0.1602 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.03870\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0208 - mae: 0.1127 - val_loss: 0.0427 - val_mae: 0.1612 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.03870 to 0.02656, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0070 - mae: 0.0651 - val_loss: 0.0266 - val_mae: 0.1252 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.02656 to 0.02580, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0051 - mae: 0.0563 - val_loss: 0.0258 - val_mae: 0.1233 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.02580\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0043 - mae: 0.0521 - val_loss: 0.0259 - val_mae: 0.1235 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.02580 to 0.02564, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0038 - mae: 0.0491 - val_loss: 0.0256 - val_mae: 0.1229 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02564\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0035 - mae: 0.0470 - val_loss: 0.0259 - val_mae: 0.1234 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02564 to 0.02553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0032 - mae: 0.0452 - val_loss: 0.0255 - val_mae: 0.1225 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.02553 to 0.02552, saving model to models/best_model_full.keras\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0030 - mae: 0.0437 - val_loss: 0.0255 - val_mae: 0.1223 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0256 - val_mae: 0.1225 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0027 - mae: 0.0414 - val_loss: 0.0256 - val_mae: 0.1226 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0258 - val_mae: 0.1231 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0025 - mae: 0.0395 - val_loss: 0.0257 - val_mae: 0.1226 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0024 - mae: 0.0387 - val_loss: 0.0260 - val_mae: 0.1232 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0023 - mae: 0.0379 - val_loss: 0.0258 - val_mae: 0.1227 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0022 - mae: 0.0372 - val_loss: 0.0259 - val_mae: 0.1231 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0021 - mae: 0.0366 - val_loss: 0.0259 - val_mae: 0.1228 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 9ms/step - loss: 0.0021 - mae: 0.0360 - val_loss: 0.0262 - val_mae: 0.1238 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0020 - mae: 0.0354 - val_loss: 0.0260 - val_mae: 0.1230 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0019 - mae: 0.0350 - val_loss: 0.0260 - val_mae: 0.1233 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0019 - mae: 0.0344 - val_loss: 0.0261 - val_mae: 0.1234 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0339 - val_loss: 0.0260 - val_mae: 0.1232 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0335 - val_loss: 0.0263 - val_mae: 0.1240 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0018 - mae: 0.0332 - val_loss: 0.0262 - val_mae: 0.1234 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0326 - val_loss: 0.0264 - val_mae: 0.1241 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0017 - mae: 0.0321 - val_loss: 0.0264 - val_mae: 0.1239 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0318 - val_loss: 0.0264 - val_mae: 0.1239 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0016 - mae: 0.0315 - val_loss: 0.0265 - val_mae: 0.1243 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0011 - mae: 0.0259 - val_loss: 0.0260 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0253 - val_loss: 0.0260 - val_mae: 0.1229 - learning_rate: 1.0000e-05\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0250 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0248 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 0.0010 - mae: 0.0246 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.9301e-04 - mae: 0.0245 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.8538e-04 - mae: 0.0244 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.7674e-04 - mae: 0.0243 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.7020e-04 - mae: 0.0242 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.6250e-04 - mae: 0.0241 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.5804e-04 - mae: 0.0241 - val_loss: 0.0261 - val_mae: 0.1230 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.5200e-04 - mae: 0.0240 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.4732e-04 - mae: 0.0239 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.4142e-04 - mae: 0.0238 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.3609e-04 - mae: 0.0238 - val_loss: 0.0261 - val_mae: 0.1232 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.3181e-04 - mae: 0.0237 - val_loss: 0.0262 - val_mae: 0.1232 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.2629e-04 - mae: 0.0236 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.2229e-04 - mae: 0.0236 - val_loss: 0.0262 - val_mae: 0.1232 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.1715e-04 - mae: 0.0235 - val_loss: 0.0261 - val_mae: 0.1232 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 9.1298e-04 - mae: 0.0235 - val_loss: 0.0262 - val_mae: 0.1233 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.7149e-04 - mae: 0.0228 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6576e-04 - mae: 0.0228 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6434e-04 - mae: 0.0227 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6349e-04 - mae: 0.0227 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6258e-04 - mae: 0.0227 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6199e-04 - mae: 0.0227 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6145e-04 - mae: 0.0227 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6096e-04 - mae: 0.0227 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.6031e-04 - mae: 0.0227 - val_loss: 0.0262 - val_mae: 0.1232 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 8ms/step - loss: 8.5967e-04 - mae: 0.0227 - val_loss: 0.0261 - val_mae: 0.1231 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02552\n",
      "4375/4375 - 37s - 9ms/step - loss: 8.5918e-04 - mae: 0.0227 - val_loss: 0.0262 - val_mae: 0.1232 - learning_rate: 1.0000e-06\n",
      "Epoch 207: early stopping\n",
      "Restoring model weights from the end of the best epoch: 157.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1932 m\n",
      "Median positioning error: 0.1732 m\n",
      "90th percentile error: 0.3465 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7772.978345,
   "end_time": "2025-08-18T09:45:14.312736",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-18T07:35:41.334391",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
