{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b5b19aa",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-29T06:15:41.715355Z",
     "iopub.status.busy": "2025-07-29T06:15:41.715153Z",
     "iopub.status.idle": "2025-07-29T06:15:43.098849Z",
     "shell.execute_reply": "2025-07-29T06:15:43.097905Z"
    },
    "papermill": {
     "duration": 1.388039,
     "end_time": "2025-07-29T06:15:43.100105",
     "exception": false,
     "start_time": "2025-07-29T06:15:41.712066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b309360b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:15:43.105567Z",
     "iopub.status.busy": "2025-07-29T06:15:43.104800Z",
     "iopub.status.idle": "2025-07-29T06:15:57.904951Z",
     "shell.execute_reply": "2025-07-29T06:15:57.904334Z"
    },
    "papermill": {
     "duration": 14.803805,
     "end_time": "2025-07-29T06:15:57.906263",
     "exception": false,
     "start_time": "2025-07-29T06:15:43.102458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-29 06:15:44.750426: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753769744.949299      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753769745.003621      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7e3d75a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:15:57.912505Z",
     "iopub.status.busy": "2025-07-29T06:15:57.911525Z",
     "iopub.status.idle": "2025-07-29T06:15:57.918859Z",
     "shell.execute_reply": "2025-07-29T06:15:57.918150Z"
    },
    "papermill": {
     "duration": 0.011535,
     "end_time": "2025-07-29T06:15:57.920041",
     "exception": false,
     "start_time": "2025-07-29T06:15:57.908506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 4     # 8,16,32,64,128, 256\n",
    "filter_size = 7   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c1e5381d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:15:57.924511Z",
     "iopub.status.busy": "2025-07-29T06:15:57.924251Z",
     "iopub.status.idle": "2025-07-29T06:15:57.927551Z",
     "shell.execute_reply": "2025-07-29T06:15:57.926886Z"
    },
    "papermill": {
     "duration": 0.006611,
     "end_time": "2025-07-29T06:15:57.928555",
     "exception": false,
     "start_time": "2025-07-29T06:15:57.921944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b29f5c6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T06:15:57.934055Z",
     "iopub.status.busy": "2025-07-29T06:15:57.933843Z",
     "iopub.status.idle": "2025-07-29T09:06:20.704394Z",
     "shell.execute_reply": "2025-07-29T09:06:20.703683Z"
    },
    "papermill": {
     "duration": 10222.775499,
     "end_time": "2025-07-29T09:06:20.705809",
     "exception": false,
     "start_time": "2025-07-29T06:15:57.930310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753769779.919235      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753769789.290383      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,642</span> (772.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m197,642\u001b[0m (772.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">197,382</span> (771.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m197,382\u001b[0m (771.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753769799.907134      56 service.cc:148] XLA service 0x7fe248017700 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753769799.907984      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753769803.135782      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 10.66858, saving model to models/best_model_full.keras\n",
      "4375/4375 - 57s - 13ms/step - loss: 86.3872 - mae: 5.9450 - val_loss: 10.6686 - val_mae: 2.5253 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 10.66858 to 5.91555, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 6.3960 - mae: 1.9432 - val_loss: 5.9156 - val_mae: 1.8685 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.91555 to 3.07555, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 3.6699 - mae: 1.4822 - val_loss: 3.0755 - val_mae: 1.3779 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 3.07555 to 1.64297, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 2.3779 - mae: 1.1712 - val_loss: 1.6430 - val_mae: 0.9991 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 1.64297 to 1.30987, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.4935 - mae: 0.9244 - val_loss: 1.3099 - val_mae: 0.8807 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 1.30987 to 0.76289, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 1.0439 - mae: 0.7916 - val_loss: 0.7629 - val_mae: 0.6819 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 0.76289\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.8481 - mae: 0.7145 - val_loss: 1.2278 - val_mae: 0.8792 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.76289 to 0.70778, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.7660 - mae: 0.6825 - val_loss: 0.7078 - val_mae: 0.6541 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 0.70778 to 0.40080, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6815 - mae: 0.6288 - val_loss: 0.4008 - val_mae: 0.4992 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.40080\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5834 - mae: 0.5941 - val_loss: 1.1581 - val_mae: 0.8751 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.40080\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6341 - mae: 0.6149 - val_loss: 0.5856 - val_mae: 0.5946 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.40080\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6213 - mae: 0.6116 - val_loss: 0.4558 - val_mae: 0.5310 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.40080\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6132 - mae: 0.6125 - val_loss: 0.5151 - val_mae: 0.5631 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.40080 to 0.35515, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.6518 - mae: 0.5970 - val_loss: 0.3551 - val_mae: 0.4660 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.35515\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4331 - mae: 0.5136 - val_loss: 0.5244 - val_mae: 0.5657 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.35515\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4506 - mae: 0.5242 - val_loss: 0.6507 - val_mae: 0.6398 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.35515\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5764 - mae: 0.5516 - val_loss: 0.4431 - val_mae: 0.5211 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.35515\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3914 - mae: 0.4886 - val_loss: 0.3838 - val_mae: 0.4864 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.35515\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3530 - mae: 0.4644 - val_loss: 0.4149 - val_mae: 0.5153 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.35515 to 0.26343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3750 - mae: 0.4681 - val_loss: 0.2634 - val_mae: 0.4001 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss improved from 0.26343 to 0.25504, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3168 - mae: 0.4388 - val_loss: 0.2550 - val_mae: 0.3984 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.25504\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.5419 - mae: 0.5173 - val_loss: 0.2775 - val_mae: 0.4087 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.25504\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3436 - mae: 0.4567 - val_loss: 0.2953 - val_mae: 0.4236 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.25504\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3837 - mae: 0.4761 - val_loss: 0.4412 - val_mae: 0.4528 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.25504\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4980 - mae: 0.4914 - val_loss: 0.3909 - val_mae: 0.4782 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 0.25504 to 0.24065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3104 - mae: 0.4359 - val_loss: 0.2406 - val_mae: 0.3867 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5290 - mae: 0.5141 - val_loss: 0.3663 - val_mae: 0.4766 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.24065\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3297 - mae: 0.4470 - val_loss: 0.3200 - val_mae: 0.4455 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.24065\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3717 - mae: 0.4675 - val_loss: 0.4307 - val_mae: 0.5171 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.7404 - mae: 0.5313 - val_loss: 0.3380 - val_mae: 0.4563 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3291 - mae: 0.4481 - val_loss: 0.3392 - val_mae: 0.4594 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3279 - mae: 0.4475 - val_loss: 0.3623 - val_mae: 0.4704 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3921 - mae: 0.4874 - val_loss: 0.3732 - val_mae: 0.4856 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3467 - mae: 0.4584 - val_loss: 0.4708 - val_mae: 0.5202 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3302 - mae: 0.4471 - val_loss: 0.4275 - val_mae: 0.5066 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4469 - mae: 0.4924 - val_loss: 0.3026 - val_mae: 0.4382 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3008 - mae: 0.4281 - val_loss: 0.3502 - val_mae: 0.4704 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.5130 - mae: 0.5030 - val_loss: 0.2429 - val_mae: 0.3858 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3428 - mae: 0.4527 - val_loss: 0.7542 - val_mae: 0.6938 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3260 - mae: 0.4412 - val_loss: 0.4795 - val_mae: 0.5361 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3492 - mae: 0.4556 - val_loss: 0.3693 - val_mae: 0.4783 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3038 - mae: 0.4289 - val_loss: 0.3589 - val_mae: 0.4719 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.24065\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3803 - mae: 0.4524 - val_loss: 0.3155 - val_mae: 0.4519 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.24065 to 0.22496, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.2958 - mae: 0.4240 - val_loss: 0.2250 - val_mae: 0.3723 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3198 - mae: 0.4379 - val_loss: 0.2493 - val_mae: 0.3873 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3075 - mae: 0.4316 - val_loss: 0.2599 - val_mae: 0.3938 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.7182 - mae: 0.5445 - val_loss: 0.3359 - val_mae: 0.4531 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.22496\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.4201 - mae: 0.4830 - val_loss: 0.2700 - val_mae: 0.4134 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.7895 - mae: 0.5642 - val_loss: 0.4488 - val_mae: 0.5205 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3447 - mae: 0.4595 - val_loss: 0.2708 - val_mae: 0.4057 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.22496\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3681 - mae: 0.4709 - val_loss: 0.3169 - val_mae: 0.4425 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4407 - mae: 0.4830 - val_loss: 0.4028 - val_mae: 0.4981 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6237 - mae: 0.5304 - val_loss: 0.2494 - val_mae: 0.3912 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.22496\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3335 - mae: 0.4517 - val_loss: 0.2863 - val_mae: 0.4165 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.22496\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3455 - mae: 0.4572 - val_loss: 0.2769 - val_mae: 0.4105 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.22496 to 0.21890, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3148 - mae: 0.4360 - val_loss: 0.2189 - val_mae: 0.3658 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3127 - mae: 0.4348 - val_loss: 0.2943 - val_mae: 0.4289 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3348 - mae: 0.4493 - val_loss: 0.3784 - val_mae: 0.4923 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.2895 - mae: 0.4197 - val_loss: 0.2357 - val_mae: 0.3801 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.6758 - mae: 0.5214 - val_loss: 0.2881 - val_mae: 0.4263 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.2840 - mae: 0.4168 - val_loss: 0.2540 - val_mae: 0.4004 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.4739 - mae: 0.4900 - val_loss: 0.3039 - val_mae: 0.4381 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3097 - mae: 0.4348 - val_loss: 0.5374 - val_mae: 0.5858 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 1.3007 - mae: 0.6768 - val_loss: 0.4350 - val_mae: 0.5176 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.21890\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.3135 - mae: 0.4383 - val_loss: 0.3431 - val_mae: 0.4632 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.21890\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.6128 - mae: 0.5477 - val_loss: 0.3848 - val_mae: 0.4875 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.21890\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3586 - mae: 0.4637 - val_loss: 0.4693 - val_mae: 0.5364 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.21890\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3443 - mae: 0.4545 - val_loss: 0.2507 - val_mae: 0.3888 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.21890 to 0.20112, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.3118 - mae: 0.4344 - val_loss: 0.2011 - val_mae: 0.3393 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.8449 - mae: 0.5909 - val_loss: 0.4330 - val_mae: 0.5177 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.20112\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.3295 - mae: 0.4483 - val_loss: 0.3738 - val_mae: 0.4855 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.20112\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.3407 - mae: 0.4466 - val_loss: 0.3224 - val_mae: 0.4510 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.20112\n",
      "4375/4375 - 44s - 10ms/step - loss: 1.0507 - mae: 0.6180 - val_loss: 0.4586 - val_mae: 0.5302 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3402 - mae: 0.4568 - val_loss: 0.2899 - val_mae: 0.4274 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3581 - mae: 0.4613 - val_loss: 0.3862 - val_mae: 0.4945 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3228 - mae: 0.4418 - val_loss: 0.3524 - val_mae: 0.4594 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.20112\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.3492 - mae: 0.4597 - val_loss: 0.3117 - val_mae: 0.4394 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.20112\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.3302 - mae: 0.4439 - val_loss: 0.2884 - val_mae: 0.4252 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.7286 - mae: 0.5560 - val_loss: 0.6477 - val_mae: 0.6263 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.4061 - mae: 0.4956 - val_loss: 0.3907 - val_mae: 0.4776 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.4057 - mae: 0.4860 - val_loss: 0.3155 - val_mae: 0.4441 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3349 - mae: 0.4515 - val_loss: 0.5308 - val_mae: 0.5687 - learning_rate: 0.0100\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.5848 - mae: 0.5191 - val_loss: 0.2821 - val_mae: 0.4202 - learning_rate: 0.0100\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3169 - mae: 0.4407 - val_loss: 0.3217 - val_mae: 0.4415 - learning_rate: 0.0100\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.4522 - mae: 0.4836 - val_loss: 0.5875 - val_mae: 0.5949 - learning_rate: 0.0100\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 1.0089 - mae: 0.6352 - val_loss: 0.4885 - val_mae: 0.5451 - learning_rate: 0.0100\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3744 - mae: 0.4780 - val_loss: 0.2792 - val_mae: 0.4158 - learning_rate: 0.0100\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.4445 - mae: 0.5136 - val_loss: 0.3805 - val_mae: 0.4818 - learning_rate: 0.0100\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.20112\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.3500 - mae: 0.4609 - val_loss: 0.8061 - val_mae: 0.5759 - learning_rate: 0.0100\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.20112 to 0.10369, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.1036 - mae: 0.2512 - val_loss: 0.1037 - val_mae: 0.2325 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.10369\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0786 - mae: 0.2206 - val_loss: 0.1166 - val_mae: 0.2280 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.10369 to 0.07311, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0691 - mae: 0.2070 - val_loss: 0.0731 - val_mae: 0.2105 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.07311 to 0.07000, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0631 - mae: 0.1980 - val_loss: 0.0700 - val_mae: 0.2048 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.07000 to 0.06539, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0588 - mae: 0.1913 - val_loss: 0.0654 - val_mae: 0.1964 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.06539\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0552 - mae: 0.1853 - val_loss: 0.0923 - val_mae: 0.1995 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.06539 to 0.05861, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0523 - mae: 0.1805 - val_loss: 0.0586 - val_mae: 0.1896 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.05861\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0497 - mae: 0.1759 - val_loss: 0.0615 - val_mae: 0.1839 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.05861\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0477 - mae: 0.1725 - val_loss: 0.0643 - val_mae: 0.1870 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.05861 to 0.05677, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0455 - mae: 0.1685 - val_loss: 0.0568 - val_mae: 0.1851 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.05677 to 0.05639, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0440 - mae: 0.1658 - val_loss: 0.0564 - val_mae: 0.1818 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.05639\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0428 - mae: 0.1634 - val_loss: 0.0568 - val_mae: 0.1815 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.05639 to 0.05539, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0413 - mae: 0.1605 - val_loss: 0.0554 - val_mae: 0.1823 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.05539 to 0.05197, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0406 - mae: 0.1593 - val_loss: 0.0520 - val_mae: 0.1750 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.05197 to 0.04721, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0395 - mae: 0.1569 - val_loss: 0.0472 - val_mae: 0.1692 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04721\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0385 - mae: 0.1551 - val_loss: 0.0484 - val_mae: 0.1708 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.04721 to 0.04586, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0378 - mae: 0.1536 - val_loss: 0.0459 - val_mae: 0.1673 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.04586 to 0.04257, saving model to models/best_model_full.keras\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0368 - mae: 0.1515 - val_loss: 0.0426 - val_mae: 0.1606 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04257\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0363 - mae: 0.1507 - val_loss: 0.0455 - val_mae: 0.1675 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04257\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0354 - mae: 0.1487 - val_loss: 0.0453 - val_mae: 0.1651 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04257\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0347 - mae: 0.1471 - val_loss: 0.0439 - val_mae: 0.1618 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.04257\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0341 - mae: 0.1460 - val_loss: 0.0459 - val_mae: 0.1618 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.04257\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0339 - mae: 0.1453 - val_loss: 0.0491 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.04257\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0333 - mae: 0.1440 - val_loss: 0.0453 - val_mae: 0.1659 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.04257\n",
      "4375/4375 - 43s - 10ms/step - loss: 0.0329 - mae: 0.1433 - val_loss: 0.0448 - val_mae: 0.1647 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.04257\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0324 - mae: 0.1421 - val_loss: 0.0443 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.04257\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0322 - mae: 0.1418 - val_loss: 0.0495 - val_mae: 0.1689 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.04257\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0316 - mae: 0.1403 - val_loss: 0.0443 - val_mae: 0.1637 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.04257\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0314 - mae: 0.1400 - val_loss: 0.0429 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.04257\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0311 - mae: 0.1394 - val_loss: 0.0457 - val_mae: 0.1653 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.04257\n",
      "4375/4375 - 47s - 11ms/step - loss: 0.0306 - mae: 0.1382 - val_loss: 0.0427 - val_mae: 0.1602 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.04257 to 0.04086, saving model to models/best_model_full.keras\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0304 - mae: 0.1376 - val_loss: 0.0409 - val_mae: 0.1560 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.04086 to 0.04084, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0300 - mae: 0.1368 - val_loss: 0.0408 - val_mae: 0.1559 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.04084\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0300 - mae: 0.1371 - val_loss: 0.0432 - val_mae: 0.1604 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.04084\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0298 - mae: 0.1362 - val_loss: 0.0444 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.04084\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0293 - mae: 0.1352 - val_loss: 0.0444 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.04084\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0294 - mae: 0.1354 - val_loss: 0.0487 - val_mae: 0.1684 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.04084 to 0.04071, saving model to models/best_model_full.keras\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0291 - mae: 0.1346 - val_loss: 0.0407 - val_mae: 0.1548 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.04071\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0289 - mae: 0.1344 - val_loss: 0.0442 - val_mae: 0.1598 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.04071\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0290 - mae: 0.1342 - val_loss: 0.0418 - val_mae: 0.1580 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.04071\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0283 - mae: 0.1327 - val_loss: 0.0450 - val_mae: 0.1595 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.04071\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0285 - mae: 0.1333 - val_loss: 0.0486 - val_mae: 0.1682 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.04071\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0281 - mae: 0.1323 - val_loss: 0.0469 - val_mae: 0.1673 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.04071\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0281 - mae: 0.1325 - val_loss: 0.0427 - val_mae: 0.1615 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss improved from 0.04071 to 0.03905, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0281 - mae: 0.1320 - val_loss: 0.0390 - val_mae: 0.1537 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0279 - mae: 0.1319 - val_loss: 0.0424 - val_mae: 0.1594 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0277 - mae: 0.1315 - val_loss: 0.0428 - val_mae: 0.1567 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0278 - mae: 0.1316 - val_loss: 0.0395 - val_mae: 0.1546 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0277 - mae: 0.1314 - val_loss: 0.0406 - val_mae: 0.1581 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0277 - mae: 0.1315 - val_loss: 0.0405 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0277 - mae: 0.1313 - val_loss: 0.0443 - val_mae: 0.1642 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0273 - mae: 0.1307 - val_loss: 0.0404 - val_mae: 0.1540 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0278 - mae: 0.1313 - val_loss: 0.0455 - val_mae: 0.1636 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0272 - mae: 0.1301 - val_loss: 0.0395 - val_mae: 0.1545 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0273 - mae: 0.1303 - val_loss: 0.0398 - val_mae: 0.1535 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0276 - mae: 0.1310 - val_loss: 0.0399 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0278 - mae: 0.1314 - val_loss: 0.0439 - val_mae: 0.1636 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0273 - mae: 0.1302 - val_loss: 0.0410 - val_mae: 0.1570 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0275 - mae: 0.1306 - val_loss: 0.0405 - val_mae: 0.1555 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.03905\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0271 - mae: 0.1299 - val_loss: 0.0415 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0273 - mae: 0.1303 - val_loss: 0.0423 - val_mae: 0.1608 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0272 - mae: 0.1300 - val_loss: 0.0400 - val_mae: 0.1549 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.03905\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0275 - mae: 0.1307 - val_loss: 0.0393 - val_mae: 0.1541 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.03905\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0271 - mae: 0.1298 - val_loss: 0.0407 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.03905\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0270 - mae: 0.1297 - val_loss: 0.0412 - val_mae: 0.1583 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.03905 to 0.02641, saving model to models/best_model_full.keras\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0132 - mae: 0.0906 - val_loss: 0.0264 - val_mae: 0.1256 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02641 to 0.02625, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0118 - mae: 0.0858 - val_loss: 0.0263 - val_mae: 0.1251 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02625\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0112 - mae: 0.0840 - val_loss: 0.0263 - val_mae: 0.1252 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.02625 to 0.02615, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0108 - mae: 0.0825 - val_loss: 0.0261 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02615\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0106 - mae: 0.0816 - val_loss: 0.0262 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.02615 to 0.02614, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0104 - mae: 0.0807 - val_loss: 0.0261 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.02614 to 0.02600, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0102 - mae: 0.0800 - val_loss: 0.0260 - val_mae: 0.1243 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02600\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0100 - mae: 0.0793 - val_loss: 0.0264 - val_mae: 0.1253 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0099 - mae: 0.0789 - val_loss: 0.0265 - val_mae: 0.1255 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0263 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.02600\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0096 - mae: 0.0777 - val_loss: 0.0263 - val_mae: 0.1246 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0095 - mae: 0.0774 - val_loss: 0.0261 - val_mae: 0.1242 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0094 - mae: 0.0769 - val_loss: 0.0263 - val_mae: 0.1245 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0093 - mae: 0.0765 - val_loss: 0.0263 - val_mae: 0.1248 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0092 - mae: 0.0761 - val_loss: 0.0262 - val_mae: 0.1246 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0091 - mae: 0.0757 - val_loss: 0.0264 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0091 - mae: 0.0753 - val_loss: 0.0266 - val_mae: 0.1256 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0090 - mae: 0.0751 - val_loss: 0.0263 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0089 - mae: 0.0749 - val_loss: 0.0264 - val_mae: 0.1251 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0088 - mae: 0.0745 - val_loss: 0.0267 - val_mae: 0.1257 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0088 - mae: 0.0742 - val_loss: 0.0266 - val_mae: 0.1254 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0087 - mae: 0.0739 - val_loss: 0.0266 - val_mae: 0.1252 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02600\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0087 - mae: 0.0736 - val_loss: 0.0264 - val_mae: 0.1247 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0086 - mae: 0.0733 - val_loss: 0.0266 - val_mae: 0.1251 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02600\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0085 - mae: 0.0731 - val_loss: 0.0266 - val_mae: 0.1252 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0085 - mae: 0.0729 - val_loss: 0.0267 - val_mae: 0.1256 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02600\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0267 - val_mae: 0.1253 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.02600 to 0.02598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0074 - mae: 0.0678 - val_loss: 0.0260 - val_mae: 0.1236 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0073 - mae: 0.0673 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0072 - mae: 0.0672 - val_loss: 0.0262 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0072 - mae: 0.0670 - val_loss: 0.0262 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0072 - mae: 0.0669 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0072 - mae: 0.0669 - val_loss: 0.0260 - val_mae: 0.1236 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0072 - mae: 0.0668 - val_loss: 0.0260 - val_mae: 0.1237 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0072 - mae: 0.0668 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0072 - mae: 0.0667 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0071 - mae: 0.0667 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0262 - val_mae: 0.1241 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0260 - val_mae: 0.1236 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0071 - mae: 0.0665 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0071 - mae: 0.0665 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0071 - mae: 0.0665 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0071 - mae: 0.0664 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0071 - mae: 0.0664 - val_loss: 0.0260 - val_mae: 0.1237 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0071 - mae: 0.0664 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0071 - mae: 0.0663 - val_loss: 0.0262 - val_mae: 0.1240 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0070 - mae: 0.0658 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0260 - val_mae: 0.1237 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0262 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02598\n",
      "4375/4375 - 47s - 11ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0260 - val_mae: 0.1237 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0260 - val_mae: 0.1236 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0260 - val_mae: 0.1236 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 10ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02598\n",
      "4375/4375 - 45s - 10ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02598\n",
      "4375/4375 - 47s - 11ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0262 - val_mae: 0.1240 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02598\n",
      "4375/4375 - 47s - 11ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1237 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.02598\n",
      "4375/4375 - 46s - 11ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0261 - val_mae: 0.1237 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0260 - val_mae: 0.1236 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0262 - val_mae: 0.1240 - learning_rate: 1.0000e-07\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1239 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0260 - val_mae: 0.1237 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0260 - val_mae: 0.1237 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02598\n",
      "4375/4375 - 44s - 10ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0261 - val_mae: 0.1238 - learning_rate: 1.0000e-07\n",
      "Epoch 232: early stopping\n",
      "Restoring model weights from the end of the best epoch: 182.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 4s - 6ms/step\n",
      "Mean positioning error: 0.1952 m\n",
      "Median positioning error: 0.1763 m\n",
      "90th percentile error: 0.3478 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10246.922815,
   "end_time": "2025-07-29T09:06:24.500850",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-29T06:15:37.578035",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
