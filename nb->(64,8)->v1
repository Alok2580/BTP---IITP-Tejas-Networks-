{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d5584461",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T18:28:55.244002Z",
     "iopub.status.busy": "2025-08-07T18:28:55.243754Z",
     "iopub.status.idle": "2025-08-07T18:28:56.691590Z",
     "shell.execute_reply": "2025-08-07T18:28:56.690617Z"
    },
    "papermill": {
     "duration": 1.452449,
     "end_time": "2025-08-07T18:28:56.692857",
     "exception": false,
     "start_time": "2025-08-07T18:28:55.240408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52fae9c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:28:56.698321Z",
     "iopub.status.busy": "2025-08-07T18:28:56.698017Z",
     "iopub.status.idle": "2025-08-07T18:29:11.445162Z",
     "shell.execute_reply": "2025-08-07T18:29:11.444494Z"
    },
    "papermill": {
     "duration": 14.75104,
     "end_time": "2025-08-07T18:29:11.446490",
     "exception": false,
     "start_time": "2025-08-07T18:28:56.695450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 18:28:58.733738: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754591338.945543      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754591339.015372      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c7f19b15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:29:11.451544Z",
     "iopub.status.busy": "2025-08-07T18:29:11.451152Z",
     "iopub.status.idle": "2025-08-07T18:29:11.455641Z",
     "shell.execute_reply": "2025-08-07T18:29:11.454944Z"
    },
    "papermill": {
     "duration": 0.007972,
     "end_time": "2025-08-07T18:29:11.456669",
     "exception": false,
     "start_time": "2025-08-07T18:29:11.448697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size = 9   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "576a9a02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:29:11.460952Z",
     "iopub.status.busy": "2025-08-07T18:29:11.460767Z",
     "iopub.status.idle": "2025-08-07T18:29:11.464009Z",
     "shell.execute_reply": "2025-08-07T18:29:11.463340Z"
    },
    "papermill": {
     "duration": 0.006542,
     "end_time": "2025-08-07T18:29:11.465028",
     "exception": false,
     "start_time": "2025-08-07T18:29:11.458486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "140dbf0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T18:29:11.469942Z",
     "iopub.status.busy": "2025-08-07T18:29:11.469734Z",
     "iopub.status.idle": "2025-08-07T22:03:53.069056Z",
     "shell.execute_reply": "2025-08-07T22:03:53.068223Z"
    },
    "papermill": {
     "duration": 12881.603566,
     "end_time": "2025-08-07T22:03:53.070360",
     "exception": false,
     "start_time": "2025-08-07T18:29:11.466794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754591374.734968      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754591384.005761      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">83,200</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">63,488</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m83,200\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m63,488\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">675,338</span> (2.58 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m675,338\u001b[0m (2.58 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">674,822</span> (2.57 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m674,822\u001b[0m (2.57 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754591394.799514      56 service.cc:148] XLA service 0x7d6350016e60 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754591394.800307      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754591398.391727      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 15.02421, saving model to models/best_model_full.keras\n",
      "4375/4375 - 48s - 11ms/step - loss: 68.8392 - mae: 5.7231 - val_loss: 15.0242 - val_mae: 3.0196 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 15.02421 to 12.38985, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 13.8046 - mae: 2.7939 - val_loss: 12.3898 - val_mae: 2.6771 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 12.38985 to 5.00750, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 9.1299 - mae: 2.2348 - val_loss: 5.0075 - val_mae: 1.7109 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 5.00750 to 3.08066, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 4.9097 - mae: 1.6103 - val_loss: 3.0807 - val_mae: 1.3593 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 3.08066\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.1046 - mae: 1.2917 - val_loss: 5.1229 - val_mae: 1.7451 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 3.08066 to 1.37563, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6751 - mae: 1.1558 - val_loss: 1.3756 - val_mae: 0.9028 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.37563 to 0.81703, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8042 - mae: 0.9484 - val_loss: 0.8170 - val_mae: 0.7109 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 0.81703 to 0.68988, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5550 - mae: 0.8563 - val_loss: 0.6899 - val_mae: 0.6407 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.68988\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1569 - mae: 0.9983 - val_loss: 1.0179 - val_mae: 0.7776 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.68988\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5001 - mae: 0.8489 - val_loss: 1.0257 - val_mae: 0.8071 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.68988\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.8119 - mae: 1.2116 - val_loss: 2.8236 - val_mae: 1.2709 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.68988\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2808 - mae: 0.8476 - val_loss: 0.7802 - val_mae: 0.6918 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.68988\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2294 - mae: 0.7750 - val_loss: 0.8152 - val_mae: 0.7003 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.68988\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9809 - mae: 0.8022 - val_loss: 1.8333 - val_mae: 1.0136 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.68988 to 0.51296, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6232 - mae: 0.6023 - val_loss: 0.5130 - val_mae: 0.5687 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.7463 - mae: 0.8022 - val_loss: 0.7532 - val_mae: 0.6804 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5276 - mae: 0.5593 - val_loss: 0.7289 - val_mae: 0.6909 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1632 - mae: 0.8778 - val_loss: 0.5350 - val_mae: 0.5750 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.5381 - mae: 0.7695 - val_loss: 1.2681 - val_mae: 0.8617 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0982 - mae: 0.7581 - val_loss: 1.2288 - val_mae: 0.8462 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.7728 - mae: 0.9878 - val_loss: 1.1008 - val_mae: 0.8082 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3228 - mae: 0.7908 - val_loss: 0.6402 - val_mae: 0.6202 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1887 - mae: 0.7006 - val_loss: 0.6092 - val_mae: 0.6067 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6570 - mae: 0.6163 - val_loss: 0.6037 - val_mae: 0.6163 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3729 - mae: 0.8032 - val_loss: 0.8324 - val_mae: 0.6868 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.9671 - mae: 0.6870 - val_loss: 0.6652 - val_mae: 0.6365 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9616 - mae: 0.8865 - val_loss: 1.0908 - val_mae: 0.8057 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6137 - mae: 0.6013 - val_loss: 0.7050 - val_mae: 0.6697 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.9267 - mae: 1.0985 - val_loss: 1.9380 - val_mae: 1.0266 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6371 - mae: 0.8124 - val_loss: 2.2206 - val_mae: 1.0492 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9108 - mae: 0.9312 - val_loss: 13.8617 - val_mae: 2.2346 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6318 - mae: 0.8812 - val_loss: 1.9283 - val_mae: 1.0853 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.8996 - mae: 0.9718 - val_loss: 0.9964 - val_mae: 0.7548 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.9693 - mae: 1.1665 - val_loss: 21.6809 - val_mae: 3.4476 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 3.5008 - mae: 1.3688 - val_loss: 4.3684 - val_mae: 1.3853 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.3755 - mae: 0.8899 - val_loss: 1.5412 - val_mae: 0.8355 - learning_rate: 1.0000e-03\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8470 - mae: 0.7041 - val_loss: 0.8650 - val_mae: 0.6614 - learning_rate: 1.0000e-03\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.6770 - mae: 0.6300 - val_loss: 0.6057 - val_mae: 0.5952 - learning_rate: 1.0000e-03\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.51296\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.5712 - mae: 0.5792 - val_loss: 0.6048 - val_mae: 0.5895 - learning_rate: 1.0000e-03\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss improved from 0.51296 to 0.48089, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4782 - mae: 0.5321 - val_loss: 0.4809 - val_mae: 0.5273 - learning_rate: 1.0000e-03\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss improved from 0.48089 to 0.38368, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4156 - mae: 0.4957 - val_loss: 0.3837 - val_mae: 0.4748 - learning_rate: 1.0000e-03\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss improved from 0.38368 to 0.35461, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3694 - mae: 0.4685 - val_loss: 0.3546 - val_mae: 0.4593 - learning_rate: 1.0000e-03\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.35461\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3516 - mae: 0.4571 - val_loss: 0.3843 - val_mae: 0.4653 - learning_rate: 1.0000e-03\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss improved from 0.35461 to 0.31397, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.3002 - mae: 0.4228 - val_loss: 0.3140 - val_mae: 0.4162 - learning_rate: 1.0000e-03\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss improved from 0.31397 to 0.29583, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2801 - mae: 0.4082 - val_loss: 0.2958 - val_mae: 0.4027 - learning_rate: 1.0000e-03\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.29583 to 0.26553, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2713 - mae: 0.4016 - val_loss: 0.2655 - val_mae: 0.3957 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.26553 to 0.24150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2376 - mae: 0.3771 - val_loss: 0.2415 - val_mae: 0.3767 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.24150\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2326 - mae: 0.3726 - val_loss: 0.3919 - val_mae: 0.4292 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.24150\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2175 - mae: 0.3606 - val_loss: 0.2694 - val_mae: 0.3777 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.24150 to 0.21124, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.2004 - mae: 0.3469 - val_loss: 0.2112 - val_mae: 0.3558 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.21124 to 0.19824, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1900 - mae: 0.3374 - val_loss: 0.1982 - val_mae: 0.3426 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.19824\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.1769 - mae: 0.3264 - val_loss: 0.2001 - val_mae: 0.3432 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.19824 to 0.17754, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1648 - mae: 0.3152 - val_loss: 0.1775 - val_mae: 0.3259 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.17754 to 0.16137, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1516 - mae: 0.3030 - val_loss: 0.1614 - val_mae: 0.3125 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.16137 to 0.15263, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1492 - mae: 0.3001 - val_loss: 0.1526 - val_mae: 0.3014 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.15263 to 0.14481, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1435 - mae: 0.2938 - val_loss: 0.1448 - val_mae: 0.2943 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.14481\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1337 - mae: 0.2844 - val_loss: 0.1595 - val_mae: 0.3104 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.14481 to 0.14312, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1392 - mae: 0.2892 - val_loss: 0.1431 - val_mae: 0.2927 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.14312\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1398 - mae: 0.2897 - val_loss: 0.1579 - val_mae: 0.3042 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.14312 to 0.12945, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1260 - mae: 0.2760 - val_loss: 0.1294 - val_mae: 0.2782 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.12945 to 0.12791, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1158 - mae: 0.2657 - val_loss: 0.1279 - val_mae: 0.2763 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.12791\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1144 - mae: 0.2634 - val_loss: 0.1914 - val_mae: 0.3365 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.12791 to 0.12369, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1098 - mae: 0.2582 - val_loss: 0.1237 - val_mae: 0.2752 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.12369\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1062 - mae: 0.2546 - val_loss: 0.1652 - val_mae: 0.3149 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.12369 to 0.10861, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1053 - mae: 0.2526 - val_loss: 0.1086 - val_mae: 0.2551 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.10861\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1087 - mae: 0.2559 - val_loss: 0.1334 - val_mae: 0.2762 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.10861\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1163 - mae: 0.2647 - val_loss: 0.1203 - val_mae: 0.2679 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.10861\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1071 - mae: 0.2553 - val_loss: 0.1158 - val_mae: 0.2640 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.10861\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.1034 - mae: 0.2510 - val_loss: 0.1319 - val_mae: 0.2871 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.10861\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0956 - mae: 0.2417 - val_loss: 0.1427 - val_mae: 0.2933 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.10861\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0978 - mae: 0.2440 - val_loss: 0.1616 - val_mae: 0.3102 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.10861\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0950 - mae: 0.2410 - val_loss: 0.1127 - val_mae: 0.2609 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.10861\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0927 - mae: 0.2378 - val_loss: 0.1187 - val_mae: 0.2675 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.10861 to 0.09476, saving model to models/best_model_full.keras\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0895 - mae: 0.2338 - val_loss: 0.0948 - val_mae: 0.2377 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.09476\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0881 - mae: 0.2319 - val_loss: 0.1022 - val_mae: 0.2494 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.09476\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0900 - mae: 0.2342 - val_loss: 0.1300 - val_mae: 0.2798 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.09476\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0902 - mae: 0.2343 - val_loss: 0.1213 - val_mae: 0.2734 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.09476\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0854 - mae: 0.2281 - val_loss: 0.0991 - val_mae: 0.2445 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.09476 to 0.09174, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0847 - mae: 0.2273 - val_loss: 0.0917 - val_mae: 0.2353 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.09174\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0787 - mae: 0.2196 - val_loss: 0.0921 - val_mae: 0.2357 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.09174\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0757 - mae: 0.2158 - val_loss: 0.0936 - val_mae: 0.2383 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.09174\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0783 - mae: 0.2187 - val_loss: 0.1590 - val_mae: 0.3188 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.09174 to 0.08364, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0763 - mae: 0.2161 - val_loss: 0.0836 - val_mae: 0.2224 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.08364\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0795 - mae: 0.2195 - val_loss: 0.0901 - val_mae: 0.2304 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.08364\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0835 - mae: 0.2253 - val_loss: 0.0890 - val_mae: 0.2324 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.08364\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0823 - mae: 0.2242 - val_loss: 0.1262 - val_mae: 0.2704 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.08364\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0746 - mae: 0.2143 - val_loss: 0.0963 - val_mae: 0.2407 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.08364\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0773 - mae: 0.2174 - val_loss: 0.0903 - val_mae: 0.2321 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.08364 to 0.07493, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0715 - mae: 0.2097 - val_loss: 0.0749 - val_mae: 0.2128 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.07493\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0728 - mae: 0.2095 - val_loss: 0.0793 - val_mae: 0.2176 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.07493\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0638 - mae: 0.1982 - val_loss: 0.0755 - val_mae: 0.2136 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.07493 to 0.07198, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0640 - mae: 0.1988 - val_loss: 0.0720 - val_mae: 0.2064 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.07198 to 0.06837, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0650 - mae: 0.2001 - val_loss: 0.0684 - val_mae: 0.2036 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.06837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0696 - mae: 0.2062 - val_loss: 0.0889 - val_mae: 0.2329 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.06837\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0653 - mae: 0.2004 - val_loss: 0.0746 - val_mae: 0.2127 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.06837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0642 - mae: 0.1984 - val_loss: 0.0867 - val_mae: 0.2331 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.06837\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0614 - mae: 0.1943 - val_loss: 0.0737 - val_mae: 0.2101 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.06837\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0604 - mae: 0.1924 - val_loss: 0.0722 - val_mae: 0.2079 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.06837 to 0.06732, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0621 - mae: 0.1955 - val_loss: 0.0673 - val_mae: 0.2032 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.06732\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0602 - mae: 0.1926 - val_loss: 0.0764 - val_mae: 0.2154 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.06732\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0620 - mae: 0.1950 - val_loss: 0.0726 - val_mae: 0.2084 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.06732\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0578 - mae: 0.1888 - val_loss: 0.0821 - val_mae: 0.2246 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.06732 to 0.06311, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0576 - mae: 0.1882 - val_loss: 0.0631 - val_mae: 0.1926 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.06311\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0586 - mae: 0.1897 - val_loss: 0.0652 - val_mae: 0.1977 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.06311\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0574 - mae: 0.1878 - val_loss: 0.0745 - val_mae: 0.2107 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.06311\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0568 - mae: 0.1869 - val_loss: 0.0730 - val_mae: 0.2120 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.06311\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0565 - mae: 0.1863 - val_loss: 0.0677 - val_mae: 0.2015 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.06311\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0554 - mae: 0.1849 - val_loss: 0.0687 - val_mae: 0.2044 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.06311\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0544 - mae: 0.1832 - val_loss: 0.0662 - val_mae: 0.1982 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.06311 to 0.06259, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0543 - mae: 0.1829 - val_loss: 0.0626 - val_mae: 0.1950 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.06259 to 0.06018, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0531 - mae: 0.1806 - val_loss: 0.0602 - val_mae: 0.1903 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.06018 to 0.05893, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0530 - mae: 0.1807 - val_loss: 0.0589 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.05893\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0524 - mae: 0.1796 - val_loss: 0.0683 - val_mae: 0.2035 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.05893\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0522 - mae: 0.1794 - val_loss: 0.0594 - val_mae: 0.1883 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.05893 to 0.05434, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0502 - mae: 0.1755 - val_loss: 0.0543 - val_mae: 0.1809 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.05434\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0513 - mae: 0.1774 - val_loss: 0.0593 - val_mae: 0.1888 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.05434\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0500 - mae: 0.1750 - val_loss: 0.0672 - val_mae: 0.2008 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.05434\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0514 - mae: 0.1775 - val_loss: 0.0670 - val_mae: 0.2024 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.05434\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0493 - mae: 0.1745 - val_loss: 0.0640 - val_mae: 0.1978 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.05434\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0496 - mae: 0.1738 - val_loss: 0.0556 - val_mae: 0.1823 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.05434\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0506 - mae: 0.1759 - val_loss: 0.0644 - val_mae: 0.1965 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.05434\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0505 - mae: 0.1765 - val_loss: 0.0554 - val_mae: 0.1817 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.05434\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0475 - mae: 0.1710 - val_loss: 0.0717 - val_mae: 0.2083 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss improved from 0.05434 to 0.05294, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0489 - mae: 0.1727 - val_loss: 0.0529 - val_mae: 0.1792 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.05294\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0468 - mae: 0.1698 - val_loss: 0.0568 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.05294\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0452 - mae: 0.1667 - val_loss: 0.0645 - val_mae: 0.1955 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.05294\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0449 - mae: 0.1661 - val_loss: 0.0586 - val_mae: 0.1890 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.05294\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0449 - mae: 0.1662 - val_loss: 0.0668 - val_mae: 0.2001 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss improved from 0.05294 to 0.04947, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0444 - mae: 0.1651 - val_loss: 0.0495 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.04947\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0435 - mae: 0.1639 - val_loss: 0.0545 - val_mae: 0.1816 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss improved from 0.04947 to 0.04524, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0432 - mae: 0.1628 - val_loss: 0.0452 - val_mae: 0.1638 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.04524\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0433 - mae: 0.1631 - val_loss: 0.0556 - val_mae: 0.1841 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.04524 to 0.04516, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0424 - mae: 0.1615 - val_loss: 0.0452 - val_mae: 0.1651 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0415 - mae: 0.1598 - val_loss: 0.0454 - val_mae: 0.1657 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0409 - mae: 0.1586 - val_loss: 0.0541 - val_mae: 0.1813 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0419 - mae: 0.1603 - val_loss: 0.0516 - val_mae: 0.1757 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0419 - mae: 0.1604 - val_loss: 0.0523 - val_mae: 0.1777 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0413 - mae: 0.1594 - val_loss: 0.0593 - val_mae: 0.1924 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0396 - mae: 0.1561 - val_loss: 0.0453 - val_mae: 0.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.04516\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0393 - mae: 0.1557 - val_loss: 0.0523 - val_mae: 0.1779 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0397 - mae: 0.1562 - val_loss: 0.0464 - val_mae: 0.1678 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0387 - mae: 0.1543 - val_loss: 0.0512 - val_mae: 0.1747 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0394 - mae: 0.1555 - val_loss: 0.0528 - val_mae: 0.1793 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0455 - mae: 0.1661 - val_loss: 0.0519 - val_mae: 0.1781 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.04516\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0392 - mae: 0.1552 - val_loss: 0.0491 - val_mae: 0.1723 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0402 - mae: 0.1572 - val_loss: 0.0527 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0397 - mae: 0.1563 - val_loss: 0.0503 - val_mae: 0.1745 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.04516\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0380 - mae: 0.1529 - val_loss: 0.0461 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0374 - mae: 0.1512 - val_loss: 0.0503 - val_mae: 0.1752 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.04516\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0410 - mae: 0.1583 - val_loss: 0.0591 - val_mae: 0.1868 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.04516\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0371 - mae: 0.1510 - val_loss: 0.0480 - val_mae: 0.1704 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.04516 to 0.02345, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0140 - mae: 0.0926 - val_loss: 0.0235 - val_mae: 0.1173 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.02345 to 0.02336, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0116 - mae: 0.0849 - val_loss: 0.0234 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.02336 to 0.02233, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0107 - mae: 0.0817 - val_loss: 0.0223 - val_mae: 0.1144 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.02233\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0102 - mae: 0.0796 - val_loss: 0.0224 - val_mae: 0.1143 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02233 to 0.02198, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0097 - mae: 0.0778 - val_loss: 0.0220 - val_mae: 0.1134 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02198\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0094 - mae: 0.0765 - val_loss: 0.0223 - val_mae: 0.1142 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.02198 to 0.02141, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0091 - mae: 0.0753 - val_loss: 0.0214 - val_mae: 0.1118 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02141\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0088 - mae: 0.0742 - val_loss: 0.0215 - val_mae: 0.1118 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.02141 to 0.02107, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0086 - mae: 0.0735 - val_loss: 0.0211 - val_mae: 0.1107 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.02107\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0084 - mae: 0.0725 - val_loss: 0.0214 - val_mae: 0.1112 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02107\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0082 - mae: 0.0716 - val_loss: 0.0213 - val_mae: 0.1108 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02107\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0081 - mae: 0.0711 - val_loss: 0.0214 - val_mae: 0.1110 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02107\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0079 - mae: 0.0704 - val_loss: 0.0212 - val_mae: 0.1109 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.02107 to 0.02065, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0207 - val_mae: 0.1092 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02065\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0076 - mae: 0.0692 - val_loss: 0.0212 - val_mae: 0.1103 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02065\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1097 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02065\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0074 - mae: 0.0680 - val_loss: 0.0209 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.02065\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0209 - val_mae: 0.1093 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.02065\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0072 - mae: 0.0670 - val_loss: 0.0210 - val_mae: 0.1097 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02065\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0071 - mae: 0.0665 - val_loss: 0.0207 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.02065\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0070 - mae: 0.0663 - val_loss: 0.0210 - val_mae: 0.1098 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss improved from 0.02065 to 0.02062, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0069 - mae: 0.0655 - val_loss: 0.0206 - val_mae: 0.1084 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02062\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0068 - mae: 0.0651 - val_loss: 0.0207 - val_mae: 0.1087 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss improved from 0.02062 to 0.02048, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0067 - mae: 0.0647 - val_loss: 0.0205 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0066 - mae: 0.0643 - val_loss: 0.0209 - val_mae: 0.1096 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0065 - mae: 0.0640 - val_loss: 0.0208 - val_mae: 0.1090 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0064 - mae: 0.0635 - val_loss: 0.0211 - val_mae: 0.1094 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0064 - mae: 0.0632 - val_loss: 0.0207 - val_mae: 0.1079 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02048\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0063 - mae: 0.0629 - val_loss: 0.0207 - val_mae: 0.1085 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0062 - mae: 0.0624 - val_loss: 0.0208 - val_mae: 0.1085 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0062 - mae: 0.0621 - val_loss: 0.0206 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02048\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0061 - mae: 0.0618 - val_loss: 0.0209 - val_mae: 0.1089 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0060 - mae: 0.0615 - val_loss: 0.0210 - val_mae: 0.1089 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0060 - mae: 0.0612 - val_loss: 0.0207 - val_mae: 0.1083 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0059 - mae: 0.0610 - val_loss: 0.0207 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02048\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0058 - mae: 0.0606 - val_loss: 0.0210 - val_mae: 0.1091 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss improved from 0.02048 to 0.02040, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0058 - mae: 0.0604 - val_loss: 0.0204 - val_mae: 0.1073 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02040\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0057 - mae: 0.0599 - val_loss: 0.0206 - val_mae: 0.1079 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02040\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0057 - mae: 0.0596 - val_loss: 0.0212 - val_mae: 0.1099 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02040\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0594 - val_loss: 0.0207 - val_mae: 0.1082 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02040\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0056 - mae: 0.0592 - val_loss: 0.0206 - val_mae: 0.1076 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02040\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0055 - mae: 0.0588 - val_loss: 0.0206 - val_mae: 0.1075 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02040\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0055 - mae: 0.0585 - val_loss: 0.0208 - val_mae: 0.1081 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02040\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0054 - mae: 0.0584 - val_loss: 0.0206 - val_mae: 0.1076 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.02040 to 0.01985, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0043 - mae: 0.0516 - val_loss: 0.0199 - val_mae: 0.1053 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01985\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0042 - mae: 0.0509 - val_loss: 0.0199 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss improved from 0.01985 to 0.01976, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01976\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0505 - val_loss: 0.0198 - val_mae: 0.1051 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01976\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0041 - mae: 0.0504 - val_loss: 0.0198 - val_mae: 0.1049 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01976\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0198 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01976\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0502 - val_loss: 0.0198 - val_mae: 0.1051 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01976\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0501 - val_loss: 0.0198 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss improved from 0.01976 to 0.01976, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0500 - val_loss: 0.0198 - val_mae: 0.1049 - learning_rate: 1.0000e-05\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss improved from 0.01976 to 0.01975, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0499 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0498 - val_loss: 0.0198 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0498 - val_loss: 0.0198 - val_mae: 0.1051 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01975\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0040 - mae: 0.0497 - val_loss: 0.0198 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0040 - mae: 0.0497 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01975\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0039 - mae: 0.0496 - val_loss: 0.0198 - val_mae: 0.1051 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0496 - val_loss: 0.0198 - val_mae: 0.1051 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0495 - val_loss: 0.0198 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0494 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01975\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0494 - val_loss: 0.0198 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss improved from 0.01975 to 0.01973, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0493 - val_loss: 0.0197 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0493 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0492 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0492 - val_loss: 0.0199 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0491 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01973\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0039 - mae: 0.0491 - val_loss: 0.0198 - val_mae: 0.1049 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0490 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0039 - mae: 0.0490 - val_loss: 0.0198 - val_mae: 0.1052 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0198 - val_mae: 0.1049 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01973\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0038 - mae: 0.0489 - val_loss: 0.0198 - val_mae: 0.1050 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss improved from 0.01973 to 0.01971, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0481 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01971\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss improved from 0.01971 to 0.01970, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01970\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss improved from 0.01970 to 0.01969, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01969\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0480 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01969\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01969\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.01969\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.01969\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss improved from 0.01969 to 0.01966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.01966\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0479 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.01966\n",
      "4375/4375 - 36s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.01966\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.01966\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.01966\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.01966\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0478 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss improved from 0.01966 to 0.01966, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.01966\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.01966\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.01966\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss improved from 0.01966 to 0.01965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss improved from 0.01965 to 0.01965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0196 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 328/1000\n",
      "\n",
      "Epoch 328: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 329/1000\n",
      "\n",
      "Epoch 329: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 330/1000\n",
      "\n",
      "Epoch 330: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 331/1000\n",
      "\n",
      "Epoch 331: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 332/1000\n",
      "\n",
      "Epoch 332: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 333/1000\n",
      "\n",
      "Epoch 333: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 334/1000\n",
      "\n",
      "Epoch 334: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 335/1000\n",
      "\n",
      "Epoch 335: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 336/1000\n",
      "\n",
      "Epoch 336: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 337/1000\n",
      "\n",
      "Epoch 337: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 338/1000\n",
      "\n",
      "Epoch 338: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 339/1000\n",
      "\n",
      "Epoch 339: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 340/1000\n",
      "\n",
      "Epoch 340: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 341/1000\n",
      "\n",
      "Epoch 341: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 342/1000\n",
      "\n",
      "Epoch 342: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 343/1000\n",
      "\n",
      "Epoch 343: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 344/1000\n",
      "\n",
      "Epoch 344: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 345/1000\n",
      "\n",
      "Epoch 345: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 346/1000\n",
      "\n",
      "Epoch 346: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 347/1000\n",
      "\n",
      "Epoch 347: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 348/1000\n",
      "\n",
      "Epoch 348: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 349/1000\n",
      "\n",
      "Epoch 349: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 350/1000\n",
      "\n",
      "Epoch 350: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 351/1000\n",
      "\n",
      "Epoch 351: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 352/1000\n",
      "\n",
      "Epoch 352: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 353/1000\n",
      "\n",
      "Epoch 353: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 354/1000\n",
      "\n",
      "Epoch 354: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 355/1000\n",
      "\n",
      "Epoch 355: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 356/1000\n",
      "\n",
      "Epoch 356: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 357/1000\n",
      "\n",
      "Epoch 357: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 358/1000\n",
      "\n",
      "Epoch 358: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 359/1000\n",
      "\n",
      "Epoch 359: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 360/1000\n",
      "\n",
      "Epoch 360: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 361/1000\n",
      "\n",
      "Epoch 361: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 362/1000\n",
      "\n",
      "Epoch 362: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 363/1000\n",
      "\n",
      "Epoch 363: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 364/1000\n",
      "\n",
      "Epoch 364: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 365/1000\n",
      "\n",
      "Epoch 365: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 366/1000\n",
      "\n",
      "Epoch 366: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1046 - learning_rate: 1.0000e-07\n",
      "Epoch 367/1000\n",
      "\n",
      "Epoch 367: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 368/1000\n",
      "\n",
      "Epoch 368: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 369/1000\n",
      "\n",
      "Epoch 369: val_loss did not improve from 0.01965\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1047 - learning_rate: 1.0000e-07\n",
      "Epoch 370/1000\n",
      "\n",
      "Epoch 370: val_loss did not improve from 0.01965\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0037 - mae: 0.0477 - val_loss: 0.0197 - val_mae: 0.1048 - learning_rate: 1.0000e-07\n",
      "Epoch 370: early stopping\n",
      "Restoring model weights from the end of the best epoch: 320.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 5ms/step\n",
      "Mean positioning error: 0.1649 m\n",
      "Median positioning error: 0.1427 m\n",
      "90th percentile error: 0.2987 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACH8klEQVR4nOzdeXhTdfbH8c9N2qZ7S1lakLLJDoKIghV3UUBFFNwQFUfUUUEHceXnijMOqDPqKIjLIHVmRBQVXBEBARUBEUVBEAXZoWyle5u2yf39kSZtaEtL2/Sm5f16njxt7r1JTu7U8Xju+Z5rmKZpCgAAAAAAAKhHNqsDAAAAAAAAwPGHohQAAAAAAADqHUUpAAAAAAAA1DuKUgAAAAAAAKh3FKUAAAAAAABQ7yhKAQAAAAAAoN5RlAIAAAAAAEC9oygFAAAAAACAekdRCgAAAAAAAPWOohSARskwDD3xxBPH/Lpt27bJMAylpqbWeUwAAADBhHwJgNUoSgEImNTUVBmGIcMw9M0335Tbb5qmkpOTZRiGLr30UgsirLmlS5fKMAy99957VocCAAAasOMhXzIMQ//73/8qPGbAgAEyDEM9e/ascL/L5VKrVq1kGIbmz59f4TFPPPGE73MqeqSlpdXZdwJQt0KsDgBA4xceHq5Zs2bpzDPP9Nu+bNky7dq1Sw6Hw6LIAAAAgkNjzpe83+3666/3275t2zZ9++23Cg8Pr/S1X375pfbu3at27drprbfe0pAhQyo9dvr06YqOji63PT4+vsaxAwgsilIAAu7iiy/WnDlz9OKLLyokpPT/dmbNmqW+ffvq4MGDFkYHAABgvcacL1188cX66KOPdPDgQTVr1sy3fdasWUpMTFSnTp10+PDhCl/7v//9T6eccopGjx6t//u//1Nubq6ioqIqPPbKK6/0e38AwY/lewACbuTIkTp06JAWLlzo21ZYWKj33ntP1113XYWvyc3N1b333qvk5GQ5HA516dJF//jHP2Sapt9xTqdT99xzj5o3b66YmBhddtll2rVrV4XvuXv3bt18881KTEyUw+FQjx499MYbb9TdF63AH3/8oauuukoJCQmKjIzU6aefrk8//bTccS+99JJ69OihyMhINWnSRKeeeqpmzZrl25+dna3x48erXbt2cjgcatGihS688EL98MMPAY0fAADUj8acLw0bNkwOh0Nz5szx2z5r1ixdffXVstvtFb4uPz9fc+fO1bXXXqurr75a+fn5+vDDD2sVC4DgQlEKQMC1a9dOKSkpevvtt33b5s+fr8zMTF177bXljjdNU5dddpmef/55DR48WM8995y6dOmi+++/XxMmTPA79pZbbtELL7ygiy66SFOmTFFoaKguueSScu+5b98+nX766Vq0aJHGjRunf/3rX+rYsaPGjBmjF154oc6/s/czzzjjDC1YsEB33nmnnnrqKRUUFOiyyy7T3Llzfce9/vrruvvuu9W9e3e98MILmjRpkk4++WStWrXKd8ztt9+u6dOna8SIEXr55Zd13333KSIiQhs3bgxI7AAAoH415nwpMjJSw4YN8/tuP/30k3755ZdKC26S9NFHHyknJ0fXXnutkpKSdO655+qtt96q9Pj09HQdPHjQ75GRkVHjuAHUAxMAAmTmzJmmJHP16tXm1KlTzZiYGDMvL880TdO86qqrzPPOO880TdNs27ateckll/heN2/ePFOS+be//c3v/a688krTMAxz8+bNpmma5tq1a01J5p133ul33HXXXWdKMh9//HHftjFjxpgtW7Y0Dx486Hfstddea8bFxfni2rp1qynJnDlz5lG/25IlS0xJ5pw5cyo9Zvz48aYk8+uvv/Zty87ONtu3b2+2a9fOdLlcpmma5rBhw8wePXoc9fPi4uLMsWPHHvUYAADQ8Bwv+dInn3xiGoZh7tixwzRN07z//vvNDh06mKZpmuecc06FudCll15qDhgwwPf8tddeM0NCQsz9+/f7Hff444+bkip8dOnS5agxArAWnVIA6oW35fqTTz5Rdna2Pvnkk0qvjH322Wey2+26++67/bbfe++9Mk3Td+eVzz77TJLKHTd+/Hi/56Zp6v3339fQoUNlmqbf1bNBgwYpMzMzIMvgPvvsM/Xr189vYGl0dLRuu+02bdu2TRs2bJDkGb65a9curV69utL3io+P16pVq7Rnz546jxMAAASHxpwvXXTRRUpISNDs2bNlmqZmz56tkSNHVnr8oUOHtGDBAr9jRowYIcMw9O6771b4mvfff18LFy70e8ycObPGMQMIPAadA6gXzZs318CBAzVr1izl5eXJ5XLpyiuvrPDY7du3q1WrVoqJifHb3q1bN99+70+bzaYTTzzR77guXbr4PT9w4IAyMjL02muv6bXXXqvwM/fv31+j73U027dvV//+/cttL/s9evbsqQcffFCLFi1Sv3791LFjR1100UW67rrrNGDAAN9rnnnmGY0ePVrJycnq27evLr74Yt14443q0KFDnccNAACs0ZjzpdDQUF111VWaNWuW+vXrp507dx516d4777yjoqIi9enTR5s3b/Zt79+/v9566y2NHTu23GvOPvtsBp0DDQxFKQD15rrrrtOtt96qtLQ0DRkypN5uz+t2uyVJ119/vUaPHl3hMb169aqXWCrSrVs3bdq0SZ988ok+//xzvf/++3r55Zf12GOPadKkSZI8V07POusszZ07V1988YWeffZZPf300/rggw+OemtkAADQsDTmfOm6667TK6+8oieeeEK9e/dW9+7dKz3WOzuq7EW6sv744w8uzgGNAEUpAPXmiiuu0J///GetXLlS77zzTqXHtW3bVosWLVJ2drbf1b9ff/3Vt9/70+12a8uWLX5X+zZt2uT3ft47zbhcLg0cOLAuv9JRtW3btlwsUvnvIUlRUVG65pprdM0116iwsFDDhw/XU089pYkTJyo8PFyS1LJlS91555268847tX//fp1yyil66qmnKEoBANCINOZ86cwzz1SbNm20dOlSPf3005Uet3XrVn377bcaN26czjnnHL99brdbN9xwg2bNmqVHHnkkIHECqD/MlAJQb6KjozV9+nQ98cQTGjp0aKXHXXzxxXK5XJo6darf9ueff16GYfiKMN6fL774ot9xR94dxm63a8SIEXr//fe1fv36cp934MCBmnydKl188cX67rvvtGLFCt+23Nxcvfbaa2rXrp3v6uChQ4f8XhcWFqbu3bvLNE0VFRXJ5XIpMzPT75gWLVqoVatWcjqdAYkdAABYozHnS4Zh6MUXX9Tjjz+uG264odLjvF1SDzzwgK688kq/x9VXX61zzjnnqHfhA9Bw0CkFoF5V1g5e1tChQ3Xeeefp4Ycf1rZt29S7d2998cUX+vDDDzV+/HjfTISTTz5ZI0eO1Msvv6zMzEydccYZWrx4sd/cAa8pU6ZoyZIl6t+/v2699VZ1795d6enp+uGHH7Ro0SKlp6fX6Pu8//77viuSR37Phx56SG+//baGDBmiu+++WwkJCXrzzTe1detWvf/++7LZPNcFLrroIiUlJWnAgAFKTEzUxo0bNXXqVF1yySWKiYlRRkaG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JiooKPDbt3r1at/3rkjXrl3lcDgqvBHcueeeW+H5u/322wPyPWrD8rvvXXTRRTJNs8J94eHhmjZtmqZNm1bPUVWf9++jkq8AAIAkae/evb7f33nnHT322GPatGmTb1t0dLTvd9M05XK5/DqIK9O8efNjiiMsLOyosxmBQPAm1G7yJQDAURyv+VJMTIzmzp2rkSNH+rbNmDFDbdq00Y4dO8od/8033yg/P19XXnml3nzzTT344IPljrn11lv15JNP+m0LxhsFWd4p1dCVJllkWQCAyiUlJfkecXFxMgzD9/zXX39VTEyM5s+fr759+8rhcOibb77Rli1bNGzYMCUmJio6OlqnnXaaFi1a5Pe+R7ajG4ahf//737riiisUGRmpTp066aOPPvLtP7KDKTU1VfHx8VqwYIG6deum6OhoDR482C8pLC4u1t133634+Hg1bdpUDz74oEaPHq3LL7+8xufj8OHDuvHGG9WkSRNFRkZqyJAh+v333337t2/frqFDh6pJkyaKiopSjx499Nlnn/leO2rUKDVv3lwRERHq1KmTZs6cWeNYEHi2kot4LqpSAICjOF7zpdGjR+uNN97wPc/Pz9fs2bM1evToCo+fMWOGrrvuOt1www1+rysrMjLS73wmJSUF5cxtilK15E2ySLEAwDqmaSqvsNiSR2XdvjXx0EMPacqUKdq4caN69eqlnJwcXXzxxVq8eLF+/PFHDR48WEOHDq3willZkyZN0tVXX62ff/5ZF198sUaNGqX09MpnH+bl5ekf//iH/vvf/+qrr77Sjh07dN999/n2P/3003rrrbc0c+ZMLV++XFlZWZo3b16tvutNN92k77//Xh999JFWrFgh0zR18cUX+24pPHbsWDmdTn311Vdat26dnn76ad/V0UcffVQbNmzQ/PnztXHjRk2fPl3NmjWrVTwILHtJwlSX/7wAAI4N+ZK/YMqXbrjhBn399de+mN9//321a9dOp5xySrljs7OzNWfOHF1//fW68MILlZmZqa+//rpanxOMLF++19B5l+/RKQUA1skvcqn7Ywss+ewNTw5SZFjd/Ov0ySef1IUXXuh7npCQoN69e/ue//Wvf9XcuXP10Ucfady4cZW+z0033eRr//773/+uF198Ud99950GDx5c4fFFRUV65ZVXdOKJJ0qSxo0b59fu/dJLL2nixIm64oorJElTp071dS3VxO+//66PPvpIy5cv1xlnnCFJeuutt5ScnKx58+bpqquu0o4dOzRixAiddNJJkqQOHTr4Xr9jxw716dNHp556qiTP1U8EN5bvAYD1yJf8BVO+1KJFCw0ZMkSpqal67LHH9MYbb1Q4d1uSZs+erU6dOqlHjx6SpGuvvVYzZszQWWed5Xfcyy+/rH//+99+21599VWNGjWqWjHVFzqlaslm0CoFAKgb3iKLV05Oju677z5169ZN8fHxio6O1saNG6u88terVy/f71FRUYqNjdX+/fsrPT4yMtKXYElSy5YtfcdnZmZq37596tevn2+/3W5X3759j+m7lbVx40aFhISof//+vm1NmzZVly5dtHHjRknS3Xffrb/97W8aMGCAHn/8cf3888++Y++44w7Nnj1bJ598sh544AF9++23NY4F9cObL7F8DwBQW401X7r55puVmpqqP/74QytWrKi0ePTGG2/o+uuv9z2//vrrNWfOHGVnZ/sdN2rUKK1du9bvcdlll1U7nvpCp1Qteefg0ykFANaJCLVrw5ODLPvsuhIVFeX3/L777tPChQv1j3/8Qx07dlRERISuvPJKFRYWHvV9QkND/Z4bhiG3u/K7xFZ0vNXLrG655RYNGjRIn376qb744gtNnjxZ//znP3XXXXdpyJAh2r59uz777DMtXLhQF1xwgcaOHat//OMflsaMytnpLAcAy5Ev+Qu2fGnIkCG67bbbNGbMGA0dOlRNmzYtd8yGDRu0cuVKfffdd37DzV0ul2bPnq1bb73Vty0uLk4dO3ass/gChU6pWqIdHQCsZxiGIsNCLHlUdpveurB8+XLddNNNuuKKK3TSSScpKSlJ27ZtC9jnVSQuLk6JiYlavXq1b5vL5dIPP/xQ4/fs1q2biouLtWrVKt+2Q4cOadOmTerevbtvW3Jysm6//XZ98MEHuvfee/X666/79jVv3lyjR4/W//73P73wwgt67bXXahwPAs/bKUVNCgCsQ74UOHWRL4WEhOjGG2/U0qVLK126N2PGDJ199tn66aef/DqgJkyYoBkzZtT6e1iBTqla8g06J8sCANSxTp066YMPPtDQoUNlGIYeffTRo17BC5S77rpLkydPVseOHdW1a1e99NJLOnz4cLUSzHXr1ikmJsb33DAM9e7dW8OGDdOtt96qV199VTExMXrooYd0wgknaNiwYZKk8ePHa8iQIercubMOHz6sJUuWqFu3bpKkxx57TH379lWPHj3kdDr1ySef+PYhOHn/VlzkSwCAOtYY8iWvv/71r7r//vsr7JIqKirSf//7Xz355JPq2bOn375bbrlFzz33nH755RffrKm8vDylpaX5HedwONSkSZMafLvAoVOqluiUAgAEynPPPacmTZrojDPO0NChQzVo0KAK78ISaA8++KBGjhypG2+8USkpKYqOjtagQYMUHh5e5WvPPvts9enTx/fwzlaYOXOm+vbtq0svvVQpKSkyTVOfffaZrzXe5XJp7Nix6tatmwYPHqzOnTvr5ZdfliSFhYVp4sSJ6tWrl84++2zZ7XbNnj07cCcAtWYvyThZvgcAqGuNIV/yCgsLU7NmzSosZH300Uc6dOiQb5B6Wd26dVO3bt38uqVef/11tWzZ0u/hHeweTAyzkbf4ZGVlKS4uTpmZmYqNja3z97/qlW+1etthvXL9KRrcs2Wdvz8AwF9BQYG2bt2q9u3bH9O/5FF33G63unXrpquvvlp//etfrQ4nII72dxbo3MIKgf5OD73/s2av3qn7Luqsced3qvP3BwCUR85kLfKl6uUWLN+rJUN0SgEAGrft27friy++0DnnnCOn06mpU6dq69atuu6666wODQ2EzUa+BABo3MiXaoble7Vk+GZKWRsHAACBYrPZlJqaqtNOO00DBgzQunXrtGjRIuY4odps3H0PANDIkS/VDJ1StWSQZAEAGrnk5GQtX77c6jDQgHnvvuemVQoA0EiRL9UMnVK15LvFscVxAAAABCsbN4YBAAAVoChVS6XL98iyAAAAKlJalCJfAgAApShK1ZKvU4ocCwAAoELemVIuEiYAAFAGRak6wpU/AACAitltXMQDAADlUZSqJTqlAAAAjs5g0DkAAKgARala4u57AAAAR8fyPQAAUBGKUrXE3fcAAPXp3HPP1fjx433P27VrpxdeeOGorzEMQ/Pmzav1Z9fV++D4w/I9AEB9Il9qOChK1VLJhT/uvgcAOKqhQ4dq8ODBFe77+uuvZRiGfv7552N+39WrV+u2226rbXh+nnjiCZ188snltu/du1dDhgyp0886UmpqquLj4wP6Gah/3uV7LpbvAQCOgnypelJTU2UYhrp161Zu35w5c2QYhtq1a1duX35+vhISEtSsWTM5nc5y+9u1ayfDMMo9pkyZEoivIYmiVK0ZzJQCAFTDmDFjtHDhQu3atavcvpkzZ+rUU09Vr169jvl9mzdvrsjIyLoIsUpJSUlyOBz18lloXOzemVIkTACAoyBfqr6oqCjt379fK1as8Ns+Y8YMtWnTpsLXvP/+++rRo4e6du1aaTfXk08+qb179/o97rrrrroO34eiVC2VzpSyNg4AQHC79NJL1bx5c6Wmpvptz8nJ0Zw5czRmzBgdOnRII0eO1AknnKDIyEiddNJJevvtt4/6vke2o//+++86++yzFR4eru7du2vhwoXlXvPggw+qc+fOioyMVIcOHfToo4+qqKhIkufK26RJk/TTTz/5ro55Yz6yHX3dunU6//zzFRERoaZNm+q2225TTk6Ob/9NN92kyy+/XP/4xz/UsmVLNW3aVGPHjvV9Vk3s2LFDw4YNU3R0tGJjY3X11Vdr3759vv0//fSTzjvvPMXExCg2NlZ9+/bV999/L0navn27hg4dqiZNmigqKko9evTQZ599VuNYUH028iUAQDWQL1U/XwoJCdF1112nN954w7dt165dWrp0qa677roKXzNjxgxdf/31uv766zVjxowKj4mJiVFSUpLfIyoq6qix1EZIwN75OOFNskymSgGAdUxTKsqz5rNDI0uvUBxFSEiIbrzxRqWmpurhhx/2ddrOmTNHLpdLI0eOVE5Ojvr27asHH3xQsbGx+vTTT3XDDTfoxBNPVL9+/ar8DLfbreHDhysxMVGrVq1SZmam3zwFr5iYGKWmpqpVq1Zat26dbr31VsXExOiBBx7QNddco/Xr1+vzzz/XokWLJElxcXHl3iM3N1eDBg1SSkqKVq9erf379+uWW27RuHHj/BLJJUuWqGXLllqyZIk2b96sa665RieffLJuvfXWKr9PRd/PW5BatmyZiouLNXbsWF1zzTVaunSpJGnUqFHq06ePpk+fLrvdrrVr1yo0NFSSNHbsWBUWFuqrr75SVFSUNmzYoOjo6GOOA8fOZuPuewBgOfIlSY0rX7r55pt17rnn6l//+pciIyOVmpqqwYMHKzExsdyxW7Zs0YoVK/TBBx/INE3dc8892r59u9q2bVvlOQskilK1ZMjbjm5xIABwPCvKk/7eyprP/r89Ulj1rh7dfPPNevbZZ7Vs2TKde+65kjyt6CNGjFBcXJzi4uJ03333+Y6/6667tGDBAr377rvVSrIWLVqkX3/9VQsWLFCrVp7z8fe//73cXINHHnnE93u7du103333afbs2XrggQcUERGh6OhohYSEKCkpqdLPmjVrlgoKCvSf//zHd/Vs6tSpGjp0qJ5++mlfMtSkSRNNnTpVdrtdXbt21SWXXKLFixfXqCi1ePFirVu3Tlu3blVycrIk6T//+Y969Oih1atX67TTTtOOHTt0//33q2vXrpKkTp06+V6/Y8cOjRgxQieddJIkqUOHDsccA2rGxvI9ALAe+ZKkxpUv9enTRx06dNB7772nG264QampqXruuef0xx9/lDv2jTfe0JAhQ9SkSRNJ0qBBgzRz5kw98cQTfsc9+OCDft9dkubPn6+zzjrrqLHUFMv3asnmPYMkWQCAKnTt2lVnnHGGr8168+bN+vrrrzVmzBhJksvl0l//+leddNJJSkhIUHR0tBYsWKAdO3ZU6/03btyo5ORkX4IlSSkpKeWOe+eddzRgwAAlJSUpOjpajzzySLU/o+xn9e7d26+de8CAAXK73dq0aZNvW48ePWS3233PW7Zsqf379x/TZ5X9zOTkZF9BSpK6d++u+Ph4bdy4UZI0YcIE3XLLLRo4cKCmTJmiLVu2+I69++679be//U0DBgzQ448/XqNBqagZlu8BAKqLfOnY8qWbb75ZM2fO1LJly5Sbm6uLL7643DEul0tvvvmmrr/+et+266+/XqmpqXK73X7H3n///Vq7dq3f49RTT632dz5WdErVkmHQKQUAlguN9FyBs+qzj8GYMWN01113adq0aZo5c6ZOPPFEnXPOOZKkZ599Vv/617/0wgsv6KSTTlJUVJTGjx+vwsLCOgt3xYoVGjVqlCZNmqRBgwYpLi5Os2fP1j//+c86+4yyvEvnvAzDKJf81KUnnnhC1113nT799FPNnz9fjz/+uGbPnq0rrrhCt9xyiwYNGqRPP/1UX3zxhSZPnqx//vOfAR3eCQ86pQAgCJAvVVtDypdGjRqlBx54QE888YRuuOEGhYSUL/MsWLBAu3fv1jXXXOO33eVyafHixbrwwgt925o1a6aOHTvW4FvUDJ1SteRdFUuSBQAWMgxPS7gVj2rMRyjr6quvls1m06xZs/Sf//xHN998s+8Cx/LlyzVs2DBdf/316t27tzp06KDffvut2u/drVs37dy5U3v37vVtW7ly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3VpTpkzRmjVr9P333+v888/XsGHD9Msvv9Q61rpSMlIq+PMlN3ffAwCgvoTU5EVFRUVyOBySpEWLFumyyy6TJHXt2lV79+6tu+gagLLL9wAAAOqKcQw5xtChQ/2eP/XUU5o+fbpWrlypHj161HVox87tVqQrU+FyBn9RiuV7AADUmxp1SvXo0UOvvPKKvv76ay1cuFCDBw+WJO3Zs0dNmzat0wCDXdl8MeiTLAAA0Oi5XC7Nnj1bubm5SklJsTocj/8O0+2rLtRFtjVyuas+3FJ+y/eCPVgAABq2GnVKPf3007riiiv07LPPavTo0erdu7ck6aOPPvIt6ztelO2UoiYFAACqa8OGDUpLS5PkWar366+/KicnR5J08ODBY36/devWKSUlRQUFBYqOjtbcuXPVvXv3Co91Op1yOp2+51lZWTX4BscgIkGSlGBkqSDYEyZ32bvvsXwPAIBAqlFR6txzz9XBgweVlZWlJk2a+LbfdtttioyMrLPgGho6pQAAQHVdcMEFfnOjLr30UkmeZXumaR7T8j1J6tKli9auXavMzEy99957Gj16tJYtW1ZhYWry5MmaNGlS7b7AsYj0dNI3MbK1O9jzpbLdUSzfAwAgoGpUlMrPz5dpmr6C1Pbt2zV37lx169ZNgwYNqtMAg51fp5SFcQAAgIZj69atdf6eYWFh6tixoySpb9++Wr16tf71r3/p1VdfLXfsxIkTNWHCBN/zrKwsJScn13lMPlHNJEkJytaOYF8RV3amFHffAwAgoGpUlBo2bJiGDx+u22+/XRkZGerfv79CQ0N18OBBPffcc7rjjjvqOs6gVfYiJmMHAABAdbRt27bKY9avX1+rz3C73X5L9MpyOBy+m9bUizKdUsdyV0FLmCzfAwCgvtRo0PkPP/ygs846S5L03nvvKTExUdu3b9d//vMfvfjii3UaYLDz75QK8iQLAAAEtezsbL322mvq16+fb2ZndUycOFFfffWVtm3bpnXr1mnixIlaunSpRo0aFcBoj0FJUaqpsoN/3EHZJXturjgCABBINeqUysvLU0xMjCTpiy++0PDhw2Wz2XT66adr+/btdRpgsCs77cEd5DkWAAAITl999ZVmzJih999/X61atdLw4cM1bdq0ar9+//79uvHGG7V3717FxcWpV69eWrBggS688MIARn0MIj2DzpsY2XIFe75U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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12905.85974,
   "end_time": "2025-08-07T22:03:56.852947",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T18:28:50.993207",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
