{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1ae739cd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-14T19:50:47.170979Z",
     "iopub.status.busy": "2025-08-14T19:50:47.170373Z",
     "iopub.status.idle": "2025-08-14T19:50:48.739740Z",
     "shell.execute_reply": "2025-08-14T19:50:48.739004Z"
    },
    "papermill": {
     "duration": 1.57406,
     "end_time": "2025-08-14T19:50:48.741086",
     "exception": false,
     "start_time": "2025-08-14T19:50:47.167026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4fdaf266",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:50:48.746295Z",
     "iopub.status.busy": "2025-08-14T19:50:48.745982Z",
     "iopub.status.idle": "2025-08-14T19:51:05.323649Z",
     "shell.execute_reply": "2025-08-14T19:51:05.323032Z"
    },
    "papermill": {
     "duration": 16.581531,
     "end_time": "2025-08-14T19:51:05.325032",
     "exception": false,
     "start_time": "2025-08-14T19:50:48.743501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-14 19:50:50.831678: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755201051.080737      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755201051.155035      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9b8600ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:51:05.330554Z",
     "iopub.status.busy": "2025-08-14T19:51:05.329865Z",
     "iopub.status.idle": "2025-08-14T19:51:05.334403Z",
     "shell.execute_reply": "2025-08-14T19:51:05.333730Z"
    },
    "papermill": {
     "duration": 0.008195,
     "end_time": "2025-08-14T19:51:05.335547",
     "exception": false,
     "start_time": "2025-08-14T19:51:05.327352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 256   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 32     # 8,16,32,64,128, 256\n",
    "filter_size =9    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512  #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8195dd2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:51:05.340436Z",
     "iopub.status.busy": "2025-08-14T19:51:05.340031Z",
     "iopub.status.idle": "2025-08-14T19:51:05.343523Z",
     "shell.execute_reply": "2025-08-14T19:51:05.342843Z"
    },
    "papermill": {
     "duration": 0.007151,
     "end_time": "2025-08-14T19:51:05.344572",
     "exception": false,
     "start_time": "2025-08-14T19:51:05.337421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f76cb566",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-14T19:51:05.349480Z",
     "iopub.status.busy": "2025-08-14T19:51:05.349260Z",
     "iopub.status.idle": "2025-08-14T22:55:35.386953Z",
     "shell.execute_reply": "2025-08-14T22:55:35.385977Z"
    },
    "papermill": {
     "duration": 11070.042256,
     "end_time": "2025-08-14T22:55:35.388674",
     "exception": false,
     "start_time": "2025-08-14T19:51:05.346418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755201086.901235      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1755201096.292364      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">83,200</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">63,488</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">527,104</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │        \u001b[38;5;34m83,200\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m256\u001b[0m)             │        \u001b[38;5;34m63,488\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m527,104\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m514\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">675,338</span> (2.58 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m675,338\u001b[0m (2.58 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">674,822</span> (2.57 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m674,822\u001b[0m (2.57 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">516</span> (2.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m516\u001b[0m (2.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755201107.001424      59 service.cc:148] XLA service 0x7bcd78006eb0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755201107.002258      59 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1755201110.617162      59 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 49.52347, saving model to models/best_model_full.keras\n",
      "4375/4375 - 47s - 11ms/step - loss: 132.2770 - mae: 8.7909 - val_loss: 49.5235 - val_mae: 5.3694 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 49.52347 to 14.87175, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 37.8834 - mae: 4.6452 - val_loss: 14.8717 - val_mae: 2.9357 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 14.87175 to 9.36537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 10.7559 - mae: 2.4552 - val_loss: 9.3654 - val_mae: 2.1138 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 9.36537 to 5.58245, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 6.6881 - mae: 1.8785 - val_loss: 5.5825 - val_mae: 1.8369 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 5.58245\n",
      "4375/4375 - 34s - 8ms/step - loss: 4.6572 - mae: 1.5638 - val_loss: 6.9501 - val_mae: 2.0077 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 5.58245 to 2.00823, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.0773 - mae: 1.2796 - val_loss: 2.0082 - val_mae: 1.0813 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 2.00823 to 1.57137, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.5383 - mae: 1.1180 - val_loss: 1.5714 - val_mae: 0.9511 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.57137 to 1.05126, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.9188 - mae: 1.1166 - val_loss: 1.0513 - val_mae: 0.7963 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.05126 to 0.80107, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8836 - mae: 0.9528 - val_loss: 0.8011 - val_mae: 0.6981 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.4815 - mae: 1.1422 - val_loss: 2.8888 - val_mae: 1.2772 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.5396 - mae: 0.9074 - val_loss: 0.8818 - val_mae: 0.7400 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.9751 - mae: 0.9477 - val_loss: 1.0319 - val_mae: 0.7688 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.2339 - mae: 1.1070 - val_loss: 1.1850 - val_mae: 0.8411 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.7052 - mae: 1.1769 - val_loss: 1.2535 - val_mae: 0.8568 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3618 - mae: 0.8453 - val_loss: 1.6428 - val_mae: 0.9372 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.7985 - mae: 1.0744 - val_loss: 0.9787 - val_mae: 0.7692 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8368 - mae: 0.7102 - val_loss: 1.0428 - val_mae: 0.7625 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.0544 - mae: 0.9074 - val_loss: 3.0202 - val_mae: 1.2281 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.80107\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8714 - mae: 0.7021 - val_loss: 0.8110 - val_mae: 0.6943 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.80107 to 0.50632, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6612 - mae: 0.6315 - val_loss: 0.5063 - val_mae: 0.5574 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.50632\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2071 - mae: 0.9378 - val_loss: 2.1013 - val_mae: 1.0927 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.50632\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.2949 - mae: 1.0296 - val_loss: 1.0788 - val_mae: 0.8039 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3469 - mae: 0.8325 - val_loss: 0.7184 - val_mae: 0.6649 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.4319 - mae: 0.9983 - val_loss: 2.8588 - val_mae: 1.2348 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 5.1844 - mae: 1.3468 - val_loss: 26.7850 - val_mae: 3.7315 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 5.3742 - mae: 1.6928 - val_loss: 2.2192 - val_mae: 1.1292 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.0860 - mae: 1.0499 - val_loss: 1.1771 - val_mae: 0.8599 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.5759 - mae: 0.8680 - val_loss: 1.9691 - val_mae: 1.0695 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8639 - mae: 0.7014 - val_loss: 0.7126 - val_mae: 0.6592 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.7284 - mae: 0.8605 - val_loss: 0.5794 - val_mae: 0.5989 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.2054 - mae: 0.7637 - val_loss: 0.5687 - val_mae: 0.5849 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.2922 - mae: 0.8527 - val_loss: 2.5671 - val_mae: 1.1906 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.4477 - mae: 0.8806 - val_loss: 0.8237 - val_mae: 0.7117 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.50632\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3654 - mae: 0.7864 - val_loss: 0.7953 - val_mae: 0.6832 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.50632\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.4205 - mae: 0.7593 - val_loss: 1.0613 - val_mae: 0.7971 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss improved from 0.50632 to 0.49978, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8442 - mae: 0.6721 - val_loss: 0.4998 - val_mae: 0.5442 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.49978\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.6863 - mae: 1.0004 - val_loss: 0.7316 - val_mae: 0.6603 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.49978\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.0583 - mae: 0.7548 - val_loss: 0.8537 - val_mae: 0.7223 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss improved from 0.49978 to 0.48290, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5280 - mae: 0.5648 - val_loss: 0.4829 - val_mae: 0.5457 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.48290\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9266 - mae: 0.8753 - val_loss: 0.5411 - val_mae: 0.5722 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.48290\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.9532 - mae: 0.8875 - val_loss: 0.7468 - val_mae: 0.6677 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.48290\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.3793 - mae: 0.7577 - val_loss: 16.8001 - val_mae: 2.8360 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.48290\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8494 - mae: 0.9379 - val_loss: 0.6288 - val_mae: 0.5785 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.48290\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.3445 - mae: 1.1040 - val_loss: 0.9083 - val_mae: 0.7247 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.48290\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.5403 - mae: 0.8324 - val_loss: 6.6746 - val_mae: 1.8096 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.48290 to 0.41100, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6014 - mae: 0.5932 - val_loss: 0.4110 - val_mae: 0.4968 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.41100 to 0.40285, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.2722 - mae: 0.7313 - val_loss: 0.4028 - val_mae: 0.4986 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.40285\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.7637 - mae: 0.8422 - val_loss: 1.4908 - val_mae: 0.5710 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.40285\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7717 - mae: 0.5962 - val_loss: 1.4951 - val_mae: 0.9296 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.40285\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.0577 - mae: 0.8569 - val_loss: 0.5528 - val_mae: 0.5835 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.40285\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.2041 - mae: 0.7057 - val_loss: 1.2197 - val_mae: 0.8381 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.40285\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6877 - mae: 0.7885 - val_loss: 2.2326 - val_mae: 1.1188 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.40285\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.8052 - mae: 0.6583 - val_loss: 0.5381 - val_mae: 0.5720 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.40285\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3572 - mae: 0.7778 - val_loss: 0.4695 - val_mae: 0.5406 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.40285\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.8915 - mae: 0.5704 - val_loss: 19.0482 - val_mae: 3.0627 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.40285\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.1943 - mae: 0.7149 - val_loss: 0.4477 - val_mae: 0.5219 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.40285\n",
      "4375/4375 - 35s - 8ms/step - loss: 1.6232 - mae: 0.6285 - val_loss: 6.0159 - val_mae: 1.7977 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.40285\n",
      "4375/4375 - 35s - 8ms/step - loss: 2.1210 - mae: 0.9574 - val_loss: 2.4025 - val_mae: 1.1832 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss did not improve from 0.40285\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.8801 - mae: 0.9336 - val_loss: 0.9431 - val_mae: 0.7482 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.40285 to 0.37878, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.6148 - mae: 0.6081 - val_loss: 0.3788 - val_mae: 0.4800 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.3293 - mae: 1.1219 - val_loss: 2.4155 - val_mae: 1.1720 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.2574 - mae: 1.0087 - val_loss: 44.4245 - val_mae: 4.7416 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.1870 - mae: 0.7632 - val_loss: 1.5367 - val_mae: 0.9489 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.7866 - mae: 1.0171 - val_loss: 0.6982 - val_mae: 0.6524 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.5432 - mae: 0.9039 - val_loss: 3.5687 - val_mae: 1.2611 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7352 - mae: 0.6568 - val_loss: 0.7605 - val_mae: 0.5401 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.6477 - mae: 0.9720 - val_loss: 0.8416 - val_mae: 0.7119 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.9977 - mae: 0.7031 - val_loss: 0.4884 - val_mae: 0.5513 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 5.4438 - mae: 1.0495 - val_loss: 5.3451 - val_mae: 1.6521 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.4308 - mae: 1.0690 - val_loss: 1.1876 - val_mae: 0.8300 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.6158 - mae: 0.8620 - val_loss: 0.6067 - val_mae: 0.6042 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.3379 - mae: 0.7483 - val_loss: 1.0019 - val_mae: 0.7868 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.37878\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.4640 - mae: 0.5310 - val_loss: 0.4391 - val_mae: 0.5209 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.37878\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.1494 - mae: 0.8683 - val_loss: 0.5913 - val_mae: 0.6102 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss improved from 0.37878 to 0.35287, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4402 - mae: 0.5165 - val_loss: 0.3529 - val_mae: 0.4621 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.1853 - mae: 0.9373 - val_loss: 0.8874 - val_mae: 0.7258 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5728 - mae: 0.5879 - val_loss: 0.5029 - val_mae: 0.5530 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.7172 - mae: 0.6031 - val_loss: 0.4015 - val_mae: 0.4945 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 4.1405 - mae: 1.3572 - val_loss: 2.7141 - val_mae: 1.2156 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.7399 - mae: 0.9442 - val_loss: 0.8770 - val_mae: 0.7263 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 4.1355 - mae: 1.2143 - val_loss: 3.1319 - val_mae: 1.3205 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.9512 - mae: 1.0181 - val_loss: 19.5141 - val_mae: 3.1285 - learning_rate: 0.0100\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.9286 - mae: 1.2055 - val_loss: 1.3264 - val_mae: 0.8804 - learning_rate: 0.0100\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 3.9624 - mae: 1.4047 - val_loss: 3.9915 - val_mae: 1.4955 - learning_rate: 0.0100\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.6213 - mae: 1.1237 - val_loss: 1.0341 - val_mae: 0.7848 - learning_rate: 0.0100\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.5780 - mae: 1.0839 - val_loss: 1.6518 - val_mae: 0.9703 - learning_rate: 0.0100\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 1.0972 - mae: 0.7751 - val_loss: 2.6841 - val_mae: 1.0862 - learning_rate: 0.0100\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 12.3889 - mae: 2.2670 - val_loss: 13.1065 - val_mae: 2.4425 - learning_rate: 0.0100\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 6.1849 - mae: 1.8088 - val_loss: 19.6450 - val_mae: 3.5058 - learning_rate: 0.0100\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 6.6297 - mae: 1.8148 - val_loss: 306.4956 - val_mae: 13.1128 - learning_rate: 0.0100\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 9.4910 - mae: 2.0921 - val_loss: 54.2686 - val_mae: 4.9126 - learning_rate: 0.0100\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 16.8423 - mae: 2.8462 - val_loss: 20.5223 - val_mae: 3.2314 - learning_rate: 0.0100\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 4.6202 - mae: 1.4426 - val_loss: 10.4893 - val_mae: 2.1554 - learning_rate: 0.0100\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 4.4014 - mae: 1.4745 - val_loss: 3.7172 - val_mae: 1.2060 - learning_rate: 0.0100\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 2.8079 - mae: 1.1599 - val_loss: 1.4781 - val_mae: 0.7952 - learning_rate: 0.0100\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.5378 - mae: 0.5655 - val_loss: 1.1822 - val_mae: 0.5776 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.4153 - mae: 0.5008 - val_loss: 0.7386 - val_mae: 0.5291 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.3394 - mae: 0.4532 - val_loss: 0.6460 - val_mae: 0.4631 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.2781 - mae: 0.4115 - val_loss: 0.5302 - val_mae: 0.4308 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.2315 - mae: 0.3765 - val_loss: 0.3997 - val_mae: 0.3873 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.35287\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.2029 - mae: 0.3532 - val_loss: 0.4850 - val_mae: 0.3761 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.35287 to 0.30042, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1823 - mae: 0.3349 - val_loss: 0.3004 - val_mae: 0.3567 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.30042\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1641 - mae: 0.3188 - val_loss: 0.4923 - val_mae: 0.3533 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.30042\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1452 - mae: 0.2996 - val_loss: 0.6227 - val_mae: 0.3261 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.30042 to 0.19421, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1336 - mae: 0.2881 - val_loss: 0.1942 - val_mae: 0.3182 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.19421 to 0.17662, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1214 - mae: 0.2746 - val_loss: 0.1766 - val_mae: 0.3032 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss improved from 0.17662 to 0.15963, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1140 - mae: 0.2661 - val_loss: 0.1596 - val_mae: 0.2920 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.15963 to 0.13326, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1069 - mae: 0.2578 - val_loss: 0.1333 - val_mae: 0.2734 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss improved from 0.13326 to 0.13003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.1000 - mae: 0.2492 - val_loss: 0.1300 - val_mae: 0.2697 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.13003 to 0.12598, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0956 - mae: 0.2437 - val_loss: 0.1260 - val_mae: 0.2653 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.12598 to 0.11744, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0898 - mae: 0.2364 - val_loss: 0.1174 - val_mae: 0.2561 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.11744 to 0.11071, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0848 - mae: 0.2294 - val_loss: 0.1107 - val_mae: 0.2476 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.11071\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0809 - mae: 0.2243 - val_loss: 0.1874 - val_mae: 0.2497 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.11071\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0789 - mae: 0.2212 - val_loss: 0.1320 - val_mae: 0.2467 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.11071\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0759 - mae: 0.2173 - val_loss: 0.1562 - val_mae: 0.2825 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.11071\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0740 - mae: 0.2142 - val_loss: 0.1172 - val_mae: 0.2441 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.11071 to 0.09189, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0710 - mae: 0.2102 - val_loss: 0.0919 - val_mae: 0.2272 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.09189\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0683 - mae: 0.2060 - val_loss: 0.1001 - val_mae: 0.2372 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.09189\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0662 - mae: 0.2029 - val_loss: 0.1125 - val_mae: 0.2322 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.09189\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0643 - mae: 0.1999 - val_loss: 0.1075 - val_mae: 0.2455 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.09189\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0624 - mae: 0.1974 - val_loss: 0.1057 - val_mae: 0.2313 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.09189\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0610 - mae: 0.1948 - val_loss: 0.0986 - val_mae: 0.2354 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss improved from 0.09189 to 0.07921, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0589 - mae: 0.1917 - val_loss: 0.0792 - val_mae: 0.2157 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.07921\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0578 - mae: 0.1898 - val_loss: 0.1682 - val_mae: 0.2313 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.07921\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0566 - mae: 0.1876 - val_loss: 0.0900 - val_mae: 0.2194 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.07921 to 0.07482, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0554 - mae: 0.1859 - val_loss: 0.0748 - val_mae: 0.2111 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.07482\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0537 - mae: 0.1830 - val_loss: 0.0812 - val_mae: 0.2139 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.07482\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0525 - mae: 0.1810 - val_loss: 0.1547 - val_mae: 0.2173 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.07482\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0527 - mae: 0.1813 - val_loss: 0.1541 - val_mae: 0.2161 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.07482\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0517 - mae: 0.1792 - val_loss: 0.1217 - val_mae: 0.2096 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.07482\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0505 - mae: 0.1773 - val_loss: 0.1223 - val_mae: 0.2078 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.07482\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0500 - mae: 0.1765 - val_loss: 0.0898 - val_mae: 0.2005 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss improved from 0.07482 to 0.06831, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0492 - mae: 0.1750 - val_loss: 0.0683 - val_mae: 0.2010 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.06831\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0480 - mae: 0.1731 - val_loss: 0.0794 - val_mae: 0.2059 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.06831\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0469 - mae: 0.1708 - val_loss: 0.0780 - val_mae: 0.2030 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.06831\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0467 - mae: 0.1707 - val_loss: 0.0769 - val_mae: 0.2056 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss improved from 0.06831 to 0.06640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0462 - mae: 0.1697 - val_loss: 0.0664 - val_mae: 0.1969 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.06640\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0459 - mae: 0.1690 - val_loss: 0.0706 - val_mae: 0.1882 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss improved from 0.06640 to 0.06183, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0457 - mae: 0.1684 - val_loss: 0.0618 - val_mae: 0.1870 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0449 - mae: 0.1672 - val_loss: 0.0848 - val_mae: 0.1921 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0444 - mae: 0.1662 - val_loss: 0.0655 - val_mae: 0.1893 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0440 - mae: 0.1652 - val_loss: 0.0727 - val_mae: 0.1995 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0437 - mae: 0.1647 - val_loss: 0.0642 - val_mae: 0.1960 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0439 - mae: 0.1651 - val_loss: 0.0693 - val_mae: 0.2039 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0431 - mae: 0.1638 - val_loss: 0.0684 - val_mae: 0.1933 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0425 - mae: 0.1627 - val_loss: 0.0706 - val_mae: 0.2052 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0419 - mae: 0.1614 - val_loss: 0.0642 - val_mae: 0.1895 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0414 - mae: 0.1606 - val_loss: 0.0649 - val_mae: 0.1808 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0411 - mae: 0.1596 - val_loss: 0.1071 - val_mae: 0.1950 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.06183\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0411 - mae: 0.1597 - val_loss: 0.0699 - val_mae: 0.1973 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.06183 to 0.05886, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0408 - mae: 0.1592 - val_loss: 0.0589 - val_mae: 0.1818 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.05886\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0397 - mae: 0.1570 - val_loss: 0.0641 - val_mae: 0.1875 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.05886\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0396 - mae: 0.1569 - val_loss: 0.0656 - val_mae: 0.1832 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.05886 to 0.05707, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0396 - mae: 0.1569 - val_loss: 0.0571 - val_mae: 0.1855 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.05707 to 0.05545, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0399 - mae: 0.1569 - val_loss: 0.0554 - val_mae: 0.1807 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.05545\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0388 - mae: 0.1554 - val_loss: 0.0614 - val_mae: 0.1949 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss improved from 0.05545 to 0.05150, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0384 - mae: 0.1544 - val_loss: 0.0515 - val_mae: 0.1754 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0390 - mae: 0.1553 - val_loss: 0.0717 - val_mae: 0.1902 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0393 - mae: 0.1561 - val_loss: 0.0764 - val_mae: 0.2164 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0388 - mae: 0.1551 - val_loss: 0.0617 - val_mae: 0.1940 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0390 - mae: 0.1557 - val_loss: 0.0563 - val_mae: 0.1833 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.05150\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0388 - mae: 0.1550 - val_loss: 0.0574 - val_mae: 0.1846 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0384 - mae: 0.1539 - val_loss: 0.0831 - val_mae: 0.1962 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0381 - mae: 0.1537 - val_loss: 0.0607 - val_mae: 0.1881 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.05150\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0379 - mae: 0.1533 - val_loss: 0.0560 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.05150\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0374 - mae: 0.1521 - val_loss: 0.0654 - val_mae: 0.1884 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.05150\n",
      "4375/4375 - 35s - 8ms/step - loss: 0.0375 - mae: 0.1525 - val_loss: 0.0518 - val_mae: 0.1762 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0376 - mae: 0.1526 - val_loss: 0.0523 - val_mae: 0.1783 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0371 - mae: 0.1517 - val_loss: 0.0566 - val_mae: 0.1822 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0367 - mae: 0.1507 - val_loss: 0.0734 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0370 - mae: 0.1512 - val_loss: 0.0737 - val_mae: 0.2007 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0367 - mae: 0.1507 - val_loss: 0.0573 - val_mae: 0.1832 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0367 - mae: 0.1505 - val_loss: 0.0522 - val_mae: 0.1769 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0363 - mae: 0.1496 - val_loss: 0.0531 - val_mae: 0.1800 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.05150\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0367 - mae: 0.1507 - val_loss: 0.0546 - val_mae: 0.1820 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss improved from 0.05150 to 0.05020, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0358 - mae: 0.1487 - val_loss: 0.0502 - val_mae: 0.1738 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.05020\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0361 - mae: 0.1495 - val_loss: 0.0521 - val_mae: 0.1770 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.05020\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0351 - mae: 0.1473 - val_loss: 0.0516 - val_mae: 0.1719 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss improved from 0.05020 to 0.04965, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0354 - mae: 0.1477 - val_loss: 0.0496 - val_mae: 0.1704 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss improved from 0.04965 to 0.04906, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0353 - mae: 0.1476 - val_loss: 0.0491 - val_mae: 0.1728 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.04906\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0354 - mae: 0.1479 - val_loss: 0.0565 - val_mae: 0.1862 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.04906\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0348 - mae: 0.1468 - val_loss: 0.0497 - val_mae: 0.1698 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.04906\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0350 - mae: 0.1470 - val_loss: 0.0526 - val_mae: 0.1778 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.04906\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0347 - mae: 0.1465 - val_loss: 0.0570 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.04906\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0351 - mae: 0.1473 - val_loss: 0.0535 - val_mae: 0.1804 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.04906 to 0.04742, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0345 - mae: 0.1459 - val_loss: 0.0474 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.04742\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0346 - mae: 0.1461 - val_loss: 0.0622 - val_mae: 0.1932 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.04742\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0348 - mae: 0.1465 - val_loss: 0.0549 - val_mae: 0.1824 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.04742\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0345 - mae: 0.1457 - val_loss: 0.0496 - val_mae: 0.1723 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.04742\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0342 - mae: 0.1454 - val_loss: 0.0496 - val_mae: 0.1726 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.04742\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0340 - mae: 0.1448 - val_loss: 0.0577 - val_mae: 0.1826 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.04742\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0341 - mae: 0.1449 - val_loss: 0.0517 - val_mae: 0.1764 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.04742\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0338 - mae: 0.1443 - val_loss: 0.0562 - val_mae: 0.1843 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss improved from 0.04742 to 0.04564, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0338 - mae: 0.1442 - val_loss: 0.0456 - val_mae: 0.1657 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0339 - mae: 0.1441 - val_loss: 0.0469 - val_mae: 0.1640 - learning_rate: 1.0000e-03\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0334 - mae: 0.1432 - val_loss: 0.0515 - val_mae: 0.1763 - learning_rate: 1.0000e-03\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0331 - mae: 0.1427 - val_loss: 0.0580 - val_mae: 0.1879 - learning_rate: 1.0000e-03\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0335 - mae: 0.1439 - val_loss: 0.0569 - val_mae: 0.1785 - learning_rate: 1.0000e-03\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0332 - mae: 0.1430 - val_loss: 0.0491 - val_mae: 0.1698 - learning_rate: 1.0000e-03\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0334 - mae: 0.1430 - val_loss: 0.0510 - val_mae: 0.1731 - learning_rate: 1.0000e-03\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0336 - mae: 0.1436 - val_loss: 0.0489 - val_mae: 0.1713 - learning_rate: 1.0000e-03\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0329 - mae: 0.1423 - val_loss: 0.0527 - val_mae: 0.1747 - learning_rate: 1.0000e-03\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0329 - mae: 0.1423 - val_loss: 0.0570 - val_mae: 0.1828 - learning_rate: 1.0000e-03\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0330 - mae: 0.1423 - val_loss: 0.0516 - val_mae: 0.1752 - learning_rate: 1.0000e-03\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0324 - mae: 0.1411 - val_loss: 0.0488 - val_mae: 0.1698 - learning_rate: 1.0000e-03\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0327 - mae: 0.1415 - val_loss: 0.0542 - val_mae: 0.1782 - learning_rate: 1.0000e-03\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0324 - mae: 0.1413 - val_loss: 0.0592 - val_mae: 0.1787 - learning_rate: 1.0000e-03\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0322 - mae: 0.1408 - val_loss: 0.0563 - val_mae: 0.1716 - learning_rate: 1.0000e-03\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0323 - mae: 0.1411 - val_loss: 0.0552 - val_mae: 0.1817 - learning_rate: 1.0000e-03\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0318 - mae: 0.1400 - val_loss: 0.0495 - val_mae: 0.1659 - learning_rate: 1.0000e-03\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0317 - mae: 0.1394 - val_loss: 0.0527 - val_mae: 0.1773 - learning_rate: 1.0000e-03\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0323 - mae: 0.1406 - val_loss: 0.0508 - val_mae: 0.1702 - learning_rate: 1.0000e-03\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.04564\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0317 - mae: 0.1394 - val_loss: 0.0465 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss improved from 0.04564 to 0.04478, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0318 - mae: 0.1400 - val_loss: 0.0448 - val_mae: 0.1643 - learning_rate: 1.0000e-03\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0320 - mae: 0.1396 - val_loss: 0.0626 - val_mae: 0.1666 - learning_rate: 1.0000e-03\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0308 - mae: 0.1378 - val_loss: 0.0495 - val_mae: 0.1714 - learning_rate: 1.0000e-03\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0320 - mae: 0.1400 - val_loss: 0.0482 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0313 - mae: 0.1386 - val_loss: 0.0476 - val_mae: 0.1658 - learning_rate: 1.0000e-03\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0313 - mae: 0.1386 - val_loss: 0.0539 - val_mae: 0.1742 - learning_rate: 1.0000e-03\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0314 - mae: 0.1385 - val_loss: 0.0567 - val_mae: 0.1778 - learning_rate: 1.0000e-03\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0311 - mae: 0.1379 - val_loss: 0.0490 - val_mae: 0.1730 - learning_rate: 1.0000e-03\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0315 - mae: 0.1391 - val_loss: 0.0562 - val_mae: 0.1864 - learning_rate: 1.0000e-03\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0312 - mae: 0.1383 - val_loss: 0.0494 - val_mae: 0.1711 - learning_rate: 1.0000e-03\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0310 - mae: 0.1383 - val_loss: 0.0462 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0311 - mae: 0.1382 - val_loss: 0.0491 - val_mae: 0.1698 - learning_rate: 1.0000e-03\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0307 - mae: 0.1374 - val_loss: 0.0572 - val_mae: 0.1781 - learning_rate: 1.0000e-03\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0313 - mae: 0.1383 - val_loss: 0.0508 - val_mae: 0.1754 - learning_rate: 1.0000e-03\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.04478\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0306 - mae: 0.1369 - val_loss: 0.0492 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.04478 to 0.04376, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0309 - mae: 0.1376 - val_loss: 0.0438 - val_mae: 0.1626 - learning_rate: 1.0000e-03\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0313 - mae: 0.1382 - val_loss: 0.0467 - val_mae: 0.1663 - learning_rate: 1.0000e-03\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0302 - mae: 0.1362 - val_loss: 0.0454 - val_mae: 0.1656 - learning_rate: 1.0000e-03\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0310 - mae: 0.1377 - val_loss: 0.0481 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0309 - mae: 0.1376 - val_loss: 0.0447 - val_mae: 0.1637 - learning_rate: 1.0000e-03\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0309 - mae: 0.1373 - val_loss: 0.0473 - val_mae: 0.1648 - learning_rate: 1.0000e-03\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0304 - mae: 0.1367 - val_loss: 0.0520 - val_mae: 0.1758 - learning_rate: 1.0000e-03\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0308 - mae: 0.1372 - val_loss: 0.0504 - val_mae: 0.1749 - learning_rate: 1.0000e-03\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0299 - mae: 0.1356 - val_loss: 0.0456 - val_mae: 0.1671 - learning_rate: 1.0000e-03\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0304 - mae: 0.1363 - val_loss: 0.0468 - val_mae: 0.1686 - learning_rate: 1.0000e-03\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0300 - mae: 0.1357 - val_loss: 0.0506 - val_mae: 0.1747 - learning_rate: 1.0000e-03\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0299 - mae: 0.1353 - val_loss: 0.0502 - val_mae: 0.1744 - learning_rate: 1.0000e-03\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0296 - mae: 0.1346 - val_loss: 0.0504 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0301 - mae: 0.1356 - val_loss: 0.0465 - val_mae: 0.1645 - learning_rate: 1.0000e-03\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.04376\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0298 - mae: 0.1351 - val_loss: 0.0476 - val_mae: 0.1687 - learning_rate: 1.0000e-03\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss improved from 0.04376 to 0.04372, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0296 - mae: 0.1348 - val_loss: 0.0437 - val_mae: 0.1618 - learning_rate: 1.0000e-03\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.04372\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0293 - mae: 0.1339 - val_loss: 0.0482 - val_mae: 0.1681 - learning_rate: 1.0000e-03\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss improved from 0.04372 to 0.04075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0293 - mae: 0.1340 - val_loss: 0.0407 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0296 - mae: 0.1345 - val_loss: 0.0448 - val_mae: 0.1645 - learning_rate: 1.0000e-03\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0294 - mae: 0.1342 - val_loss: 0.0465 - val_mae: 0.1668 - learning_rate: 1.0000e-03\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0294 - mae: 0.1341 - val_loss: 0.0446 - val_mae: 0.1640 - learning_rate: 1.0000e-03\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0290 - mae: 0.1334 - val_loss: 0.0479 - val_mae: 0.1695 - learning_rate: 1.0000e-03\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0298 - mae: 0.1349 - val_loss: 0.0480 - val_mae: 0.1682 - learning_rate: 1.0000e-03\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0291 - mae: 0.1334 - val_loss: 0.0418 - val_mae: 0.1590 - learning_rate: 1.0000e-03\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0297 - mae: 0.1347 - val_loss: 0.0565 - val_mae: 0.1844 - learning_rate: 1.0000e-03\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0298 - mae: 0.1351 - val_loss: 0.0473 - val_mae: 0.1696 - learning_rate: 1.0000e-03\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0292 - mae: 0.1329 - val_loss: 0.0438 - val_mae: 0.1627 - learning_rate: 1.0000e-03\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0289 - mae: 0.1331 - val_loss: 0.0428 - val_mae: 0.1628 - learning_rate: 1.0000e-03\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0294 - mae: 0.1342 - val_loss: 0.0467 - val_mae: 0.1686 - learning_rate: 1.0000e-03\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0294 - mae: 0.1340 - val_loss: 0.0431 - val_mae: 0.1614 - learning_rate: 1.0000e-03\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0288 - mae: 0.1327 - val_loss: 0.0437 - val_mae: 0.1609 - learning_rate: 1.0000e-03\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0291 - mae: 0.1335 - val_loss: 0.0486 - val_mae: 0.1677 - learning_rate: 1.0000e-03\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0292 - mae: 0.1334 - val_loss: 0.0636 - val_mae: 0.1921 - learning_rate: 1.0000e-03\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0287 - mae: 0.1323 - val_loss: 0.0482 - val_mae: 0.1740 - learning_rate: 1.0000e-03\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0289 - mae: 0.1327 - val_loss: 0.0465 - val_mae: 0.1670 - learning_rate: 1.0000e-03\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0288 - mae: 0.1329 - val_loss: 0.0477 - val_mae: 0.1693 - learning_rate: 1.0000e-03\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0284 - mae: 0.1319 - val_loss: 0.0420 - val_mae: 0.1582 - learning_rate: 1.0000e-03\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.04075\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0281 - mae: 0.1313 - val_loss: 0.0439 - val_mae: 0.1620 - learning_rate: 1.0000e-03\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss improved from 0.04075 to 0.02442, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0095 - mae: 0.0767 - val_loss: 0.0244 - val_mae: 0.1202 - learning_rate: 1.0000e-04\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss improved from 0.02442 to 0.02377, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0238 - val_mae: 0.1186 - learning_rate: 1.0000e-04\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss improved from 0.02377 to 0.02361, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0068 - mae: 0.0656 - val_loss: 0.0236 - val_mae: 0.1180 - learning_rate: 1.0000e-04\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss improved from 0.02361 to 0.02352, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0064 - mae: 0.0634 - val_loss: 0.0235 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.02352 to 0.02343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0060 - mae: 0.0616 - val_loss: 0.0234 - val_mae: 0.1169 - learning_rate: 1.0000e-04\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss improved from 0.02343 to 0.02328, saving model to models/best_model_full.keras\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0058 - mae: 0.0603 - val_loss: 0.0233 - val_mae: 0.1165 - learning_rate: 1.0000e-04\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0056 - mae: 0.0592 - val_loss: 0.0235 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0234 - val_mae: 0.1171 - learning_rate: 1.0000e-04\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0052 - mae: 0.0575 - val_loss: 0.0238 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0051 - mae: 0.0566 - val_loss: 0.0239 - val_mae: 0.1170 - learning_rate: 1.0000e-04\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0050 - mae: 0.0559 - val_loss: 0.0241 - val_mae: 0.1175 - learning_rate: 1.0000e-04\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0049 - mae: 0.0553 - val_loss: 0.0241 - val_mae: 0.1172 - learning_rate: 1.0000e-04\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0048 - mae: 0.0548 - val_loss: 0.0242 - val_mae: 0.1175 - learning_rate: 1.0000e-04\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0046 - mae: 0.0541 - val_loss: 0.0240 - val_mae: 0.1180 - learning_rate: 1.0000e-04\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0046 - mae: 0.0537 - val_loss: 0.0236 - val_mae: 0.1166 - learning_rate: 1.0000e-04\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0045 - mae: 0.0532 - val_loss: 0.0239 - val_mae: 0.1175 - learning_rate: 1.0000e-04\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0044 - mae: 0.0527 - val_loss: 0.0243 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0523 - val_loss: 0.0244 - val_mae: 0.1177 - learning_rate: 1.0000e-04\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0043 - mae: 0.0518 - val_loss: 0.0243 - val_mae: 0.1178 - learning_rate: 1.0000e-04\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0042 - mae: 0.0515 - val_loss: 0.0244 - val_mae: 0.1182 - learning_rate: 1.0000e-04\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0511 - val_loss: 0.0250 - val_mae: 0.1182 - learning_rate: 1.0000e-04\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0041 - mae: 0.0507 - val_loss: 0.0245 - val_mae: 0.1177 - learning_rate: 1.0000e-04\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0040 - mae: 0.0503 - val_loss: 0.0248 - val_mae: 0.1182 - learning_rate: 1.0000e-04\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0040 - mae: 0.0499 - val_loss: 0.0251 - val_mae: 0.1183 - learning_rate: 1.0000e-04\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0039 - mae: 0.0497 - val_loss: 0.0246 - val_mae: 0.1181 - learning_rate: 1.0000e-04\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0039 - mae: 0.0493 - val_loss: 0.0242 - val_mae: 0.1177 - learning_rate: 1.0000e-04\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0030 - mae: 0.0433 - val_loss: 0.0235 - val_mae: 0.1161 - learning_rate: 1.0000e-05\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0426 - val_loss: 0.0236 - val_mae: 0.1162 - learning_rate: 1.0000e-05\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0424 - val_loss: 0.0238 - val_mae: 0.1161 - learning_rate: 1.0000e-05\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0029 - mae: 0.0423 - val_loss: 0.0237 - val_mae: 0.1161 - learning_rate: 1.0000e-05\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0421 - val_loss: 0.0237 - val_mae: 0.1163 - learning_rate: 1.0000e-05\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0420 - val_loss: 0.0234 - val_mae: 0.1159 - learning_rate: 1.0000e-05\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0419 - val_loss: 0.0239 - val_mae: 0.1163 - learning_rate: 1.0000e-05\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0237 - val_mae: 0.1162 - learning_rate: 1.0000e-05\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0418 - val_loss: 0.0239 - val_mae: 0.1164 - learning_rate: 1.0000e-05\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0417 - val_loss: 0.0238 - val_mae: 0.1163 - learning_rate: 1.0000e-05\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0416 - val_loss: 0.0237 - val_mae: 0.1163 - learning_rate: 1.0000e-05\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0415 - val_loss: 0.0239 - val_mae: 0.1163 - learning_rate: 1.0000e-05\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0415 - val_loss: 0.0242 - val_mae: 0.1165 - learning_rate: 1.0000e-05\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0028 - mae: 0.0414 - val_loss: 0.0239 - val_mae: 0.1163 - learning_rate: 1.0000e-05\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0414 - val_loss: 0.0241 - val_mae: 0.1164 - learning_rate: 1.0000e-05\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0413 - val_loss: 0.0237 - val_mae: 0.1162 - learning_rate: 1.0000e-05\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0239 - val_mae: 0.1163 - learning_rate: 1.0000e-05\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0412 - val_loss: 0.0240 - val_mae: 0.1164 - learning_rate: 1.0000e-05\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0238 - val_mae: 0.1162 - learning_rate: 1.0000e-05\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0027 - mae: 0.0411 - val_loss: 0.0243 - val_mae: 0.1165 - learning_rate: 1.0000e-05\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0404 - val_loss: 0.0237 - val_mae: 0.1161 - learning_rate: 1.0000e-06\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0240 - val_mae: 0.1163 - learning_rate: 1.0000e-06\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0241 - val_mae: 0.1163 - learning_rate: 1.0000e-06\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0240 - val_mae: 0.1162 - learning_rate: 1.0000e-06\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0403 - val_loss: 0.0239 - val_mae: 0.1163 - learning_rate: 1.0000e-06\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0236 - val_mae: 0.1160 - learning_rate: 1.0000e-06\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0240 - val_mae: 0.1162 - learning_rate: 1.0000e-06\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0243 - val_mae: 0.1163 - learning_rate: 1.0000e-06\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0241 - val_mae: 0.1163 - learning_rate: 1.0000e-06\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.02328\n",
      "4375/4375 - 34s - 8ms/step - loss: 0.0026 - mae: 0.0402 - val_loss: 0.0238 - val_mae: 0.1162 - learning_rate: 1.0000e-06\n",
      "Epoch 322: early stopping\n",
      "Restoring model weights from the end of the best epoch: 272.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 3s - 4ms/step\n",
      "Mean positioning error: 0.1837 m\n",
      "Median positioning error: 0.1641 m\n",
      "90th percentile error: 0.3261 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11096.386309,
   "end_time": "2025-08-14T22:55:39.045554",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-14T19:50:42.659245",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
