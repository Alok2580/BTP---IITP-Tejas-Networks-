{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53ba915e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:10.536573Z",
     "iopub.status.busy": "2025-08-07T13:58:10.536322Z",
     "iopub.status.idle": "2025-08-07T13:58:11.998392Z",
     "shell.execute_reply": "2025-08-07T13:58:11.997669Z"
    },
    "papermill": {
     "duration": 1.46701,
     "end_time": "2025-08-07T13:58:11.999680",
     "exception": false,
     "start_time": "2025-08-07T13:58:10.532670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9af1c45e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:12.005185Z",
     "iopub.status.busy": "2025-08-07T13:58:12.004795Z",
     "iopub.status.idle": "2025-08-07T13:58:26.074811Z",
     "shell.execute_reply": "2025-08-07T13:58:26.074187Z"
    },
    "papermill": {
     "duration": 14.073998,
     "end_time": "2025-08-07T13:58:26.076232",
     "exception": false,
     "start_time": "2025-08-07T13:58:12.002234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-07 13:58:13.482259: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754575093.661770      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754575093.718964      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "19b93f02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:26.081580Z",
     "iopub.status.busy": "2025-08-07T13:58:26.081121Z",
     "iopub.status.idle": "2025-08-07T13:58:26.085573Z",
     "shell.execute_reply": "2025-08-07T13:58:26.085009Z"
    },
    "papermill": {
     "duration": 0.008106,
     "end_time": "2025-08-07T13:58:26.086607",
     "exception": false,
     "start_time": "2025-08-07T13:58:26.078501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 5   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 256   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5a6c641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:26.091122Z",
     "iopub.status.busy": "2025-08-07T13:58:26.090878Z",
     "iopub.status.idle": "2025-08-07T13:58:26.094065Z",
     "shell.execute_reply": "2025-08-07T13:58:26.093511Z"
    },
    "papermill": {
     "duration": 0.006568,
     "end_time": "2025-08-07T13:58:26.095115",
     "exception": false,
     "start_time": "2025-08-07T13:58:26.088547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f656b81e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-07T13:58:26.100079Z",
     "iopub.status.busy": "2025-08-07T13:58:26.099850Z",
     "iopub.status.idle": "2025-08-07T16:15:17.746081Z",
     "shell.execute_reply": "2025-08-07T16:15:17.745349Z"
    },
    "papermill": {
     "duration": 8211.650543,
     "end_time": "2025-08-07T16:15:17.747419",
     "exception": false,
     "start_time": "2025-08-07T13:58:26.096876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754575128.976985      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754575138.295063      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">23,168</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">252</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,256</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,480</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m23,168\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m252\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,256\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m132,480\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">188,682</span> (737.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m188,682\u001b[0m (737.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">188,422</span> (736.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m188,422\u001b[0m (736.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754575148.923206      56 service.cc:148] XLA service 0x7f651c016de0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754575148.924386      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754575152.143350      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 10.29702, saving model to models/best_model_full.keras\n",
      "4375/4375 - 38s - 9ms/step - loss: 76.2289 - mae: 5.7056 - val_loss: 10.2970 - val_mae: 2.4888 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 10.29702 to 7.93603, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 7.1387 - mae: 2.0447 - val_loss: 7.9360 - val_mae: 2.2038 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 7.93603 to 4.63393, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 4.8673 - mae: 1.6337 - val_loss: 4.6339 - val_mae: 1.6467 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 4.63393 to 2.22058, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.6183 - mae: 1.2304 - val_loss: 2.2206 - val_mae: 1.1547 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 2.22058 to 1.12862, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.3925 - mae: 1.1233 - val_loss: 1.1286 - val_mae: 0.8360 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss did not improve from 1.12862\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.0586 - mae: 1.0064 - val_loss: 1.1543 - val_mae: 0.8378 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 1.12862\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3699 - mae: 0.8402 - val_loss: 15.7245 - val_mae: 2.8861 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 1.12862 to 0.60984, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6053 - mae: 0.9016 - val_loss: 0.6098 - val_mae: 0.6164 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0238 - mae: 0.7495 - val_loss: 1.2516 - val_mae: 0.8497 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7699 - mae: 0.8645 - val_loss: 0.6566 - val_mae: 0.6271 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9711 - mae: 0.7259 - val_loss: 2.0634 - val_mae: 1.0269 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3163 - mae: 0.7918 - val_loss: 3.5334 - val_mae: 1.3946 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6299 - mae: 0.7936 - val_loss: 5.4471 - val_mae: 1.6875 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9182 - mae: 0.7188 - val_loss: 1.2154 - val_mae: 0.6903 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8520 - mae: 0.8078 - val_loss: 2.8490 - val_mae: 1.2678 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.60984\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9477 - mae: 0.8381 - val_loss: 2.2032 - val_mae: 1.1017 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss improved from 0.60984 to 0.50030, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9374 - mae: 0.7090 - val_loss: 0.5003 - val_mae: 0.5473 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.50030\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.5199 - mae: 0.7956 - val_loss: 0.5138 - val_mae: 0.5578 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss improved from 0.50030 to 0.41518, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5326 - mae: 0.5645 - val_loss: 0.4152 - val_mae: 0.5115 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.41518\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.6296 - mae: 0.7735 - val_loss: 0.7812 - val_mae: 0.6823 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.41518\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.6104 - mae: 0.6024 - val_loss: 0.5649 - val_mae: 0.5870 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.41518\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5088 - mae: 0.5438 - val_loss: 0.6063 - val_mae: 0.5957 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.41518\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3737 - mae: 0.7127 - val_loss: 0.4398 - val_mae: 0.5204 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.41518\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5763 - mae: 0.5796 - val_loss: 0.6695 - val_mae: 0.6126 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss improved from 0.41518 to 0.40215, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4416 - mae: 0.7344 - val_loss: 0.4021 - val_mae: 0.4947 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.40215\n",
      "4375/4375 - 26s - 6ms/step - loss: 1.0207 - mae: 0.6850 - val_loss: 0.4357 - val_mae: 0.5144 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.5991 - mae: 0.5796 - val_loss: 1.3560 - val_mae: 0.8432 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.2724 - mae: 0.7695 - val_loss: 0.4851 - val_mae: 0.5387 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1349 - mae: 0.7105 - val_loss: 0.8162 - val_mae: 0.6994 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0226 - mae: 0.6949 - val_loss: 0.9019 - val_mae: 0.7146 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8007 - mae: 0.8009 - val_loss: 1.4244 - val_mae: 0.9096 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7535 - mae: 0.8568 - val_loss: 2.0948 - val_mae: 1.0802 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1979 - mae: 0.7869 - val_loss: 1.9725 - val_mae: 1.0591 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.1736 - mae: 0.7488 - val_loss: 0.5568 - val_mae: 0.5760 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.2604 - mae: 0.9141 - val_loss: 1.3322 - val_mae: 0.8827 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.0895 - mae: 0.7634 - val_loss: 0.6243 - val_mae: 0.6004 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.7960 - mae: 0.9330 - val_loss: 0.7368 - val_mae: 0.6605 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 2.1476 - mae: 0.9708 - val_loss: 1.1220 - val_mae: 0.8091 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.4809 - mae: 0.8941 - val_loss: 0.7269 - val_mae: 0.6610 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.3862 - mae: 0.7838 - val_loss: 1.3925 - val_mae: 0.9055 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.8940 - mae: 0.9220 - val_loss: 1.6837 - val_mae: 0.9650 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.9248 - mae: 0.7339 - val_loss: 1.5463 - val_mae: 0.9440 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 3.7825 - mae: 1.1629 - val_loss: 30.3593 - val_mae: 3.9509 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 4.4247 - mae: 1.4835 - val_loss: 3.3600 - val_mae: 1.4164 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.40215\n",
      "4375/4375 - 25s - 6ms/step - loss: 1.9499 - mae: 1.0316 - val_loss: 1.0170 - val_mae: 0.7829 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss improved from 0.40215 to 0.38439, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.4655 - mae: 0.5258 - val_loss: 0.3844 - val_mae: 0.4781 - learning_rate: 1.0000e-03\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss improved from 0.38439 to 0.29873, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.3242 - mae: 0.4416 - val_loss: 0.2987 - val_mae: 0.4208 - learning_rate: 1.0000e-03\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss improved from 0.29873 to 0.23916, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2576 - mae: 0.3947 - val_loss: 0.2392 - val_mae: 0.3787 - learning_rate: 1.0000e-03\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss improved from 0.23916 to 0.19856, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.2131 - mae: 0.3600 - val_loss: 0.1986 - val_mae: 0.3460 - learning_rate: 1.0000e-03\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss improved from 0.19856 to 0.17886, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1839 - mae: 0.3345 - val_loss: 0.1789 - val_mae: 0.3284 - learning_rate: 1.0000e-03\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.17886 to 0.17832, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1677 - mae: 0.3192 - val_loss: 0.1783 - val_mae: 0.3266 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.17832 to 0.15991, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1532 - mae: 0.3051 - val_loss: 0.1599 - val_mae: 0.3096 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.15991\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1471 - mae: 0.2996 - val_loss: 0.1655 - val_mae: 0.3173 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.15991 to 0.15729, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1365 - mae: 0.2883 - val_loss: 0.1573 - val_mae: 0.3090 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.15729 to 0.12448, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1259 - mae: 0.2765 - val_loss: 0.1245 - val_mae: 0.2734 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.12448 to 0.11732, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1159 - mae: 0.2660 - val_loss: 0.1173 - val_mae: 0.2664 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.11732 to 0.11234, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.1065 - mae: 0.2553 - val_loss: 0.1123 - val_mae: 0.2602 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.11234\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.1009 - mae: 0.2484 - val_loss: 0.1138 - val_mae: 0.2628 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.11234 to 0.09726, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0959 - mae: 0.2423 - val_loss: 0.0973 - val_mae: 0.2422 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.09726\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0915 - mae: 0.2367 - val_loss: 0.0992 - val_mae: 0.2456 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.09726 to 0.09348, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0876 - mae: 0.2316 - val_loss: 0.0935 - val_mae: 0.2368 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.09348\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0873 - mae: 0.2314 - val_loss: 0.1025 - val_mae: 0.2502 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.09348 to 0.09212, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0831 - mae: 0.2262 - val_loss: 0.0921 - val_mae: 0.2348 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.09212 to 0.09102, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0816 - mae: 0.2238 - val_loss: 0.0910 - val_mae: 0.2349 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.09102 to 0.08675, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0780 - mae: 0.2194 - val_loss: 0.0867 - val_mae: 0.2291 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.08675 to 0.08075, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0748 - mae: 0.2149 - val_loss: 0.0807 - val_mae: 0.2210 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.08075\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0717 - mae: 0.2105 - val_loss: 0.0816 - val_mae: 0.2220 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.08075 to 0.07948, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0716 - mae: 0.2103 - val_loss: 0.0795 - val_mae: 0.2206 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.07948\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0700 - mae: 0.2077 - val_loss: 0.0807 - val_mae: 0.2201 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.07948\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0672 - mae: 0.2039 - val_loss: 0.0883 - val_mae: 0.2303 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.07948 to 0.07925, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0654 - mae: 0.2008 - val_loss: 0.0792 - val_mae: 0.2189 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.07925\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0654 - mae: 0.2008 - val_loss: 0.0839 - val_mae: 0.2263 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.07925\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0642 - mae: 0.1990 - val_loss: 0.0858 - val_mae: 0.2290 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.07925 to 0.07115, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0625 - mae: 0.1961 - val_loss: 0.0712 - val_mae: 0.2067 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.07115\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0612 - mae: 0.1942 - val_loss: 0.0760 - val_mae: 0.2144 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.07115\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0624 - mae: 0.1962 - val_loss: 0.0742 - val_mae: 0.2113 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.07115 to 0.06979, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0599 - mae: 0.1923 - val_loss: 0.0698 - val_mae: 0.2059 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss improved from 0.06979 to 0.06655, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0583 - mae: 0.1897 - val_loss: 0.0665 - val_mae: 0.2019 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.06655 to 0.06537, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0567 - mae: 0.1871 - val_loss: 0.0654 - val_mae: 0.1992 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.06537 to 0.06237, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0538 - mae: 0.1823 - val_loss: 0.0624 - val_mae: 0.1945 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.06237 to 0.05749, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0530 - mae: 0.1809 - val_loss: 0.0575 - val_mae: 0.1857 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.05749\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0520 - mae: 0.1793 - val_loss: 0.0623 - val_mae: 0.1955 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.05749\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0501 - mae: 0.1756 - val_loss: 0.0605 - val_mae: 0.1922 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.05749 to 0.05704, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0493 - mae: 0.1749 - val_loss: 0.0570 - val_mae: 0.1860 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.05704\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0486 - mae: 0.1733 - val_loss: 0.0593 - val_mae: 0.1898 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.05704 to 0.05592, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0475 - mae: 0.1715 - val_loss: 0.0559 - val_mae: 0.1834 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.05592 to 0.05502, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0462 - mae: 0.1692 - val_loss: 0.0550 - val_mae: 0.1822 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.05502 to 0.05431, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0459 - mae: 0.1687 - val_loss: 0.0543 - val_mae: 0.1812 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.05431 to 0.05298, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0470 - mae: 0.1669 - val_loss: 0.0530 - val_mae: 0.1789 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.05298\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0437 - mae: 0.1646 - val_loss: 0.0531 - val_mae: 0.1791 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.05298\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0439 - mae: 0.1648 - val_loss: 0.0561 - val_mae: 0.1842 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.05298\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0430 - mae: 0.1629 - val_loss: 0.0537 - val_mae: 0.1790 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.05298\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0433 - mae: 0.1639 - val_loss: 0.0553 - val_mae: 0.1814 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.05298\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0472 - mae: 0.1699 - val_loss: 0.0579 - val_mae: 0.1866 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.05298 to 0.04987, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0450 - mae: 0.1665 - val_loss: 0.0499 - val_mae: 0.1736 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.04987\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0433 - mae: 0.1632 - val_loss: 0.0514 - val_mae: 0.1765 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.04987\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0423 - mae: 0.1615 - val_loss: 0.0501 - val_mae: 0.1741 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.04987\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0418 - mae: 0.1608 - val_loss: 0.0512 - val_mae: 0.1760 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss improved from 0.04987 to 0.04899, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0408 - mae: 0.1588 - val_loss: 0.0490 - val_mae: 0.1731 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.04899\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0408 - mae: 0.1589 - val_loss: 0.0498 - val_mae: 0.1739 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.04899\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0406 - mae: 0.1584 - val_loss: 0.0676 - val_mae: 0.1988 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.04899 to 0.04725, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0406 - mae: 0.1582 - val_loss: 0.0473 - val_mae: 0.1680 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0398 - mae: 0.1570 - val_loss: 0.0595 - val_mae: 0.1894 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0401 - mae: 0.1567 - val_loss: 0.0480 - val_mae: 0.1689 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0396 - mae: 0.1563 - val_loss: 0.0485 - val_mae: 0.1719 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0408 - mae: 0.1588 - val_loss: 0.0497 - val_mae: 0.1737 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0394 - mae: 0.1561 - val_loss: 0.0587 - val_mae: 0.1897 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0395 - mae: 0.1563 - val_loss: 0.0543 - val_mae: 0.1815 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0395 - mae: 0.1563 - val_loss: 0.0612 - val_mae: 0.1888 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.04725\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0393 - mae: 0.1557 - val_loss: 0.0579 - val_mae: 0.1884 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.04725 to 0.04562, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0392 - mae: 0.1554 - val_loss: 0.0456 - val_mae: 0.1641 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.04562\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0388 - mae: 0.1545 - val_loss: 0.0502 - val_mae: 0.1740 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.04562\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0389 - mae: 0.1548 - val_loss: 0.0496 - val_mae: 0.1732 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.04562\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0388 - mae: 0.1547 - val_loss: 0.0500 - val_mae: 0.1739 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss improved from 0.04562 to 0.04272, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1528 - val_loss: 0.0427 - val_mae: 0.1611 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0383 - mae: 0.1538 - val_loss: 0.0459 - val_mae: 0.1678 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.04272\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0376 - mae: 0.1526 - val_loss: 0.0457 - val_mae: 0.1662 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0379 - mae: 0.1529 - val_loss: 0.0432 - val_mae: 0.1625 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0378 - mae: 0.1528 - val_loss: 0.0460 - val_mae: 0.1661 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0374 - mae: 0.1521 - val_loss: 0.0474 - val_mae: 0.1699 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0386 - mae: 0.1535 - val_loss: 0.0450 - val_mae: 0.1650 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.04272\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0376 - mae: 0.1515 - val_loss: 0.0541 - val_mae: 0.1816 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0375 - mae: 0.1521 - val_loss: 0.0506 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0384 - mae: 0.1533 - val_loss: 0.0444 - val_mae: 0.1637 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.04272\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0381 - mae: 0.1527 - val_loss: 0.0464 - val_mae: 0.1677 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.04272 to 0.04118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0373 - mae: 0.1514 - val_loss: 0.0412 - val_mae: 0.1581 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.04118\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0377 - mae: 0.1525 - val_loss: 0.0440 - val_mae: 0.1639 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.04118\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0375 - mae: 0.1521 - val_loss: 0.0434 - val_mae: 0.1624 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.04118\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0370 - mae: 0.1507 - val_loss: 0.0479 - val_mae: 0.1706 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.04118 to 0.04080, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0398 - mae: 0.1533 - val_loss: 0.0408 - val_mae: 0.1565 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0370 - mae: 0.1508 - val_loss: 0.0488 - val_mae: 0.1720 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0377 - mae: 0.1520 - val_loss: 0.0484 - val_mae: 0.1697 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0379 - mae: 0.1525 - val_loss: 0.0421 - val_mae: 0.1601 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0395 - mae: 0.1520 - val_loss: 0.0476 - val_mae: 0.1685 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0353 - mae: 0.1476 - val_loss: 0.0427 - val_mae: 0.1610 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0374 - mae: 0.1516 - val_loss: 0.0477 - val_mae: 0.1699 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0372 - mae: 0.1513 - val_loss: 0.0432 - val_mae: 0.1617 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0367 - mae: 0.1505 - val_loss: 0.0461 - val_mae: 0.1662 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0371 - mae: 0.1512 - val_loss: 0.0445 - val_mae: 0.1630 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0366 - mae: 0.1499 - val_loss: 0.0454 - val_mae: 0.1652 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0364 - mae: 0.1498 - val_loss: 0.0472 - val_mae: 0.1691 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0375 - mae: 0.1520 - val_loss: 0.0449 - val_mae: 0.1646 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0380 - mae: 0.1482 - val_loss: 0.0459 - val_mae: 0.1679 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0362 - mae: 0.1492 - val_loss: 0.0479 - val_mae: 0.1709 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0371 - mae: 0.1511 - val_loss: 0.0498 - val_mae: 0.1729 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0372 - mae: 0.1512 - val_loss: 0.0447 - val_mae: 0.1647 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0369 - mae: 0.1505 - val_loss: 0.0422 - val_mae: 0.1582 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0371 - mae: 0.1499 - val_loss: 0.0438 - val_mae: 0.1632 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.04080\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0369 - mae: 0.1504 - val_loss: 0.0563 - val_mae: 0.1839 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.04080\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0367 - mae: 0.1504 - val_loss: 0.0498 - val_mae: 0.1761 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.04080 to 0.02443, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0155 - mae: 0.0979 - val_loss: 0.0244 - val_mae: 0.1211 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.02443 to 0.02313, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0136 - mae: 0.0920 - val_loss: 0.0231 - val_mae: 0.1174 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.02313 to 0.02302, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0129 - mae: 0.0898 - val_loss: 0.0230 - val_mae: 0.1172 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.02302\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0125 - mae: 0.0885 - val_loss: 0.0231 - val_mae: 0.1175 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss improved from 0.02302 to 0.02257, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0123 - mae: 0.0875 - val_loss: 0.0226 - val_mae: 0.1155 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss improved from 0.02257 to 0.02239, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0120 - mae: 0.0867 - val_loss: 0.0224 - val_mae: 0.1151 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.02239\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0119 - mae: 0.0861 - val_loss: 0.0225 - val_mae: 0.1155 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.02239\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0117 - mae: 0.0854 - val_loss: 0.0224 - val_mae: 0.1153 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.02239\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0115 - mae: 0.0850 - val_loss: 0.0226 - val_mae: 0.1159 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.02239 to 0.02219, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0114 - mae: 0.0845 - val_loss: 0.0222 - val_mae: 0.1147 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.02219 to 0.02218, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0113 - mae: 0.0841 - val_loss: 0.0222 - val_mae: 0.1149 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.02218\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0112 - mae: 0.0838 - val_loss: 0.0223 - val_mae: 0.1149 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.02218\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0111 - mae: 0.0832 - val_loss: 0.0223 - val_mae: 0.1149 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.02218\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0110 - mae: 0.0830 - val_loss: 0.0224 - val_mae: 0.1154 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss improved from 0.02218 to 0.02214, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0109 - mae: 0.0826 - val_loss: 0.0221 - val_mae: 0.1143 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.02214\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0108 - mae: 0.0823 - val_loss: 0.0223 - val_mae: 0.1146 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.02214\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0108 - mae: 0.0821 - val_loss: 0.0225 - val_mae: 0.1153 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.02214\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0107 - mae: 0.0817 - val_loss: 0.0221 - val_mae: 0.1146 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss improved from 0.02214 to 0.02202, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0106 - mae: 0.0815 - val_loss: 0.0220 - val_mae: 0.1139 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.02202 to 0.02197, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0106 - mae: 0.0812 - val_loss: 0.0220 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.02197\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0105 - mae: 0.0811 - val_loss: 0.0223 - val_mae: 0.1147 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss improved from 0.02197 to 0.02195, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0104 - mae: 0.0808 - val_loss: 0.0220 - val_mae: 0.1142 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.02195\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0104 - mae: 0.0805 - val_loss: 0.0220 - val_mae: 0.1138 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0103 - mae: 0.0803 - val_loss: 0.0222 - val_mae: 0.1145 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.02195\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0103 - mae: 0.0801 - val_loss: 0.0221 - val_mae: 0.1139 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0799 - val_loss: 0.0223 - val_mae: 0.1149 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0102 - mae: 0.0798 - val_loss: 0.0220 - val_mae: 0.1136 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.02195\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0101 - mae: 0.0794 - val_loss: 0.0224 - val_mae: 0.1150 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0101 - mae: 0.0793 - val_loss: 0.0222 - val_mae: 0.1142 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0792 - val_loss: 0.0220 - val_mae: 0.1136 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0100 - mae: 0.0789 - val_loss: 0.0221 - val_mae: 0.1140 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0789 - val_loss: 0.0227 - val_mae: 0.1159 - learning_rate: 1.0000e-04\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.02195\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0099 - mae: 0.0787 - val_loss: 0.0223 - val_mae: 0.1144 - learning_rate: 1.0000e-04\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.02195\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0099 - mae: 0.0785 - val_loss: 0.0221 - val_mae: 0.1138 - learning_rate: 1.0000e-04\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss improved from 0.02195 to 0.02186, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0783 - val_loss: 0.0219 - val_mae: 0.1134 - learning_rate: 1.0000e-04\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss improved from 0.02186 to 0.02177, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0098 - mae: 0.0782 - val_loss: 0.0218 - val_mae: 0.1129 - learning_rate: 1.0000e-04\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0780 - val_loss: 0.0221 - val_mae: 0.1140 - learning_rate: 1.0000e-04\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0779 - val_loss: 0.0227 - val_mae: 0.1158 - learning_rate: 1.0000e-04\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0097 - mae: 0.0778 - val_loss: 0.0219 - val_mae: 0.1133 - learning_rate: 1.0000e-04\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0776 - val_loss: 0.0220 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0774 - val_loss: 0.0221 - val_mae: 0.1139 - learning_rate: 1.0000e-04\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0095 - mae: 0.0772 - val_loss: 0.0219 - val_mae: 0.1136 - learning_rate: 1.0000e-04\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0096 - mae: 0.0773 - val_loss: 0.0220 - val_mae: 0.1136 - learning_rate: 1.0000e-04\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0095 - mae: 0.0772 - val_loss: 0.0220 - val_mae: 0.1135 - learning_rate: 1.0000e-04\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0095 - mae: 0.0769 - val_loss: 0.0219 - val_mae: 0.1135 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0768 - val_loss: 0.0222 - val_mae: 0.1140 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0767 - val_loss: 0.0221 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0766 - val_loss: 0.0221 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0094 - mae: 0.0765 - val_loss: 0.0219 - val_mae: 0.1134 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0093 - mae: 0.0764 - val_loss: 0.0220 - val_mae: 0.1137 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0093 - mae: 0.0761 - val_loss: 0.0219 - val_mae: 0.1133 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0093 - mae: 0.0761 - val_loss: 0.0218 - val_mae: 0.1129 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.02177\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0092 - mae: 0.0759 - val_loss: 0.0219 - val_mae: 0.1131 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0092 - mae: 0.0758 - val_loss: 0.0218 - val_mae: 0.1128 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.02177\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0092 - mae: 0.0758 - val_loss: 0.0218 - val_mae: 0.1129 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss improved from 0.02177 to 0.02087, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0078 - mae: 0.0697 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.02087\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0691 - val_loss: 0.0209 - val_mae: 0.1102 - learning_rate: 1.0000e-05\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.02087 to 0.02086, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0689 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.02086\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0209 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0687 - val_loss: 0.0209 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0076 - mae: 0.0687 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.02086\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0076 - mae: 0.0687 - val_loss: 0.0209 - val_mae: 0.1102 - learning_rate: 1.0000e-05\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.02086\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0686 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.02086\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1102 - learning_rate: 1.0000e-05\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0209 - val_mae: 0.1100 - learning_rate: 1.0000e-05\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0210 - val_mae: 0.1102 - learning_rate: 1.0000e-05\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-05\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0209 - val_mae: 0.1102 - learning_rate: 1.0000e-05\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.02086\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0075 - mae: 0.0684 - val_loss: 0.0209 - val_mae: 0.1101 - learning_rate: 1.0000e-05\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss improved from 0.02086 to 0.02084, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0677 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.02084\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-06\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.02084 to 0.02083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.02083\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.02083\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-06\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.02083\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss improved from 0.02083 to 0.02082, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0676 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.02082\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0209 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss improved from 0.02082 to 0.02082, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-06\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-06\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.02082\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss improved from 0.02082 to 0.02081, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-07\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss improved from 0.02081 to 0.02081, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-07\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.02081\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.02081\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-07\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss improved from 0.02081 to 0.02081, saving model to models/best_model_full.keras\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-07\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.02081\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.02081 to 0.02079, saving model to models/best_model_full.keras\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0209 - val_mae: 0.1099 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1099 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.02079\n",
      "4375/4375 - 25s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0209 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0209 - val_mae: 0.1098 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.02079\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0674 - val_loss: 0.0208 - val_mae: 0.1097 - learning_rate: 1.0000e-07\n",
      "Epoch 321: early stopping\n",
      "Restoring model weights from the end of the best epoch: 271.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1732 m\n",
      "Median positioning error: 0.1526 m\n",
      "90th percentile error: 0.3095 m\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+kAAAP2CAYAAACbvdwxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeZzTxf0/8Ncn2Wz2voHlRg4F5FIUBO8WFbHebe2p0mrVamvFX1vtIWqrtvartVVae3hVa2vr1VoRRcQDRVHwQm65kWXZK9kzm81nfn+EhM1uwm52M5+ZTF7PR6mQz+Y97/dMPp/JbJKJJYQQICIiIiIiIiLlXKoTICIiIiIiIqIwLtKJiIiIiIiINMFFOhEREREREZEmuEgnIiIiIiIi0gQX6URERERERESa4CKdiIiIiIiISBNcpBMRERERERFpgot0IiIiIiIiIk1wkU5ERERERESkCS7SiYiIHLZv3z588YtfRHl5OSzLwj333KM6pahLL70Uo0aN6tXP3nzzzbAsS2o+r776KizLwquvviq1HSIiIl1wkU5ERGnn008/xRVXXIHRo0cjJycHRUVFOP744/G73/0Ora2t0Z8bNWoULMuCZVlwuVwoKSnB5MmT8Z3vfAfvvPNO3NiRn+/6p7KyMmX5X3fddXjxxRdx44034tFHH8XcuXMT/mznHFwuF4YMGYLTTz/dsUVrS0sLbr755oxcJD/88MMJHw+WZeHtt99WnSIRERnIEkII1UkQERH11vPPP48vfelL8Hq9uPjiizFp0iS0t7djxYoVeOqpp3DppZfiz3/+M4DwIr20tBTXX389AKCxsRHr16/Hv//9b1RVVeG6667D3XffHRPfsiycdtppuPjii2Nuz83NxYUXXpiSGiorKzFnzhw89thjPf5s53yEENi2bRv+8Ic/oLq6Gs8//zzOPPPMlOQUEQwGYds2vF4vAKCmpgYDBgzAwoULcfPNN8f8bEdHBzo6OpCTk5PSHDqzbRvt7e3Izs6Gy+XsawsPP/ww5s+fj1tvvRWHHXZYt+Nz585FRUWFozkREZH5slQnQERE1Fvbtm3DV77yFYwcORKvvPIKBg8eHD129dVXY8uWLXj++edj7jN06FB84xvfiLnt17/+Nb72ta/ht7/9LcaNG4errroq5vjhhx/e7T6pVF1djZKSkl7/fNd8zj//fEyZMgX33HNPyhfpHo+n1z+blZWFrCy5TyVcLpfUXwL0xplnnoljjjkmqft0dHTAtm1kZ2d3O9bc3Iz8/Pw+5yOEQFtbG3Jzc/scg4iI9MW3uxMRUdq488470dTUhAceeCBmgR4xduxYXHvttT3Gyc3NxaOPPoqysjLcdtttSNWbyrZu3YovfelLKCsrQ15eHo477riYXxpE3j4thMCiRYuib5tO1uTJk1FRUYFt27ZFb3vllVdw4oknIj8/HyUlJTj33HOxfv36mPs1NjbiBz/4AUaNGgWv14uBAwfitNNOw5o1a6I/0/kz6du3b8eAAQMAALfccks038gr6vE+k97R0YFf/OIXGDNmDLxeL0aNGoWf/OQnCAQCMT83atQofOELX8CKFSswY8YM5OTkYPTo0fjb3/4W83PxPpN+yimnYNKkSVi3bh1OPfVU5OXlYejQobjzzju79dWOHTtwzjnnID8/HwMHDox+1CCVn3Pfvn07LMvC//3f/+Gee+6J1r5u3bpoH61btw5f+9rXUFpaihNOOKFPffXiiy/imGOOQW5uLv70pz+lJHciItIPX0knIqK08dxzz2H06NGYPXt2v2MVFBTg/PPPxwMPPIB169bhyCOPjB5ra2tDTU1NzM8XFhZG3wIez759+zB79my0tLTg+9//PsrLy/HII4/gnHPOwZNPPonzzz8fJ510Eh599FF885vfjPuW+t6qr69HfX09xo4dCwB4+eWXceaZZ2L06NG4+eab0drainvvvRfHH3881qxZE110X3nllXjyySdxzTXXYOLEiaitrcWKFSuwfv16HH300d3aGTBgAP74xz/iqquuwvnnn48LLrgAADBlypSEuV122WV45JFH8MUvfhHXX3893nnnHdxxxx1Yv349nnnmmZif3bJlC774xS/i29/+Ni655BI8+OCDuPTSSzF9+vSY8UjUB3PnzsUFF1yAL3/5y3jyySfx4x//GJMnT46+u6C5uRmf+9znsHfvXlx77bWorKzE448/juXLl/e6rwHA5/N1ezxYloXy8vKY2x566CG0tbXhO9/5DrxeL8rKyqLHvvSlL2HcuHG4/fbbo78USqavNm7ciK9+9au44oorcPnll+OII45IqgYiIkojgoiIKA34fD4BQJx77rm9vs/IkSPFWWedlfD4b3/7WwFA/Oc//4neBiDun4ceeuiQbf3gBz8QAMQbb7wRva2xsVEcdthhYtSoUSIUCsW0cfXVV/eqBgDi29/+tti/f7+orq4W77zzjvj85z8vAIi77rpLCCHEtGnTxMCBA0VtbW30fh9++KFwuVzi4osvjt5WXFzcY7uXXHKJGDlyZPTf+/fvFwDEwoULu/3swoULReenEh988IEAIC677LKYn/t//+//CQDilVdeid42cuRIAUC8/vrr0duqq6uF1+sV119/ffS25cuXCwBi+fLl0dtOPvlkAUD87W9/i94WCAREZWWluPDCC6O33XXXXQKAePbZZ6O3tba2ivHjx3eLGc9DDz2U8PHg9XqjP7dt2zYBQBQVFYnq6uq4ffTVr3415va+9NWSJUsOmS8REZmBb3cnIqK04Pf7AYRf0U6VgoICAOG3gXd27rnnYunSpTF/zjjjjEPGWrx4MWbMmBF9K3Mk/ne+8x1s374d69at63OeDzzwAAYMGICBAwdi5syZePPNN7FgwQL84Ac/wN69e/HBBx/g0ksvjXnldsqUKTjttNOwePHi6G0lJSV455138Nlnn/U5l0OJtLVgwYKY2yMb93XdL2DixIk48cQTo/8eMGAAjjjiCGzdurXHtgoKCmI+p5+dnY0ZM2bE3HfJkiUYOnQozjnnnOhtOTk5uPzyy5OoCli0aFG3x8MLL7zQ7ecuvPDC6McDurryyitj/p1sXx122GE9PgaJiMgMfLs7ERGlhaKiIgDdF9T90dTUBKD7wn/YsGGYM2dOUrF27NiBmTNndrt9woQJ0eOTJk3qU57nnnsurrnmGliWhcLCQhx55JHRjcd27NgBAHHf/jxhwgS8+OKL0Y3K7rzzTlxyySUYPnw4pk+fjnnz5uHiiy/G6NGj+5RXVzt27IDL5Yq+DT+isrISJSUl0VwjRowY0S1GaWkp6uvre2xr2LBh3T4PX1paio8++igmnzFjxnT7ua759WTGjBm92jgu3g7wiY4l21eHik1ERGbhK+lERJQWioqKMGTIEKxduzZlMSOxkl20OS3yS4PPf/7zmDFjRp93Bv/yl7+MrVu34t5778WQIUPwm9/8BkceeWTcV4X7o7eb4bnd7ri3i15s5Nef+8pyqN3WEx3rbV9xJ3cioszBRToREaWNL3zhC/j000+xcuXKfsdqamrCM888g+HDh0df7e6PkSNHYuPGjd1u37BhQ/S4DJG4idquqKiIWdQPHjwY3/3ud/Hss89i27ZtKC8vx2233ZYwfjK7z48cORK2bWPz5s0xt+/btw8NDQ3S+uBQ+Xz66afdFu5btmxxNI94dOsrIiLSBxfpRESUNn70ox8hPz8fl112Gfbt29ft+Kefforf/e53PcZpbW3FN7/5TdTV1eGnP/1pn74Grat58+Zh1apVMb9AaG5uxp///GeMGjUKEydO7Hcb8QwePBjTpk3DI488goaGhujta9euxUsvvYR58+YBAEKhEHw+X8x9Bw4ciCFDhnT7yq/O8vLyACAmdiKRtu65556Y2++++24AwFlnndVjjFQ644wzsGfPHvz3v/+N3tbW1oa//OUvjuYRj259RURE+uBn0omIKG2MGTMGjz/+OC666CJMmDABF198MSZNmoT29na89dZb+Pe//41LL7005j579uzBY489BiD86vm6devw73//G1VVVbj++utxxRVXpCS3G264Af/4xz9w5pln4vvf/z7KysrwyCOPYNu2bXjqqafgcsn7vfhvfvMbnHnmmZg1axa+/e1vR7+Crbi4OPqd5o2NjRg2bBi++MUvYurUqSgoKMDLL7+Md999F3fddVfC2Lm5uZg4cSKeeOIJHH744SgrK8OkSZPifr5+6tSpuOSSS/DnP/8ZDQ0NOPnkk7Fq1So88sgjOO+883DqqafK6oK4rrjiCtx333346le/imuvvRaDBw/G3//+d+Tk5ADo/bsEXnjhheg7IjqbPXt2nz/Pr1tfERGRPrhIJyKitHLOOefgo48+wm9+8xv85z//wR//+Ed4vV5MmTIFd911V7eduz/44AN885vfjG66Nnz4cJx99tm47LLLMGPGjJTlNWjQILz11lv48Y9/jHvvvRdtbW2YMmUKnnvuOemvis6ZMwdLlizBwoULcdNNN8Hj8eDkk0/Gr3/96+iGY3l5efjud7+Ll156CU8//TRs28bYsWPxhz/8AVddddUh4//1r3/F9773PVx33XVob2/HwoULE26C99e//hWjR4/Gww8/jGeeeQaVlZW48cYbsXDhwpTX3ZOCggK88sor+N73voff/e53KCgowMUXX4zZs2fjwgsvjC7We3LTTTfFvf2hhx7q16Z7OvUVERHpwxIqd1ghIiIictg999yD6667Drt378bQoUNVp0NERBSDi3QiIiIyVmtra8zO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ojo3zifOxOScYr5kxlbp292TZds2Bg4ciD//+c9wu92YPn069uzZg9/85jcJF+l33HEHbrnllm63L1++HHl5/dtMhoiIaOnSpapToE6e2eQC4EJpsCYlG8u2tbVF/8uNaolINs4p5mppaen1zypbpFdUVMDtdmPfvn0xt+/btw+VlZVx7zN48GB4PB643e7obRMmTEBVVRXa29uRnZ3d7T433ngjFixYEP233+/H8OHDceqpp6K8vDxF1ZBuhAi/4uHxeGDxe3NimNQ3OteiOjcn25fZlozYqYoZDAaxdOlSnHbaadF9UkgtIQR+8fFrANrxjdNnYuZhZf2OecstawC0IycnB/Pmzet3PJOovs6lks61qM6N84kzMTmnmM/n8/X6Z5Ut0rOzszF9+nQsW7YM5513HoDwK+XLli3DNddcE/c+xx9/PB5//HHYth19S8mmTZswePDguAt0APB6vfB6vd1u93g8PAEMZts2/H4/cnNztXvbmmom9Y3OtajOzcn2ZbYlI3aqY3I+0ceW6kbUNLXDm+XCsaMr4Mly93ynHlnR/3KcY6m+zqWSzrWozo3zibMxOaeYKyur90tvpVehBQsW4C9/+QseeeQRrF+/HldddRWam5uju71ffPHFuPHGG6M/f9VVV6Gurg7XXnstNm3ahOeffx633347rr76alUlEBERkSZWfloLAJg+shTelCzQiYiInKf0M+kXXXQR9u/fj5tuuglVVVWYNm0alixZEt1MbufOnTG/lRo+fDhefPFFXHfddZgyZQqGDh2Ka6+9Fj/+8Y9VlUBERESaWLk1vEifNZofZyMiovSlfOO4a665JuHb21999dVut82aNQtvv/225Kwo3VmWBbfbrd3nynRgUt/oXIvq3JxsX2ZbMmKrHhuSQwiBt7eGvx/9uDFcpDvBpHNJ51pU58b5xNmYZK5kHifKF+lEMliWhdLSUtVpaMmkvtG5FtW5Odm+zLZkxFY9NiTHB7saUNfcjrxsN6YOK0lZ3MhzKj4H786kc0nnWlTnxvnE2ZhkrmQW6XrtjEGUIkIItLW1QQjR8w9nGJP6RudaVOfmZPsy25IRW/XYkByvbtwPADj1iIHIzkrd05vIw4QPl+5MOpd0rkV1bpxPnI1J5krmccJFOhlJCIGmpiZeNOMwqW90rkV1bk62L7MtGbFVjw2lXsgW+Oe7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ypUAgEWLFiE/Px8fffSRz8fde++9mDt3LubMmYMffvgBnTp1wsiRI1FYWFjncQ888ACeeuop/Pjjj4iKisLvfve70/b1zTffYNeuXViyZAneeOMNzJkzp87H7MeOHYvDhw9j6dKlmDt3Ll566aUmfezflxkzZqB379746aef8OCDDwIAysvL8fjjj+OVV17Bpk2bkJmZiVtuuQU//vgj5s2bhxUrVsAwDIwePbrOiwm+ntcUu3btwscff4zPPvsMn332GZYtW4bHHnvMe//06dPx73//G7Nnz8amTZvw5z//GTfeeCOWLVvWvMGQAC/SiYgs9t+fDuIvH66HYQA3DGyLZ687i6u3ExGFkeIX3sPeXldjb6+rUbG87ne1XfsOe+87dt8zDZ6bf+N93vvrc74733tf2WdNv9AYOHAg5syZgwULFuCFF17Anj17cN5553nfhSwoKEB0dHSDhbqysrJQUFAAALjvvvsQFRWFTp064ZNPPsErr7yCHTt24I033sCDDz6I2267DR06dMC1116LkpKSgOqaPn06brjhBtx9993o3LkzBg8ejOeeew7//ve/UVlZGVCMHTt2YPbs2ejfvz+SkpIwY8YM/PWvf8V1112Hrl274vHHH0efPn287y7v378fnTt3xrnnnot27drh3HPPxfXXX+8zdsuWLQEAGRkZyM7ORnp6eoPHnDx5Ei+88AKefPJJXHLJJejRowdeeuklxMXF4dVXX63z2EceeQQXXHABevTogfvuuw/ffffdaftMTU3F//3f/6Fbt2649NJL8atf/cr7vfWtW7di0aJFePnllzFw4ED07dsXr7zyCioqKhodsw0bNng/Xu/577bbbqvzmAsvvBD33HMPOnbsiI4dOwKo/dTE888/j8GDB6Nr1644dOgQ5s2bh1deeQXnnXceevfujbfffhuHDh2qs/he/efFx8c3WqMvuq5jzpw56NmzJ8477zzcdNNN3vGoqqrCo48+itdeew0jR45Ehw4dcMstt+DGG2/Eiy++2KR8MuF30omILPSfVQdw79z1AICxg9ph6uVnCK6IiIiCpZeWw51/DABgVFXXvdOte+/TS0rrPxXuE8Xe++szyit/iVsR2EWrL56F0ACgV69eGDhwINq1a4f//Oc/uPXWWwOKkZKSgnfeecf7EfSoqChcdNFFePLJJ/H2229j9+7d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9yI9PR3Z2dl4+OGHG8yF5+PunhwfffQRhg0bhvj4ePTu3RsrVqyo85yXX34Zubm5iI+Px1VXXYWnn37a78X2qVJTU5GdnV3nP8+LOHPmzEFqairmzZuHHj16ICYmBvv370deXh7+8Y9/YOzYsUhOTva+yz137lycccYZiImJQV5eHp566qk6ufw9rzH1P+6uaRpeeeUVXHXVVYiPj0fnzp0xb968Os/ZuHEjLrnkEiQmJiIrKws33XQTjh8/HlC+5ghmP+ZFOilJ0zSkpKRIe7IVSaWxCVUvhmHg+aU7cf9HG+ByGxh9Zjb+eWXPZsUVPc5W5jczlxmxRc8NhReu7u6fSvuSzL14VhAPprZ58+ahf//++M1vfoPMzEycddZZePnll73367qOzz//HF26dMHIkSORmZmJgQMH+vyu86n5582bh0GDBuGOO+5AVlYWevbsiUcffdT7vezOnTujvLwcP/30EwoLC7Fq1Sr06tULRUVFePDBB/Gvf/0roF7rmzhxIlasWIH33nsP69evx29+8xuMGjUKO3bsCHhMHA4HHA4HXC4XTp48iZEjRyItLQ2rVq3CBx98gEWLFmHixIkAgJqaGlx55ZW44IILsH79eqxYsQITJkxoMAeapuHee+/Ftddei1GjRiE/Px/5+fkYPHhwg/yHDh3C6NGjcfbZZ2PdunV44YUX8Oqrr+Kf//xnncf9+9//RkJCAn744Qc88cQTmDZtGhYuXHja3h544AFMnjwZa9euRZcuXXD99dd7L/6XL1+O2267DXfddRfWrl2LESNG4JFHHgl43E6nvLwcjz/+OF555RVs2rTJ+wLPjBkz0Lt3b/z000948MEHsXr1alx77bW47rrrsGHDBjz88MN48MEHG3zFof7zmmrq1Km49tprsX79eowePRo33HADCgsLAdR+XePCCy/EWWedhR9//BELFizAkSNHcO211zY5X6CCOr4YEaakpMQAYBw//v/t3XlcFPX/B/DXcOyyLOxyySGCgCjiBYhial6JoRaplVqailrmraFmdihpmgcelaZ54ZGm9fPI24y8Ivt6myai4plyqMgNy7Izvz9oJxZ2gYVdZlnez8djH7JzfN6fY2fHz85nPvNU6KwQI2JZlsvLy+NYlhU6KybHnOrGEGV58CyPG73pHNd45gGu8cwD3IKD1w1SN0LXc23GN2Ys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\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8235.153412,
   "end_time": "2025-08-07T16:15:21.670173",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-07T13:58:06.516761",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
