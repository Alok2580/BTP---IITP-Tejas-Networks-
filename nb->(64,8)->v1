{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9c2fffdc",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-09T11:57:40.025777Z",
     "iopub.status.busy": "2025-08-09T11:57:40.025179Z",
     "iopub.status.idle": "2025-08-09T11:57:41.495448Z",
     "shell.execute_reply": "2025-08-09T11:57:41.494628Z"
    },
    "papermill": {
     "duration": 1.475079,
     "end_time": "2025-08-09T11:57:41.496692",
     "exception": false,
     "start_time": "2025-08-09T11:57:40.021613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "78edbbd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:57:41.502258Z",
     "iopub.status.busy": "2025-08-09T11:57:41.501938Z",
     "iopub.status.idle": "2025-08-09T11:57:55.603660Z",
     "shell.execute_reply": "2025-08-09T11:57:55.602789Z"
    },
    "papermill": {
     "duration": 14.105902,
     "end_time": "2025-08-09T11:57:55.605309",
     "exception": false,
     "start_time": "2025-08-09T11:57:41.499407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-09 11:57:42.974624: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754740663.158280      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754740663.210823      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "49d4fcf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:57:55.610431Z",
     "iopub.status.busy": "2025-08-09T11:57:55.609972Z",
     "iopub.status.idle": "2025-08-09T11:57:55.614284Z",
     "shell.execute_reply": "2025-08-09T11:57:55.613754Z"
    },
    "papermill": {
     "duration": 0.007856,
     "end_time": "2025-08-09T11:57:55.615335",
     "exception": false,
     "start_time": "2025-08-09T11:57:55.607479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 64   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =9    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8c1c568c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:57:55.619669Z",
     "iopub.status.busy": "2025-08-09T11:57:55.619462Z",
     "iopub.status.idle": "2025-08-09T11:57:55.622503Z",
     "shell.execute_reply": "2025-08-09T11:57:55.621999Z"
    },
    "papermill": {
     "duration": 0.006236,
     "end_time": "2025-08-09T11:57:55.623432",
     "exception": false,
     "start_time": "2025-08-09T11:57:55.617196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cc687701",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-09T11:57:55.628410Z",
     "iopub.status.busy": "2025-08-09T11:57:55.628161Z",
     "iopub.status.idle": "2025-08-09T13:06:10.910776Z",
     "shell.execute_reply": "2025-08-09T13:06:10.909841Z"
    },
    "papermill": {
     "duration": 4095.287207,
     "end_time": "2025-08-09T13:06:10.912389",
     "exception": false,
     "start_time": "2025-08-09T11:57:55.625182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1754740698.712218      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1754740707.980706      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">20,800</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">248</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">15,872</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,472</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │        \u001b[38;5;34m20,800\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m248\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │        \u001b[38;5;34m15,872\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        \u001b[38;5;34m33,472\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m130\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">70,538</span> (275.54 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m70,538\u001b[0m (275.54 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">70,406</span> (275.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m70,406\u001b[0m (275.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> (528.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m132\u001b[0m (528.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1754740718.813020      56 service.cc:148] XLA service 0x7bdfe8007020 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1754740718.813889      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1754740721.925145      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 22.94470, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 114.8076 - mae: 7.3652 - val_loss: 22.9447 - val_mae: 3.7154 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 22.94470 to 17.89386, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 20.6293 - mae: 3.4867 - val_loss: 17.8939 - val_mae: 3.2815 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss did not improve from 17.89386\n",
      "4375/4375 - 19s - 4ms/step - loss: 16.5236 - mae: 3.1014 - val_loss: 18.5295 - val_mae: 3.4037 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 17.89386 to 11.92526, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 12.5559 - mae: 2.6896 - val_loss: 11.9253 - val_mae: 2.6726 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 11.92526\n",
      "4375/4375 - 19s - 4ms/step - loss: 10.4183 - mae: 2.4423 - val_loss: 12.7872 - val_mae: 2.7616 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 11.92526 to 7.67049, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 8.7215 - mae: 2.2312 - val_loss: 7.6705 - val_mae: 2.1110 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 7.67049 to 6.37408, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 6.4975 - mae: 1.9202 - val_loss: 6.3741 - val_mae: 1.8996 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 6.37408 to 5.67896, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 5.6327 - mae: 1.7747 - val_loss: 5.6790 - val_mae: 1.7855 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 5.67896 to 2.90640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 4.1410 - mae: 1.5296 - val_loss: 2.9064 - val_mae: 1.3042 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 2.90640 to 2.05048, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 3.4228 - mae: 1.3475 - val_loss: 2.0505 - val_mae: 1.0972 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss did not improve from 2.05048\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.5462 - mae: 1.1698 - val_loss: 2.1976 - val_mae: 1.1356 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss improved from 2.05048 to 1.48463, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.6383 - mae: 1.0781 - val_loss: 1.4846 - val_mae: 0.9450 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 1.48463\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0191 - mae: 1.0002 - val_loss: 7.3598 - val_mae: 1.7296 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 1.48463\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.5304 - mae: 1.1031 - val_loss: 3.3609 - val_mae: 1.2806 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 1.48463 to 1.34886, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.5136 - mae: 0.9083 - val_loss: 1.3489 - val_mae: 0.8791 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 1.34886\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.4303 - mae: 1.0116 - val_loss: 10.0655 - val_mae: 1.8675 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 1.34886\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8921 - mae: 0.9531 - val_loss: 12.4425 - val_mae: 2.0643 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss improved from 1.34886 to 0.74484, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.3266 - mae: 0.8434 - val_loss: 0.7448 - val_mae: 0.6497 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.74484\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.6672 - mae: 1.0262 - val_loss: 1.6181 - val_mae: 0.9597 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss improved from 0.74484 to 0.66479, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.1735 - mae: 0.7994 - val_loss: 0.6648 - val_mae: 0.6341 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.66479\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.2053 - mae: 0.7913 - val_loss: 3.8484 - val_mae: 1.4298 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.66479\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.4615 - mae: 0.9447 - val_loss: 15.1061 - val_mae: 2.7980 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.66479\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0426 - mae: 0.9683 - val_loss: 0.7707 - val_mae: 0.6824 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.66479\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0290 - mae: 0.8986 - val_loss: 1.6980 - val_mae: 0.9853 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.66479\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.8780 - mae: 0.7179 - val_loss: 0.6950 - val_mae: 0.6476 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.66479\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.7570 - mae: 0.8794 - val_loss: 0.7220 - val_mae: 0.6623 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.66479\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1696 - mae: 0.9341 - val_loss: 0.9754 - val_mae: 0.7642 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.66479\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.5068 - mae: 0.8357 - val_loss: 2.2559 - val_mae: 1.0736 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss improved from 0.66479 to 0.60396, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.9938 - mae: 0.7378 - val_loss: 0.6040 - val_mae: 0.6064 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 0.60396 to 0.59496, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.7699 - mae: 0.8615 - val_loss: 0.5950 - val_mae: 0.6062 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.9128 - mae: 0.8508 - val_loss: 1.3883 - val_mae: 0.8574 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.6275 - mae: 0.7804 - val_loss: 22.7459 - val_mae: 3.1710 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.6998 - mae: 0.9268 - val_loss: 1.0497 - val_mae: 0.7880 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.9759 - mae: 0.9114 - val_loss: 1.1732 - val_mae: 0.8669 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.2064 - mae: 0.8025 - val_loss: 0.7097 - val_mae: 0.6539 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.3029 - mae: 0.8129 - val_loss: 0.7656 - val_mae: 0.6764 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.7842 - mae: 0.8668 - val_loss: 0.8857 - val_mae: 0.7364 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.6018 - mae: 0.8561 - val_loss: 1.0722 - val_mae: 0.8043 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.5285 - mae: 0.7973 - val_loss: 2.9999 - val_mae: 1.2767 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.1938 - mae: 0.8155 - val_loss: 0.7924 - val_mae: 0.6975 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.9232 - mae: 0.9284 - val_loss: 0.6793 - val_mae: 0.6437 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1401 - mae: 0.9255 - val_loss: 1.2213 - val_mae: 0.8428 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.9676 - mae: 0.7477 - val_loss: 6.0308 - val_mae: 1.7581 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.6507 - mae: 1.1075 - val_loss: 1.1663 - val_mae: 0.8456 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.7257 - mae: 0.9185 - val_loss: 0.8476 - val_mae: 0.7153 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8054 - mae: 0.8577 - val_loss: 1.1141 - val_mae: 0.8081 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.1467 - mae: 0.7633 - val_loss: 5.7594 - val_mae: 1.6822 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.4477 - mae: 0.8591 - val_loss: 2.0148 - val_mae: 1.0469 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 3.2462 - mae: 1.2082 - val_loss: 1.5932 - val_mae: 0.9600 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.59496\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.0055 - mae: 0.7639 - val_loss: 0.7598 - val_mae: 0.6822 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.59496 to 0.37417, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.3997 - mae: 0.4919 - val_loss: 0.3742 - val_mae: 0.4763 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.37417 to 0.33395, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.3198 - mae: 0.4422 - val_loss: 0.3339 - val_mae: 0.4526 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.33395 to 0.27988, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2772 - mae: 0.4124 - val_loss: 0.2799 - val_mae: 0.4121 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.27988 to 0.25648, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2453 - mae: 0.3880 - val_loss: 0.2565 - val_mae: 0.3928 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.25648 to 0.24008, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2229 - mae: 0.3701 - val_loss: 0.2401 - val_mae: 0.3782 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.24008\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2046 - mae: 0.3546 - val_loss: 0.2452 - val_mae: 0.3858 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.24008 to 0.21353, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1903 - mae: 0.3423 - val_loss: 0.2135 - val_mae: 0.3579 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.21353 to 0.20172, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1792 - mae: 0.3317 - val_loss: 0.2017 - val_mae: 0.3466 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.20172 to 0.19123, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1698 - mae: 0.3234 - val_loss: 0.1912 - val_mae: 0.3397 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.19123 to 0.18987, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1615 - mae: 0.3153 - val_loss: 0.1899 - val_mae: 0.3361 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.18987 to 0.18472, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1542 - mae: 0.3082 - val_loss: 0.1847 - val_mae: 0.3315 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.18472 to 0.17978, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1472 - mae: 0.3015 - val_loss: 0.1798 - val_mae: 0.3280 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.17978 to 0.16655, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1395 - mae: 0.2932 - val_loss: 0.1666 - val_mae: 0.3152 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.16655 to 0.16611, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1337 - mae: 0.2871 - val_loss: 0.1661 - val_mae: 0.3148 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.16611 to 0.15682, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1293 - mae: 0.2827 - val_loss: 0.1568 - val_mae: 0.3042 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss improved from 0.15682 to 0.15083, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1255 - mae: 0.2784 - val_loss: 0.1508 - val_mae: 0.3002 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.15083\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1222 - mae: 0.2744 - val_loss: 0.1530 - val_mae: 0.3019 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.15083 to 0.14344, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1181 - mae: 0.2696 - val_loss: 0.1434 - val_mae: 0.2931 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss improved from 0.14344 to 0.14030, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1154 - mae: 0.2670 - val_loss: 0.1403 - val_mae: 0.2895 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.14030\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1126 - mae: 0.2631 - val_loss: 0.1434 - val_mae: 0.2935 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.14030\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1090 - mae: 0.2594 - val_loss: 0.1443 - val_mae: 0.2942 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.14030 to 0.13409, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1073 - mae: 0.2566 - val_loss: 0.1341 - val_mae: 0.2818 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.13409 to 0.12807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1040 - mae: 0.2536 - val_loss: 0.1281 - val_mae: 0.2761 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.12807\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1032 - mae: 0.2521 - val_loss: 0.1299 - val_mae: 0.2790 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.12807\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1013 - mae: 0.2504 - val_loss: 0.1305 - val_mae: 0.2797 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss improved from 0.12807 to 0.12613, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0985 - mae: 0.2468 - val_loss: 0.1261 - val_mae: 0.2750 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.12613\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0981 - mae: 0.2461 - val_loss: 0.1319 - val_mae: 0.2811 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.12613\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0955 - mae: 0.2426 - val_loss: 0.1280 - val_mae: 0.2784 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss improved from 0.12613 to 0.12289, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0949 - mae: 0.2422 - val_loss: 0.1229 - val_mae: 0.2711 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.12289 to 0.11977, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0932 - mae: 0.2403 - val_loss: 0.1198 - val_mae: 0.2675 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.11977 to 0.11942, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0923 - mae: 0.2389 - val_loss: 0.1194 - val_mae: 0.2681 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.11942\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0909 - mae: 0.2369 - val_loss: 0.1223 - val_mae: 0.2706 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.11942 to 0.11538, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0900 - mae: 0.2357 - val_loss: 0.1154 - val_mae: 0.2623 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss did not improve from 0.11538\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0891 - mae: 0.2349 - val_loss: 0.1186 - val_mae: 0.2663 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss did not improve from 0.11538\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0883 - mae: 0.2337 - val_loss: 0.1164 - val_mae: 0.2635 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss did not improve from 0.11538\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0871 - mae: 0.2320 - val_loss: 0.1225 - val_mae: 0.2692 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.11538 to 0.11219, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0858 - mae: 0.2303 - val_loss: 0.1122 - val_mae: 0.2583 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0856 - mae: 0.2299 - val_loss: 0.1190 - val_mae: 0.2676 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0867 - mae: 0.2294 - val_loss: 0.1195 - val_mae: 0.2675 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0841 - mae: 0.2280 - val_loss: 0.1163 - val_mae: 0.2633 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0845 - mae: 0.2278 - val_loss: 0.1172 - val_mae: 0.2633 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0836 - mae: 0.2270 - val_loss: 0.1156 - val_mae: 0.2595 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0830 - mae: 0.2264 - val_loss: 0.1142 - val_mae: 0.2592 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0825 - mae: 0.2260 - val_loss: 0.1213 - val_mae: 0.2707 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0822 - mae: 0.2255 - val_loss: 0.1148 - val_mae: 0.2607 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.11219\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0816 - mae: 0.2246 - val_loss: 0.1134 - val_mae: 0.2590 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.11219 to 0.10928, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0811 - mae: 0.2240 - val_loss: 0.1093 - val_mae: 0.2554 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.10928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0809 - mae: 0.2234 - val_loss: 0.1153 - val_mae: 0.2620 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.10928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0807 - mae: 0.2234 - val_loss: 0.1105 - val_mae: 0.2559 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.10928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0797 - mae: 0.2222 - val_loss: 0.1178 - val_mae: 0.2643 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.10928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0807 - mae: 0.2231 - val_loss: 0.1114 - val_mae: 0.2577 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.10928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0788 - mae: 0.2206 - val_loss: 0.1109 - val_mae: 0.2574 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.10928 to 0.10733, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0793 - mae: 0.2216 - val_loss: 0.1073 - val_mae: 0.2522 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.10733\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0800 - mae: 0.2222 - val_loss: 0.1130 - val_mae: 0.2569 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.10733\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0789 - mae: 0.2207 - val_loss: 0.1132 - val_mae: 0.2588 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.10733 to 0.10567, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0787 - mae: 0.2206 - val_loss: 0.1057 - val_mae: 0.2498 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.10567\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0791 - mae: 0.2207 - val_loss: 0.1093 - val_mae: 0.2541 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.10567\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0776 - mae: 0.2192 - val_loss: 0.1179 - val_mae: 0.2652 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.10567\n",
      "4375/4375 - 18s - 4ms/step - loss: 0.0783 - mae: 0.2201 - val_loss: 0.1171 - val_mae: 0.2646 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.10567\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0795 - mae: 0.2206 - val_loss: 0.1105 - val_mae: 0.2554 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss did not improve from 0.10567\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0772 - mae: 0.2185 - val_loss: 0.1093 - val_mae: 0.2551 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss did not improve from 0.10567\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0776 - mae: 0.2192 - val_loss: 0.1099 - val_mae: 0.2546 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss improved from 0.10567 to 0.10333, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0782 - mae: 0.2195 - val_loss: 0.1033 - val_mae: 0.2476 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.10333\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0776 - mae: 0.2190 - val_loss: 0.1106 - val_mae: 0.2525 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.10333\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0770 - mae: 0.2180 - val_loss: 0.1068 - val_mae: 0.2512 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.10333\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0773 - mae: 0.2189 - val_loss: 0.1091 - val_mae: 0.2542 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.10333\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0764 - mae: 0.2173 - val_loss: 0.1090 - val_mae: 0.2543 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.10333\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0769 - mae: 0.2179 - val_loss: 0.1044 - val_mae: 0.2482 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.10333\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0762 - mae: 0.2172 - val_loss: 0.1083 - val_mae: 0.2528 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss improved from 0.10333 to 0.10295, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0766 - mae: 0.2176 - val_loss: 0.1030 - val_mae: 0.2459 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.10295\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0765 - mae: 0.2175 - val_loss: 0.1041 - val_mae: 0.2474 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss did not improve from 0.10295\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0766 - mae: 0.2174 - val_loss: 0.1066 - val_mae: 0.2516 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.10295\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0758 - mae: 0.2164 - val_loss: 0.1034 - val_mae: 0.2477 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.10295\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0760 - mae: 0.2168 - val_loss: 0.1079 - val_mae: 0.2529 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.10295\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0756 - mae: 0.2163 - val_loss: 0.1098 - val_mae: 0.2540 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss did not improve from 0.10295\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0760 - mae: 0.2167 - val_loss: 0.1068 - val_mae: 0.2521 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.10295 to 0.10263, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0758 - mae: 0.2164 - val_loss: 0.1026 - val_mae: 0.2455 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.10263\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0748 - mae: 0.2152 - val_loss: 0.1093 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.10263\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0754 - mae: 0.2158 - val_loss: 0.1077 - val_mae: 0.2540 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.10263 to 0.10217, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0760 - mae: 0.2167 - val_loss: 0.1022 - val_mae: 0.2451 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0747 - mae: 0.2150 - val_loss: 0.1022 - val_mae: 0.2466 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0754 - mae: 0.2161 - val_loss: 0.1065 - val_mae: 0.2522 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0755 - mae: 0.2158 - val_loss: 0.1064 - val_mae: 0.2491 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0745 - mae: 0.2144 - val_loss: 0.1038 - val_mae: 0.2478 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0757 - mae: 0.2162 - val_loss: 0.1047 - val_mae: 0.2473 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0739 - mae: 0.2140 - val_loss: 0.1094 - val_mae: 0.2547 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0744 - mae: 0.2145 - val_loss: 0.1037 - val_mae: 0.2464 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.10217\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0749 - mae: 0.2146 - val_loss: 0.1085 - val_mae: 0.2499 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0740 - mae: 0.2140 - val_loss: 0.1038 - val_mae: 0.2461 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.10217\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0744 - mae: 0.2145 - val_loss: 0.1094 - val_mae: 0.2520 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss improved from 0.10217 to 0.10214, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0748 - mae: 0.2145 - val_loss: 0.1021 - val_mae: 0.2430 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0747 - mae: 0.2145 - val_loss: 0.1062 - val_mae: 0.2489 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0744 - mae: 0.2141 - val_loss: 0.1059 - val_mae: 0.2465 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0743 - mae: 0.2144 - val_loss: 0.1040 - val_mae: 0.2480 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0748 - mae: 0.2151 - val_loss: 0.2259 - val_mae: 0.2530 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0769 - mae: 0.2127 - val_loss: 0.1042 - val_mae: 0.2477 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0733 - mae: 0.2129 - val_loss: 0.1134 - val_mae: 0.2618 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0741 - mae: 0.2141 - val_loss: 0.1039 - val_mae: 0.2443 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0746 - mae: 0.2144 - val_loss: 0.1070 - val_mae: 0.2500 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.10214\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0744 - mae: 0.2142 - val_loss: 0.1154 - val_mae: 0.2604 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.10214 to 0.07675, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0432 - mae: 0.1630 - val_loss: 0.0767 - val_mae: 0.2094 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.07675 to 0.07504, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0392 - mae: 0.1559 - val_loss: 0.0750 - val_mae: 0.2069 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.07504 to 0.07433, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0377 - mae: 0.1530 - val_loss: 0.0743 - val_mae: 0.2055 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.07433\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0368 - mae: 0.1513 - val_loss: 0.0744 - val_mae: 0.2055 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.07433\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0363 - mae: 0.1501 - val_loss: 0.0745 - val_mae: 0.2054 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.07433\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0358 - mae: 0.1491 - val_loss: 0.0749 - val_mae: 0.2059 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.07433\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0354 - mae: 0.1484 - val_loss: 0.0748 - val_mae: 0.2059 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.07433\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0351 - mae: 0.1477 - val_loss: 0.0749 - val_mae: 0.2055 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.07433\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0349 - mae: 0.1473 - val_loss: 0.0745 - val_mae: 0.2054 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.07433\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0346 - mae: 0.1468 - val_loss: 0.0744 - val_mae: 0.2049 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.07433 to 0.07390, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0345 - mae: 0.1464 - val_loss: 0.0739 - val_mae: 0.2042 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0342 - mae: 0.1457 - val_loss: 0.0747 - val_mae: 0.2051 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0341 - mae: 0.1454 - val_loss: 0.0750 - val_mae: 0.2059 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0339 - mae: 0.1452 - val_loss: 0.0753 - val_mae: 0.2058 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0338 - mae: 0.1448 - val_loss: 0.0752 - val_mae: 0.2060 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0336 - mae: 0.1447 - val_loss: 0.0744 - val_mae: 0.2048 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0335 - mae: 0.1443 - val_loss: 0.0745 - val_mae: 0.2041 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0333 - mae: 0.1439 - val_loss: 0.0749 - val_mae: 0.2051 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0332 - mae: 0.1438 - val_loss: 0.0759 - val_mae: 0.2065 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0332 - mae: 0.1437 - val_loss: 0.0749 - val_mae: 0.2048 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0331 - mae: 0.1435 - val_loss: 0.0750 - val_mae: 0.2048 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0329 - mae: 0.1431 - val_loss: 0.0754 - val_mae: 0.2052 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0329 - mae: 0.1428 - val_loss: 0.0755 - val_mae: 0.2054 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0328 - mae: 0.1429 - val_loss: 0.0759 - val_mae: 0.2059 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0327 - mae: 0.1427 - val_loss: 0.0758 - val_mae: 0.2057 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0326 - mae: 0.1423 - val_loss: 0.0758 - val_mae: 0.2055 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0325 - mae: 0.1422 - val_loss: 0.0753 - val_mae: 0.2047 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0324 - mae: 0.1420 - val_loss: 0.0757 - val_mae: 0.2053 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0324 - mae: 0.1419 - val_loss: 0.0764 - val_mae: 0.2059 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0323 - mae: 0.1416 - val_loss: 0.0767 - val_mae: 0.2060 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0322 - mae: 0.1414 - val_loss: 0.0760 - val_mae: 0.2058 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0295 - mae: 0.1353 - val_loss: 0.0741 - val_mae: 0.2026 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0292 - mae: 0.1346 - val_loss: 0.0740 - val_mae: 0.2023 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0292 - mae: 0.1345 - val_loss: 0.0741 - val_mae: 0.2023 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0291 - mae: 0.1344 - val_loss: 0.0741 - val_mae: 0.2024 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0291 - mae: 0.1344 - val_loss: 0.0742 - val_mae: 0.2025 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0291 - mae: 0.1343 - val_loss: 0.0742 - val_mae: 0.2025 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0291 - mae: 0.1343 - val_loss: 0.0742 - val_mae: 0.2025 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0291 - mae: 0.1342 - val_loss: 0.0742 - val_mae: 0.2025 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0290 - mae: 0.1342 - val_loss: 0.0743 - val_mae: 0.2024 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0290 - mae: 0.1342 - val_loss: 0.0744 - val_mae: 0.2026 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0290 - mae: 0.1342 - val_loss: 0.0743 - val_mae: 0.2026 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0290 - mae: 0.1341 - val_loss: 0.0743 - val_mae: 0.2025 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0290 - mae: 0.1341 - val_loss: 0.0743 - val_mae: 0.2026 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0290 - mae: 0.1340 - val_loss: 0.0744 - val_mae: 0.2027 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0290 - mae: 0.1341 - val_loss: 0.0746 - val_mae: 0.2027 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0290 - mae: 0.1340 - val_loss: 0.0744 - val_mae: 0.2026 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0290 - mae: 0.1340 - val_loss: 0.0743 - val_mae: 0.2025 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0289 - mae: 0.1340 - val_loss: 0.0744 - val_mae: 0.2025 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0289 - mae: 0.1339 - val_loss: 0.0744 - val_mae: 0.2028 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0289 - mae: 0.1339 - val_loss: 0.0744 - val_mae: 0.2026 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1332 - val_loss: 0.0743 - val_mae: 0.2024 - learning_rate: 1.0000e-06\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0743 - val_mae: 0.2024 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0742 - val_mae: 0.2023 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0742 - val_mae: 0.2023 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0742 - val_mae: 0.2023 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0742 - val_mae: 0.2023 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0743 - val_mae: 0.2023 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0743 - val_mae: 0.2024 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.07390\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0743 - val_mae: 0.2023 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.07390\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0286 - mae: 0.1331 - val_loss: 0.0742 - val_mae: 0.2023 - learning_rate: 1.0000e-06\n",
      "Epoch 211: early stopping\n",
      "Restoring model weights from the end of the best epoch: 161.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.3220 m\n",
      "Median positioning error: 0.2845 m\n",
      "90th percentile error: 0.5723 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4118.644197,
   "end_time": "2025-08-09T13:06:14.689965",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-09T11:57:36.045768",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
