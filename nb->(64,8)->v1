{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "864cae08",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-27T16:04:18.611643Z",
     "iopub.status.busy": "2025-08-27T16:04:18.610993Z",
     "iopub.status.idle": "2025-08-27T16:04:20.291738Z",
     "shell.execute_reply": "2025-08-27T16:04:20.290897Z"
    },
    "papermill": {
     "duration": 1.685695,
     "end_time": "2025-08-27T16:04:20.292915",
     "exception": false,
     "start_time": "2025-08-27T16:04:18.607220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-128-8/(128 8)(Training)Dataset-1-002.npz\n",
      "/kaggle/input/dataset-128-8/(128 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dc9fb3da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:04:20.298293Z",
     "iopub.status.busy": "2025-08-27T16:04:20.297933Z",
     "iopub.status.idle": "2025-08-27T16:04:37.478468Z",
     "shell.execute_reply": "2025-08-27T16:04:37.477621Z"
    },
    "papermill": {
     "duration": 17.184538,
     "end_time": "2025-08-27T16:04:37.479925",
     "exception": false,
     "start_time": "2025-08-27T16:04:20.295387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-27 16:04:22.413337: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1756310662.663341      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1756310662.734606      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2bbf9f1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:04:37.485844Z",
     "iopub.status.busy": "2025-08-27T16:04:37.484870Z",
     "iopub.status.idle": "2025-08-27T16:04:37.489660Z",
     "shell.execute_reply": "2025-08-27T16:04:37.488929Z"
    },
    "papermill": {
     "duration": 0.008503,
     "end_time": "2025-08-27T16:04:37.490732",
     "exception": false,
     "start_time": "2025-08-27T16:04:37.482229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 128    #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size =7    #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 512   #256,512,1025,2048,4096\n",
    "transformer_layers = 1   #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16      # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                    # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3bdf2c7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:04:37.495544Z",
     "iopub.status.busy": "2025-08-27T16:04:37.495258Z",
     "iopub.status.idle": "2025-08-27T16:04:37.498858Z",
     "shell.execute_reply": "2025-08-27T16:04:37.498142Z"
    },
    "papermill": {
     "duration": 0.007307,
     "end_time": "2025-08-27T16:04:37.500024",
     "exception": false,
     "start_time": "2025-08-27T16:04:37.492717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset32-8/(32 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset32-8/(32 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "de41d171",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T16:04:37.505369Z",
     "iopub.status.busy": "2025-08-27T16:04:37.505135Z",
     "iopub.status.idle": "2025-08-27T17:52:39.186658Z",
     "shell.execute_reply": "2025-08-27T17:52:39.185692Z"
    },
    "papermill": {
     "duration": 6481.68586,
     "end_time": "2025-08-27T17:52:39.187909",
     "exception": false,
     "start_time": "2025-08-27T16:04:37.502049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1756310704.516624      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1756310714.013869      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,384</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">198,272</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">258</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │        \u001b[38;5;34m32,384\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │        \u001b[38;5;34m32,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │       \u001b[38;5;34m198,272\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m258\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">263,434</span> (1.00 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m263,434\u001b[0m (1.00 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">263,174</span> (1.00 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m263,174\u001b[0m (1.00 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">260</span> (1.02 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m260\u001b[0m (1.02 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1756310724.887085      56 service.cc:148] XLA service 0x7b7a88016e90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1756310724.888229      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1756310728.353559      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 14.73260, saving model to models/best_model_full.keras\n",
      "4375/4375 - 41s - 9ms/step - loss: 74.5300 - mae: 5.8749 - val_loss: 14.7326 - val_mae: 2.9760 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 14.73260 to 5.98851, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 10.8622 - mae: 2.5167 - val_loss: 5.9885 - val_mae: 1.8844 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 5.98851 to 5.06182, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 5.7805 - mae: 1.8359 - val_loss: 5.0618 - val_mae: 1.7606 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 5.06182 to 2.73350, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 4.7440 - mae: 1.6073 - val_loss: 2.7335 - val_mae: 1.2760 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss did not improve from 2.73350\n",
      "4375/4375 - 27s - 6ms/step - loss: 3.9198 - mae: 1.4569 - val_loss: 3.2752 - val_mae: 1.4182 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 2.73350 to 1.62699, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.7323 - mae: 1.2167 - val_loss: 1.6270 - val_mae: 0.9902 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss improved from 1.62699 to 1.31630, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.1812 - mae: 1.0998 - val_loss: 1.3163 - val_mae: 0.9043 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss did not improve from 1.31630\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.0788 - mae: 1.0334 - val_loss: 1.4748 - val_mae: 0.9604 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss improved from 1.31630 to 1.13446, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.2855 - mae: 0.9902 - val_loss: 1.1345 - val_mae: 0.8191 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss did not improve from 1.13446\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.4464 - mae: 0.8882 - val_loss: 1.2414 - val_mae: 0.8664 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 1.13446 to 0.67672, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.0711 - mae: 0.7868 - val_loss: 0.6767 - val_mae: 0.6489 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 0.67672\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.5832 - mae: 0.8293 - val_loss: 0.6772 - val_mae: 0.6447 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 0.67672\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.9500 - mae: 0.7317 - val_loss: 0.8574 - val_mae: 0.7052 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss improved from 0.67672 to 0.64159, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.3180 - mae: 0.7546 - val_loss: 0.6416 - val_mae: 0.6165 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss improved from 0.64159 to 0.63266, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.2095 - mae: 0.9905 - val_loss: 0.6327 - val_mae: 0.6132 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 0.63266\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2864 - mae: 0.7704 - val_loss: 1.6532 - val_mae: 0.9699 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 0.63266\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4617 - mae: 0.8292 - val_loss: 1.0210 - val_mae: 0.7765 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 0.63266\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2519 - mae: 0.7428 - val_loss: 0.9598 - val_mae: 0.7559 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 0.63266\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.0279 - mae: 0.7500 - val_loss: 1.2874 - val_mae: 0.8696 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 0.63266\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.7465 - mae: 0.8927 - val_loss: 1.9028 - val_mae: 1.0568 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 0.63266\n",
      "4375/4375 - 28s - 6ms/step - loss: 2.5094 - mae: 0.9898 - val_loss: 1.5693 - val_mae: 0.9441 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 0.63266\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.1174 - mae: 0.7832 - val_loss: 1.9798 - val_mae: 1.0787 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss did not improve from 0.63266\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.4106 - mae: 0.8767 - val_loss: 1.1374 - val_mae: 0.8099 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 0.63266\n",
      "4375/4375 - 27s - 6ms/step - loss: 2.1262 - mae: 0.8976 - val_loss: 143.9502 - val_mae: 9.1324 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 0.63266\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2421 - mae: 0.7990 - val_loss: 1.6884 - val_mae: 0.9670 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss did not improve from 0.63266\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.0853 - mae: 0.7610 - val_loss: 2.2159 - val_mae: 1.1504 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss improved from 0.63266 to 0.61096, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.9534 - mae: 0.6715 - val_loss: 0.6110 - val_mae: 0.6028 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss improved from 0.61096 to 0.49106, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.6146 - mae: 0.7638 - val_loss: 0.4911 - val_mae: 0.5446 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.49106\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.5755 - mae: 0.5792 - val_loss: 2.9971 - val_mae: 1.3038 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss improved from 0.49106 to 0.34777, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.8583 - mae: 0.6241 - val_loss: 0.3478 - val_mae: 0.4619 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.2896 - mae: 0.6985 - val_loss: 0.4962 - val_mae: 0.5442 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.5453 - mae: 0.5672 - val_loss: 1.4944 - val_mae: 0.9047 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.5000 - mae: 0.7796 - val_loss: 0.6493 - val_mae: 0.6260 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.5086 - mae: 0.5523 - val_loss: 0.4615 - val_mae: 0.5397 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.34777\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2907 - mae: 0.6845 - val_loss: 0.4544 - val_mae: 0.5253 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.34777\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.3314 - mae: 0.6531 - val_loss: 2.6369 - val_mae: 1.1918 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.0582 - mae: 0.6908 - val_loss: 0.4265 - val_mae: 0.5154 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.3314 - mae: 0.7426 - val_loss: 0.6136 - val_mae: 0.6103 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.5890 - mae: 0.5858 - val_loss: 0.5210 - val_mae: 0.5648 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.4193 - mae: 0.7215 - val_loss: 0.5563 - val_mae: 0.5949 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.34777\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.2139 - mae: 0.6726 - val_loss: 0.9129 - val_mae: 0.6679 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.7410 - mae: 0.5881 - val_loss: 0.3705 - val_mae: 0.4775 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.0851 - mae: 0.6953 - val_loss: 1.0466 - val_mae: 0.8095 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.4482 - mae: 0.5174 - val_loss: 0.4736 - val_mae: 0.5011 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.3400 - mae: 0.7219 - val_loss: 0.4014 - val_mae: 0.4958 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.34777\n",
      "4375/4375 - 27s - 6ms/step - loss: 1.1763 - mae: 0.6718 - val_loss: 1.0605 - val_mae: 0.7654 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.34777\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.5535 - mae: 0.5597 - val_loss: 0.3729 - val_mae: 0.4761 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.6657 - mae: 0.5842 - val_loss: 0.4364 - val_mae: 0.5226 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.5561 - mae: 0.7877 - val_loss: 0.4926 - val_mae: 0.5491 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.34777\n",
      "4375/4375 - 28s - 6ms/step - loss: 1.1042 - mae: 0.6958 - val_loss: 0.5337 - val_mae: 0.5777 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss improved from 0.34777 to 0.24968, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.2891 - mae: 0.4179 - val_loss: 0.2497 - val_mae: 0.3873 - learning_rate: 1.0000e-03\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss improved from 0.24968 to 0.18134, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.2064 - mae: 0.3546 - val_loss: 0.1813 - val_mae: 0.3336 - learning_rate: 1.0000e-03\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss improved from 0.18134 to 0.14576, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.1586 - mae: 0.3119 - val_loss: 0.1458 - val_mae: 0.2991 - learning_rate: 1.0000e-03\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss improved from 0.14576 to 0.12324, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.1296 - mae: 0.2820 - val_loss: 0.1232 - val_mae: 0.2752 - learning_rate: 1.0000e-03\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss improved from 0.12324 to 0.10884, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.1098 - mae: 0.2599 - val_loss: 0.1088 - val_mae: 0.2573 - learning_rate: 1.0000e-03\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss improved from 0.10884 to 0.10400, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0969 - mae: 0.2440 - val_loss: 0.1040 - val_mae: 0.2525 - learning_rate: 1.0000e-03\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss improved from 0.10400 to 0.09115, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0873 - mae: 0.2319 - val_loss: 0.0911 - val_mae: 0.2354 - learning_rate: 1.0000e-03\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss improved from 0.09115 to 0.08202, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0789 - mae: 0.2201 - val_loss: 0.0820 - val_mae: 0.2238 - learning_rate: 1.0000e-03\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.08202 to 0.07707, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0728 - mae: 0.2117 - val_loss: 0.0771 - val_mae: 0.2169 - learning_rate: 1.0000e-03\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss improved from 0.07707 to 0.07565, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0683 - mae: 0.2050 - val_loss: 0.0756 - val_mae: 0.2143 - learning_rate: 1.0000e-03\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.07565 to 0.06905, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0636 - mae: 0.1981 - val_loss: 0.0690 - val_mae: 0.2049 - learning_rate: 1.0000e-03\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss improved from 0.06905 to 0.06702, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0604 - mae: 0.1930 - val_loss: 0.0670 - val_mae: 0.2021 - learning_rate: 1.0000e-03\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss improved from 0.06702 to 0.06356, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0574 - mae: 0.1881 - val_loss: 0.0636 - val_mae: 0.1955 - learning_rate: 1.0000e-03\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss improved from 0.06356 to 0.06203, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0544 - mae: 0.1833 - val_loss: 0.0620 - val_mae: 0.1931 - learning_rate: 1.0000e-03\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss improved from 0.06203 to 0.05983, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0521 - mae: 0.1793 - val_loss: 0.0598 - val_mae: 0.1899 - learning_rate: 1.0000e-03\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.05983\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0497 - mae: 0.1753 - val_loss: 0.0607 - val_mae: 0.1924 - learning_rate: 1.0000e-03\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss improved from 0.05983 to 0.05479, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0472 - mae: 0.1709 - val_loss: 0.0548 - val_mae: 0.1818 - learning_rate: 1.0000e-03\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss improved from 0.05479 to 0.05059, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0455 - mae: 0.1676 - val_loss: 0.0506 - val_mae: 0.1750 - learning_rate: 1.0000e-03\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.05059\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0436 - mae: 0.1640 - val_loss: 0.0529 - val_mae: 0.1786 - learning_rate: 1.0000e-03\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.05059\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0420 - mae: 0.1611 - val_loss: 0.0519 - val_mae: 0.1775 - learning_rate: 1.0000e-03\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss improved from 0.05059 to 0.04918, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0403 - mae: 0.1579 - val_loss: 0.0492 - val_mae: 0.1725 - learning_rate: 1.0000e-03\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss improved from 0.04918 to 0.04912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0394 - mae: 0.1561 - val_loss: 0.0491 - val_mae: 0.1726 - learning_rate: 1.0000e-03\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss improved from 0.04912 to 0.04729, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0384 - mae: 0.1541 - val_loss: 0.0473 - val_mae: 0.1683 - learning_rate: 1.0000e-03\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss improved from 0.04729 to 0.04424, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0379 - mae: 0.1529 - val_loss: 0.0442 - val_mae: 0.1632 - learning_rate: 1.0000e-03\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.04424\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0368 - mae: 0.1512 - val_loss: 0.0516 - val_mae: 0.1765 - learning_rate: 1.0000e-03\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.04424\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0364 - mae: 0.1502 - val_loss: 0.0451 - val_mae: 0.1651 - learning_rate: 1.0000e-03\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss improved from 0.04424 to 0.04379, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0360 - mae: 0.1492 - val_loss: 0.0438 - val_mae: 0.1625 - learning_rate: 1.0000e-03\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.04379\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0348 - mae: 0.1468 - val_loss: 0.0461 - val_mae: 0.1661 - learning_rate: 1.0000e-03\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.04379\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0346 - mae: 0.1463 - val_loss: 0.0461 - val_mae: 0.1668 - learning_rate: 1.0000e-03\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss improved from 0.04379 to 0.04231, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0339 - mae: 0.1448 - val_loss: 0.0423 - val_mae: 0.1592 - learning_rate: 1.0000e-03\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: val_loss improved from 0.04231 to 0.04225, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0334 - mae: 0.1437 - val_loss: 0.0422 - val_mae: 0.1603 - learning_rate: 1.0000e-03\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.04225\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0327 - mae: 0.1422 - val_loss: 0.0453 - val_mae: 0.1661 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss improved from 0.04225 to 0.04130, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0323 - mae: 0.1416 - val_loss: 0.0413 - val_mae: 0.1587 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.04130 to 0.04118, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0319 - mae: 0.1404 - val_loss: 0.0412 - val_mae: 0.1574 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.04118 to 0.04108, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0316 - mae: 0.1399 - val_loss: 0.0411 - val_mae: 0.1576 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.04108 to 0.03909, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0314 - mae: 0.1392 - val_loss: 0.0391 - val_mae: 0.1533 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.03909 to 0.03892, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0307 - mae: 0.1380 - val_loss: 0.0389 - val_mae: 0.1529 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss did not improve from 0.03892\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0307 - mae: 0.1382 - val_loss: 0.0431 - val_mae: 0.1603 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss improved from 0.03892 to 0.03835, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0309 - mae: 0.1378 - val_loss: 0.0383 - val_mae: 0.1521 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.03835 to 0.03783, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0301 - mae: 0.1366 - val_loss: 0.0378 - val_mae: 0.1509 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss did not improve from 0.03783\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0303 - mae: 0.1370 - val_loss: 0.0381 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss did not improve from 0.03783\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0303 - mae: 0.1370 - val_loss: 0.0384 - val_mae: 0.1527 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss did not improve from 0.03783\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0298 - mae: 0.1360 - val_loss: 0.0451 - val_mae: 0.1668 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.03783 to 0.03617, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0304 - mae: 0.1365 - val_loss: 0.0362 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss did not improve from 0.03617\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0294 - mae: 0.1346 - val_loss: 0.0411 - val_mae: 0.1578 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss did not improve from 0.03617\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0292 - mae: 0.1342 - val_loss: 0.0373 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss did not improve from 0.03617\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0293 - mae: 0.1346 - val_loss: 0.0377 - val_mae: 0.1501 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss did not improve from 0.03617\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0288 - mae: 0.1336 - val_loss: 0.0399 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.03617\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0290 - mae: 0.1337 - val_loss: 0.0433 - val_mae: 0.1631 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss did not improve from 0.03617\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0288 - mae: 0.1334 - val_loss: 0.0426 - val_mae: 0.1605 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss did not improve from 0.03617\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0286 - mae: 0.1329 - val_loss: 0.0365 - val_mae: 0.1484 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss did not improve from 0.03617\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0284 - mae: 0.1324 - val_loss: 0.0365 - val_mae: 0.1472 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss did not improve from 0.03617\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0281 - mae: 0.1319 - val_loss: 0.0374 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss improved from 0.03617 to 0.03490, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0284 - mae: 0.1322 - val_loss: 0.0349 - val_mae: 0.1447 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss did not improve from 0.03490\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0282 - mae: 0.1318 - val_loss: 0.0386 - val_mae: 0.1514 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss did not improve from 0.03490\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0282 - mae: 0.1319 - val_loss: 0.0357 - val_mae: 0.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.03490\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0277 - mae: 0.1308 - val_loss: 0.0414 - val_mae: 0.1581 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss did not improve from 0.03490\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0277 - mae: 0.1307 - val_loss: 0.0364 - val_mae: 0.1483 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.03490\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0280 - mae: 0.1313 - val_loss: 0.0359 - val_mae: 0.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss did not improve from 0.03490\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0276 - mae: 0.1307 - val_loss: 0.0398 - val_mae: 0.1556 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.03490 to 0.03471, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0281 - mae: 0.1307 - val_loss: 0.0347 - val_mae: 0.1444 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.03471 to 0.03414, saving model to models/best_model_full.keras\n",
      "4375/4375 - 42s - 10ms/step - loss: 0.0268 - mae: 0.1289 - val_loss: 0.0341 - val_mae: 0.1425 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.03414\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0279 - mae: 0.1312 - val_loss: 0.0391 - val_mae: 0.1535 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.03414\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0277 - mae: 0.1307 - val_loss: 0.0383 - val_mae: 0.1528 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.03414\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0275 - mae: 0.1303 - val_loss: 0.0343 - val_mae: 0.1446 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.03414\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0277 - mae: 0.1304 - val_loss: 0.0381 - val_mae: 0.1514 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss did not improve from 0.03414\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0275 - mae: 0.1303 - val_loss: 0.0395 - val_mae: 0.1547 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.03414\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0278 - mae: 0.1308 - val_loss: 0.0381 - val_mae: 0.1519 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss did not improve from 0.03414\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0278 - mae: 0.1308 - val_loss: 0.0369 - val_mae: 0.1497 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.03414\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0278 - mae: 0.1309 - val_loss: 0.0408 - val_mae: 0.1577 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss did not improve from 0.03414\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0279 - mae: 0.1310 - val_loss: 0.0354 - val_mae: 0.1464 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.03414 to 0.03300, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0276 - mae: 0.1306 - val_loss: 0.0330 - val_mae: 0.1409 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.03300\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0276 - mae: 0.1303 - val_loss: 0.0396 - val_mae: 0.1554 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.03300\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0277 - mae: 0.1307 - val_loss: 0.0370 - val_mae: 0.1501 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.03300\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0276 - mae: 0.1304 - val_loss: 0.0379 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.03300 to 0.03298, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0279 - mae: 0.1310 - val_loss: 0.0330 - val_mae: 0.1417 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss did not improve from 0.03298\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0277 - mae: 0.1307 - val_loss: 0.0381 - val_mae: 0.1506 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.03298\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0281 - mae: 0.1314 - val_loss: 0.0366 - val_mae: 0.1474 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.03298\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0278 - mae: 0.1307 - val_loss: 0.0377 - val_mae: 0.1513 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss improved from 0.03298 to 0.03286, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0282 - mae: 0.1318 - val_loss: 0.0329 - val_mae: 0.1395 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0281 - mae: 0.1314 - val_loss: 0.0339 - val_mae: 0.1425 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0282 - mae: 0.1313 - val_loss: 0.0350 - val_mae: 0.1443 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0279 - mae: 0.1311 - val_loss: 0.0355 - val_mae: 0.1464 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0280 - mae: 0.1313 - val_loss: 0.0364 - val_mae: 0.1480 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0281 - mae: 0.1310 - val_loss: 0.0386 - val_mae: 0.1528 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0283 - mae: 0.1317 - val_loss: 0.0358 - val_mae: 0.1490 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0278 - mae: 0.1307 - val_loss: 0.0374 - val_mae: 0.1505 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0281 - mae: 0.1310 - val_loss: 0.0360 - val_mae: 0.1463 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0279 - mae: 0.1309 - val_loss: 0.0368 - val_mae: 0.1480 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0278 - mae: 0.1302 - val_loss: 0.0382 - val_mae: 0.1520 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0280 - mae: 0.1312 - val_loss: 0.0370 - val_mae: 0.1502 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0284 - mae: 0.1320 - val_loss: 0.0436 - val_mae: 0.1629 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0279 - mae: 0.1306 - val_loss: 0.0376 - val_mae: 0.1521 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0284 - mae: 0.1320 - val_loss: 0.0405 - val_mae: 0.1575 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0282 - mae: 0.1313 - val_loss: 0.0376 - val_mae: 0.1504 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0283 - mae: 0.1317 - val_loss: 0.0362 - val_mae: 0.1487 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0283 - mae: 0.1315 - val_loss: 0.0365 - val_mae: 0.1489 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0281 - mae: 0.1313 - val_loss: 0.0360 - val_mae: 0.1468 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0284 - mae: 0.1319 - val_loss: 0.0369 - val_mae: 0.1479 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.03286\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0286 - mae: 0.1322 - val_loss: 0.0362 - val_mae: 0.1470 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss improved from 0.03286 to 0.01954, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0110 - mae: 0.0825 - val_loss: 0.0195 - val_mae: 0.1068 - learning_rate: 1.0000e-04\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss improved from 0.01954 to 0.01903, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0094 - mae: 0.0766 - val_loss: 0.0190 - val_mae: 0.1053 - learning_rate: 1.0000e-04\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss improved from 0.01903 to 0.01879, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0089 - mae: 0.0744 - val_loss: 0.0188 - val_mae: 0.1045 - learning_rate: 1.0000e-04\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss improved from 0.01879 to 0.01833, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0085 - mae: 0.0730 - val_loss: 0.0183 - val_mae: 0.1033 - learning_rate: 1.0000e-04\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.01833\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0083 - mae: 0.0721 - val_loss: 0.0186 - val_mae: 0.1042 - learning_rate: 1.0000e-04\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.01833\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0082 - mae: 0.0715 - val_loss: 0.0186 - val_mae: 0.1039 - learning_rate: 1.0000e-04\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.01833\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0080 - mae: 0.0707 - val_loss: 0.0185 - val_mae: 0.1038 - learning_rate: 1.0000e-04\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss improved from 0.01833 to 0.01832, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0079 - mae: 0.0704 - val_loss: 0.0183 - val_mae: 0.1033 - learning_rate: 1.0000e-04\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.01832\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0696 - val_loss: 0.0186 - val_mae: 0.1041 - learning_rate: 1.0000e-04\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss improved from 0.01832 to 0.01832, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0077 - mae: 0.0693 - val_loss: 0.0183 - val_mae: 0.1030 - learning_rate: 1.0000e-04\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.01832 to 0.01816, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0076 - mae: 0.0688 - val_loss: 0.0182 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss improved from 0.01816 to 0.01807, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0075 - mae: 0.0685 - val_loss: 0.0181 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0074 - mae: 0.0681 - val_loss: 0.0183 - val_mae: 0.1029 - learning_rate: 1.0000e-04\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.01807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0073 - mae: 0.0678 - val_loss: 0.0185 - val_mae: 0.1034 - learning_rate: 1.0000e-04\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0073 - mae: 0.0675 - val_loss: 0.0183 - val_mae: 0.1030 - learning_rate: 1.0000e-04\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0072 - mae: 0.0671 - val_loss: 0.0184 - val_mae: 0.1033 - learning_rate: 1.0000e-04\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0072 - mae: 0.0669 - val_loss: 0.0184 - val_mae: 0.1032 - learning_rate: 1.0000e-04\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0071 - mae: 0.0666 - val_loss: 0.0182 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0070 - mae: 0.0665 - val_loss: 0.0186 - val_mae: 0.1038 - learning_rate: 1.0000e-04\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss did not improve from 0.01807\n",
      "4375/4375 - 26s - 6ms/step - loss: 0.0070 - mae: 0.0662 - val_loss: 0.0185 - val_mae: 0.1034 - learning_rate: 1.0000e-04\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0069 - mae: 0.0660 - val_loss: 0.0183 - val_mae: 0.1030 - learning_rate: 1.0000e-04\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0069 - mae: 0.0657 - val_loss: 0.0184 - val_mae: 0.1029 - learning_rate: 1.0000e-04\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0069 - mae: 0.0656 - val_loss: 0.0181 - val_mae: 0.1023 - learning_rate: 1.0000e-04\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0068 - mae: 0.0654 - val_loss: 0.0186 - val_mae: 0.1037 - learning_rate: 1.0000e-04\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0068 - mae: 0.0652 - val_loss: 0.0182 - val_mae: 0.1023 - learning_rate: 1.0000e-04\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0067 - mae: 0.0650 - val_loss: 0.0182 - val_mae: 0.1025 - learning_rate: 1.0000e-04\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.01807\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0067 - mae: 0.0648 - val_loss: 0.0185 - val_mae: 0.1034 - learning_rate: 1.0000e-04\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0067 - mae: 0.0646 - val_loss: 0.0181 - val_mae: 0.1021 - learning_rate: 1.0000e-04\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0066 - mae: 0.0645 - val_loss: 0.0184 - val_mae: 0.1027 - learning_rate: 1.0000e-04\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0066 - mae: 0.0642 - val_loss: 0.0182 - val_mae: 0.1024 - learning_rate: 1.0000e-04\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.01807\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0066 - mae: 0.0642 - val_loss: 0.0182 - val_mae: 0.1022 - learning_rate: 1.0000e-04\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss improved from 0.01807 to 0.01745, saving model to models/best_model_full.keras\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0056 - mae: 0.0590 - val_loss: 0.0174 - val_mae: 0.1000 - learning_rate: 1.0000e-05\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss improved from 0.01745 to 0.01740, saving model to models/best_model_full.keras\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0055 - mae: 0.0584 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0583 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-05\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0582 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0054 - mae: 0.0581 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0174 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0580 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0579 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0054 - mae: 0.0578 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0053 - mae: 0.0578 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0175 - val_mae: 0.0998 - learning_rate: 1.0000e-05\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0053 - mae: 0.0577 - val_loss: 0.0175 - val_mae: 0.0999 - learning_rate: 1.0000e-05\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0571 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0175 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-06\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0570 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-06\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0997 - learning_rate: 1.0000e-07\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.01740\n",
      "4375/4375 - 28s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss did not improve from 0.01740\n",
      "4375/4375 - 27s - 6ms/step - loss: 0.0052 - mae: 0.0569 - val_loss: 0.0174 - val_mae: 0.0996 - learning_rate: 1.0000e-07\n",
      "Epoch 233: early stopping\n",
      "Restoring model weights from the end of the best epoch: 183.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.1574 m\n",
      "Median positioning error: 0.1386 m\n",
      "90th percentile error: 0.2784 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACFSElEQVR4nOzdd3gU5fr/8c/sbnollBQNTUE6oggiFlQUUBEVC4iKFQvgF7v8VOxiOx4Oonj0IOgRRFFBjgUEBCxUwYIKCEoVQmjpfXd+f2x2yZJCgM3uTni/rmuvZGeenb0nG8ntPffzjGGapikAAAAAAAAggGzBDgAAAAAAAADHHopSAAAAAAAACDiKUgAAAAAAAAg4ilIAAAAAAAAIOIpSAAAAAAAACDiKUgAAAAAAAAg4ilIAAAAAAAAIOIpSAAAAAAAACDiKUgAAAAAAAAg4ilIAjimGYeiJJ5447Ndt3rxZhmFoypQpfo8JAAAgmMiPAAQLRSkAATdlyhQZhiHDMPTdd99V2m+aptLT02UYhi655JIgRHjkFi1aJMMw9NFHHwU7FAAAYCHHQn5kGIbee++9Ksf07NlThmGoQ4cOVe53Op1KS0uTYRj68ssvqxzzxBNPeN+nqkdGRobfzgmAfziCHQCAY1dkZKSmTZumM88802f74sWLtX37dkVERAQpMgAAgOCoz/mR59yuu+46n+2bN2/WkiVLFBkZWe1rv/76a+3cuVPNmzfX1KlT1a9fv2rHTpw4UbGxsZW2JyYmHnHsAOoGRSkAQXPRRRdpxowZGj9+vByOA/8cTZs2Taeeeqr27NkTxOgAAAACrz7nRxdddJFmz56tPXv2qFGjRt7t06ZNU3Jyslq1aqX9+/dX+dr33ntPp5xyioYOHar/9//+n/Lz8xUTE1Pl2CuvvNLn+ABCF9P3AATN4MGDtXfvXs2bN8+7raSkRB999JGuvfbaKl+Tn5+v++67T+np6YqIiNBJJ52kl19+WaZp+owrLi7WPffco8aNGysuLk6XXnqptm/fXuUx//77b918881KTk5WRESE2rdvr7ffftt/J1qFv/76S1dddZWSkpIUHR2t008/XZ9//nmlca+++qrat2+v6OhoNWjQQF27dtW0adO8+3NzczVq1Cg1b95cERERatKkiS644AKtXr26TuMHAAB1oz7nRwMGDFBERIRmzJjhs33atGm6+uqrZbfbq3xdYWGhZs6cqUGDBunqq69WYWGhPv3006OKBUBooCgFIGiaN2+uHj166P333/du+/LLL5Wdna1BgwZVGm+api699FL985//VN++ffXKK6/opJNO0gMPPKB7773XZ+ytt96qcePG6cILL9Tzzz+vsLAwXXzxxZWOuWvXLp1++umaP3++RowYoX/961868cQTdcstt2jcuHF+P2fPe55xxhmaO3eu7rrrLj377LMqKirSpZdeqpkzZ3rHvfXWW7r77rvVrl07jRs3Tk8++aROPvlkLV++3Dvmjjvu0MSJEzVw4EC9/vrruv/++xUVFaW1a9fWSewAAKBu1ef8KDo6WgMGDPA5t59//lm//fZbtQU3SZo9e7by8vI0aNAgpaSkqFevXpo6dWq14/ft26c9e/b4PLKyso44bgB1yASAAJs8ebIpyVy5cqU5YcIEMy4uziwoKDBN0zSvuuoq89xzzzVN0zSbNWtmXnzxxd7XzZo1y5RkPvPMMz7Hu/LKK03DMMyNGzeapmmaP/30kynJvOuuu3zGXXvttaYk8/HHH/duu+WWW8zU1FRzz549PmMHDRpkJiQkeOPatGmTKcmcPHlyjee2cOFCU5I5Y8aMaseMGjXKlGR+++233m25ublmixYtzObNm5tOp9M0TdMcMGCA2b59+xrfLyEhwRw+fHiNYwAAQOg7VvKjzz77zDQMw9y6datpmqb5wAMPmC1btjRN0zTPOeecKnOfSy65xOzZs6f3+Ztvvmk6HA4zMzPTZ9zjjz9uSqrycdJJJ9UYI4DgoFMKQFB5WrA/++wz5ebm6rPPPqv2StkXX3whu92uu+++22f7fffdJ9M0vXdi+eKLLySp0rhRo0b5PDdNUx9//LH69+8v0zR9rqb16dNH2dnZdTIN7osvvlC3bt18FjCNjY3VsGHDtHnzZv3++++S3Itxbt++XStXrqz2WImJiVq+fLl27Njh9zgBAEBw1Of86MILL1RSUpKmT58u0zQ1ffp0DR48uNrxe/fu1dy5c33GDBw4UIZh6MMPP6zyNR9//LHmzZvn85g8efIRxwyg7rDQOYCgaty4sXr37q1p06apoKBATqdTV155ZZVjt2zZorS0NMXFxflsb9u2rXe/56vNZtMJJ5zgM+6kk07yeb57925lZWXpzTff1Jtvvlnle2ZmZh7RedVky5Yt6t69e6XtFc+jQ4cOeuihhzR//nx169ZNJ554oi688EJde+216tmzp/c1L774ooYOHar09HSdeuqpuuiii3TDDTeoZcuWfo8bAAAERn3Oj8LCwnTVVVdp2rRp6tatm7Zt21bj1L0PPvhApaWl6tKlizZu3Ojd3r17d02dOlXDhw+v9Jqzzz6bhc4Bi6AoBSDorr32Wt12223KyMhQv379Ana7XpfLJUm67rrrNHTo0CrHdOrUKSCxVKVt27Zav369PvvsM82ZM0cff/yxXn/9dY0ZM0ZPPvmkJPeV1LPOOkszZ87UV199pZdeekkvvPCCPvnkkxpvlQwAAEJbfc6Prr32Wr3xxht64okn1LlzZ7Vr167asZ61oypelKvor7/+4mIcYGEUpQAE3eWXX67bb79dy5Yt0wcffFDtuGbNmmn+/PnKzc31uRq4bt06737PV5fLpT///NPn6t/69et9jue584zT6VTv3r39eUo1atasWaVYpMrnIUkxMTG65pprdM0116ikpERXXHGFnn32WY0ePVqRkZGSpNTUVN1111266667lJmZqVNOOUXPPvssRSkAACysPudHZ555ppo2bapFixbphRdeqHbcpk2btGTJEo0YMULnnHOOzz6Xy6Xrr79e06ZN06OPPloncQKoe6wpBSDoYmNjNXHiRD3xxBPq379/teMuuugiOZ1OTZgwwWf7P//5TxmG4S3CeL6OHz/eZ9zBd4ux2+0aOHCgPv74Y/3666+V3m/37t1HcjqHdNFFF2nFihVaunSpd1t+fr7efPNNNW/e3Hu1cO/evT6vCw8PV7t27WSapkpLS+V0OpWdne0zpkmTJkpLS1NxcXGdxA4AAAKjPudHhmFo/Pjxevzxx3X99ddXO87TJfXggw/qyiuv9HlcffXVOuecc2q8Cx+A0EenFICQUF17eEX9+/fXueeeq0ceeUSbN29W586d9dVXX+nTTz/VqFGjvGsknHzyyRo8eLBef/11ZWdn64wzztCCBQt81iHweP7557Vw4UJ1795dt912m9q1a6d9+/Zp9erVmj9/vvbt23dE5/Pxxx97r1AefJ4PP/yw3n//ffXr10933323kpKS9M4772jTpk36+OOPZbO5rxdceOGFSklJUc+ePZWcnKy1a9dqwoQJuvjiixUXF6esrCwdf/zxuvLKK9W5c2fFxsZq/vz5Wrlypf7xj38cUdwAACB01Lf8qKIBAwZowIABNY6ZOnWqTj75ZKWnp1e5/9JLL9XIkSO1evVqnXLKKd7tH330kWJjYyuNv+CCC5ScnHx0gQPwK4pSACzDZrNp9uzZGjNmjD744ANNnjxZzZs310svvaT77rvPZ+zbb7+txo0ba+rUqZo1a5bOO+88ff7555WSmuTkZK1YsUJPPfWUPvnkE73++utq2LCh2rdvX2M7+aFMnz69yu29evXSmWeeqSVLluihhx7Sq6++qqKiInXq1En/+9//dPHFF3vH3n777Zo6dapeeeUV5eXl6fjjj9fdd9/tbVGPjo7WXXfdpa+++kqffPKJXC6XTjzxRL3++uu68847jzh2AABgHVbKjw7H6tWrtW7dOj322GPVjunfv79Gjhyp9957z6coVV0etHDhQopSQIgxTNM0gx0EAAAAAAAAji2sKQUAAAAAAICAoygFAAAAAACAgKMoBQAAAAAAgICjKAUAAAAAAICAoygFAAAAAACAgKMoBQAAAAAAgIBzBDuAUOByubRjxw7FxcXJMIxghwMAACzENE3l5uYqLS1NNlv9uN5HbgQAAI5GbfMjilKSduzYofT09GCHAQAALGzbtm06/vjjgx2GX5AbAQAAfzhUfkRRSlJcXJwk9w8rPj4+yNEAAAArycnJUXp6ujefqA/IjQAAwNGobX5EUUrytqXHx8eTeAEAgCNSn6a5kRsBAAB/OFR+VD8WPgAAAAAAAIClUJQCAAAAAABAwFGUAgAAAAAAQMCxphQAoF5xOp0qLS0NdhioZ8LDw2u8nTEAAKHK5XKppKQk2GGgngkLC5Pdbj/q41CUAgDUC6ZpKiMjQ1lZWcEOBfWQzWZTixYtFB4eHuxQAACotZKSEm3atEkulyvYoaAeSkxMVEpKylHd7IWiFACgXvAUpJo0aaLo6Oh6dSc0BJfL5dKOHTu0c+dONW3alN8tAIAlmKapnTt3ym63Kz09nY5f+I1pmiooKFBmZqYkKTU19YiPRVEKAGB5TqfTW5Bq2LBhsMNBPdS4cWPt2LFDZWVlCgsLC3Y4AAAcUllZmQoKCpSWlqbo6Ohgh4N6JioqSpKUmZmpJk2aHPFUPkqlAADL86whRcKFuuKZtud0OoMcCQAAteP5m8XUc9QVT+59NOu5UpQCANQbTKtCXeF3CwBgVfwNQ13xx+8WRSkAAAAAAAAEHEUp1Gz3H9KkC6WN84MdCQCgFpo3b65x48bVevyiRYtkGAZ3LQQOx++fSm/3lbK3BzsSAEAtkB+FLopSqNmGudK25dKaj4IdCQDUK4Zh1Ph44oknjui4K1eu1LBhw2o9/owzztDOnTuVkJBwRO9XWyR3qFd+miZtXSr9tSjYkQBAvXKs5kcNGjRQUVGRz76VK1d6z7sqbdq0UUREhDIyMirt69WrV5U/vzvuuKNOzuNocPc91Mzl9P0KAPCLnTt3er//4IMPNGbMGK1fv967LTY21vu9aZpyOp1yOA79Z7tx48aHFUd4eLhSUlIO6zXAMY/8CADqxLGaH8XFxWnmzJkaPHiwd9ukSZPUtGlTbd26tdL47777ToWFhbryyiv1zjvv6KGHHqo05rbbbtNTTz3lsy0UbwpEpxRqZrp8vwIA/CIlJcX7SEhIkGEY3ufr1q1TXFycvvzyS5166qmKiIjQd999pz///FMDBgxQcnKyYmNjddppp2n+fN/p1Qe3pxuGof/85z+6/PLLFR0drVatWmn27Nne/Qd3ME2ZMkWJiYmaO3eu2rZtq9jYWPXt29cnSSwrK9Pdd9+txMRENWzYUA899JCGDh2qyy677Ih/Hvv379cNN9ygBg0aKDo6Wv369dOGDRu8+7ds2aL+/furQYMGiomJUfv27fXFF194XztkyBA1btxYUVFRatWqlSZPnnzEsQCH5M2PKEoBgD8dq/nR0KFD9fbbb3ufFxYWavr06Ro6dGiV4ydNmqRrr71W119/vc/rKoqOjvb5eaakpCg+Pv6QsQRaUItS33zzjfr376+0tDQZhqFZs2ZVO/aOO+6QYRiV5oHu27dPQ4YMUXx8vBITE3XLLbcoLy+vbgM/llCUAmBBpmmqoKQsKA/TNP12Hg8//LCef/55rV27Vp06dVJeXp4uuugiLViwQD/++KP69u2r/v37V3kFraInn3xSV199tX755RdddNFFGjJkiPbt21ft+IKCAr388sv673//q2+++UZbt27V/fff793/wgsvaOrUqZo8ebK+//575eTk1Pg3vDZuvPFG/fDDD5o9e7aWLl0q0zR10UUXeW8xPHz4cBUXF+ubb77RmjVr9MILL3ivlj722GP6/fff9eWXX2rt2rWaOHGiGjVqdFTxADXyFKPIjwBYCPmRr1DKj66//np9++233pg//vhjNW/eXKecckqlsbm5uZoxY4auu+46XXDBBcrOzta3335bq/cJRUGdvpefn6/OnTvr5ptv1hVXXFHtuJkzZ2rZsmVKS0urtG/IkCHauXOn5s2bp9LSUt10000aNmyYpk2bVpehHzs8/3iQdAGwkMJSp9qNmRuU9/79qT6KDvfPn9ennnpKF1xwgfd5UlKSOnfu7H3+9NNPa+bMmZo9e7ZGjBhR7XFuvPFGbzv4c889p/Hjx2vFihXq27dvleNLS0v1xhtv6IQTTpAkjRgxwqf9+9VXX9Xo0aN1+eWXS5ImTJjg7Vo6Ehs2bNDs2bP1/fff64wzzpAkTZ06Venp6Zo1a5auuuoqbd26VQMHDlTHjh0lSS1btvS+fuvWrerSpYu6du0qyX01FKhT3ot2/vufLACoa+RHvkIpP2rSpIn69eunKVOmaMyYMXr77bd18803Vzl2+vTpatWqldq3by9JGjRokCZNmqSzzjrLZ9zrr7+u//znPz7b/v3vf2vIkCG1iilQgtop1a9fPz3zzDPeD60qf//9t0aOHKmpU6cqLCzMZ9/atWs1Z84c/ec//1H37t115pln6tVXX9X06dO1Y8eOug7/2ECnFAAEjafI4pGXl6f7779fbdu2VWJiomJjY7V27dpDXgns1KmT9/uYmBjFx8crMzOz2vHR0dHehEuSUlNTveOzs7O1a9cudevWzbvfbrfr1FNPPaxzq2jt2rVyOBzq3r27d1vDhg110kknae3atZKku+++W88884x69uypxx9/XL/88ot37J133qnp06fr5JNP1oMPPqglS5YccSxArXDRDgCCpr7mRzfffLOmTJmiv/76S0uXLq22ePT222/ruuuu8z6/7rrrNGPGDOXm5vqMGzJkiH766Sefx6WXXlrreAIlpBc6d7lcuv766/XAAw94q4AVLV26VImJiT6/lL1795bNZtPy5ctrLHahlihKAbCgqDC7fn+qT9De219iYmJ8nt9///2aN2+eXn75ZZ144omKiorSlVdeqZKSkhqPc/BFHcMw5HJV/+96VeP92XZ/JG699Vb16dNHn3/+ub766iuNHTtW//jHPzRy5Ej169dPW7Zs0RdffKF58+bp/PPP1/Dhw/Xyyy8HNWbUY+RHACyI/MhXqOVH/fr107Bhw3TLLbeof//+atiwYaUxv//+u5YtW6YVK1b4LG7udDo1ffp03Xbbbd5tCQkJOvHEE/0WX10J6aLUCy+8IIfDobvvvrvK/RkZGWrSpInPNofDoaSkpCpvi+hRXFys4uJi7/OcnBz/BFwf0Z4OwIIMw/Bbi3go+f7773XjjTd6L7rk5eVp8+bNAY0hISFBycnJWrlypc4++2xJ7kRo9erVOvnkk4/omG3btlVZWZmWL1/unb63d+9erV+/Xu3atfOOS09P1x133KE77rhDo0eP1ltvvaWRI0dKct9VZ+jQoRo6dKjOOussPfDAAxSlUHcoSgGwIPKjuuOP/MjhcOiGG27Qiy++qC+//LLKMZMmTdLZZ5+t1157zWf75MmTNWnSJJ+ilFWE7G/kqlWr9K9//UurV6+WYRh+PfbYsWP15JNP+vWY9RZJFwCEjFatWumTTz5R//79ZRiGHnvssRqv6NWVkSNHauzYsTrxxBPVpk0bvfrqq9q/f3+t/l6vWbNGcXFx3ueGYahz584aMGCAbrvtNv373/9WXFycHn74YR133HEaMGCAJGnUqFHq16+fWrdurf3792vhwoVq27atJGnMmDE69dRT1b59exUXF+uzzz7z7gPqBPkRAISM+pAfeTz99NN64IEHquySKi0t1X//+1899dRT6tChg8++W2+9Va+88op+++037yyzgoKCSs06ERERatCgwRGcXd0J6ppSNfn222+VmZmppk2byuFwyOFwaMuWLbrvvvu8C5impKRUmvNZVlamffv2KSUlpdpjjx49WtnZ2d7Htm3b6vJUrI2kCwBCxiuvvKIGDRrojDPOUP/+/dWnT58q78pS1x566CENHjxYN9xwg3r06KHY2Fj16dNHkZGRh3zt2WefrS5dungfnrUWJk+erFNPPVWXXHKJevToIdM09cUXX3hb5Z1Op4YPH662bduqb9++at26tV5//XVJUnh4uEaPHq1OnTrp7LPPlt1u1/Tp0+vuBwB48iKXM7hxAADqRX7kER4erkaNGlVZyJo9e7b27t1b5TJFbdu2Vdu2bTVp0iTvtrfeekupqak+D8/C7qHEMIO9SEQ5wzA0c+ZMXXbZZZLcbfs7d+70GdOnTx9df/31uummm7yLn7Zr104//PCDN6n96quv1LdvX23fvr3Ku/VVJScnRwkJCcrOzlZ8fLxfz8vy5j0ufT9OOvEC6bqP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mpF0AUCdadOmjc444wxv2/XGjRv17bff6pZbbpEkOZ1OPf300+rYsaOSkpIUGxuruXPnauvWrbU6/tq1a5Wenu5NuCSpR48elcZ98MEH6tmzp1JSUhQbG6tHH3201u9R8b06d+7s097ds2dPuVwurV+/3rutffv2stvt3uepqanKzMw8rPeq+J7p6enegpQktWvXTomJiVq7dq0k6d5779Wtt96q3r176/nnn9eff/7pHXv33XfrmWeeUc+ePfX4448f0cKpOEaRHwFAnSE/Orz86Oabb9bkyZO1ePFi5efn66KLLqo0xul06p133tF1113n3XbddddpypQpcrl8/5Y98MAD+umnn3weXbt2rfU5Hy46pVAzki4AVhQW7b4iF6z3Pgy33HKLRo4cqddee02TJ0/WCSecoHPOOUeS9NJLL+lf//qXxo0bp44dOyomJkajRo1SSUmJ38JdunSphgwZoieffFJ9+vRRQkKCpk+frn/84x9+e4+KPFPnPAzDqJQM+dMTTzyha6+9Vp9//rm+/PJLPf7445o+fbouv/xy3XrrrerTp48+//xzffXVVxo7dqz+8Y9/1OlinqgnyI8AWBH5Ua1ZKT8aMmSIHnzwQT3xxBO6/vrr5XBULvPMnTtXf//9t6655hqf7U6nUwsWLNAFF1zg3daoUSOdeOKJR3AWR4ZOKdSMpAuAFRmGu0U8GI9arJdQ0dVXXy2bzaZp06bp3Xff1c033+xdP+H777/XgAEDdN1116lz585q2bKl/vjjj1ofu23bttq2bZt27tzp3bZs2TKfMUuWLFGzZs30yCOPqGvXrmrVqpW2bNniMyY8PFxOZ81r57Rt21Y///yz8vPzvdu+//572Ww2nXTSSbWO+XB4zm/btm3ebb///ruysrLUrl0777bWrVvrnnvu0VdffaUrrrhCkydP9u5LT0/XHXfcoU8++UT33Xef3nrrrTqJFfUMa24CsCLyI0n1Lz9KSkrSpZdeqsWLF+vmm2+ucsykSZM0aNCgSh1QgwYNqnbB80ChKIWaUZQCgDoVGxura665RqNHj9bOnTt14403eve1atVK8+bN05IlS7R27VrdfvvtPneWO5TevXurdevWGjp0qH7++Wd9++23euSRR3zGtGrVSlu3btX06dP1559/avz48Zo5c6bPmObNm2vTpk366aeftGfPHhUXF1d6ryFDhigyMlJDhw7Vr7/+qoULF2rkyJG6/vrrq1xs83A4nc5KSdTatWvVu3dvdezYUUOGDNHq1au1YsUK3XDDDTrnnHPUtWtXFRYWasSIEVq0aJG2bNmi77//XitXrlTbtm0lSaNGjdLcuXO1adMmrV69WgsXLvTuA2rkKUaRHwFAnSA/OjxTpkzRnj17vGtoVrR7927973//09ChQ9WhQwefxw033KBZs2Zp37593vG5ubnKyMjweeTk5Pgt1oNRlELNSLoAoM7dcsst2r9/v/r06eOzvsGjjz6qU045RX369FGvXr2UkpKiyy67rNbHtdlsmjlzpgoLC9WtWzfdeuutevbZZ33GXHrppbrnnns0YsQInXzyyVqyZIkee+wxnzEDBw5U3759de6556px48ZV3nY5Ojpac+fO1b59+3Taaafpyiuv1Pnnn68JEyYc3g+jCnl5eerSpYvPo3///jIMQ59++qkaNGigs88+W71791bLli31wQcfSJLsdrv27t2rG264Qa1bt9bVV1+tfv366cknn5TkLnYNHz5cbdu2Vd++fdW6dWu9/vrrRx1vKHA6nXrsscfUokULRUVF6YQTTtDTTz8tk84e/+CiHQDUOfKj2ouKilLDhg2r3OdZZP3888+vtO/8889XVFSU3nvvPe+2MWPGKDU11efx4IMP+jXeigyT7EQ5OTlKSEhQdna24uPjgx1OaHn/Wmn951JiU2nUmmBHAwBVKioq0qZNm9SiRQtFRkYGOxzUQzX9joViHvHcc8/plVde0TvvvKP27dvrhx9+0E033aRnn31Wd9999yFfH4rnFFKeTXXfxarjVdLA/wQ7GgCoEvkR6po/8iMWOkfNvFcCgxsGAACovSVLlmjAgAG6+OKLJbmnGLz//vtasWJFkCOrJ+iUAgDAL5i+h5qRdAEAYDlnnHGGFixY4F349eeff9Z3332nfv36BTmyesJVvrAt+REAAEeFTinUjKIUAACW8/DDDysnJ0dt2rSR3W6X0+nUs88+qyFDhlQ5vri42GeB1rpc0LReID8CAMAv6JRCzUi6AACwnA8//FBTp07VtGnTtHr1ar3zzjt6+eWX9c4771Q5fuzYsUpISPA+0tPTAxyxxZAfAQDgFxSlUDOSLgAALOeBBx7Qww8/rEGDBqljx466/vrrdc8992js2LFVjh89erSy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888/X5dffrnfgqsPvNP3LF2UckjOEpIuAADq0Jdffqm7775bd955p1q1ahXscOpcmN2iOVKl6XsWix8AgBByRJ1SkpSSkqIuXbpox44d2r59uySpW7duatOmjd+Cqw8se7tjiTUTAAAIoO+++065ubk69dRT1b17d02YMEF79uwJdlh1xjN9z7KdUp78yOUMXiwAAFjcERWlXC6XnnrqKSUkJKhZs2Zq1qyZEhMT9fTTT8tlxbWT6lC9WFOK6XsAANS5008/XW+99ZZ27typ22+/XdOnT1daWppcLpfmzZun3NzcYIfoV56FzkutduHOLC9CkR8BAHDUjqgo9cgjj2jChAl6/vnn9eOPP+rHH3/Uc889p1dffVWPPfaYv2O0NE9rurXXlKI9HQCAQImJidHNN9+s7777TmvWrNF9992n559/Xk2aNNGll14a7PD8JszbTW6xoo4nH7KxphQAAEfriIpS77zzjv7zn//ozjvvVKdOndSpUyfdddddeuuttzRlyhQ/h2htnk6pUqcp02pFHabvAQAQVCeddJJefPFFbd++XdOnT5dhGMEOyW88N4Ox/ppS5EcAABypI1rofN++fVWuHdWmTRvt27fvqIOqTzxrSkmSy5TsVsolvVcCSboAAKhrN9988yHHNGzYMACRBEaY3eJ332P6HgAAR+2IilKdO3fWhAkTNH78eJ/tEyZMUKdOnfwSWH3hqFCFKnO5ZPckMFZA0gUAQMBMmTJFzZo1U5cuXartrq5PnVLWL0px0Q4AgKN1REWpF198URdffLHmz5+vHj16SJKWLl2qbdu26YsvvvBrgFbnsB2YIVnmNBVxRD/xIGFNKQAAAubOO+/U+++/r02bNummm27Sddddp6SkpGCHVWcse4diilIAAPjNEa0pdc455+iPP/7Q5ZdfrqysLGVlZemKK67Qb7/9pv/+97/+jtHSfDulSLoAAEDVXnvtNe3cuVMPPvig/ve//yk9PV1XX3215s6da711KWvBunffIz8CAMBfjrhvJy0tTc8++6zPtp9//lmTJk3Sm2++edSB1Rf2Cm32lrsDH0kXAAABFRERocGDB2vw4MHasmWLpkyZorvuuktlZWX67bffFBsbG+wQ/SbMu9C5xfILTz5kJz8CAOBoHVGnFGrPZjPkWevccrc8lmehc9aUAgAg0Gw2mwzDkGmacjqdwQ7H78Is3ykV5vscAAAcNopSAeBpT2f6HgAAqElxcbHef/99XXDBBWrdurXWrFmjCRMmaOvWrfWqS0o6sMSB9RY65+7EAAD4C0WpAPAs5Mn0PQAAUJ277rpLqampev7553XJJZdo27ZtmjFjhi666CLZbEeXsj3//PMyDEOjRo3yT7B+EFZ+TpbrJHeVd62RHwEAcNQOa02pK664osb9WVlZRxNLvWW3WfVKIEUpAAAC5Y033lDTpk3VsmVLLV68WIsXL65y3CeffHJYx125cqX+/e9/q1OnTv4I02+8nVKWvWjH8gYAABytwypKJSQkHHL/DTfccFQB1UeeNROs1ynFmlIAAATKDTfcIKPCDVL8IS8vT0OGDNFbb72lZ555xq/HPlre5Q24aAcAwDHrsIpSkydPrqs46rUDnVJWK0qVJ1mGpyhlsfgBALCQKVOm+P2Yw4cP18UXX6zevXuHXFEq3HP3PavmR56ilKv+LUIPAECgHFZRCkeGNaUAAECgTZ8+XatXr9bKlSsPOba4uFjFxcXe5zk5OXUZmiTJUb6mVInlO6Uslt8BABBCQn6h87///lvXXXedGjZsqKioKHXs2FE//PCDd79pmhozZoxSU1MVFRWl3r17a8OGDUGMuDLPmgllLqsmXUzfAwDASrZt26b/+7//09SpUxUZGXnI8WPHjlVCQoL3kZ6eXucxOqzeKWXnoh0AAEcrpItS+/fvV8+ePRUWFqYvv/xSv//+u/7xj3+oQYMG3jEvvviixo8frzfeeEPLly9XTEyM+vTpo6KioiBG7stzJbCMTikAABAAq1atUmZmpk455RQ5HA45HA4tXrxY48ePl8PhkNPpO+Vs9OjRys7O9j62bdtW5zF61ty01EU705TkWXOT/AgAgKMV0tP3XnjhBaWnp/usZdWiRQvv96Zpaty4cXr00Uc1YMAASdK7776r5ORkzZo1S4MGDQp4zFXxrCll2SuBdEoBAGAp559/vtasWeOz7aabblKbNm300EMPyW63++yLiIhQREREIEP0Lm9gqTU3K07VoygFAMBRC+lOqdmzZ6tr16666qqr1KRJE3Xp0kVvvfWWd/+mTZuUkZGh3r17e7clJCSoe/fuWrp0aTBCrhJrSgEAgECKi4tThw4dfB4xMTFq2LChOnToEOzwJElhDit2SlWI1RZWeRsAADgsIV2U+uuvvzRx4kS1atVKc+fO1Z133qm7775b77zzjiQpIyNDkpScnOzzuuTkZO++qhQXFysnJ8fnUZc8ayaUWinpkihKAQCAOhPmWd7AUp1SFYtSdJIDAHC0Qnr6nsvlUteuXfXcc89Jkrp06aJff/1Vb7zxhoYOHXrExx07dqyefPJJf4V5SPbypMtppaRLOtCi7ilKyWLxAwAAr0WLFgU7BB+ei3aWuvueWWEtLu9FO2fVYwEAwCGFdKdUamqq2rVr57Otbdu22rp1qyQpJSVFkrRr1y6fMbt27fLuq0qgF/MM86wpZdnpe1wJBAAA/hVmxbvv+XRKeYpSFoofAIAQE9JFqZ49e2r9+vU+2/744w81a9ZMknvR85SUFC1YsMC7PycnR8uXL1ePHj2qPW5ERITi4+N9HnXJu9C55afvkXQBAAD/8N6d2FKdUhVitbOmFAAARyukp+/dc889OuOMM/Tcc8/p6quv1ooVK/Tmm2/qzTfflCQZhqFRo0bpmWeeUatWrdSiRQs99thjSktL02WXXRbc4CvwtKez0DkAAIBbmN1dlCq1Un5UZacU+REAAEcqpItSp512mmbOnKnRo0frqaeeUosWLTRu3DgNGTLEO+bBBx9Ufn6+hg0bpqysLJ155pmaM2eOIiMjgxi5L4cVF/KUKEoBAIA6c2D6noXyCxY6BwDAr0K6KCVJl1xyiS655JJq9xuGoaeeekpPPfVUAKM6PA7LTt/zLHRO0gUAAPzL4emUstJFu4pLGXDRDgCAoxbSa0rVF57pe9Zd6JykCwAA+Jfnol2pZTulyI8AADhaFKUCgOl7AAAAvjxrSlnqol3FXMigkxwAgKNFUSoADtx9z0JJl0RRCgAA1JmwCjeCMa1yh19PLmTYJaM8jXY5gxcPAAAWR1EqAA7cfc9iRR1PgsiVQAAA4GeeNaUkC60r5S1K2STDKN9mkdgBAAhBFKUC4MCaCRZLWrydUp6ilMXiBwAAIcvTKSVZaF0pT1eUYeNGMAAA+AFFqQCwl68p5WT6HgAAgKQDa25KFlp306dTyua7DQAAHDaKUgEQxt33AAAAfPh0SllliQOKUgAA+BVFqQDwLnRuldZ0j0rT9ywWPwAACFmGYXiXOKBTCgCAYxNFqQDwJFzWnb5HUQoAAPif52YwlllTynsTGIpSAAD4A0WpAPDcXYbpewAAAAeEla8rZZ2ilKdTyqhQlHIGLx4AACyOolQAOCw/fY+iFAAA8D+H1dbdZPoeAAB+RVEqALxrSlkl4fLwtKhTlAIAAHXA001uvU6pikUpi+V3AACEEIpSARBWnnBZd00pR4VtFjsHAAAQssI9SxxYbaFzm51OKQAA/ICiVAB4OqVKrZJweRy80LlEUQoAAPjNgel7FinsMH0PAAC/oigVAAfuvmexpKXKTimLnQMAAAhZnhyppMwiF708i5pTlAIAwC8oSgWAw7JrSlGUAgAAdSfMe4dii+QXdEoBAOBXFKUCwG619RK8DlroXCLxAgAAfuOdvmeVHMmzjIFhHChKuZzBiwcAAIujKBUA1u+UslfeBgAAcJTC6sXd9ywSOwAAIchx6CE4WgeKUhZLWpi+BwAA6kLhfil3l5qY+yTZrHPhrmJRynPRjpvAAABwxOiUCgBPa7rTKgmXhzfxolMKAAD40TcvS6931yWFn0qyaqeU4bsNAAAcNopSAeCwWXRNKZM1pQAAQB2ITJQkxZr5kqRSq+RITN8DAMCvKEoFANP3AAAAKohMkCTFmnmSpDJLdkpRlAIA4GhRlAoAe71a6Nxi5wAAAEJPeVEqxtMpZZUciaIUAAB+RVEqADx3lrHsmlLcfQ8AAPhTeVEq2uUuSlmvU8pOUQoAAD+gKBUAnk4py6yX4MHVQAAAUBc8RSnv9D2L5EiepRgMo0Ju5AxePAAAWBxFqQDwrCnltOqaUhSlAACAP3mKUk53UarEcp1S5EYAAPgDRakAcJRP37PsmlKGTRK3PQYAAH5SXpSKdOVJMq3TKeVTlGLNTQAAjhZFqQDwLnRulYTLg6uBAACgLpQXpRxmmSJVYp07FPvkRkbl7QAA4LBYqij1/PPPyzAMjRo1yrutqKhIw4cPV8OGDRUbG6uBAwdq165dwQuyCgem71mtKFUeL0UpAADgT+Ex3k6jeBVYZ93Nqi7YVdwOAAAOi2WKUitXrtS///1vderUyWf7Pffco//973+aMWOGFi9erB07duiKK64IUpRVc9jLO6WschXQw6xqMU+LnQMAAAg9huHtloo38i149z2KUgAA+IMlilJ5eXkaMmSI3nrrLTVo0MC7PTs7W5MmTdIrr7yi8847T6eeeqomT56sJUuWaNmyZUGM2JfDVr6mlFWuAnowfQ8AANQVT1FKBSqlKAUAwDHJEkWp4cOH6+KLL1bv3r19tq9atUqlpaU+29u0aaOmTZtq6dKl1R6vuLhYOTk5Po+65F1TynLT96pJvAAAAI5WhU6pUqvkSNXlRi5ncOIBAMDiHMEO4FCmT5+u1atXa+XKlZX2ZWRkKDw8XImJiT7bk5OTlZGRUe0xx44dqyeffNLfoVYrzG7VNaWqWMyTK4EAAMAfKnRKWW/6nkGnFAAAfhDS7S/btm3T//3f/2nq1KmKjIz023FHjx6t7Oxs72Pbtm1+O3ZVPJ1SlmlN92ChcwAAUFci4yVJ8YaVFjovj9Nmdz+828mPAAA4EiFdlFq1apUyMzN1yimnyOFwyOFwaPHixRo/frwcDoeSk5NVUlKirKwsn9ft2rVLKSkp1R43IiJC8fHxPo+65FlTytqdUhSlAACAH3k7pfKVVVAS5GBqySyfpseaUgAA+EVIT987//zztWbNGp9tN910k9q0aaOHHnpI6enpCgsL04IFCzRw4EBJ0vr167V161b16NEjGCFX6cDd90yZpinDMxUu1HkTLO6+BwAA/CwyUZK7U2pXTnFwY6mtahc6t9iFRwAAQkRIF6Xi4uLUoUMHn20xMTFq2LChd/stt9yie++9V0lJSYqPj9fIkSPVo0cPnX766cEIuUoO24EilNNleotUIc00JTF9DwAA1JEKnVKZuVYsShmVtwMAgMMS0kWp2vjnP/8pm82mgQMHqri4WH369NHrr78e7LB82CsUpcpcphz2GgaHiopX/ChKAQAAf/Pefa9Ae/OLVep0Kcwe0itL+BalPF9NF/kRAABHyHJFqUWLFvk8j4yM1GuvvabXXnstOAHVQsUEq8wq60pVTK4Mpu8BAAA/Ky9KJRoFMk1pT16xUhOighzUIVRblHIGLyYAACwsxC9H1Q8VO6Wclrm7TMWiFJ1SAADAz8qLUkn2QklSphXWlaqqKFVxOwAAOCwUpQLA4TN9zyJJS6WiVPk5sJAnAADwh/KiVIKtQJK0K6comNHUjrcoVZ4XGXbf7QAA4LBQlAoAwzC83VLWnL5HpxQAAPCz8qJUnFlelLLCYudmhZvAVPxKfgQAwBGhKBUgFKUAAAAqKC9KRZt5kkzttlSnFEUpAAD8gaJUgISVF6VYUwoAAEDeopTDLFOkSrTL0mtKWSS/AwAgxFCUChBPp1Sp5deUskj8AAAgtIXHeos68SrQrlwLdEq5yu+y51lLivwIAICjQlEqQBx294/ayfQ9AABQx8aOHavTTjtNcXFxatKkiS677DKtX78+2GH5Mgxvt1S8kW/tu+95ilUAAOCwUJQKEM8d+MosM32vQpwUpQAAsJTFixdr+PDhWrZsmebNm6fS0lJdeOGFys/PD3ZovjxFKRUo0wqdUqwpBQCAXzmCHcCxwluUsuT0PYOkCwAAC5kzZ47P8ylTpqhJkyZatWqVzj777CBFVYUKnVJ78kpU6nQpzB7C10wPLkrZ7L7bAQDAYQnhv/r1i91u1bvvGeVFKdZMAADAqrKzsyVJSUlJQY7kIOVFqQa2QknSnrwQn8LnLUqV50VctAMA4KjQKRUgYTaLrilVqT09OOEAAIAj43K5NGrUKPXs2VMdOnSockxxcbGKiw8UhHJycgITXHlR6rjIYilP2pVTrNSEqMC895HwLG/A9D0AAPyCTqkA8d59z2mVpIWkCwCA+mD48OH69ddfNX369GrHjB07VgkJCd5Henp6YIIrL0olh5dIknblhPi6UqwpBQCAX1GUChBPUcp6nVK0pwMAYFUjRozQZ599poULF+r444+vdtzo0aOVnZ3tfWzbti0wAUYmSpKahLmn72XmWmX6nqco5VnewCL5HQAAIYbpewHiWbTTOnff40ogAABWZZqmRo4cqZkzZ2rRokVq0aJFjeMjIiIUERERoOgqKO+UamgvkCRl0ikFAMAxhU6pALHbLLrQOUkXAACWM3z4cL333nuaNm2a4uLilJGRoYyMDBUWFgY7NF9JLSVJ7XO+U5wKLDx9zxmceAAAsDiKUgHi8E7fs0hRh6IUAACWNXHiRGVnZ6tXr15KTU31Pj744INgh+ar3QCpUWtFlWXpDsdsbd1XEOyIauYpPtns7q/kRwAAHBWKUgHisHsWOrdKpxQLnQMAYFWmaVb5uPHGG4Mdmi97mNT7SUnSLfYvtWPLRuUVlwU5qBpUumhn990OAAAOC0WpAHHY3D9qFjoHAACo4KR+MpudoUijVMOMmfpuw+5gR1Q98iMAAPyKolSAWH9NKcN3OwAAgD8YhoweIyRJXWwbtWBtZpADqgGd5AAA+BVFqQAJK5++V+a0SNJS7ZpSFimqAQAA62jUWpLUzNilhet2yRWqF/FYcxMAAL+iKBUg1u+UIukCAAB1JLGpTMOmWKNIyt+jX/7ODnZEVaOTHAAAv6IoFSAOu1XXlKIoBQAA6pgjQkbC8ZKkZkaGvl67K8gBVaO6/Mgqd1cGACDEUJQKEIfNc/c9iyQtFKUAAEAgJbWUJDU3dumzX3aG5hQ+8iMAAPyKolSAeKbv0SkFAABQhfKiVOvwTP21J19frwvBBc8Pzo9sdt/tAADgsFCUCpAwm/tHbdk1pcSaCQAAoA6VF6XOapgrSXrz27+CGU3VuGgHAIBfUZQKELv37ntWKUp5bnlcXowi6QIAAHWpvCjVyrFbYXZDKzbt00/bsoIb08FcTvdXilIAAPgFRakAcXin71kkaeHuMgAAIJDKi1JhWZt0aac0SdJbodYt5b1oR1EKAAB/COmi1NixY3XaaacpLi5OTZo00WWXXab169f7jCkqKtLw4cPVsGFDxcbGauDAgdq1K/Tu2OIon75XatXpeyRdAACgLjVo7v5anK1bT4nVcPssla79UoUlzqCG5YP8CAAAvwrpotTixYs1fPhwLVu2TPPmzVNpaakuvPBC5efne8fcc889+t///qcZM2Zo8eLF2rFjh6644oogRl01h92iC53r4Ol7FokfAABYS1iUFH+cJKnNugl6IOxDPWN7U8v+2hvkwCqgkxwAAL9yBDuAmsyZM8fn+ZQpU9SkSROtWrVKZ599trKzszVp0iRNmzZN5513niRp8uTJatu2rZYtW6bTTz89GGFXyXP3PeutKXXQlUBZJH4AAGA9SS2lnL9lrJosSWpiZOnt3zbo3DZNghxYOTqlAADwq5DulDpYdna2JCkpKUmStGrVKpWWlqp3797eMW3atFHTpk21dOnSao9TXFysnJwcn0ddC/MUpSy7phRJFwAAqGNJLSpt2r7h5yAEUo1K+ZHdd3tVCvZJVsn/AAAIMMsUpVwul0aNGqWePXuqQ4cOkqSMjAyFh4crMTHRZ2xycrIyMjKqPdbYsWOVkJDgfaSnp9dl6JIke/maUmVWm75HUQoAAARK+WLnkmSWLyEQk/uXNu/Jr+4VgXW4+VHmOumlE6XZI+s+NgAALMgyRanhw4fr119/1fTp04/6WKNHj1Z2drb3sW3bNj9EWDPvmlKWmb5HUQoAAARY0gnur+GxMjpdI0k60fhbi9ZnBjGoCg43P9qxWjKd0t8/1H1sAABYkCWKUiNGjNBnn32mhQsX6vjjj/duT0lJUUlJibKysnzG79q1SykpKdUeLyIiQvHx8T6PuuYon75XapX2bYpSAAAg0FpdKHW5XhrwmpTeTZJ0grFDi//YHeTAynnzo4NvBFNNfpRXXkwrCKHF2gEACCEhXZQyTVMjRozQzJkz9fXXX6tFC991Bk499VSFhYVpwYIF3m3r16/X1q1b1aNHj0CHWyPPQufWufueZ6HzWiZdAAAARyssUhowQWp/mdT4JEnuTqnvNu4JjSl8h3vRLr+8mHYk60qtnyN9dLNUlH34cQIAYBEhXZQaPny43nvvPU2bNk1xcXHKyMhQRkaGCgsLJUkJCQm65ZZbdO+992rhwoVatWqVbrrpJvXo0SOk7rwnHeiUsu6aUtzyGAAABFCj1pKk4217ZHMW65nP1wY5IFWfHxXnSavekYoOunmOp1PKdEpFWYf3Xt++LP36sfTH3CMOFwCAUOcIdgA1mThxoiSpV69ePtsnT56sG2+8UZL0z3/+UzabTQMHDlRxcbH69Omj119/PcCRHprDXr7QudMiRR2m7wEAgGCKaSxFJspWlKXW9p2avzZci//YrXNaNw5eTJ48yFZ+1z1PfrToeakkV8rdKfV6+MD4/AprYeXvkaKTav9eOTvLv+448ngBAAhxId0pZZpmlQ9PQUqSIiMj9dprr2nfvn3Kz8/XJ598UuN6UsHisNz0veqKUhaJHwAAWJtheKfw3XRSqSTpidm/aV9+SeBjKdjnvpPewfmRpzhVkuv+mnlQN1dehbWwCvbU/v1cLimv/E7SudXfURoAAKsL6aJUfeLtlLJ8UYpOKQAAECDlU/guTs1RcnyENu3J1+A3l2l3bnHdvu+PU6UVb7m/d5ZJk/tJE8+Qdq9zbzs4P/LI2ur7vGKn1OEsdl6wR3KVub/PoygFAKi/KEoFiHdNKSdFKQAAgFop75SK2L9R0247XcnxEVq/K1dXvbFEq7bsq5v33L9Z+vQu6Yv7pfVfSr9MdxejTOeBolNtilIup28hKv8wOqVyd1b4nqIUAKD+oihV1/b9JS2ZoBZbP5IklR3unVeChaIUAAAItvJOKe35Qyc0jtUHw3ooLSFSm/cW6Mo3luqJ2b/VemmEgpIyvfLVem3MzKt54C8fer8t/PQ+5X71XOUx1RWlCvZIJeV3CSzY65s3Hc70vYqFqIoFKgAA6hmKUnVtz0bpq0fUYtP7kurDmlIUpQAAQIAkt3d/zfxdWve5midFasEZv2li04WS6dKUJZs16bu/anWoyd9v1vivN+pfHy2Q/nWy9N0/Kw8yTenn6e5vDYeiCv5WXOHfctkjfMcdnB+ld5ciE9zfZ21zf83L9H1N/mFM3zu4U4o1PQEA9RRFqbqWmC5Jisr/W5JUarnpe4bvV4pSAAAgUBKOl7rf4f7+k9ul/16uqIWPqV/mW5pyhrvI8/JXf2hjZu4hD/X1OneRKGXHV9L+TdK3r0ilRb6Dtv8g7ftTZli0ng27y7t5QeqwA0Un6UBelNpZkiH1GCElNHVv80zhyz+oKHU4a0pV7JQqK5KKsmv/WgAALISiVF1LcBelwkpzFKcCC3VKlcdJpxQAAAimC5+RmvV03+Fu02Lv5rMz3tE5rRqppMyl+2b8ojJn9TnK/vwS/bh1vySpjbHZvbE4R9ow13fgL+4uqdXRZ+o/Od31rquvvnKequd295TZ/EzvsOk//K1bpqzUtlY3SA9tltpdKiV6ilJb3F8r3nlP8p2+5yyT3h0gTRtUdRdUzg7f56wrBQCopyhK1bWIWCm6oSTpOGOPSmtImEIKnVIAACAU2MOkq6ZIDVtJic2kIR9LjigZO1brn1126rHID3RfxkN65+tfqj3ENxt2y3NdsL2x5cCONTMOfF9SIP36iSRp3O5TZBiGml83QaOMB7Up26XtCV29Qxf9sVcL1mVq1Ic/yxlR3kHlKUpll0/f83RKeTqsKi50vme99Nci6Y8vpT0bKgd8cBGKdaUAAPUURalAKO+WOt7YbaFOqerWlLJI/AAAoP6IbSLdtUy6+yepVW+p602SpKTZN+oWfaqz7Wu07Zt39MeuXH32yw49/PEv2pld6H35ovXurqVzT4jTicbf3u1l6+bqq1Xr3U+++6dUuE97Hcn63tVBl3RK09mtG+u8Nk0kSf/vxwbe151xYmPFRji0ast+vbH4T/fGxIOm73nWlGrSzv214vS9nRUKaFu+q3y+niKUYS9/TqcUAKB+oigVCOVJiqWKUmL6HgAACCF2h2Qrz0fOGCnZwyWZMstzlPO0Upe/9r1GTPtR01du08hpP8rpMuV0mVr8h7sodW/nMjkMl/aacdqgdDnMEs3/5D9a/eMP0vfjJEmPFg6WSzbd1esESdLFHVMlSd/lNNJeM06SdMMZLfR4f3exadz8PzT75x0yy9cRPbCmVPn0vcZt3F8L9h64uJexxntaZX99p9yiUt9z9RShmrR1f807jKJU/l7p5dbSB9fX+iW7cor05ZqdFspTAQD1BUWpQCgvSh1n7FGpyyJFHTqlAABAqIpPk654S+o5SsbNX0mSeth/l70kW+F2m6LC7PqhvIvp+417tC+/RHGRDrUtX0/qN1dzzSztIUl6xPGeGn86RHKWaG30afrSeZrOb9NEbVPjJUm9TmqiqDC7TNm0pPE1MhueKKWdoitPPV592ier1Gnq7vd/1L1fudesUtZWZeYW6Y8/yzuoPJ1SZUVSSb77+4wDnVJZaxeq9z8WHShMOUsPFLTSTnZ/LS9SmbXJwzYtlvJ2Ses+k4oPWgB++ZvS/Ccq5XP3ffiz7py6Wi/OXXfo4wMA4EcUpQKhQqdUmeXuvkenFAAACEHtL5MueFJKP01q3FZhcurxNn9rzqiz9PRlHSRJL3+1Xje8vUKSdFarRnLscnco/W4219rk/nLGJCvBKFC6MlRi2nXX/kGSDA0/70Tv20SF2zWmfztd0eU49br1eRkjV0nxqTIMQ/8a1EWjerdSVJhdC3ZGuF+Qv1v3Tl2q0pxdkiSzQTPJEeneV7DHXRCqUJRqZO5TRN42bzeX8nZJMiVbmJTsPg9ntntKYqcnvtLX69zHdblMzf99l3bnFvv+XHasdn81XdLf7u9XbdmvH9ZtkuY85J6m6BkjKTO3SN//6V7v6t+L/9LC9QfdNRAAgDpEUSoQKhSlMnOLVVjiDHJAtUBRCgAAWEWbiyVJA6N/UsvGsRp4ynF6rulKfRH2sM61/6yzWjXSvRe09q7lNOSySzRpRH/Z7/1NmVd8rHfsA3WveY+Mhifq9nNa6pSmDXwOP7hbU71yzcmKiwzz2R4ZZteo3q01/75zFBGbpBwzSpK0c8sGNTKyJUkbC6Kl6EaSpOLsTI3/5GupKFuyhWl7tHt6XnfbWi1Y6y4G5e3ZLkky45KlOPfUwXUbNmj6ym3KLS7TS3P/kGmaevXrjbr13R904T8X66vfDkzvM/8+UHDS9pXal1+iwW8t08R3/3sgj9u63Dtkzq8ZMk3JbnPf1Oa+D3/WrpyiI/kUAAA4bBSlAqG8KJVu2yuny9RvO7KDHFAtUJQCAABWUV6U0ob50p6NMhY8qWsz/6m2tq2aFPO6/ntZI53YKFra9ZskKa75qbLZDMkepiadeuuGRyfp1Scf1df399Lofm0P++2PS4zShGtP0d9mY0lSUyNTDQ331Ln/bSyTYtx3Yn5rzkr9uupbSVJRg1aaX+Se2ne6ba0Wrs9USZlL/5q5WJK0Li9G41fkSZLiS/eoUWy4IsNsWrszR/N+36X/fPeXJCm2cLuc06/T/z54U3K5VLr9R29czq0rNPe3DJWUudTD9vuB7Zu/937/+S/uRdXvvaC12qXGa19+iaav2HbYPwMAAI4ERalAKL/7XqJyFaNC/bQtK7jx1Ia3KGWUf6UoBQAAQlRaFyn+OKk0X5pwqnuKmiTFHy9bSa704Q3Shq+kskIpLEZKOsHn5YZhyPDkPEeoe8uGim7SQpI0pGmWHHJ3xk//vVDOqCRJ0qatW9XOtkWStCgnVQuKWkmSTrevU1ZBqZ767DcV7d8hSdpcEq8P/yiTJKXYs/T5yDN1RZfjJEn/N/0n5RaV6YzGJZod/5L62Veqy+8v6IM5CxTuLPDGVLZ1hb74xX28PtEbvNuL/vpeMk1l5hRpxeZ9kqTLuhynwd3dF1KXb6pwp0AAAOoQRalAiIyXIhMluRc7t0ZR6uC775UnahSlAABAqDEMqddo94XA8FgpKkka8Lp06zwpprG061fp/UHusSkdDtzFz8+aneDusuodtV6SlK1YZRaYmr/ZXaBqaMvRgGR3wWd5QZpWuVqrTA4dp926zPad3lu2VcmGe8H0tONbqEu7kyRJYWapkn96VU+vu1ijHVPlKi3UScZW/VvPqEGxu+h0vLFHziWvSZJ+MU9QselQRMl+/f3X70pQno4vcS+8XmLaFVO6X1s2rNGX5VP3TmmaqOMSo3R6C3fxbPXW/SopI+cDANQ9ilKBUmFdKWsUpZi+BwAALOSU66V7fpX+39/Sg39JXYa479J3zXtSSid3cSoyUepyfd3FkHaK++umbyRJpZHuaXvbS2IkSVe1jVKLMve0u99czVWgSG1qM0ySNDbsP2pnbFbTsBxJUud2bfXq9T3cBTZJWvis7CU5ut3xuZZEjNTciIcVl7tRikuTeUJvSdI19kWSpEZtz9avprtrq5M26KpGm2XIlNnoJG2OdBfO/vvB+3r287WSpEvbN5R++VAnfn6V1kTeqvZla/XL9qy6+RkBAFCBI9gBHDMSm0oZv+h4Y4++3l+oPXnFahQbEeyoqldtUcoidw8EAADHropT8ZqeLt3xbWDet+NV0q410pJXJUmxDdPU0hGjhmGp0n6pVdkGKdu9XtNGewvFOxxKG/CESovXK2rTAr0T/rxiwsKkEnkXOVdcilTonmKnZmeqbPcfaliQKdOwyWh7qdT7cRlZW6U/58tuuPO0tHZnaM3fOVLuBp1i26CTE5KkPMlocZaSXVHSql/Vuvg3NXK20UNJi9V/2UKpcJ8MSXGSbnN8oeWbLlXX5kmB+bkBAI5ZFKUCpbxTqkNMtpQj/bwtS+e3TQ5yUDWgUwoAAODw2GzShc9ISS2lr8Yosm1ffX1mL+mHTdJn8nZQKf10Tb/kQtlthmKiIqSrJynr1XPUuGCLuyAlSQnHu7/GpUiZv7unJg56Tw7TlNZ/IaP5WVKDZu4xic3cRaxc96LlSjtFTdrlS8s/Vl/7SiXtD3dvb36mEsJipFWvqn/kTxpo/CB7Qb57X/xxUptLpBX/1rm2H/Xpxs3SuSfW/c8MAHBMoygVKOVFqZMi3OsEUJQCAACop7reLJ0yVLLZ3c9jGh3YF9NYGvgftU6MO7AtqoESRy2V/los/f2DZI+QmvV07+s8WMrZIV36qhTVwL2ty3W+72ezSx2vdHdoRSRISS3V/vRoOZfb1cTIkgokGXap+VmSzSHJUFRZ+d2gj+8mnXWvdOIFkt2hoo3fKHLfWiVvm6My53ly2FntAwBQdyhKBUr5HfiONzIkmfox1NeVoigFAABw5DwFKcndhSRJ9nDpmqlSYnrl8eExUpuL3I+KOl3tfhzKqTdJq9+V2l8h2WwKb5Am3TJX+nuVVLDHfYdCT3GsZS9pyxLpvEelHsN9Yg0/ZbA0f4z66Vv9uiNHJ6cnHtZpAwBwOChKBUoT96KSDXPW6QnHO3p58436aVtW6P6hpygFAADgH2ldpH4vSskdpKbd6+Y9Gp4gPbjJtxiWfpr7cbAhH0llhVJEXKVdto5XyjX/cXW3rdNTi5ep47V9ZLcZlY8BAIAf0I8bKA1PcK8xIOlGx1d6Xv/Sdf9ZrhWb9gU5sGp4i1LlSQhFKQAAgCNjGFL326XmPev2fSoWpGpid1RZkJIkJRyn7Cbuwlmv9c/ooanfqKSM/A8AUDcoSgXSGSOlq/8r0xamS+zL1abkV103abmmLd8qM9TuauctPhm+XylKAQAA1GsN+v4/OW0ROtu+RiM33KpHxk3Uj1v3BzssAEA9RFEq0NpdKuPkwZKkRxvMU0mZS/9v5hrdN+NnlTpDqODjKZJ5p+9RlAIAADgmtDxH9tvmqSjmeDWzZeqlvP+ngv9crH+/NUE/b84MdnQAgHqEolQwnPF/kgydXLBUL5wdph72tdr501ca/cma0OmYYk0pAACAY1dqZ0UO/1ZFnYeqTA71tP2m2/9+RM0mn6yvn71UX733statnK+ineuk0qJgRwsAsCgWOg+GRidKbS+R1v5P1/x8q64Jc9+S9/ofnXouOkwP92sb/AUlK3VK2Xy3H8zllD6+1X2b4SvePNBZVVv7N0uJzQ7/dQAAAKgb0UmKvHy8dO792jP/XwpbN1OJZXt1XuliaeNiaaN7WInCtC2mg/Ibd1FYWgc1SG+rxmnNZY9pJDnCg3sOAICQRlEqWHreI639n1Sc7d00Nuw/6vNtK329LlO3n32CTmgSI7vNpvUZOcotKtPlXY5Tw9iIWh1+2V971TguQic0jj3k2NyiUj33xTot+XOPXr6qs05rnuTtiDINm/7anacWsrnb6soKpXWfu+8iE5924CB/zJF++8T9fZch7lsN19byN6UvH5DOeVg6d3TtXwcAAIC6l9hUja78h+R6UbkbvtX2H76QY9v3ii7KVLyZqzijUCfk/yjl/yht9n2pUzYV2mKVFXGcCqJTZY+IlT0qTva4FEUkJisiOl5RMfEKi4yRER4tOUuksiIpLk1KaimFRQbllAEAgWGYITNf7Oi89tpreumll5SRkaHOnTvr1VdfVbdu3Wr12pycHCUkJCg7O1vx8fF1HGkFy9+U8jOlzoOl/14uZW3RDF2gh4qGylXFzMrUhEi9NuQUndK0gXfbtn0FSk2IlMPuHl/mdOmZz9dqypLNCnfY9EbfOJ3XNtV997+DFedq+2fPa9tv3+u74lb6y0zVlRHL1Stmq+yxjaSMX/RV7GUatudqPdBkhYbnjDvw2sRm0p1LpIhY/Z1VqCafXKWwrd+697UbIF39ru97maZkGDJNU0bFbqiSfGlcJ6lgjxQWI41aI8U0PNKfaK1kFZQoISrMNw4AAI5Q0PKIOlQfzwn+Z5qmMrILtWHtzyr8Y5Ei9vymRgUb1ahslxopSw7j6JZ9cMmmXEeS8sMbyWZIka5C2eSSbA65wqLkjEiUwqJlt9tls4fJjEyQEdVARlQD2QxT4Xt+lT13h9SghYxGrWREJUqOiPLCV7G7+FVWIkUnuS+22iMkV6lUlC3l75bs4e7tUQ3c39vCJHv5o+L3LqeUu9P9uthkKf4493bDKJ9tYEiuMvf7Zf4uZayR4lKlE86TwqKlfX9JMqWE46XIBPfJlxVLhfulvEwpe5tUsFdyREmR8VKj1u5c3FZhJoOz9MB7Su7nht09piRf2vune3+D5lJYVPkP2CXl7XLHFn/cgeNJ7nPK3+P+3h7m/hl415g1peIcqTDLfcfHsGjJEel+FGVJ2dvd79GghftOjx7Fue6fa1SS++6PLqf7mPawir9UvjMnPOdVG85SqbTAfYyIOHdspul+2GpYtaasWNq9Ttr9h/t3oVEr92sK9rrPLT5ViohnRgdwmGqbS9SLotQHH3ygG264QW+88Ya6d++ucePGacaMGVq/fr2aNGlyyNeHROL11yLp3QGSpEJHgv40mqphWYaizEKti+qi75wdVJifo1hbiQpbXaqWbU7Wx6u3a+Xm/TqxSawevbitypym3vr2Ly3ftE+SdKnte70SNlE2Q5plu0DvhV2hlNSmOqNhvnqULVPyb28rtmxfjWG9XdZXT5XdoAG27/Sv8Nd99hV0vlEv2G7TiuXf6svwh2UaNhmmO1HYf/uP+viPMhXk5+murJdk375CbyeO1Gs7T9Jzl3dU3w4pWrM9W1s/e14XZxw47pb2d2p+6u36fUeOzmzVUJedfJz+3J2npz9bq9yiUrVPS1DPExuqd9tkOew2Ze7bL7urVA0buT/nj1dt19frMpUW79DJDUp1fveTFRnmvj1yxYLdiU1idf3pzXRV1+MVHU7DIADgyIVEHuFn9fGcEDhOl6kd+/K0a/duZefmqCArU+a+TTJyd6q0ME8qzlFU8R5Fl+1XuKtIUSpSlEoUpWKVKEylsus4Y4/ijcJgn0qd8lyEtulA8c6UIUOH/t+zMluEymwRMmVTuDNfdrNUpbZIFYUnKcxZoMjSLJkyVOqIUXhZns/xSx2xMg2bHM4C2V2l7uPZo5Qffbxc9nDZXKWKzdssu6vE5/0KIxrJ4SxURGmObGbZIWN0GmEqiEpVUXgDhZXlKyHvz0rnZspQQWSyCiMaKbooU9HFmXLawlVmi5TDWSi7WarC8IbKij1BTluE7M5COZxFcriKZHcWeb93OIsqxeQ0HLKbZd6fQ5k9Sobpks0sk81VJsMsc39vOg95LpLkMhxyGXbvV7P84fO5hMcr6tx7FdZlSM2FMOAYcEwVpbp3767TTjtNEyZMkCS5XC6lp6dr5MiRevjhhw/5+pBJvL7/l/TtP9xXWWrgNA194jxL68x0hcmp5kaGWtgytNtM0K+uFsq2N9DN7W06ce3rh/yjtsmVrPVpl6l3zF9y7f1TH+xvo33OSI2wz5TdMDUreqASBjyvf/5vha7Oelu/m821w2yoKeEvSpIeKB2mnrZfdZl9ib7S6eoQX6i0nJ81znmVppT21n/C/6Gutj+87/fvsov1hauH2nU8RXN/3aG5jnvV2MjRF85uusi+QrlmlK4uGaNkY59KFKb049O1LiNP9tJ8nWH7Tb3tq7XPjNNHUVfqhIgc3ZDzhuJVqFVNBmpR42v15upc9bD9rqcdk3WibYfm2Hup9PynZYttrPdXbNXyjRmKVpFiVahIo0SOhi30r+u6q00KCTcA4MiETB5RhSPtJA/lc0L94nKZyi8pU25RmXKKSpVbVKbcolLlFJSqNCdDZs5OGXkZKiwzleOMVJHTUGlpsVSSr4jSbBllhSopM2U4ixVj5inOlas45clmOrXO1VTbzUZqamSquZGhaKNIkSpVqRwqUpiKzXCVya4GRq5SjX2yyymn7Mo1o7RX8QpTmVKNfYpTgRxyKtwok0NOhalMYeVfHXLKlJSpBsoxY9TE2K9GRk6157vV1Vi/m83VzMhQW9s2SVKOGaUy2ZVk5PmMdZmG9ilOf5uNtNeMV7hK1dDIVUtjhyKMQxeFKtpnxsohl+KNAp/tTtOQUzaFG5ULMy7T3RlkM6r+/4kiM0yGzEqx7DHjFa1iRRvFlV5TaIYryiiptD3YsswY/WEerwbKU3MjQy7ZtE9xilaREg76mdVGcaP2imh8grtby7C5u9YMW/lzo/x5xc6r8u9r3FZh32FvK1eb//WvsiOsim217RyrNK62xzrCcf48VpXj6jj+KjfV4XuGRUndb69izNE7ZopSJSUlio6O1kcffaTLLrvMu33o0KHKysrSp59+eshjhFTi5SyTtq+Q9m9xt9fa7NL6L6Udq2VGJSkna48S/v6m1ofb2fo6rW1wnrr/OU4xe36RJJUZYVpt66Al4T3U+ZK7dG77dO/47zbs0RuL/1S/2A26sPALJfV7VPaUdsopKtXb323S+oxcbd1XoOv3jtcg4yuf97qyeIyON/ZoXPjrKjXtshsu2WQq24zWfNcpGmj/rsoYc6OO0ydnzFLvb6/RcSV/Hf7PrIJi01HpD2OBGaEihSlGRZX2FZrh+sFsIzVoLjMsRkZEjGwRsTIcETJsdhl2h/urzS6b3S7D5pDNZnd/Lja7JENG+SLw3umAhuH+z7z8ueFdLP7AdsOQyp/JNAwZMnTg5UaFqYXV/THyvFY+zz2vM6v6o1Stw2tFPpLO5cN9ibc7vNpXVt5+4EdRy9ccZlDGYZ9FLY/rc9gj/eNetcP7x7327127t6/tz6uK5Kua9z384x3mSw9TnR23bg5bZweuq3jr4rjJLTsoIjLG78cNqTyigqPpJA/VcwJqyzRNlTpNlTpdKnW6VOJ0qdRpqqz8eXGZSy6XVOZyyekyVeYyK3x1qczpfl7qMmWa7u9dpruI5jRNuUxTrvJt7n3uh9Mlma5SmU6nXC6nDEmGXN4Om4qdNdHFe2SaprLsSXKaklFSoDBnnlymoTIjTEW2GLkMwz0DTZ56ginDVab4kkzZzVLJ5VKRLUrFtkhFleUotnSfCm0xyrYnSaZTka485dnilWdLkMvlUowzW9HOXBmmU8VGpPbZG8llmmpcukNJzt2yu0pkylBmWLr2h6fIsDsUrhI1KNujhLJ9KrJFK98er3xbvEps7kXsDdOpcLNE4a4iFdmiVWJEyDBdSirbpaSy3Yp1ZatMDm2JOEnZjiSFuUoUaRbKZdjlMEvUuGynEsr2a7+jsbLCGstulinCLFKJLVKlRoQalWUopWSLDEkltgiVGJEq9X71fB/h/t6IkAwp0lUgh6tEZYZDpmkq0pmvMFehnLKrTDaVyaFS0yHTZpfLFq4Ce7xsNpsMQ7LJ9ObjhmEo3FWocFeR7GaZbHLKZjrd35tO2eSSqQNLlIRvXqhbXTMUa3BHSliDM7KB7A9vrpNjHzNFqR07dui4447TkiVL1KNHD+/2Bx98UIsXL9by5csrvaa4uFjFxQcq9zk5OUpPT7dO4rVtpfTTe1JpoSRDSmwqV9IJUu5O2TJ+kUry3AuVn3iBu+rp+T8nl0sqyXXPiffMJT9CZnGeSj9/UGF/r5CRu1Nlzc/R/cb9ysnP1/jdtyi2eJf7LRu00ITGT2hxdhON77RFaRunqXD7GkWX7ncfx7DJGDhJ6nCF9Mdcado17vgatVJRSYlKsjPlsBuKio6R0bit1PYSlf39k2w//lemYVNhj3u1NfxEOb55Xq2d5beAkSGddouKTuyn3E8fUuOCjZVPwB4h02aXUXr4Vz4AANa06er5atHuNL8fN1QLOEfTSR6q5wQAoWxXTpGenLZAsdsWyt2H55LN+zBlk+ndJslnVsuBS8rubUZ5h5rvRRrTd8xBr6luX8ULvTX9z3/VPTWVX1H1haOqxtXutVWP8+9rqxKI963ta6v++dX2fY88PqcjSoOe+LCKIxy92uYSx+RiOmPHjtWTTz4Z7DCOXPpp7kcFtZqxbLMdWDzxKBkRsQq/4sBaUA5J4zxP8r6TsrZKDZrLFt1QdxuG7pYknSH1HKxoSSrOk0ynDFuYFB7tfl3rPtLDW90LCtodipRU1f1WHKdKOu//Saap2LhktZNknn2lSgtzFFaS415kMbax+/X3LZd2r5VsDik8VoqIdX+1h8kwTbl2/a4/VsxVYdYuuYrzpZI8GSV5Mlyl7vhcLhmmU4bplOSS4XLKkMt9ZcR0yajiD4okGaYp02e77x8Qea50lX/r+3rTewz3aw7aXu0foer/OPlLKFSwazqvWp9zKJzIQY7mj+fBKv9OHeqYtR1X22PW9lz8+7518TtfX/CTcbPZj520p6SkRKtWrdLo0Qfuamuz2dS7d28tXbo0iJEBQP2VHB+p126/SFv29tL+gpLy6ajuKallLk83nentrnO6VGlbmacbz2XKNOXu0Cv//wJPR55nu1nFc9M7rvx1Zg2vU4XXVRjnMuX7OtXwfgcd35S7e1CSzPIMpGIbzMEtMZ4eGfOg/WYts5fattjUOoutddIUrPhq+b61PF5iVJgG1XJsXbF8dtaoUSPZ7Xbt2rXLZ/uuXbuUkpJS5WtGjx6te++91/vc0ykFP4lt4n7UJCK26u2Rtbwae9DxDcNQWHSCFH1Q0c3ukFI6Vn0Mw5Atpb3aXNq+du8JAIBF7NmzR06nU8nJyT7bk5OTtW7dukrjq+oiBwAcPsMw1LxRjJrL/9PFgfrI8rcECA8P16mnnqoFCxZ4t7lcLi1YsMBnOl9FERERio+P93kAAAAcq8aOHauEhATvg4t1AAAgECxflJKke++9V2+99ZbeeecdrV27Vnfeeafy8/N10003BTs0AACAgDvcTvLRo0crOzvb+9i2bVugQgUAAMcwy0/fk6RrrrlGu3fv1pgxY5SRkaGTTz5Zc+bMqdSyDgAAcCyo2EnuuTuxp5N8xIgRlcZHREQoIiIiwFECAIBjXb0oSknSiBEjqkyyAAAAjkX33nuvhg4dqq5du6pbt24aN24cneQAACCk1JuiFAAAAA6gkxwAAIQ6ilIAAAD1FJ3kAAAglNWLhc4BAAAAAABgLRSlAAAAAAAAEHAUpQAAAAAAABBwFKUAAAAAAAAQcBSlAAAAAAAAEHDcfU+SaZqSpJycnCBHAgAArMaTP3jyifqA3AgAAByN2uZHFKUk5ebmSpLS09ODHAkAALCq3NxcJSQkBDsMvyA3AgAA/nCo/Mgw69NlvSPkcrm0Y8cOxcXFyTAMvx8/JydH6enp2rZtm+Lj4/1+fBwdPp/QxucT2vh8QhufT2CYpqnc3FylpaXJZqsfKyPUdW4k8fsZyvhsQhufT2jj8wltfD6BU9v8iE4pSTabTccff3ydv098fDy/+CGMzye08fmENj6f0MbnU/fqS4eUR6ByI4nfz1DGZxPa+HxCG59PaOPzCYza5Ef143IeAAAAAAAALIWiFAAAAAAAAAKOolQARERE6PHHH1dERESwQ0EV+HxCG59PaOPzCW18Pghl/H6GLj6b0MbnE9r4fEIbn0/oYaFzAAAAAAAABBydUgAAAAAAAAg4ilIAAAAAAAAIOIpSAAAAAAAACDiKUnXstddeU/PmzRUZGanu3btrxYoVwQ7pmPTEE0/IMAyfR5s2bbz7i4qKNHz4cDVs2FCxsbEaOHCgdu3aFcSI67dvvvlG/fv3V1pamgzD0KxZs3z2m6apMWPGKDU1VVFRUerdu7c2bNjgM2bfvn0aMmSI4uPjlZiYqFtuuUV5eXkBPIv661Cfz4033ljpv6e+ffv6jOHzqRtjx47Vaaedpri4ODVp0kSXXXaZ1q9f7zOmNv+ebd26VRdffLGio6PVpEkTPfDAAyorKwvkqeAYR34UGsiPQgv5UWgjPwpd5EfWRlGqDn3wwQe699579fjjj2v16tXq3Lmz+vTpo8zMzGCHdkxq3769du7c6X1899133n333HOP/ve//2nGjBlavHixduzYoSuuuCKI0dZv+fn56ty5s1577bUq97/44osaP3683njjDS1fvlwxMTHq06ePioqKvGOGDBmi3377TfPmzdNnn32mb775RsOGDQvUKdRrh/p8JKlv374+/z29//77Pvv5fOrG4sWLNXz4cC1btkzz5s1TaWmpLrzwQuXn53vHHOrfM6fTqYsvvlglJSVasmSJ3nnnHU2ZMkVjxowJxinhGER+FFrIj0IH+VFoIz8KXeRHFmeiznTr1s0cPny497nT6TTT0tLMsWPHBjGqY9Pjjz9udu7cucp9WVlZZlhYmDljxgzvtrVr15qSzKVLlwYowmOXJHPmzJne5y6Xy0xJSTFfeukl77asrCwzIiLCfP/9903TNM3ff//dlGSuXLnSO+bLL780DcMw//7774DFfiw4+PMxTdMcOnSoOWDAgGpfw+cTOJmZmaYkc/HixaZp1u7fsy+++MK02WxmRkaGd8zEiRPN+Ph4s7i4OLAngGMS+VHoID8KXeRHoY38KLSRH1kLnVJ1pKSkRKtWrVLv3r2922w2m3r37q2lS5cGMbJj14YNG5SWlqaWLVtqyJAh2rp1qyRp1apVKi0t9fms2rRpo6ZNm/JZBcGmTZuUkZHh83kkJCSoe/fu3s9j6dKlSkxMVNeuXb1jevfuLZvNpuXLlwc85mPRokWL1KRJE5100km68847tXfvXu8+Pp/Ayc7OliQlJSVJqt2/Z0uXLlXHjh2VnJzsHdOnTx/l5OTot99+C2D0OBaRH4Ue8iNrID+yBvKj0EB+ZC0UperInj175HQ6fX6pJSk5OVkZGRlBiurY1b17d02ZMkVz5szRxIkTtWnTJp111lnKzc1VRkaGwsPDlZiY6PMaPqvg8PzMa/pvJyMjQ02aNPHZ73A4lJSUxGcWAH379tW7776rBQsW6IUXXtDixYvVr18/OZ1OSXw+geJyuTRq1Cj17NlTHTp0kKRa/XuWkZFR5X9fnn1AXSI/Ci3kR9ZBfhT6yI9CA/mR9TiCHQAQCP369fN+36lTJ3Xv3l3NmjXThx9+qKioqCBGBljPoEGDvN937NhRnTp10gknnKBFixbp/PPPD2Jkx5bhw4fr119/9Vn/BQAOB/kR4D/kR6GB/Mh66JSqI40aNZLdbq+0ov+uXbuUkpISpKjgkZiYqNatW2vjxo1KSUlRSUmJsrKyfMbwWQWH52de0387KSkplRbELSsr0759+/jMgqBly5Zq1KiRNm7cKInPJxBGjBihzz77TAsXLtTxxx/v3V6bf89SUlKq/O/Lsw+oS+RHoY38KHSRH1kP+VHgkR9ZE0WpOhIeHq5TTz1VCxYs8G5zuVxasGCBevToEcTIIEl5eXn6888/lZqaqlNPPVVhYWE+n9X69eu1detWPqsgaNGihVJSUnw+j5ycHC1fvtz7efTo0UNZWVlatWqVd8zXX38tl8ul7t27BzzmY9327du1d+9epaamSuLzqUumaWrEiBGaOXOmvv76a7Vo0cJnf23+PevRo4fWrFnjkxjPmzdP8fHxateuXWBOBMcs8qPQRn4UusiPrIf8KHDIjywu2Cut12fTp083IyIizClTppi///67OWzYMDMxMdFnRX8Exn333WcuWrTI3LRpk/n999+bvXv3Nhs1amRmZmaapmmad9xxh9m0aVPz66+/Nn/44QezR48eZo8ePYIcdf2Vm5tr/vjjj+aPP/5oSjJfeeUV88cffzS3bNlimqZpPv/882ZiYqL56aefmr/88os5YMAAs0WLFmZhYaH3GH379jW7dOliLl++3Pzuu+/MVq1amYMHDw7WKdUrNX0+ubm55v33328uXbrU3LRpkzl//nzzlFNOMVu1amUWFRV5j8HnUzfuvPNOMyEhwVy0aJG5c+dO76OgoMA75lD/npWVlZkdOnQwL7zwQvOnn34y58yZYzZu3NgcPXp0ME4JxyDyo9BBfhRayI9CG/lR6CI/sjaKUnXs1VdfNZs2bWqGh4eb3bp1M5ctWxbskI5J11xzjZmammqGh4ebxx13nHnNNdeYGzdu9O4vLCw077rrLrNBgwZmdHS0efnll5s7d+4MYsT128KFC01JlR5Dhw41TdN92+PHHnvMTE5ONiMiIszzzz/fXL9+vc8x9u7daw4ePNiMjY014+PjzZtuusnMzc0NwtnUPzV9PgUFBeaFF15oNm7c2AwLCzObNWtm3nbbbZX+Z5LPp25U9blIMidPnuwdU5t/zzZv3mz269fPjIqKMhs1amTed999ZmlpaYDPBscy8qPQQH4UWsiPQhv5UegiP7I2wzRNs257sQAAAAAAAABfrCkFAAAAAACAgKMoBQAAAAAAgICjKAUAAAAAAICAoygFAAAAAACAgKMoBQAAAAAAgICjKAUAAAAAAICAoygFAAAAAACAgKMoBQAAAAAAgICjKAUAdcQwDM2aNSvYYQAAAIQM8iMAFVGUAlAv3XjjjTIMo9Kjb9++wQ4NAAAgKMiPAIQaR7ADAIC60rdvX02ePNlnW0RERJCiAQAACD7yIwChhE4pAPVWRESEUlJSfB4NGjSQ5G4dnzhxovr166eoqCi1bNlSH330kc/r16xZo/POO09RUVFq2LChhg0bpry8PJ8xb7/9ttq3b6+IiAilpqZqxIgRPvv37Nmjyy+/XNHR0WrVqpVmz55dtycNAABQA/IjAKGEohSAY9Zjjz2mgQMH6ueff9aQIUM0aNAgrV27VpKUn5+vPn36qEGDBlq5cqVmzJih+fPn+yRVEydO1PDhwzVs2DCtWbNGs2fP1oknnujzHk8++aSuvvpq/fLLL7rooos0ZMgQ7du3L6DnCQAAUFvkRwACygSAemjo0KGm3W43Y2JifB7PPvusaZqmKcm84447fF7TvXt388477zRN0zTffPNNs0GDBmZeXp53/+eff27abDYzIyPDNE3TTEtLMx955JFqY5BkPvroo97neXl5piTzyy+/9Nt5AgAA1Bb5EYBQw5pSAOqtc889VxMnTvTZlpSU5P2+R48ePvt69Oihn376SZK0du1ade7cWTExMd79PXv2lMvl0vr162UYhnbs2KHzzz+/xhg6derk/T4mJkbx8fHKzMw80lMCAAA4KuRHAEIJRSkA9VZMTEyldnF/iYqKqtW4sLAwn+eGYcjlctVFSAAAAIdEfgQglLCmFIBj1rJlyyo9b9u2rSSpbdu2+vnnn5Wfn+/d//3338tms+mkk05SXFycmjdvrgULFgQ0ZgAAgLpEfgQgkOiUAlBvFRcXKyMjw2ebw+FQo0aNJEkzZsxQ165ddeaZZ2rq1KlasWKFJk2aJEkaMmSIHn/8cQ0dOlRPPPGEdu/erZEjR+r6669XcnKyJOmJJ57QHXfcoSZNmqhfv37Kzc3V999/r5EjRwb2RAEAAGqJ/AhAKKEoBaDemjNnjlJTU322nXTSSVq3bp0k951fpk+frrvuukupqal6//331a5dO0lSdHS05s6dq//7v//TaaedpujoaA0cOFCvvPKK91hDhw5VUVGR/vnPf+r+++9Xo0aNdOWVVwbuBAEAAA4T+RGAUGKYpmkGOwgACDTDMDRz5kxddtllwQ4FAAAgJJAfAQg01pQCAAAAAABAwFGUAgAAAAAAQMAxfQ8AAAAAAAABR6cUAAAAAAAAAo6iFAAA/78dOxYAAAAAGORvPYtdhREAALCTUgAAAADspBQAAAAAOykFAAAAwE5KAQAAALCTUgAAAADspBQAAAAAOykFAAAAwC54v6zEUGE3FAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7799007,
     "sourceId": 12369410,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8031044,
     "sourceId": 12707189,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6508.836899,
   "end_time": "2025-08-27T17:52:42.681840",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T16:04:13.844941",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
