{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2608c984",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-31T17:28:04.735800Z",
     "iopub.status.busy": "2025-07-31T17:28:04.735073Z",
     "iopub.status.idle": "2025-07-31T17:28:06.182989Z",
     "shell.execute_reply": "2025-07-31T17:28:06.182060Z"
    },
    "papermill": {
     "duration": 1.452634,
     "end_time": "2025-07-31T17:28:06.184261",
     "exception": false,
     "start_time": "2025-07-31T17:28:04.731627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\n",
      "/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "986dc891",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:28:06.189301Z",
     "iopub.status.busy": "2025-07-31T17:28:06.188999Z",
     "iopub.status.idle": "2025-07-31T17:28:20.026326Z",
     "shell.execute_reply": "2025-07-31T17:28:20.025578Z"
    },
    "papermill": {
     "duration": 13.841083,
     "end_time": "2025-07-31T17:28:20.027702",
     "exception": false,
     "start_time": "2025-07-31T17:28:06.186619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-31 17:28:07.738822: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753982887.920473      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753982887.978168      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, median_absolute_error\n",
    "import os\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "tf.random.set_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Enable GPU if available\n",
    "gpus = tf.config.experimental.list_physical_devices('GPU')\n",
    "if gpus:\n",
    "    try:\n",
    "        for gpu in gpus:\n",
    "            tf.config.experimental.set_memory_growth(gpu, True)\n",
    "    except RuntimeError as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "372c997b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:28:20.033431Z",
     "iopub.status.busy": "2025-07-31T17:28:20.032454Z",
     "iopub.status.idle": "2025-07-31T17:28:20.037100Z",
     "shell.execute_reply": "2025-07-31T17:28:20.036559Z"
    },
    "papermill": {
     "duration": 0.008236,
     "end_time": "2025-07-31T17:28:20.038112",
     "exception": false,
     "start_time": "2025-07-31T17:28:20.029876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "n_embd = 64   #n_embd should be a multiple of head size     #128,256,512,1024\n",
    "head_size = 16     # 8,16,32,64,128, 256\n",
    "filter_size = 7   #0-200\n",
    "dropout_rate = 0.0  # 0,0.1,0.2,0.3,0.4,0.5\n",
    "ffdneurons = 128   #256,512,1025,2048,4096\n",
    "transformer_layers = 1 #1,2,3,4,5,6,7,8,9,10\n",
    "batch_size = 16    # 6,16,32,64,128,256,512,1024,2048,4096....... < 70,000 # higher the value more gpu consumption, if the consumption is more than gpu space than it can throw error, \n",
    "                   # in that case lower the batch_size. \n",
    "\n",
    "# donot change the following parameters\n",
    "block_size = 256-filter_size + 1 #don't change\n",
    "num_epochs = 1000\n",
    "inital_learning_rate = 0.01\n",
    "num_patience = 20\n",
    "early_stopping_patience = 50 # keep num_patience < early_stopping_patience"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2dc3abbf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:28:20.042516Z",
     "iopub.status.busy": "2025-07-31T17:28:20.042302Z",
     "iopub.status.idle": "2025-07-31T17:28:20.045429Z",
     "shell.execute_reply": "2025-07-31T17:28:20.044869Z"
    },
    "papermill": {
     "duration": 0.006482,
     "end_time": "2025-07-31T17:28:20.046452",
     "exception": false,
     "start_time": "2025-07-31T17:28:20.039970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "input_training_data = \"/kaggle/input/dataset-64-8/(64 8)(Training)Dataset-1.npz\"\n",
    "input_testing_data = \"/kaggle/input/dataset-64-8/(64 8)(Test)Dataset-1.npz\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7503088e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-31T17:28:20.051300Z",
     "iopub.status.busy": "2025-07-31T17:28:20.051068Z",
     "iopub.status.idle": "2025-07-31T19:17:06.605246Z",
     "shell.execute_reply": "2025-07-31T19:17:06.604505Z"
    },
    "papermill": {
     "duration": 6526.558263,
     "end_time": "2025-07-31T19:17:06.606494",
     "exception": false,
     "start_time": "2025-07-31T17:28:20.048231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Channel available for testing: 10000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n",
      "Number of Channel available for training: 70000\n",
      "                  Number of base-station: 18\n",
      "      Number of samples/taps per channel: 256\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1753982928.135684      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "I0000 00:00:1753982937.354588      19 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"network_cnn_transformer\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"network_cnn_transformer\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,192</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">ReLU</span>)                    │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">250</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,000</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,472</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TransformerEncoderBlock</span>)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ batch_normalization             │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m2\u001b[0m)        │             \u001b[38;5;34m8\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │        \u001b[38;5;34m16,192\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ re_lu (\u001b[38;5;33mReLU\u001b[0m)                    │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m250\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │        \u001b[38;5;34m16,000\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ transformer_encoder_block       │ ?                      │        \u001b[38;5;34m33,472\u001b[0m │\n",
       "│ (\u001b[38;5;33mTransformerEncoderBlock\u001b[0m)       │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m130\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">66,058</span> (258.04 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m66,058\u001b[0m (258.04 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">65,926</span> (257.52 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m65,926\u001b[0m (257.52 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> (528.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m132\u001b[0m (528.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1753982947.734829      56 service.cc:148] XLA service 0x7e0a2c0170f0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1753982947.735764      56 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1753982950.848149      56 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: val_loss improved from inf to 27.09093, saving model to models/best_model_full.keras\n",
      "4375/4375 - 32s - 7ms/step - loss: 122.6266 - mae: 7.7882 - val_loss: 27.0909 - val_mae: 4.0236 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\n",
      "Epoch 2: val_loss improved from 27.09093 to 13.91003, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 18.4871 - mae: 3.2930 - val_loss: 13.9100 - val_mae: 2.8476 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\n",
      "Epoch 3: val_loss improved from 13.91003 to 11.18216, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 12.4419 - mae: 2.7106 - val_loss: 11.1822 - val_mae: 2.5845 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\n",
      "Epoch 4: val_loss improved from 11.18216 to 6.72360, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 8.5027 - mae: 2.2264 - val_loss: 6.7236 - val_mae: 1.9731 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\n",
      "Epoch 5: val_loss improved from 6.72360 to 4.64640, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 5.5394 - mae: 1.7925 - val_loss: 4.6464 - val_mae: 1.6373 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\n",
      "Epoch 6: val_loss improved from 4.64640 to 3.48947, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 4.9188 - mae: 1.6328 - val_loss: 3.4895 - val_mae: 1.4443 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\n",
      "Epoch 7: val_loss did not improve from 3.48947\n",
      "4375/4375 - 19s - 4ms/step - loss: 3.4957 - mae: 1.3596 - val_loss: 8.7384 - val_mae: 2.2275 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\n",
      "Epoch 8: val_loss improved from 3.48947 to 2.67986, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 3.2591 - mae: 1.2825 - val_loss: 2.6799 - val_mae: 1.2372 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\n",
      "Epoch 9: val_loss did not improve from 2.67986\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.7508 - mae: 1.2183 - val_loss: 7.2548 - val_mae: 1.8642 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\n",
      "Epoch 10: val_loss improved from 2.67986 to 1.35353, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.8001 - mae: 1.0132 - val_loss: 1.3535 - val_mae: 0.8991 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\n",
      "Epoch 11: val_loss improved from 1.35353 to 1.23515, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 3.8612 - mae: 1.2947 - val_loss: 1.2351 - val_mae: 0.8564 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\n",
      "Epoch 12: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.6556 - mae: 1.1402 - val_loss: 1.8344 - val_mae: 1.0220 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\n",
      "Epoch 13: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.7858 - mae: 0.9929 - val_loss: 7.5819 - val_mae: 1.8877 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\n",
      "Epoch 14: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1822 - mae: 1.0689 - val_loss: 2.0116 - val_mae: 1.0748 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\n",
      "Epoch 15: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.6593 - mae: 0.9335 - val_loss: 1.5346 - val_mae: 0.9571 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\n",
      "Epoch 16: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1608 - mae: 1.0243 - val_loss: 1.3700 - val_mae: 0.9118 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\n",
      "Epoch 17: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.3198 - mae: 1.0614 - val_loss: 4.0242 - val_mae: 1.4601 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\n",
      "Epoch 18: val_loss did not improve from 1.23515\n",
      "4375/4375 - 20s - 4ms/step - loss: 3.3528 - mae: 1.3005 - val_loss: 2.5091 - val_mae: 1.2112 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\n",
      "Epoch 19: val_loss did not improve from 1.23515\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.2908 - mae: 1.0886 - val_loss: 1.2506 - val_mae: 0.8626 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\n",
      "Epoch 20: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.7134 - mae: 1.1128 - val_loss: 3.8837 - val_mae: 1.4586 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\n",
      "Epoch 21: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.4933 - mae: 1.1020 - val_loss: 1.5641 - val_mae: 0.9720 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\n",
      "Epoch 22: val_loss did not improve from 1.23515\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.4028 - mae: 1.0641 - val_loss: 1.5285 - val_mae: 0.9429 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\n",
      "Epoch 23: val_loss improved from 1.23515 to 1.20376, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.5004 - mae: 1.0313 - val_loss: 1.2038 - val_mae: 0.8508 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\n",
      "Epoch 24: val_loss did not improve from 1.20376\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1817 - mae: 0.9977 - val_loss: 1.5950 - val_mae: 0.9685 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\n",
      "Epoch 25: val_loss did not improve from 1.20376\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0140 - mae: 0.9988 - val_loss: 2.0234 - val_mae: 1.0485 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\n",
      "Epoch 26: val_loss improved from 1.20376 to 0.77769, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.1839 - mae: 0.8244 - val_loss: 0.7777 - val_mae: 0.6796 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\n",
      "Epoch 27: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.5851 - mae: 0.8550 - val_loss: 0.8947 - val_mae: 0.7364 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\n",
      "Epoch 28: val_loss did not improve from 0.77769\n",
      "4375/4375 - 20s - 4ms/step - loss: 3.2895 - mae: 1.1453 - val_loss: 1.8335 - val_mae: 0.9841 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\n",
      "Epoch 29: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.3363 - mae: 1.0210 - val_loss: 3.0305 - val_mae: 1.2819 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\n",
      "Epoch 30: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.5761 - mae: 1.0744 - val_loss: 0.9599 - val_mae: 0.7532 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\n",
      "Epoch 31: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.9235 - mae: 0.9480 - val_loss: 1.8397 - val_mae: 1.0066 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\n",
      "Epoch 32: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0776 - mae: 0.9862 - val_loss: 1.0112 - val_mae: 0.7650 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\n",
      "Epoch 33: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0084 - mae: 0.9248 - val_loss: 1.8086 - val_mae: 1.0189 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\n",
      "Epoch 34: val_loss did not improve from 0.77769\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.7729 - mae: 0.9553 - val_loss: 1.1728 - val_mae: 0.8181 - learning_rate: 0.0100\n",
      "Epoch 35/1000\n",
      "\n",
      "Epoch 35: val_loss did not improve from 0.77769\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.4379 - mae: 0.8765 - val_loss: 1.0947 - val_mae: 0.8072 - learning_rate: 0.0100\n",
      "Epoch 36/1000\n",
      "\n",
      "Epoch 36: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0954 - mae: 0.9841 - val_loss: 0.9786 - val_mae: 0.7709 - learning_rate: 0.0100\n",
      "Epoch 37/1000\n",
      "\n",
      "Epoch 37: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.2895 - mae: 1.0205 - val_loss: 1.1745 - val_mae: 0.8418 - learning_rate: 0.0100\n",
      "Epoch 38/1000\n",
      "\n",
      "Epoch 38: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.9410 - mae: 0.7433 - val_loss: 0.9363 - val_mae: 0.7703 - learning_rate: 0.0100\n",
      "Epoch 39/1000\n",
      "\n",
      "Epoch 39: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.4685 - mae: 0.9801 - val_loss: 0.9479 - val_mae: 0.7330 - learning_rate: 0.0100\n",
      "Epoch 40/1000\n",
      "\n",
      "Epoch 40: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.7418 - mae: 0.9363 - val_loss: 0.8611 - val_mae: 0.7092 - learning_rate: 0.0100\n",
      "Epoch 41/1000\n",
      "\n",
      "Epoch 41: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.2766 - mae: 0.9764 - val_loss: 1.2388 - val_mae: 0.8453 - learning_rate: 0.0100\n",
      "Epoch 42/1000\n",
      "\n",
      "Epoch 42: val_loss did not improve from 0.77769\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.5906 - mae: 0.8439 - val_loss: 2.0460 - val_mae: 1.0122 - learning_rate: 0.0100\n",
      "Epoch 43/1000\n",
      "\n",
      "Epoch 43: val_loss improved from 0.77769 to 0.76912, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.4339 - mae: 0.8603 - val_loss: 0.7691 - val_mae: 0.6640 - learning_rate: 0.0100\n",
      "Epoch 44/1000\n",
      "\n",
      "Epoch 44: val_loss did not improve from 0.76912\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.8780 - mae: 1.1199 - val_loss: 1.2452 - val_mae: 0.8498 - learning_rate: 0.0100\n",
      "Epoch 45/1000\n",
      "\n",
      "Epoch 45: val_loss did not improve from 0.76912\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.7201 - mae: 0.9237 - val_loss: 1.2189 - val_mae: 0.8534 - learning_rate: 0.0100\n",
      "Epoch 46/1000\n",
      "\n",
      "Epoch 46: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 3.7579 - mae: 1.1849 - val_loss: 2.8244 - val_mae: 1.2576 - learning_rate: 0.0100\n",
      "Epoch 47/1000\n",
      "\n",
      "Epoch 47: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.6847 - mae: 1.1253 - val_loss: 1.0283 - val_mae: 0.7813 - learning_rate: 0.0100\n",
      "Epoch 48/1000\n",
      "\n",
      "Epoch 48: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.0494 - mae: 0.9362 - val_loss: 1.1100 - val_mae: 0.8066 - learning_rate: 0.0100\n",
      "Epoch 49/1000\n",
      "\n",
      "Epoch 49: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.7825 - mae: 0.8986 - val_loss: 1.3554 - val_mae: 0.8984 - learning_rate: 0.0100\n",
      "Epoch 50/1000\n",
      "\n",
      "Epoch 50: val_loss did not improve from 0.76912\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.1385 - mae: 1.0071 - val_loss: 1.4413 - val_mae: 0.9143 - learning_rate: 0.0100\n",
      "Epoch 51/1000\n",
      "\n",
      "Epoch 51: val_loss did not improve from 0.76912\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.0839 - mae: 0.9912 - val_loss: 1.7652 - val_mae: 1.0100 - learning_rate: 0.0100\n",
      "Epoch 52/1000\n",
      "\n",
      "Epoch 52: val_loss did not improve from 0.76912\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.7941 - mae: 0.9119 - val_loss: 3.9032 - val_mae: 1.3613 - learning_rate: 0.0100\n",
      "Epoch 53/1000\n",
      "\n",
      "Epoch 53: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8279 - mae: 0.9669 - val_loss: 2.9688 - val_mae: 1.2676 - learning_rate: 0.0100\n",
      "Epoch 54/1000\n",
      "\n",
      "Epoch 54: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.2368 - mae: 1.0302 - val_loss: 1.2169 - val_mae: 0.8533 - learning_rate: 0.0100\n",
      "Epoch 55/1000\n",
      "\n",
      "Epoch 55: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8088 - mae: 0.9446 - val_loss: 1.3875 - val_mae: 0.8762 - learning_rate: 0.0100\n",
      "Epoch 56/1000\n",
      "\n",
      "Epoch 56: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.6273 - mae: 0.8906 - val_loss: 0.9042 - val_mae: 0.7371 - learning_rate: 0.0100\n",
      "Epoch 57/1000\n",
      "\n",
      "Epoch 57: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8365 - mae: 0.8796 - val_loss: 1.1315 - val_mae: 0.8093 - learning_rate: 0.0100\n",
      "Epoch 58/1000\n",
      "\n",
      "Epoch 58: val_loss did not improve from 0.76912\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.4069 - mae: 0.8486 - val_loss: 0.9756 - val_mae: 0.7510 - learning_rate: 0.0100\n",
      "Epoch 59/1000\n",
      "\n",
      "Epoch 59: val_loss improved from 0.76912 to 0.75642, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8617 - mae: 0.9013 - val_loss: 0.7564 - val_mae: 0.6776 - learning_rate: 0.0100\n",
      "Epoch 60/1000\n",
      "\n",
      "Epoch 60: val_loss did not improve from 0.75642\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.3860 - mae: 0.8388 - val_loss: 7.6086 - val_mae: 1.8106 - learning_rate: 0.0100\n",
      "Epoch 61/1000\n",
      "\n",
      "Epoch 61: val_loss improved from 0.75642 to 0.55425, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.1969 - mae: 0.7822 - val_loss: 0.5542 - val_mae: 0.5844 - learning_rate: 0.0100\n",
      "Epoch 62/1000\n",
      "\n",
      "Epoch 62: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.6979 - mae: 0.8873 - val_loss: 1.3307 - val_mae: 0.8818 - learning_rate: 0.0100\n",
      "Epoch 63/1000\n",
      "\n",
      "Epoch 63: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.2788 - mae: 0.8220 - val_loss: 1.1323 - val_mae: 0.8150 - learning_rate: 0.0100\n",
      "Epoch 64/1000\n",
      "\n",
      "Epoch 64: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.9883 - mae: 0.9587 - val_loss: 0.7029 - val_mae: 0.6513 - learning_rate: 0.0100\n",
      "Epoch 65/1000\n",
      "\n",
      "Epoch 65: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.4031 - mae: 0.8260 - val_loss: 9.2679 - val_mae: 2.2697 - learning_rate: 0.0100\n",
      "Epoch 66/1000\n",
      "\n",
      "Epoch 66: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.5811 - mae: 0.8624 - val_loss: 11.4586 - val_mae: 2.1378 - learning_rate: 0.0100\n",
      "Epoch 67/1000\n",
      "\n",
      "Epoch 67: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.3151 - mae: 0.9911 - val_loss: 0.7447 - val_mae: 0.6653 - learning_rate: 0.0100\n",
      "Epoch 68/1000\n",
      "\n",
      "Epoch 68: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.1449 - mae: 0.9567 - val_loss: 1.2091 - val_mae: 0.8352 - learning_rate: 0.0100\n",
      "Epoch 69/1000\n",
      "\n",
      "Epoch 69: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.3680 - mae: 0.9892 - val_loss: 1.5836 - val_mae: 0.9618 - learning_rate: 0.0100\n",
      "Epoch 70/1000\n",
      "\n",
      "Epoch 70: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.4033 - mae: 0.8510 - val_loss: 1.3568 - val_mae: 0.8992 - learning_rate: 0.0100\n",
      "Epoch 71/1000\n",
      "\n",
      "Epoch 71: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.4330 - mae: 0.8490 - val_loss: 0.8908 - val_mae: 0.7203 - learning_rate: 0.0100\n",
      "Epoch 72/1000\n",
      "\n",
      "Epoch 72: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 2.6009 - mae: 1.0171 - val_loss: 0.8172 - val_mae: 0.7054 - learning_rate: 0.0100\n",
      "Epoch 73/1000\n",
      "\n",
      "Epoch 73: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8394 - mae: 0.9173 - val_loss: 1.1954 - val_mae: 0.8296 - learning_rate: 0.0100\n",
      "Epoch 74/1000\n",
      "\n",
      "Epoch 74: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 5ms/step - loss: 1.6008 - mae: 0.9107 - val_loss: 1.8418 - val_mae: 1.0197 - learning_rate: 0.0100\n",
      "Epoch 75/1000\n",
      "\n",
      "Epoch 75: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.8154 - mae: 0.9367 - val_loss: 3.2248 - val_mae: 1.2269 - learning_rate: 0.0100\n",
      "Epoch 76/1000\n",
      "\n",
      "Epoch 76: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.6711 - mae: 0.9142 - val_loss: 0.9133 - val_mae: 0.7415 - learning_rate: 0.0100\n",
      "Epoch 77/1000\n",
      "\n",
      "Epoch 77: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.4463 - mae: 1.0176 - val_loss: 4.6948 - val_mae: 1.5062 - learning_rate: 0.0100\n",
      "Epoch 78/1000\n",
      "\n",
      "Epoch 78: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 2.4056 - mae: 1.0091 - val_loss: 1.6932 - val_mae: 0.9828 - learning_rate: 0.0100\n",
      "Epoch 79/1000\n",
      "\n",
      "Epoch 79: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 1.9021 - mae: 0.9667 - val_loss: 1.0833 - val_mae: 0.8010 - learning_rate: 0.0100\n",
      "Epoch 80/1000\n",
      "\n",
      "Epoch 80: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.6273 - mae: 0.8762 - val_loss: 1.0595 - val_mae: 0.7844 - learning_rate: 0.0100\n",
      "Epoch 81/1000\n",
      "\n",
      "Epoch 81: ReduceLROnPlateau reducing learning rate to 0.0009999999776482583.\n",
      "\n",
      "Epoch 81: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 4ms/step - loss: 1.7884 - mae: 0.9211 - val_loss: 1.3970 - val_mae: 0.8947 - learning_rate: 0.0100\n",
      "Epoch 82/1000\n",
      "\n",
      "Epoch 82: val_loss did not improve from 0.55425\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.7966 - mae: 0.6878 - val_loss: 0.6737 - val_mae: 0.6371 - learning_rate: 1.0000e-03\n",
      "Epoch 83/1000\n",
      "\n",
      "Epoch 83: val_loss did not improve from 0.55425\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.5833 - mae: 0.5942 - val_loss: 0.5544 - val_mae: 0.5783 - learning_rate: 1.0000e-03\n",
      "Epoch 84/1000\n",
      "\n",
      "Epoch 84: val_loss improved from 0.55425 to 0.45895, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.4798 - mae: 0.5388 - val_loss: 0.4590 - val_mae: 0.5250 - learning_rate: 1.0000e-03\n",
      "Epoch 85/1000\n",
      "\n",
      "Epoch 85: val_loss improved from 0.45895 to 0.40709, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.4045 - mae: 0.4960 - val_loss: 0.4071 - val_mae: 0.4962 - learning_rate: 1.0000e-03\n",
      "Epoch 86/1000\n",
      "\n",
      "Epoch 86: val_loss improved from 0.40709 to 0.35199, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.3556 - mae: 0.4660 - val_loss: 0.3520 - val_mae: 0.4604 - learning_rate: 1.0000e-03\n",
      "Epoch 87/1000\n",
      "\n",
      "Epoch 87: val_loss improved from 0.35199 to 0.34579, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.3270 - mae: 0.4471 - val_loss: 0.3458 - val_mae: 0.4552 - learning_rate: 1.0000e-03\n",
      "Epoch 88/1000\n",
      "\n",
      "Epoch 88: val_loss improved from 0.34579 to 0.29808, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2934 - mae: 0.4235 - val_loss: 0.2981 - val_mae: 0.4224 - learning_rate: 1.0000e-03\n",
      "Epoch 89/1000\n",
      "\n",
      "Epoch 89: val_loss did not improve from 0.29808\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2724 - mae: 0.4084 - val_loss: 0.3140 - val_mae: 0.4369 - learning_rate: 1.0000e-03\n",
      "Epoch 90/1000\n",
      "\n",
      "Epoch 90: val_loss improved from 0.29808 to 0.25971, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2569 - mae: 0.3966 - val_loss: 0.2597 - val_mae: 0.3961 - learning_rate: 1.0000e-03\n",
      "Epoch 91/1000\n",
      "\n",
      "Epoch 91: val_loss improved from 0.25971 to 0.24999, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.2389 - mae: 0.3830 - val_loss: 0.2500 - val_mae: 0.3886 - learning_rate: 1.0000e-03\n",
      "Epoch 92/1000\n",
      "\n",
      "Epoch 92: val_loss improved from 0.24999 to 0.23827, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.2218 - mae: 0.3688 - val_loss: 0.2383 - val_mae: 0.3795 - learning_rate: 1.0000e-03\n",
      "Epoch 93/1000\n",
      "\n",
      "Epoch 93: val_loss improved from 0.23827 to 0.23327, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.2088 - mae: 0.3578 - val_loss: 0.2333 - val_mae: 0.3750 - learning_rate: 1.0000e-03\n",
      "Epoch 94/1000\n",
      "\n",
      "Epoch 94: val_loss improved from 0.23327 to 0.22362, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1972 - mae: 0.3476 - val_loss: 0.2236 - val_mae: 0.3661 - learning_rate: 1.0000e-03\n",
      "Epoch 95/1000\n",
      "\n",
      "Epoch 95: val_loss improved from 0.22362 to 0.20803, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1885 - mae: 0.3396 - val_loss: 0.2080 - val_mae: 0.3536 - learning_rate: 1.0000e-03\n",
      "Epoch 96/1000\n",
      "\n",
      "Epoch 96: val_loss improved from 0.20803 to 0.20180, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1759 - mae: 0.3288 - val_loss: 0.2018 - val_mae: 0.3486 - learning_rate: 1.0000e-03\n",
      "Epoch 97/1000\n",
      "\n",
      "Epoch 97: val_loss improved from 0.20180 to 0.18545, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1674 - mae: 0.3209 - val_loss: 0.1855 - val_mae: 0.3330 - learning_rate: 1.0000e-03\n",
      "Epoch 98/1000\n",
      "\n",
      "Epoch 98: val_loss improved from 0.18545 to 0.17693, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1609 - mae: 0.3143 - val_loss: 0.1769 - val_mae: 0.3248 - learning_rate: 1.0000e-03\n",
      "Epoch 99/1000\n",
      "\n",
      "Epoch 99: val_loss did not improve from 0.17693\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1555 - mae: 0.3096 - val_loss: 0.1780 - val_mae: 0.3288 - learning_rate: 1.0000e-03\n",
      "Epoch 100/1000\n",
      "\n",
      "Epoch 100: val_loss improved from 0.17693 to 0.17636, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1500 - mae: 0.3040 - val_loss: 0.1764 - val_mae: 0.3260 - learning_rate: 1.0000e-03\n",
      "Epoch 101/1000\n",
      "\n",
      "Epoch 101: val_loss improved from 0.17636 to 0.16591, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1481 - mae: 0.3020 - val_loss: 0.1659 - val_mae: 0.3150 - learning_rate: 1.0000e-03\n",
      "Epoch 102/1000\n",
      "\n",
      "Epoch 102: val_loss improved from 0.16591 to 0.16259, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1446 - mae: 0.2986 - val_loss: 0.1626 - val_mae: 0.3128 - learning_rate: 1.0000e-03\n",
      "Epoch 103/1000\n",
      "\n",
      "Epoch 103: val_loss improved from 0.16259 to 0.15635, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1377 - mae: 0.2911 - val_loss: 0.1564 - val_mae: 0.3060 - learning_rate: 1.0000e-03\n",
      "Epoch 104/1000\n",
      "\n",
      "Epoch 104: val_loss did not improve from 0.15635\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1344 - mae: 0.2876 - val_loss: 0.1602 - val_mae: 0.3085 - learning_rate: 1.0000e-03\n",
      "Epoch 105/1000\n",
      "\n",
      "Epoch 105: val_loss improved from 0.15635 to 0.15086, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1294 - mae: 0.2823 - val_loss: 0.1509 - val_mae: 0.2999 - learning_rate: 1.0000e-03\n",
      "Epoch 106/1000\n",
      "\n",
      "Epoch 106: val_loss improved from 0.15086 to 0.14434, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1267 - mae: 0.2795 - val_loss: 0.1443 - val_mae: 0.2935 - learning_rate: 1.0000e-03\n",
      "Epoch 107/1000\n",
      "\n",
      "Epoch 107: val_loss did not improve from 0.14434\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1242 - mae: 0.2759 - val_loss: 0.1453 - val_mae: 0.2938 - learning_rate: 1.0000e-03\n",
      "Epoch 108/1000\n",
      "\n",
      "Epoch 108: val_loss improved from 0.14434 to 0.14329, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1202 - mae: 0.2723 - val_loss: 0.1433 - val_mae: 0.2911 - learning_rate: 1.0000e-03\n",
      "Epoch 109/1000\n",
      "\n",
      "Epoch 109: val_loss did not improve from 0.14329\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1181 - mae: 0.2697 - val_loss: 0.1471 - val_mae: 0.2957 - learning_rate: 1.0000e-03\n",
      "Epoch 110/1000\n",
      "\n",
      "Epoch 110: val_loss improved from 0.14329 to 0.13069, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1147 - mae: 0.2661 - val_loss: 0.1307 - val_mae: 0.2791 - learning_rate: 1.0000e-03\n",
      "Epoch 111/1000\n",
      "\n",
      "Epoch 111: val_loss improved from 0.13069 to 0.13068, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.1133 - mae: 0.2641 - val_loss: 0.1307 - val_mae: 0.2791 - learning_rate: 1.0000e-03\n",
      "Epoch 112/1000\n",
      "\n",
      "Epoch 112: val_loss improved from 0.13068 to 0.12928, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1134 - mae: 0.2631 - val_loss: 0.1293 - val_mae: 0.2775 - learning_rate: 1.0000e-03\n",
      "Epoch 113/1000\n",
      "\n",
      "Epoch 113: val_loss did not improve from 0.12928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1086 - mae: 0.2589 - val_loss: 0.1348 - val_mae: 0.2822 - learning_rate: 1.0000e-03\n",
      "Epoch 114/1000\n",
      "\n",
      "Epoch 114: val_loss did not improve from 0.12928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1087 - mae: 0.2586 - val_loss: 0.1390 - val_mae: 0.2903 - learning_rate: 1.0000e-03\n",
      "Epoch 115/1000\n",
      "\n",
      "Epoch 115: val_loss did not improve from 0.12928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1073 - mae: 0.2576 - val_loss: 0.1359 - val_mae: 0.2852 - learning_rate: 1.0000e-03\n",
      "Epoch 116/1000\n",
      "\n",
      "Epoch 116: val_loss did not improve from 0.12928\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1052 - mae: 0.2548 - val_loss: 0.1313 - val_mae: 0.2773 - learning_rate: 1.0000e-03\n",
      "Epoch 117/1000\n",
      "\n",
      "Epoch 117: val_loss improved from 0.12928 to 0.12152, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1042 - mae: 0.2535 - val_loss: 0.1215 - val_mae: 0.2696 - learning_rate: 1.0000e-03\n",
      "Epoch 118/1000\n",
      "\n",
      "Epoch 118: val_loss did not improve from 0.12152\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1026 - mae: 0.2515 - val_loss: 0.1515 - val_mae: 0.2916 - learning_rate: 1.0000e-03\n",
      "Epoch 119/1000\n",
      "\n",
      "Epoch 119: val_loss improved from 0.12152 to 0.12086, saving model to models/best_model_full.keras\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.1024 - mae: 0.2506 - val_loss: 0.1209 - val_mae: 0.2693 - learning_rate: 1.0000e-03\n",
      "Epoch 120/1000\n",
      "\n",
      "Epoch 120: val_loss did not improve from 0.12086\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0993 - mae: 0.2474 - val_loss: 0.1262 - val_mae: 0.2728 - learning_rate: 1.0000e-03\n",
      "Epoch 121/1000\n",
      "\n",
      "Epoch 121: val_loss improved from 0.12086 to 0.12017, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0993 - mae: 0.2476 - val_loss: 0.1202 - val_mae: 0.2654 - learning_rate: 1.0000e-03\n",
      "Epoch 122/1000\n",
      "\n",
      "Epoch 122: val_loss improved from 0.12017 to 0.11911, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0979 - mae: 0.2455 - val_loss: 0.1191 - val_mae: 0.2656 - learning_rate: 1.0000e-03\n",
      "Epoch 123/1000\n",
      "\n",
      "Epoch 123: val_loss did not improve from 0.11911\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0971 - mae: 0.2448 - val_loss: 0.1273 - val_mae: 0.2756 - learning_rate: 1.0000e-03\n",
      "Epoch 124/1000\n",
      "\n",
      "Epoch 124: val_loss did not improve from 0.11911\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0955 - mae: 0.2427 - val_loss: 0.1196 - val_mae: 0.2645 - learning_rate: 1.0000e-03\n",
      "Epoch 125/1000\n",
      "\n",
      "Epoch 125: val_loss did not improve from 0.11911\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0951 - mae: 0.2423 - val_loss: 0.1220 - val_mae: 0.2709 - learning_rate: 1.0000e-03\n",
      "Epoch 126/1000\n",
      "\n",
      "Epoch 126: val_loss improved from 0.11911 to 0.11632, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0942 - mae: 0.2408 - val_loss: 0.1163 - val_mae: 0.2631 - learning_rate: 1.0000e-03\n",
      "Epoch 127/1000\n",
      "\n",
      "Epoch 127: val_loss improved from 0.11632 to 0.11140, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0930 - mae: 0.2397 - val_loss: 0.1114 - val_mae: 0.2541 - learning_rate: 1.0000e-03\n",
      "Epoch 128/1000\n",
      "\n",
      "Epoch 128: val_loss did not improve from 0.11140\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0927 - mae: 0.2393 - val_loss: 0.1193 - val_mae: 0.2628 - learning_rate: 1.0000e-03\n",
      "Epoch 129/1000\n",
      "\n",
      "Epoch 129: val_loss did not improve from 0.11140\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0918 - mae: 0.2381 - val_loss: 0.1179 - val_mae: 0.2647 - learning_rate: 1.0000e-03\n",
      "Epoch 130/1000\n",
      "\n",
      "Epoch 130: val_loss did not improve from 0.11140\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0913 - mae: 0.2375 - val_loss: 0.1252 - val_mae: 0.2730 - learning_rate: 1.0000e-03\n",
      "Epoch 131/1000\n",
      "\n",
      "Epoch 131: val_loss did not improve from 0.11140\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0909 - mae: 0.2365 - val_loss: 0.1117 - val_mae: 0.2572 - learning_rate: 1.0000e-03\n",
      "Epoch 132/1000\n",
      "\n",
      "Epoch 132: val_loss did not improve from 0.11140\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0905 - mae: 0.2362 - val_loss: 0.1158 - val_mae: 0.2611 - learning_rate: 1.0000e-03\n",
      "Epoch 133/1000\n",
      "\n",
      "Epoch 133: val_loss did not improve from 0.11140\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0898 - mae: 0.2357 - val_loss: 0.1138 - val_mae: 0.2612 - learning_rate: 1.0000e-03\n",
      "Epoch 134/1000\n",
      "\n",
      "Epoch 134: val_loss did not improve from 0.11140\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0888 - mae: 0.2340 - val_loss: 0.1139 - val_mae: 0.2601 - learning_rate: 1.0000e-03\n",
      "Epoch 135/1000\n",
      "\n",
      "Epoch 135: val_loss improved from 0.11140 to 0.10956, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0882 - mae: 0.2330 - val_loss: 0.1096 - val_mae: 0.2560 - learning_rate: 1.0000e-03\n",
      "Epoch 136/1000\n",
      "\n",
      "Epoch 136: val_loss improved from 0.10956 to 0.10561, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0877 - mae: 0.2328 - val_loss: 0.1056 - val_mae: 0.2506 - learning_rate: 1.0000e-03\n",
      "Epoch 137/1000\n",
      "\n",
      "Epoch 137: val_loss did not improve from 0.10561\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0880 - mae: 0.2329 - val_loss: 0.1167 - val_mae: 0.2613 - learning_rate: 1.0000e-03\n",
      "Epoch 138/1000\n",
      "\n",
      "Epoch 138: val_loss did not improve from 0.10561\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0876 - mae: 0.2318 - val_loss: 0.1072 - val_mae: 0.2522 - learning_rate: 1.0000e-03\n",
      "Epoch 139/1000\n",
      "\n",
      "Epoch 139: val_loss did not improve from 0.10561\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0868 - mae: 0.2314 - val_loss: 0.1162 - val_mae: 0.2633 - learning_rate: 1.0000e-03\n",
      "Epoch 140/1000\n",
      "\n",
      "Epoch 140: val_loss did not improve from 0.10561\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0876 - mae: 0.2317 - val_loss: 0.1101 - val_mae: 0.2546 - learning_rate: 1.0000e-03\n",
      "Epoch 141/1000\n",
      "\n",
      "Epoch 141: val_loss did not improve from 0.10561\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0877 - mae: 0.2325 - val_loss: 0.1100 - val_mae: 0.2548 - learning_rate: 1.0000e-03\n",
      "Epoch 142/1000\n",
      "\n",
      "Epoch 142: val_loss did not improve from 0.10561\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0875 - mae: 0.2309 - val_loss: 0.1105 - val_mae: 0.2565 - learning_rate: 1.0000e-03\n",
      "Epoch 143/1000\n",
      "\n",
      "Epoch 143: val_loss did not improve from 0.10561\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0850 - mae: 0.2292 - val_loss: 0.1126 - val_mae: 0.2585 - learning_rate: 1.0000e-03\n",
      "Epoch 144/1000\n",
      "\n",
      "Epoch 144: val_loss did not improve from 0.10561\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0864 - mae: 0.2309 - val_loss: 0.1094 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 145/1000\n",
      "\n",
      "Epoch 145: val_loss improved from 0.10561 to 0.10208, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0848 - mae: 0.2286 - val_loss: 0.1021 - val_mae: 0.2456 - learning_rate: 1.0000e-03\n",
      "Epoch 146/1000\n",
      "\n",
      "Epoch 146: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0854 - mae: 0.2294 - val_loss: 0.1106 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 147/1000\n",
      "\n",
      "Epoch 147: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0855 - mae: 0.2293 - val_loss: 0.1089 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 148/1000\n",
      "\n",
      "Epoch 148: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0843 - mae: 0.2283 - val_loss: 0.1054 - val_mae: 0.2482 - learning_rate: 1.0000e-03\n",
      "Epoch 149/1000\n",
      "\n",
      "Epoch 149: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0849 - mae: 0.2286 - val_loss: 0.1110 - val_mae: 0.2559 - learning_rate: 1.0000e-03\n",
      "Epoch 150/1000\n",
      "\n",
      "Epoch 150: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0837 - mae: 0.2275 - val_loss: 0.1025 - val_mae: 0.2454 - learning_rate: 1.0000e-03\n",
      "Epoch 151/1000\n",
      "\n",
      "Epoch 151: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0839 - mae: 0.2276 - val_loss: 0.1067 - val_mae: 0.2509 - learning_rate: 1.0000e-03\n",
      "Epoch 152/1000\n",
      "\n",
      "Epoch 152: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0836 - mae: 0.2269 - val_loss: 0.1054 - val_mae: 0.2482 - learning_rate: 1.0000e-03\n",
      "Epoch 153/1000\n",
      "\n",
      "Epoch 153: val_loss did not improve from 0.10208\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0879 - mae: 0.2292 - val_loss: 0.1127 - val_mae: 0.2604 - learning_rate: 1.0000e-03\n",
      "Epoch 154/1000\n",
      "\n",
      "Epoch 154: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0809 - mae: 0.2232 - val_loss: 0.1084 - val_mae: 0.2566 - learning_rate: 1.0000e-03\n",
      "Epoch 155/1000\n",
      "\n",
      "Epoch 155: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0823 - mae: 0.2254 - val_loss: 0.1056 - val_mae: 0.2502 - learning_rate: 1.0000e-03\n",
      "Epoch 156/1000\n",
      "\n",
      "Epoch 156: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0835 - mae: 0.2266 - val_loss: 0.1420 - val_mae: 0.2836 - learning_rate: 1.0000e-03\n",
      "Epoch 157/1000\n",
      "\n",
      "Epoch 157: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0829 - mae: 0.2262 - val_loss: 0.1033 - val_mae: 0.2485 - learning_rate: 1.0000e-03\n",
      "Epoch 158/1000\n",
      "\n",
      "Epoch 158: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.1037 - mae: 0.2300 - val_loss: 0.1038 - val_mae: 0.2484 - learning_rate: 1.0000e-03\n",
      "Epoch 159/1000\n",
      "\n",
      "Epoch 159: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0774 - mae: 0.2183 - val_loss: 0.1049 - val_mae: 0.2493 - learning_rate: 1.0000e-03\n",
      "Epoch 160/1000\n",
      "\n",
      "Epoch 160: val_loss did not improve from 0.10208\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0805 - mae: 0.2229 - val_loss: 0.1050 - val_mae: 0.2485 - learning_rate: 1.0000e-03\n",
      "Epoch 161/1000\n",
      "\n",
      "Epoch 161: val_loss improved from 0.10208 to 0.09647, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0826 - mae: 0.2258 - val_loss: 0.0965 - val_mae: 0.2406 - learning_rate: 1.0000e-03\n",
      "Epoch 162/1000\n",
      "\n",
      "Epoch 162: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0823 - mae: 0.2253 - val_loss: 0.1046 - val_mae: 0.2488 - learning_rate: 1.0000e-03\n",
      "Epoch 163/1000\n",
      "\n",
      "Epoch 163: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0826 - mae: 0.2253 - val_loss: 0.1146 - val_mae: 0.2635 - learning_rate: 1.0000e-03\n",
      "Epoch 164/1000\n",
      "\n",
      "Epoch 164: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0816 - mae: 0.2241 - val_loss: 0.1056 - val_mae: 0.2530 - learning_rate: 1.0000e-03\n",
      "Epoch 165/1000\n",
      "\n",
      "Epoch 165: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0817 - mae: 0.2244 - val_loss: 0.1039 - val_mae: 0.2483 - learning_rate: 1.0000e-03\n",
      "Epoch 166/1000\n",
      "\n",
      "Epoch 166: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0818 - mae: 0.2241 - val_loss: 0.1024 - val_mae: 0.2478 - learning_rate: 1.0000e-03\n",
      "Epoch 167/1000\n",
      "\n",
      "Epoch 167: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0811 - mae: 0.2238 - val_loss: 0.1097 - val_mae: 0.2549 - learning_rate: 1.0000e-03\n",
      "Epoch 168/1000\n",
      "\n",
      "Epoch 168: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0809 - mae: 0.2233 - val_loss: 0.1045 - val_mae: 0.2513 - learning_rate: 1.0000e-03\n",
      "Epoch 169/1000\n",
      "\n",
      "Epoch 169: val_loss did not improve from 0.09647\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0810 - mae: 0.2232 - val_loss: 0.1070 - val_mae: 0.2532 - learning_rate: 1.0000e-03\n",
      "Epoch 170/1000\n",
      "\n",
      "Epoch 170: val_loss improved from 0.09647 to 0.09588, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0817 - mae: 0.2241 - val_loss: 0.0959 - val_mae: 0.2388 - learning_rate: 1.0000e-03\n",
      "Epoch 171/1000\n",
      "\n",
      "Epoch 171: val_loss did not improve from 0.09588\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0812 - mae: 0.2233 - val_loss: 0.1007 - val_mae: 0.2437 - learning_rate: 1.0000e-03\n",
      "Epoch 172/1000\n",
      "\n",
      "Epoch 172: val_loss did not improve from 0.09588\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0819 - mae: 0.2245 - val_loss: 0.1007 - val_mae: 0.2434 - learning_rate: 1.0000e-03\n",
      "Epoch 173/1000\n",
      "\n",
      "Epoch 173: val_loss did not improve from 0.09588\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0803 - mae: 0.2227 - val_loss: 0.1092 - val_mae: 0.2545 - learning_rate: 1.0000e-03\n",
      "Epoch 174/1000\n",
      "\n",
      "Epoch 174: val_loss improved from 0.09588 to 0.09279, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0832 - mae: 0.2243 - val_loss: 0.0928 - val_mae: 0.2339 - learning_rate: 1.0000e-03\n",
      "Epoch 175/1000\n",
      "\n",
      "Epoch 175: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0795 - mae: 0.2212 - val_loss: 0.0987 - val_mae: 0.2433 - learning_rate: 1.0000e-03\n",
      "Epoch 176/1000\n",
      "\n",
      "Epoch 176: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0812 - mae: 0.2236 - val_loss: 0.0978 - val_mae: 0.2420 - learning_rate: 1.0000e-03\n",
      "Epoch 177/1000\n",
      "\n",
      "Epoch 177: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0805 - mae: 0.2229 - val_loss: 0.1042 - val_mae: 0.2496 - learning_rate: 1.0000e-03\n",
      "Epoch 178/1000\n",
      "\n",
      "Epoch 178: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0801 - mae: 0.2224 - val_loss: 0.0962 - val_mae: 0.2397 - learning_rate: 1.0000e-03\n",
      "Epoch 179/1000\n",
      "\n",
      "Epoch 179: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0803 - mae: 0.2219 - val_loss: 0.0997 - val_mae: 0.2435 - learning_rate: 1.0000e-03\n",
      "Epoch 180/1000\n",
      "\n",
      "Epoch 180: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0797 - mae: 0.2216 - val_loss: 0.1046 - val_mae: 0.2500 - learning_rate: 1.0000e-03\n",
      "Epoch 181/1000\n",
      "\n",
      "Epoch 181: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0799 - mae: 0.2218 - val_loss: 0.1154 - val_mae: 0.2603 - learning_rate: 1.0000e-03\n",
      "Epoch 182/1000\n",
      "\n",
      "Epoch 182: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0797 - mae: 0.2213 - val_loss: 0.0986 - val_mae: 0.2426 - learning_rate: 1.0000e-03\n",
      "Epoch 183/1000\n",
      "\n",
      "Epoch 183: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0793 - mae: 0.2213 - val_loss: 0.0975 - val_mae: 0.2408 - learning_rate: 1.0000e-03\n",
      "Epoch 184/1000\n",
      "\n",
      "Epoch 184: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0810 - mae: 0.2224 - val_loss: 0.0978 - val_mae: 0.2414 - learning_rate: 1.0000e-03\n",
      "Epoch 185/1000\n",
      "\n",
      "Epoch 185: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0787 - mae: 0.2205 - val_loss: 0.0936 - val_mae: 0.2377 - learning_rate: 1.0000e-03\n",
      "Epoch 186/1000\n",
      "\n",
      "Epoch 186: val_loss did not improve from 0.09279\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0794 - mae: 0.2208 - val_loss: 0.0998 - val_mae: 0.2449 - learning_rate: 1.0000e-03\n",
      "Epoch 187/1000\n",
      "\n",
      "Epoch 187: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0793 - mae: 0.2202 - val_loss: 0.1003 - val_mae: 0.2454 - learning_rate: 1.0000e-03\n",
      "Epoch 188/1000\n",
      "\n",
      "Epoch 188: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0784 - mae: 0.2198 - val_loss: 0.0973 - val_mae: 0.2402 - learning_rate: 1.0000e-03\n",
      "Epoch 189/1000\n",
      "\n",
      "Epoch 189: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0796 - mae: 0.2211 - val_loss: 0.1040 - val_mae: 0.2497 - learning_rate: 1.0000e-03\n",
      "Epoch 190/1000\n",
      "\n",
      "Epoch 190: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0788 - mae: 0.2207 - val_loss: 0.1011 - val_mae: 0.2466 - learning_rate: 1.0000e-03\n",
      "Epoch 191/1000\n",
      "\n",
      "Epoch 191: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0793 - mae: 0.2210 - val_loss: 0.0950 - val_mae: 0.2373 - learning_rate: 1.0000e-03\n",
      "Epoch 192/1000\n",
      "\n",
      "Epoch 192: val_loss did not improve from 0.09279\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0781 - mae: 0.2193 - val_loss: 0.0964 - val_mae: 0.2413 - learning_rate: 1.0000e-03\n",
      "Epoch 193/1000\n",
      "\n",
      "Epoch 193: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0779 - mae: 0.2192 - val_loss: 0.1067 - val_mae: 0.2499 - learning_rate: 1.0000e-03\n",
      "Epoch 194/1000\n",
      "\n",
      "Epoch 194: ReduceLROnPlateau reducing learning rate to 9.999999310821295e-05.\n",
      "\n",
      "Epoch 194: val_loss did not improve from 0.09279\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0793 - mae: 0.2206 - val_loss: 0.0930 - val_mae: 0.2357 - learning_rate: 1.0000e-03\n",
      "Epoch 195/1000\n",
      "\n",
      "Epoch 195: val_loss improved from 0.09279 to 0.06605, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0451 - mae: 0.1670 - val_loss: 0.0660 - val_mae: 0.1971 - learning_rate: 1.0000e-04\n",
      "Epoch 196/1000\n",
      "\n",
      "Epoch 196: val_loss improved from 0.06605 to 0.06546, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0409 - mae: 0.1595 - val_loss: 0.0655 - val_mae: 0.1955 - learning_rate: 1.0000e-04\n",
      "Epoch 197/1000\n",
      "\n",
      "Epoch 197: val_loss improved from 0.06546 to 0.06434, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0395 - mae: 0.1568 - val_loss: 0.0643 - val_mae: 0.1938 - learning_rate: 1.0000e-04\n",
      "Epoch 198/1000\n",
      "\n",
      "Epoch 198: val_loss did not improve from 0.06434\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0387 - mae: 0.1552 - val_loss: 0.0660 - val_mae: 0.1963 - learning_rate: 1.0000e-04\n",
      "Epoch 199/1000\n",
      "\n",
      "Epoch 199: val_loss did not improve from 0.06434\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0381 - mae: 0.1538 - val_loss: 0.0644 - val_mae: 0.1938 - learning_rate: 1.0000e-04\n",
      "Epoch 200/1000\n",
      "\n",
      "Epoch 200: val_loss improved from 0.06434 to 0.06362, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0376 - mae: 0.1530 - val_loss: 0.0636 - val_mae: 0.1927 - learning_rate: 1.0000e-04\n",
      "Epoch 201/1000\n",
      "\n",
      "Epoch 201: val_loss did not improve from 0.06362\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0372 - mae: 0.1522 - val_loss: 0.0644 - val_mae: 0.1935 - learning_rate: 1.0000e-04\n",
      "Epoch 202/1000\n",
      "\n",
      "Epoch 202: val_loss did not improve from 0.06362\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0369 - mae: 0.1514 - val_loss: 0.0640 - val_mae: 0.1932 - learning_rate: 1.0000e-04\n",
      "Epoch 203/1000\n",
      "\n",
      "Epoch 203: val_loss did not improve from 0.06362\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0367 - mae: 0.1510 - val_loss: 0.0637 - val_mae: 0.1924 - learning_rate: 1.0000e-04\n",
      "Epoch 204/1000\n",
      "\n",
      "Epoch 204: val_loss did not improve from 0.06362\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0364 - mae: 0.1504 - val_loss: 0.0641 - val_mae: 0.1929 - learning_rate: 1.0000e-04\n",
      "Epoch 205/1000\n",
      "\n",
      "Epoch 205: val_loss did not improve from 0.06362\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0362 - mae: 0.1500 - val_loss: 0.0643 - val_mae: 0.1930 - learning_rate: 1.0000e-04\n",
      "Epoch 206/1000\n",
      "\n",
      "Epoch 206: val_loss did not improve from 0.06362\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0360 - mae: 0.1495 - val_loss: 0.0638 - val_mae: 0.1923 - learning_rate: 1.0000e-04\n",
      "Epoch 207/1000\n",
      "\n",
      "Epoch 207: val_loss did not improve from 0.06362\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0359 - mae: 0.1493 - val_loss: 0.0638 - val_mae: 0.1925 - learning_rate: 1.0000e-04\n",
      "Epoch 208/1000\n",
      "\n",
      "Epoch 208: val_loss improved from 0.06362 to 0.06343, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0356 - mae: 0.1488 - val_loss: 0.0634 - val_mae: 0.1918 - learning_rate: 1.0000e-04\n",
      "Epoch 209/1000\n",
      "\n",
      "Epoch 209: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0355 - mae: 0.1485 - val_loss: 0.0641 - val_mae: 0.1926 - learning_rate: 1.0000e-04\n",
      "Epoch 210/1000\n",
      "\n",
      "Epoch 210: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0353 - mae: 0.1481 - val_loss: 0.0641 - val_mae: 0.1932 - learning_rate: 1.0000e-04\n",
      "Epoch 211/1000\n",
      "\n",
      "Epoch 211: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0352 - mae: 0.1480 - val_loss: 0.0638 - val_mae: 0.1920 - learning_rate: 1.0000e-04\n",
      "Epoch 212/1000\n",
      "\n",
      "Epoch 212: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0350 - mae: 0.1475 - val_loss: 0.0647 - val_mae: 0.1931 - learning_rate: 1.0000e-04\n",
      "Epoch 213/1000\n",
      "\n",
      "Epoch 213: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0349 - mae: 0.1474 - val_loss: 0.0641 - val_mae: 0.1923 - learning_rate: 1.0000e-04\n",
      "Epoch 214/1000\n",
      "\n",
      "Epoch 214: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0347 - mae: 0.1469 - val_loss: 0.0638 - val_mae: 0.1920 - learning_rate: 1.0000e-04\n",
      "Epoch 215/1000\n",
      "\n",
      "Epoch 215: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0346 - mae: 0.1467 - val_loss: 0.0640 - val_mae: 0.1921 - learning_rate: 1.0000e-04\n",
      "Epoch 216/1000\n",
      "\n",
      "Epoch 216: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0346 - mae: 0.1465 - val_loss: 0.0641 - val_mae: 0.1922 - learning_rate: 1.0000e-04\n",
      "Epoch 217/1000\n",
      "\n",
      "Epoch 217: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0344 - mae: 0.1462 - val_loss: 0.0640 - val_mae: 0.1919 - learning_rate: 1.0000e-04\n",
      "Epoch 218/1000\n",
      "\n",
      "Epoch 218: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0343 - mae: 0.1461 - val_loss: 0.0646 - val_mae: 0.1926 - learning_rate: 1.0000e-04\n",
      "Epoch 219/1000\n",
      "\n",
      "Epoch 219: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0342 - mae: 0.1459 - val_loss: 0.0651 - val_mae: 0.1935 - learning_rate: 1.0000e-04\n",
      "Epoch 220/1000\n",
      "\n",
      "Epoch 220: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0342 - mae: 0.1458 - val_loss: 0.0641 - val_mae: 0.1920 - learning_rate: 1.0000e-04\n",
      "Epoch 221/1000\n",
      "\n",
      "Epoch 221: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0341 - mae: 0.1455 - val_loss: 0.0638 - val_mae: 0.1915 - learning_rate: 1.0000e-04\n",
      "Epoch 222/1000\n",
      "\n",
      "Epoch 222: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0340 - mae: 0.1453 - val_loss: 0.0637 - val_mae: 0.1915 - learning_rate: 1.0000e-04\n",
      "Epoch 223/1000\n",
      "\n",
      "Epoch 223: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0338 - mae: 0.1450 - val_loss: 0.0639 - val_mae: 0.1914 - learning_rate: 1.0000e-04\n",
      "Epoch 224/1000\n",
      "\n",
      "Epoch 224: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0338 - mae: 0.1449 - val_loss: 0.0643 - val_mae: 0.1923 - learning_rate: 1.0000e-04\n",
      "Epoch 225/1000\n",
      "\n",
      "Epoch 225: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0337 - mae: 0.1446 - val_loss: 0.0646 - val_mae: 0.1928 - learning_rate: 1.0000e-04\n",
      "Epoch 226/1000\n",
      "\n",
      "Epoch 226: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0337 - mae: 0.1445 - val_loss: 0.0641 - val_mae: 0.1918 - learning_rate: 1.0000e-04\n",
      "Epoch 227/1000\n",
      "\n",
      "Epoch 227: val_loss did not improve from 0.06343\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0335 - mae: 0.1443 - val_loss: 0.0651 - val_mae: 0.1934 - learning_rate: 1.0000e-04\n",
      "Epoch 228/1000\n",
      "\n",
      "Epoch 228: ReduceLROnPlateau reducing learning rate to 9.999999019782991e-06.\n",
      "\n",
      "Epoch 228: val_loss did not improve from 0.06343\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0334 - mae: 0.1441 - val_loss: 0.0644 - val_mae: 0.1921 - learning_rate: 1.0000e-04\n",
      "Epoch 229/1000\n",
      "\n",
      "Epoch 229: val_loss improved from 0.06343 to 0.06239, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0306 - mae: 0.1379 - val_loss: 0.0624 - val_mae: 0.1890 - learning_rate: 1.0000e-05\n",
      "Epoch 230/1000\n",
      "\n",
      "Epoch 230: val_loss improved from 0.06239 to 0.06237, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0303 - mae: 0.1372 - val_loss: 0.0624 - val_mae: 0.1890 - learning_rate: 1.0000e-05\n",
      "Epoch 231/1000\n",
      "\n",
      "Epoch 231: val_loss did not improve from 0.06237\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0303 - mae: 0.1371 - val_loss: 0.0625 - val_mae: 0.1890 - learning_rate: 1.0000e-05\n",
      "Epoch 232/1000\n",
      "\n",
      "Epoch 232: val_loss did not improve from 0.06237\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0302 - mae: 0.1370 - val_loss: 0.0624 - val_mae: 0.1888 - learning_rate: 1.0000e-05\n",
      "Epoch 233/1000\n",
      "\n",
      "Epoch 233: val_loss improved from 0.06237 to 0.06236, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0302 - mae: 0.1369 - val_loss: 0.0624 - val_mae: 0.1888 - learning_rate: 1.0000e-05\n",
      "Epoch 234/1000\n",
      "\n",
      "Epoch 234: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0302 - mae: 0.1369 - val_loss: 0.0624 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 235/1000\n",
      "\n",
      "Epoch 235: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0302 - mae: 0.1368 - val_loss: 0.0624 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 236/1000\n",
      "\n",
      "Epoch 236: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0302 - mae: 0.1368 - val_loss: 0.0624 - val_mae: 0.1888 - learning_rate: 1.0000e-05\n",
      "Epoch 237/1000\n",
      "\n",
      "Epoch 237: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0301 - mae: 0.1368 - val_loss: 0.0624 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 238/1000\n",
      "\n",
      "Epoch 238: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0301 - mae: 0.1367 - val_loss: 0.0625 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 239/1000\n",
      "\n",
      "Epoch 239: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0301 - mae: 0.1367 - val_loss: 0.0624 - val_mae: 0.1888 - learning_rate: 1.0000e-05\n",
      "Epoch 240/1000\n",
      "\n",
      "Epoch 240: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0301 - mae: 0.1367 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-05\n",
      "Epoch 241/1000\n",
      "\n",
      "Epoch 241: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0301 - mae: 0.1366 - val_loss: 0.0625 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 242/1000\n",
      "\n",
      "Epoch 242: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0301 - mae: 0.1366 - val_loss: 0.0624 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 243/1000\n",
      "\n",
      "Epoch 243: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0300 - mae: 0.1366 - val_loss: 0.0625 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 244/1000\n",
      "\n",
      "Epoch 244: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0300 - mae: 0.1366 - val_loss: 0.0624 - val_mae: 0.1888 - learning_rate: 1.0000e-05\n",
      "Epoch 245/1000\n",
      "\n",
      "Epoch 245: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0300 - mae: 0.1365 - val_loss: 0.0625 - val_mae: 0.1888 - learning_rate: 1.0000e-05\n",
      "Epoch 246/1000\n",
      "\n",
      "Epoch 246: val_loss did not improve from 0.06236\n",
      "4375/4375 - 19s - 4ms/step - loss: 0.0300 - mae: 0.1365 - val_loss: 0.0626 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 247/1000\n",
      "\n",
      "Epoch 247: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0300 - mae: 0.1365 - val_loss: 0.0628 - val_mae: 0.1892 - learning_rate: 1.0000e-05\n",
      "Epoch 248/1000\n",
      "\n",
      "Epoch 248: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0300 - mae: 0.1365 - val_loss: 0.0625 - val_mae: 0.1889 - learning_rate: 1.0000e-05\n",
      "Epoch 249/1000\n",
      "\n",
      "Epoch 249: ReduceLROnPlateau reducing learning rate to 9.99999883788405e-07.\n",
      "\n",
      "Epoch 249: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0300 - mae: 0.1364 - val_loss: 0.0625 - val_mae: 0.1888 - learning_rate: 1.0000e-05\n",
      "Epoch 250/1000\n",
      "\n",
      "Epoch 250: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0297 - mae: 0.1357 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 251/1000\n",
      "\n",
      "Epoch 251: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 252/1000\n",
      "\n",
      "Epoch 252: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 253/1000\n",
      "\n",
      "Epoch 253: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-06\n",
      "Epoch 254/1000\n",
      "\n",
      "Epoch 254: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 255/1000\n",
      "\n",
      "Epoch 255: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 256/1000\n",
      "\n",
      "Epoch 256: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 257/1000\n",
      "\n",
      "Epoch 257: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-06\n",
      "Epoch 258/1000\n",
      "\n",
      "Epoch 258: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 259/1000\n",
      "\n",
      "Epoch 259: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 260/1000\n",
      "\n",
      "Epoch 260: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 261/1000\n",
      "\n",
      "Epoch 261: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-06\n",
      "Epoch 262/1000\n",
      "\n",
      "Epoch 262: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1356 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 263/1000\n",
      "\n",
      "Epoch 263: val_loss did not improve from 0.06236\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1355 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 264/1000\n",
      "\n",
      "Epoch 264: val_loss improved from 0.06236 to 0.06235, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1355 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-06\n",
      "Epoch 265/1000\n",
      "\n",
      "Epoch 265: val_loss did not improve from 0.06235\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1355 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 266/1000\n",
      "\n",
      "Epoch 266: val_loss did not improve from 0.06235\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0296 - mae: 0.1355 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 267/1000\n",
      "\n",
      "Epoch 267: val_loss did not improve from 0.06235\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1355 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 268/1000\n",
      "\n",
      "Epoch 268: val_loss did not improve from 0.06235\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1355 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 269/1000\n",
      "\n",
      "Epoch 269: ReduceLROnPlateau reducing learning rate to 1e-07.\n",
      "\n",
      "Epoch 269: val_loss did not improve from 0.06235\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1355 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-06\n",
      "Epoch 270/1000\n",
      "\n",
      "Epoch 270: val_loss did not improve from 0.06235\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 271/1000\n",
      "\n",
      "Epoch 271: val_loss improved from 0.06235 to 0.06234, saving model to models/best_model_full.keras\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 272/1000\n",
      "\n",
      "Epoch 272: val_loss did not improve from 0.06234\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 273/1000\n",
      "\n",
      "Epoch 273: val_loss did not improve from 0.06234\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 274/1000\n",
      "\n",
      "Epoch 274: val_loss did not improve from 0.06234\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 275/1000\n",
      "\n",
      "Epoch 275: val_loss did not improve from 0.06234\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 276/1000\n",
      "\n",
      "Epoch 276: val_loss did not improve from 0.06234\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 277/1000\n",
      "\n",
      "Epoch 277: val_loss improved from 0.06234 to 0.06233, saving model to models/best_model_full.keras\n",
      "4375/4375 - 21s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 278/1000\n",
      "\n",
      "Epoch 278: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0296 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 279/1000\n",
      "\n",
      "Epoch 279: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 280/1000\n",
      "\n",
      "Epoch 280: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 281/1000\n",
      "\n",
      "Epoch 281: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 282/1000\n",
      "\n",
      "Epoch 282: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 283/1000\n",
      "\n",
      "Epoch 283: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 284/1000\n",
      "\n",
      "Epoch 284: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 285/1000\n",
      "\n",
      "Epoch 285: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 286/1000\n",
      "\n",
      "Epoch 286: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 287/1000\n",
      "\n",
      "Epoch 287: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 288/1000\n",
      "\n",
      "Epoch 288: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 289/1000\n",
      "\n",
      "Epoch 289: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 290/1000\n",
      "\n",
      "Epoch 290: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 291/1000\n",
      "\n",
      "Epoch 291: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 292/1000\n",
      "\n",
      "Epoch 292: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 293/1000\n",
      "\n",
      "Epoch 293: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 294/1000\n",
      "\n",
      "Epoch 294: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 295/1000\n",
      "\n",
      "Epoch 295: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 296/1000\n",
      "\n",
      "Epoch 296: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 297/1000\n",
      "\n",
      "Epoch 297: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 298/1000\n",
      "\n",
      "Epoch 298: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 299/1000\n",
      "\n",
      "Epoch 299: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 300/1000\n",
      "\n",
      "Epoch 300: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 301/1000\n",
      "\n",
      "Epoch 301: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 302/1000\n",
      "\n",
      "Epoch 302: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 303/1000\n",
      "\n",
      "Epoch 303: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 304/1000\n",
      "\n",
      "Epoch 304: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 305/1000\n",
      "\n",
      "Epoch 305: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 306/1000\n",
      "\n",
      "Epoch 306: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 307/1000\n",
      "\n",
      "Epoch 307: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 308/1000\n",
      "\n",
      "Epoch 308: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 309/1000\n",
      "\n",
      "Epoch 309: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 310/1000\n",
      "\n",
      "Epoch 310: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 311/1000\n",
      "\n",
      "Epoch 311: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 312/1000\n",
      "\n",
      "Epoch 312: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 313/1000\n",
      "\n",
      "Epoch 313: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 314/1000\n",
      "\n",
      "Epoch 314: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 315/1000\n",
      "\n",
      "Epoch 315: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 316/1000\n",
      "\n",
      "Epoch 316: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 317/1000\n",
      "\n",
      "Epoch 317: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 318/1000\n",
      "\n",
      "Epoch 318: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0623 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 319/1000\n",
      "\n",
      "Epoch 319: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 320/1000\n",
      "\n",
      "Epoch 320: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 321/1000\n",
      "\n",
      "Epoch 321: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 322/1000\n",
      "\n",
      "Epoch 322: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 323/1000\n",
      "\n",
      "Epoch 323: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 324/1000\n",
      "\n",
      "Epoch 324: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 325/1000\n",
      "\n",
      "Epoch 325: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 326/1000\n",
      "\n",
      "Epoch 326: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 4ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1887 - learning_rate: 1.0000e-07\n",
      "Epoch 327/1000\n",
      "\n",
      "Epoch 327: val_loss did not improve from 0.06233\n",
      "4375/4375 - 20s - 5ms/step - loss: 0.0295 - mae: 0.1354 - val_loss: 0.0624 - val_mae: 0.1886 - learning_rate: 1.0000e-07\n",
      "Epoch 327: early stopping\n",
      "Restoring model weights from the end of the best epoch: 277.\n",
      "Model configuration saved to models/model_config.json\n",
      "Loaded best weights successfully\n",
      "625/625 - 2s - 4ms/step\n",
      "Mean positioning error: 0.2964 m\n",
      "Median positioning error: 0.2604 m\n",
      "90th percentile error: 0.5331 m\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== MODEL SAVING SUMMARY ===\n",
      "✓ Full model saved to: models/best_model.keras\n",
      "✓ Model configuration saved to: models/model_config.json\n",
      "✓ Training history saved to: models/training_history.npy\n",
      "\n",
      "=== INSTRUCTIONS FOR LOADING THE MODEL ===\n",
      "To load the complete model:\n",
      "  model = tf.keras.models.load_model('models/best_model.keras')\n",
      "\n",
      "To load just the weights:\n",
      "  # First recreate the model with same architecture\n",
      "  model = NetworkCNNTransformer(...)\n",
      "\n",
      "To load the hyperparameters:\n",
      "  with open('models/model_config.json', 'r') as f:\n",
      "      config = json.load(f)\n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "dB = np.load(input_testing_data)\n",
    "\n",
    "ht_testing = dB[\"ht.npy\"]\n",
    "ht_testing = np.stack([np.real(ht_testing), np.imag(ht_testing)], axis=-1)\n",
    "ueLocations_testing = dB[\"ueLocations\"]\n",
    "bsLocations_testing = dB[\"bsLocation\"]\n",
    "rsrp_testing = dB[\"rsrp\"]\n",
    "toaLoS_testing = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_testing.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for testing: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "# Load training data\n",
    "dB = np.load(input_training_data)\n",
    "\n",
    "ht_training = dB[\"ht.npy\"]\n",
    "ht_training = np.stack([np.real(ht_training), np.imag(ht_training)], axis=-1)\n",
    "ueLocations_training = dB[\"ueLocations\"]\n",
    "bsLocations_training = dB[\"bsLocation\"]\n",
    "rsrp_training = dB[\"rsrp\"]\n",
    "toaLoS_training = dB[\"time_of_arrival_LoS\"]\n",
    "\n",
    "shape = ht_training.shape\n",
    "numChannels = shape[0]\n",
    "numOfBSs = shape[1]\n",
    "numOfSamples = shape[2]\n",
    "\n",
    "print(\"Number of Channel available for training: \" + str(numChannels))\n",
    "print(\"                  Number of base-station: \" + str(numOfBSs))\n",
    "print(\"      Number of samples/taps per channel: \" + str(numOfSamples))\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class MultiHeadAttention(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, **kwargs):\n",
    "        super(MultiHeadAttention, self).__init__(**kwargs)\n",
    "        self.num_heads = num_heads\n",
    "        self.d_model = d_model\n",
    "        \n",
    "        assert d_model % self.num_heads == 0\n",
    "        \n",
    "        self.depth = d_model // self.num_heads\n",
    "        \n",
    "        self.wq = tf.keras.layers.Dense(d_model)\n",
    "        self.wk = tf.keras.layers.Dense(d_model)\n",
    "        self.wv = tf.keras.layers.Dense(d_model)\n",
    "        \n",
    "        self.dense = tf.keras.layers.Dense(d_model)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def split_heads(self, x, batch_size):\n",
    "        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n",
    "        return tf.transpose(x, perm=[0, 2, 1, 3])\n",
    "    \n",
    "    def call(self, v, k, q, mask=None):\n",
    "        batch_size = tf.shape(q)[0]\n",
    "        \n",
    "        q = self.wq(q)\n",
    "        k = self.wk(k)\n",
    "        v = self.wv(v)\n",
    "        \n",
    "        q = self.split_heads(q, batch_size)\n",
    "        k = self.split_heads(k, batch_size)\n",
    "        v = self.split_heads(v, batch_size)\n",
    "        \n",
    "        scaled_attention, attention_weights = self.scaled_dot_product_attention(\n",
    "            q, k, v, mask)\n",
    "        \n",
    "        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n",
    "        \n",
    "        concat_attention = tf.reshape(scaled_attention, \n",
    "                                    (batch_size, -1, self.d_model))\n",
    "        \n",
    "        output = self.dense(concat_attention)\n",
    "        \n",
    "        return output, attention_weights\n",
    "    \n",
    "    def scaled_dot_product_attention(self, q, k, v, mask):\n",
    "        matmul_qk = tf.matmul(q, k, transpose_b=True)\n",
    "        \n",
    "        dk = tf.cast(tf.shape(k)[-1], tf.float32)\n",
    "        scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)\n",
    "        \n",
    "        if mask is not None:\n",
    "            scaled_attention_logits += (mask * -1e9)\n",
    "        \n",
    "        attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n",
    "        \n",
    "        output = tf.matmul(attention_weights, v)\n",
    "        \n",
    "        return output, attention_weights\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class TransformerEncoderBlock(tf.keras.layers.Layer):\n",
    "    def __init__(self, d_model, num_heads, dff, rate, **kwargs):\n",
    "        super(TransformerEncoderBlock, self).__init__(**kwargs)\n",
    "        self.d_model = d_model\n",
    "        self.num_heads = num_heads\n",
    "        self.dff = dff\n",
    "        self.rate = rate\n",
    "        \n",
    "        self.mha = MultiHeadAttention(d_model, num_heads)\n",
    "        self.ffn = self.point_wise_feed_forward_network(d_model, dff)\n",
    "        \n",
    "        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n",
    "        \n",
    "        self.dropout1 = tf.keras.layers.Dropout(rate)\n",
    "        self.dropout2 = tf.keras.layers.Dropout(rate)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'd_model': self.d_model,\n",
    "            'num_heads': self.num_heads,\n",
    "            'dff': self.dff,\n",
    "            'rate': self.rate,\n",
    "        })\n",
    "        return config\n",
    "    \n",
    "    def point_wise_feed_forward_network(self, d_model, dff):\n",
    "        return tf.keras.Sequential([\n",
    "            tf.keras.layers.Dense(dff, activation='relu'),\n",
    "            tf.keras.layers.Dense(d_model)\n",
    "        ])\n",
    "    \n",
    "    def call(self, x, training, mask=None):\n",
    "        attn_output, _ = self.mha(x, x, x, mask)\n",
    "        attn_output = self.dropout1(attn_output, training=training)\n",
    "        out1 = self.layernorm1(x + attn_output)\n",
    "        \n",
    "        ffn_output = self.ffn(out1)\n",
    "        ffn_output = self.dropout2(ffn_output, training=training)\n",
    "        out2 = self.layernorm2(out1 + ffn_output)\n",
    "        \n",
    "        return out2\n",
    "\n",
    "@keras.saving.register_keras_serializable()\n",
    "class NetworkCNNTransformer(tf.keras.Model):\n",
    "    def __init__(self, n_embd=None, filter_size=None, block_size=None, \n",
    "                 ffdneurons=None, dropout_rate=0.1, transformer_layers=1, \n",
    "                 head_size=None, **kwargs):\n",
    "        super(NetworkCNNTransformer, self).__init__(**kwargs)\n",
    "        \n",
    "        # Store hyperparameters\n",
    "        self.n_embd = n_embd\n",
    "        self.filter_size = filter_size\n",
    "        self.block_size = block_size\n",
    "        self.ffdneurons = ffdneurons\n",
    "        self.dropout_rate = dropout_rate\n",
    "        self.transformer_layers = transformer_layers\n",
    "        self.head_size = head_size\n",
    "        \n",
    "        # CNN layers\n",
    "        self.batch_norm_input = tf.keras.layers.BatchNormalization()\n",
    "        self.conv1 = tf.keras.layers.Conv2D(\n",
    "            filters=n_embd, \n",
    "            kernel_size=(filter_size, 18), \n",
    "            strides=1,\n",
    "            padding='valid'\n",
    "        )\n",
    "        self.relu1 = tf.keras.layers.ReLU()\n",
    "        self.batch_norm1 = tf.keras.layers.BatchNormalization()\n",
    "        \n",
    "        # Position embedding\n",
    "        self.position_embedding = tf.keras.layers.Embedding(\n",
    "            input_dim=block_size, \n",
    "            output_dim=n_embd\n",
    "        )\n",
    "        \n",
    "        # Custom Transformer encoder blocks\n",
    "        self.transformer_blocks = []\n",
    "        for _ in range(transformer_layers):\n",
    "            self.transformer_blocks.append(\n",
    "                TransformerEncoderBlock(\n",
    "                    d_model=n_embd,\n",
    "                    num_heads=n_embd // head_size,\n",
    "                    dff=ffdneurons,\n",
    "                    rate=dropout_rate\n",
    "                )\n",
    "            )\n",
    "        \n",
    "        # Final layers\n",
    "        self.global_avg_pool = tf.keras.layers.GlobalAveragePooling1D()\n",
    "        self.fc = tf.keras.layers.Dense(2)\n",
    "    \n",
    "    def get_config(self):\n",
    "        config = super().get_config()\n",
    "        config.update({\n",
    "            'n_embd': self.n_embd,\n",
    "            'filter_size': self.filter_size,\n",
    "            'block_size': self.block_size,\n",
    "            'ffdneurons': self.ffdneurons,\n",
    "            'dropout_rate': self.dropout_rate,\n",
    "            'transformer_layers': self.transformer_layers,\n",
    "            'head_size': self.head_size,\n",
    "        })\n",
    "        return config\n",
    "        \n",
    "    def call(self, x, training=None):\n",
    "        # Input normalization\n",
    "        x = self.batch_norm_input(x, training=training)\n",
    "        \n",
    "        # CNN feature extraction\n",
    "        x = self.conv1(x)\n",
    "        x = self.relu1(x)\n",
    "        x = self.batch_norm1(x, training=training)\n",
    "        \n",
    "        # Reshape for transformer input: (batch, sequence_length, features)\n",
    "        batch_size = tf.shape(x)[0]\n",
    "        x = tf.reshape(x, [batch_size, self.block_size, self.n_embd])\n",
    "        \n",
    "        # Add positional embeddings\n",
    "        positions = tf.range(start=0, limit=self.block_size, dtype=tf.int32)\n",
    "        pos_emb = self.position_embedding(positions)\n",
    "        x = x + pos_emb\n",
    "        \n",
    "        # Apply transformer encoder blocks\n",
    "        for transformer_block in self.transformer_blocks:\n",
    "            x = transformer_block(x, training=training)\n",
    "        \n",
    "        # Global average pooling and final prediction\n",
    "        x = self.global_avg_pool(x)\n",
    "        x = self.fc(x)\n",
    "        \n",
    "        return x\n",
    "\n",
    "# Data preprocessing functions\n",
    "def preprocess_data(cir_data, ue_locations):\n",
    "    \"\"\"Preprocess CIR data and UE locations\"\"\"\n",
    "    # Reshape CIR data to match expected input format\n",
    "    cir_reshaped = cir_data.reshape(-1, 2, 256, 18)\n",
    "    cir_reshaped = np.transpose(cir_reshaped, (0, 2, 3, 1))  # Change to (batch, height, width, channels)\n",
    "    \n",
    "    # Extract x, y coordinates\n",
    "    locations = ue_locations[:, 0:2]\n",
    "    \n",
    "    return cir_reshaped.astype(np.float32), locations.astype(np.float32)\n",
    "\n",
    "# Create datasets\n",
    "train_cir, train_locations = preprocess_data(ht_training, ueLocations_training)\n",
    "test_cir, test_locations = preprocess_data(ht_testing, ueLocations_testing)\n",
    "\n",
    "# Create TensorFlow datasets\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_cir, train_locations))\n",
    "train_dataset = train_dataset.batch(batch_size).shuffle(buffer_size=1000)\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_cir, test_locations))\n",
    "test_dataset = test_dataset.batch(batch_size)\n",
    "\n",
    "# Create and compile model with explicit hyperparameters\n",
    "model = NetworkCNNTransformer(\n",
    "    n_embd=n_embd,\n",
    "    filter_size=filter_size,\n",
    "    block_size=block_size,\n",
    "    ffdneurons=ffdneurons,\n",
    "    dropout_rate=dropout_rate,\n",
    "    transformer_layers=transformer_layers,\n",
    "    head_size=head_size\n",
    ")\n",
    "\n",
    "# Build the model by calling it once\n",
    "dummy_input = tf.random.normal((1, 256, 18, 2))\n",
    "_ = model(dummy_input)\n",
    "\n",
    "# Compile model\n",
    "model.compile(\n",
    "    optimizer=tf.keras.optimizers.AdamW(learning_rate=inital_learning_rate),\n",
    "    loss='mse',\n",
    "    metrics=['mae']\n",
    ")\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Create directories for saving models and results\n",
    "os.makedirs('models', exist_ok=True)\n",
    "os.makedirs('results', exist_ok=True)\n",
    "\n",
    "# Training callbacks with corrected paths\n",
    "reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n",
    "    monitor='val_loss',\n",
    "    factor=0.1,\n",
    "    patience=num_patience,\n",
    "    verbose=1,\n",
    "    min_lr=1e-7\n",
    ")\n",
    "\n",
    "# Save both weights and full model\n",
    "\n",
    "model_checkpoint_full = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='models/best_model_full.keras',\n",
    "    monitor='val_loss',\n",
    "    save_best_only=True,\n",
    "    save_weights_only=False,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=early_stopping_patience,\n",
    "    restore_best_weights=True,\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Custom callback for gradient clipping\n",
    "class GradientClippingCallback(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, clip_value=1.0):\n",
    "        self.clip_value = clip_value\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        # Gradient clipping is handled automatically in TensorFlow 2.x optimizers\n",
    "        pass\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_dataset,\n",
    "    validation_data=test_dataset,\n",
    "    epochs=num_epochs,\n",
    "    callbacks=[reduce_lr, model_checkpoint_full, \n",
    "               early_stopping, GradientClippingCallback()],\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "\n",
    "# Save model architecture and hyperparameters\n",
    "model_config = {\n",
    "    'n_embd': n_embd,\n",
    "    'filter_size': filter_size,\n",
    "    'block_size': block_size,\n",
    "    'ffdneurons': ffdneurons,\n",
    "    'dropout_rate': dropout_rate,\n",
    "    'transformer_layers': transformer_layers,\n",
    "    'head_size': head_size,\n",
    "    'batch_size': batch_size,\n",
    "    'inital_learning_rate': inital_learning_rate,\n",
    "    'num_epochs': num_epochs,\n",
    "    'num_patience': num_patience,\n",
    "    'early_stopping_patience': early_stopping_patience\n",
    "}\n",
    "\n",
    "import json\n",
    "with open('models/model_config.json', 'w') as f:\n",
    "    json.dump(model_config, f, indent=2)\n",
    "\n",
    "print(\"Model configuration saved to models/model_config.json\")\n",
    "\n",
    "# Load best weights for evaluation\n",
    "try:\n",
    "    model = tf.keras.models.load_model('/kaggle/working/models/best_model_full.keras')\n",
    "    print(\"Loaded best weights successfully\")\n",
    "except:\n",
    "    print(\"Could not load best weights, using current weights\")\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_dataset,verbose=2)\n",
    "\n",
    "# Flatten predictions if needed\n",
    "if len(predictions.shape) > 2:\n",
    "    predictions = predictions.reshape(-1, 2)\n",
    "\n",
    "# Calculate positioning error\n",
    "error2D = np.linalg.norm(test_locations - predictions, axis=-1)\n",
    "nUEs = error2D.size\n",
    "\n",
    "print(f\"Mean positioning error: {np.mean(error2D):.4f} m\")\n",
    "print(f\"Median positioning error: {np.median(error2D):.4f} m\")\n",
    "print(f\"90th percentile error: {np.percentile(error2D, 90):.4f} m\")\n",
    "\n",
    "# Plot CDF\n",
    "nbins = nUEs\n",
    "xlimit = error2D.max()\n",
    "xlimMin = error2D.min()\n",
    "ylimit = 1\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Calculate CDF\n",
    "count, bins_count = np.histogram(error2D, bins=nbins, range=[xlimMin, xlimit])\n",
    "pdf = count / nUEs\n",
    "cdf = np.cumsum(pdf)\n",
    "ax.semilogx(bins_count[1:], cdf, label=\"[CVITLOC]-2D Positioning Error\")\n",
    "\n",
    "# Plot properties\n",
    "ax.set_xticks([0.01, 0.1, 1, 10], minor=False)\n",
    "ax.set_yticks(np.linspace(0, ylimit, 11))\n",
    "ax.set_yticks(np.linspace(0, ylimit, 21), minor=True)\n",
    "ax.set_xlim([0.01, 2])\n",
    "ax.set_ylim([-0.005, 1.005])\n",
    "ax.set_xlabel(\"Positioning Error (m)\")\n",
    "ax.set_ylabel(\"CDF of Positioning Error\")\n",
    "ax.set_title(\"CDF of Positioning Error\")\n",
    "\n",
    "ax.axhline(y=0.5, lw=2, alpha=1, linestyle=':', color=\"crimson\", label=\"50%ile Positioning Error line\")\n",
    "ax.axhline(y=2/3, lw=2, alpha=1, linestyle=':', color=\"magenta\", label=\"66.6%ile Positioning Error line\")\n",
    "ax.axhline(y=0.9, lw=2, alpha=1, linestyle=':', color=\"royalblue\", label=\"90%ile Positioning Error line\")\n",
    "ax.axvline(x=0.2, lw=2, alpha=1, linestyle='-', color=\"midnightblue\", label=\"20 cm Positioning Accuracy line\")\n",
    "\n",
    "ax.grid(which='minor', alpha=0.25, linestyle='--')\n",
    "ax.grid(which='major', alpha=1)\n",
    "ax.legend()\n",
    "plt.savefig('results/tensorflow_results.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(12, 4))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['mae'], label='Training MAE')\n",
    "plt.plot(history.history['val_mae'], label='Validation MAE')\n",
    "plt.title('Model MAE')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MAE')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('results/training_history.png', dpi=300, bbox_inches='tight')\n",
    "plt.show()\n",
    "\n",
    "# Save training history\n",
    "np.save('models/training_history.npy', history.history)\n",
    "\n",
    "print(\"\\n=== MODEL SAVING SUMMARY ===\")\n",
    "print(\"✓ Full model saved to: models/best_model.keras\")\n",
    "print(\"✓ Model configuration saved to: models/model_config.json\")\n",
    "print(\"✓ Training history saved to: models/training_history.npy\")\n",
    "\n",
    "# Instructions for loading the model\n",
    "print(\"\\n=== INSTRUCTIONS FOR LOADING THE MODEL ===\")\n",
    "print(\"To load the complete model:\")\n",
    "print(\"  model = tf.keras.models.load_model('models/best_model.keras')\")\n",
    "print(\"\\nTo load just the weights:\")\n",
    "print(\"  # First recreate the model with same architecture\")\n",
    "print(\"  model = NetworkCNNTransformer(...)\")  \n",
    "print(\"\\nTo load the hyperparameters:\")\n",
    "print(\"  with open('models/model_config.json', 'r') as f:\")\n",
    "print(\"      config = json.load(f)\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7848032,
     "sourceId": 12441221,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6549.501111,
   "end_time": "2025-07-31T19:17:10.323847",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-31T17:28:00.822736",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
